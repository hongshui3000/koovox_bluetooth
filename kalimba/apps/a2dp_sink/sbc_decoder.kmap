
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00042                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920004E                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        D1542D4A                 r3 = M[r2 + 11594];
0x00001E        01E00080                 rFlags = Null + 128;
0x00001F        E420002F                 r0 = Null + 1;
0x000020        FD0000FF 09006727        Null = Null + M[$interrupt.block_count];
0x000022        00200001                 if NE r0 = Null + Null;
0x000023        1920FE12                 M[0xfffe12] = r0 + Null;
0x000024        E005000F                 call r3;
0x000025        01E00000                 rFlags = Null + 0;
0x000026        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000027        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000028        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000029        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002A        85334000                 r1 = r1 OR 0x4000;
0x00002B        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002C        09302E88                 r1 = Null + M[$interrupt.total_time];
0x00002D        2933004E                 r1 = r1 - M[$interrupt.start_time];
0x00002E        0933FE71                 r1 = r1 + M[0xfffe71];
0x00002F        19302E88                 M[$interrupt.total_time] = r1 + Null;
0x000030        F104000C                 popm <r0, r1>;
0x000031        1930FE93                 M[0xfffe93] = r1 + Null;
0x000032        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000033        F104001C                 popm <r0, r1, r2>;
0x000034        DC0E000F                 rti;

 <$flash.init_pm>
0x000035        09202CE7                 r0 = Null + M[$flash.code.address];
0x000036        1920FE83                 M[0xfffe83] = r0 + Null;
0x000037        FD000004 85200000        r0 = Null OR 0x40000;
0x000039        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003A        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003B        09202CEF                 r0 = Null + M[$flash.data24.address];
0x00003C        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x00003D        01200002                 r0 = Null + 2;
0x00003E        1920FE62                 M[0xfffe62] = r0 + Null;
0x00003F        09202CEB                 r0 = Null + M[$flash.data16.address];
0x000040        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000041        1900FE61                 M[0xfffe61] = Null + Null;
0x000042        DC0D000F                 rts;

 <$pre_main>
0x000043        E1F0FFF2                 call $flash.init_pm;
0x000044        DDF03168                 jump $main;

 <$cbops.rate_adjustment_and_shift.main>
0x000045        F3D00000                 push rLink;
0x000046        D14A0000                 r2 = M[r8 + 0];
0x000047        D058004F                 r3 = M[r6 + r2];
0x000048        5040005F                 I4 = Null + r3;
0x000049        D069004F                 r4 = M[r7 + r2];
0x00004A        50E0006F                 L4 = Null + r4;
0x00004B        D14A0001                 r2 = M[r8 + 1];
0x00004C        D058004F                 r3 = M[r6 + r2];
0x00004D        5050005F                 I5 = Null + r3;
0x00004E        D069004F                 r4 = M[r7 + r2];
0x00004F        50F0006F                 L5 = Null + r4;
0x000050        D14A0002                 r2 = M[r8 + 2];
0x000051        19402D6A                 M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info] = r2 + Null;
0x000052        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x000053        D058004F                 r3 = M[r6 + r2];
0x000054        19502D6B                 M[0x2d6b] = r3 + Null;
0x000055        D069004F                 r4 = M[r7 + r2];
0x000056        19602D6C                 M[0x2d6c] = r4 + Null;
0x000057        D14A0003                 r2 = M[r8 + 3];
0x000058        D058004F                 r3 = M[r6 + r2];
0x000059        19502D6E                 M[0x2d6e] = r3 + Null;
0x00005A        D069004F                 r4 = M[r7 + r2];
0x00005B        19602D6F                 M[0x2d6f] = r4 + Null;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x00005C        D19A0004                 r7 = M[r8 + 4];
0x00005D        FD0000FF 199066A8        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = r7 + Null;
0x00005F        D12A0006                 r0 = M[r8 + 6];
0x000060        5000002F                 I0 = Null + r0;
0x000061        0120000C                 r0 = Null + 12;
0x000062        D13A000B                 r1 = M[r8 + 11];
0x000063        00320000                 if EQ r1 = r0 + Null;
0x000064        50C0003F                 L0 = Null + r1;
0x000065        50D0003F                 L1 = Null + r1;
0x000066        D12A0005                 r0 = M[r8 + 5];
0x000067        99330015                 r1 = r1 * 21 (int);
0x000068        8D33007F                 r1 = r1 LSHIFT -1;
0x000069        5032003F                 I3 = r0 + r1;
0x00006A        D12A0008                 r0 = M[r8 + 8];
0x00006B        D062000F                 r4 = M[r0 + Null];
0x00006C        D17A000C                 r5 = M[r8 + 12];
0x00006D        E430002F                 r1 = Null + 1;
0x00006E        2027006F                 r0 = r5 - r4;
0x00006F        20200024                 if NEG r0 = Null - r0;
0x000070        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000072        21023127                 Null = r0 - 12583;
0x000073        00430004                 if NEG r2 = r1 + Null;
0x000074        21340026                 r1 = r2 - 38;
0x000075        20440035                 if POS r2 = r2 - r1;
0x000076        2037006F                 r1 = r5 - r4;
0x000077        2023004F                 r0 = r1 - r2;
0x000078        20330025                 if POS r1 = r1 - r0;
0x000079        0023004F                 r0 = r1 + r2;
0x00007A        20330024                 if NEG r1 = r1 - r0;
0x00007B        23730000                 r5 = r5 - r1;
0x00007C        D57A000C                 M[r8 + 12] = r5;
0x00007D        01300183                 r1 = Null + 387;
0x00007E        01400195                 r2 = Null + 405;
0x00007F        01500000                 r3 = Null + 0;
0x000080        D12A0009                 r0 = M[r8 + 9];
0x000081        E402003F                 Null = r0 - 1;
0x000082        00530000                 if EQ r3 = r1 + Null;
0x000083        21020002                 Null = r0 - 2;
0x000084        00540000                 if EQ r3 = r2 + Null;
0x000085        4420004F                 r0 = Null + I4;
0x000086        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x000088        21020500                 Null = r0 - 1280;
0x000089        00500000                 if EQ r3 = Null + Null;
0x00008A        19502E96                 M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x00008B        19C02E95                 M[$M.cbops.rate_adjustment_and_shift.main.n_samples] = r10 + Null;
0x00008C        FD0000FF 19C06734        M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x00008E        FD0000FF 19006735        M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = Null + Null;
0x000090        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x000091        09202E96                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x000092        E11000D5                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x000093        E1F0002D                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000094        509000CF                 M1 = Null + r10;
0x000095        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000096        FD0000FF 095A6735        r3 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x000098        4430000F                 r1 = Null + I0;
0x000099        D5350006                 M[r3 + 6] = r1;
0x00009A        09202E96                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x00009B        E11000D7                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x00009C        FD0000FF 09306735        r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x00009E        DD100011                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x00009F        09302D6A                 r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info];
0x0000A0        DD40000F                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A1        D13A0007                 r1 = M[r8 + 7];
0x0000A2        5000003F                 I0 = Null + r1;
0x0000A3        09302D6B                 r1 = Null + M[0x2d6b];
0x0000A4        5040003F                 I4 = Null + r1;
0x0000A5        09302D6C                 r1 = Null + M[0x2d6c];
0x0000A6        50E0003F                 L4 = Null + r1;
0x0000A7        09302D6E                 r1 = Null + M[0x2d6e];
0x0000A8        5050003F                 I5 = Null + r1;
0x0000A9        09302D6F                 r1 = Null + M[0x2d6f];
0x0000AA        50F0003F                 L5 = Null + r1;
0x0000AB        E430002F                 r1 = Null + 1;
0x0000AC        FD0000FF 19306735        M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = r1 + Null;
0x0000AE        DDF0FFE3                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0000AF        D56A000D                 M[r8 + 13] = r4;
0x0000B0        6420009F                 r0 = Null - M1;
0x0000B1        D52A000E                 M[r8 + 14] = r0;
0x0000B2        51F00000                 L5 = Null + 0;
0x0000B3        51E00000                 L4 = Null + 0;
0x0000B4        51C00000                 L0 = Null + 0;
0x0000B5        51D00000                 L1 = Null + 0;
0x0000B6        4420007F                 r0 = Null + I7;
0x0000B7        19202E8F                 M[$cbops.amount_written] = r0 + Null;
0x0000B8        FD0000FF 0940672E        r2 = Null + M[$cbops.amount_to_use];
0x0000BA        D13AFFFE                 r1 = M[r8 + -2];
0x0000BB        E403002F                 Null = r1 + 1;
0x0000BC        00420001                 if NE r2 = r0 + Null;
0x0000BD        FD0000FF 1940672E        M[$cbops.amount_to_use] = r2 + Null;
0x0000BF        DDF0112B                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x0000C0        D17A000C                 r5 = M[r8 + 12];
0x0000C1        FD0000FF 512066A9        I2 = Null + -39255;
0x0000C3        D16A000D                 r4 = M[r8 + 13];
0x0000C4        01800015                 r6 = Null + 21;
0x0000C5        70A0008F                 M2 = Null - r6;
0x0000C6        5080008F                 M0 = Null + r6;
0x0000C7        09C02E95                 r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x0000C8        CC16008F                 rMAC = r4 * r6 (SS);
0x0000C9        09C02E95                 r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x0000CA        51700000                 I7 = Null + 0;
0x0000CB        D12A000E                 r0 = M[r8 + 14];
0x0000CC        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x0000CD        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0000CE        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x0000CF        690C0024                 Null = L0 - 36;
0x0000D0        DD00003E                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x0000D1        E5F0003A                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x0000D2        8D510018                 r3 = rMAC LSHIFT 24;
0x0000D3        8D55007F                 r3 = r3 LSHIFT -1;
0x0000D4        8D410000                 r2 = rMAC LSHIFT 0;
0x0000D5        5863004F                 I6 = I3 + r2;
0x0000D6        6524FFEA                 r0 = -22 - r2;
0x0000D7        7092004F                 M1 = r0 - r2;
0x0000D8        5810000F                 I1 = I0 + Null;
0x0000D9        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DA        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DB        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DC        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DD        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DE        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000DF        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E3        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E5        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x0000E6        79990002                 M1 = M1 - 2;
0x0000E7        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x0000E8        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x0000E9        71980001                 M1 = r6 - 1;
0x0000EA        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x0000EB        5863004F                 I6 = I3 + r2;
0x0000EC        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000ED        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EE        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EF        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F0        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F1        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000F2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F8        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x0000F9        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x0000FA        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x0000FC        01400000                 r2 = Null + 0;
0x0000FD        20312B4F                 r1 = rMAC - r2, r0 = M[I2,M3];
0x0000FE        93320000                 r1 = r1 ASHIFT r0;
0x0000FF        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x000100        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x000101        FD000080 01660000        r4 = r4 + -8388608;
0x000103        0007000F                 Null = r5 + Null;
0x000104        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x000105        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x000106        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x000107        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x000108        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x000109        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x00010A        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x00010B        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x00010C        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x00010D        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x00010E        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x00010F        8D510018                 r3 = rMAC LSHIFT 24;
0x000110        8D55007F                 r3 = r3 LSHIFT -1;
0x000111        8D410000                 r2 = rMAC LSHIFT 0;
0x000112        5863004F                 I6 = I3 + r2;
0x000113        6524FFEA                 r0 = -22 - r2;
0x000114        7092004F                 M1 = r0 - r2;
0x000115        5810000F                 I1 = I0 + Null;
0x000116        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000117        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000118        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000119        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000120        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000121        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000122        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000123        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000124        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000125        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000126        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000127        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000128        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000129        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000130        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000131        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000132        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000133        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000134        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000135        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000136        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000137        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000138        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000139        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013A        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x00013B        79990002                 M1 = M1 - 2;
0x00013C        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x00013D        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x00013E        71980001                 M1 = r6 - 1;
0x00013F        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x000140        5863004F                 I6 = I3 + r2;
0x000141        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x000142        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000143        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000144        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000145        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000146        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000147        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000148        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000149        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000150        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000151        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000152        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000153        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000154        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000155        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000156        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000157        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000158        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000159        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000160        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000161        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000162        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000163        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000164        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000165        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x000166        DDF0FF93                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x000167        4420005F                 r0 = Null + I5;
0x000168        FD0000FF 192066AA        M[0xff66aa] = r0 + Null;
0x00016A        442000FF                 r0 = Null + L5;
0x00016B        FD0000FF 192066AB        M[0xff66ab] = r0 + Null;
0x00016D        51F00000                 L5 = Null + 0;
0x00016E        51500500                 I5 = Null + 1280;
0x00016F        FD0000FF 190066A8        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = Null + Null;
0x000171        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x000172        FD0000FF 09406736        r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x000174        51200500                 I2 = Null + 1280;
0x000175        44C0007F                 r10 = Null + I7;
0x000176        FD0000FF 093066AA        r1 = Null + M[0xff66aa];
0x000178        5050003F                 I5 = Null + r1;
0x000179        FD0000FF 093066AB        r1 = Null + M[0xff66ab];
0x00017B        50F0003F                 L5 = Null + r1;
0x00017C        D19A0004                 r7 = M[r8 + 4];
0x00017D        FD00007F 0170FFFF        r5 = Null + 8388607;
0x00017F        6589FFE8                 r6 = -24 - r7;
0x000180        9087008F                 r6 = r5 ASHIFT r6;
0x000181        51A00011                 M2 = Null + 17;
0x000182        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x000183        01503555                 r3 = Null + 13653;
0x000184        FD0000FF 5160345F        I6 = Null + -52129;
0x000186        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x000187        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000188        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x000189        9B450000                 r2 = r2 * r3 (int);
0x00018A        474A0000                 r2 = r2 + M2;
0x00018B        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018C        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x00018D        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x00018E        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x00018F        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x000190        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x000191        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000192        FD0000FF 19406736        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x000194        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x000195        19602E97                 M[$M.cbops.rate_adjustment_and_shift.main.temp_r4] = r4 + Null;
0x000196        FD0000FF 092A6735        r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x000198        FD0000FF 19803466        M[0xff3466] = r6 + Null;
0x00019A        D1220010                 r0 = M[r0 + 16];
0x00019B        511200A8                 I1 = r0 + 168;
0x00019C        013200B0                 r1 = r0 + 176;
0x00019D        FD0000FF 09006735        Null = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x00019F        50100031                 if NE I1 = Null + r1;
0x0001A0        51D00005                 L1 = Null + 5;
0x0001A1        FD0000FF 51603460        I6 = Null + -52128;
0x0001A3        5180FFFA                 M0 = Null + -6;
0x0001A4        01603555                 r4 = Null + 13653;
0x0001A5        FD0000FF 1980345F        M[0xff345f] = r6 + Null;
0x0001A7        95886000                 r6 = r6 * 0.75 (frac);
0x0001A8        E450003F                 r3 = Null - 1;
0x0001A9        2020009F                 r0 = Null - r7;
0x0001AA        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0001AB        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0001AC        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0001AD        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0001AE        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001AF        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B0        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B1        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0001B2        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0001B3        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0001B4        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0001B5        474A0000                 r2 = r2 + M2;
0x0001B6        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0001B7        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0001B8        8031005F                 r1 = rMAC AND r3;
0x0001B9        90E3009F                 rMAC = r1 ASHIFT r7;
0x0001BA        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x0001BB        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x0001BC        FD0000FF 19406736        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0001BE        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x0001BF        FD0000FF 092A6735        r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0001C1        4430001F                 r1 = Null + I1;
0x0001C2        81330007                 r1 = r1 AND 0x7;
0x0001C3        D5320010                 M[r0 + 16] = r1;
0x0001C4        58DC000F                 L1 = L0 + Null;
0x0001C5        09602E97                 r4 = Null + M[$M.cbops.rate_adjustment_and_shift.main.temp_r4];
0x0001C6        DC0D000F                 rts;

 <$bass_management.initialize>
0x0001C7        23A00000                 r8 = r8 - Null;
0x0001C8        DD000008                 if EQ jump $M.bass_management.clear_buffer;
0x0001C9        D12A0001                 r0 = M[r8 + 1];
0x0001CA        5000002F                 I0 = Null + r0;
0x0001CB        D1CA0000                 r10 = M[r8 + 0];
0x0001CC        50C000CF                 L0 = Null + r10;
0x0001CD        01200000                 r0 = Null + 0;
0x0001CE        E5F00002                 do $M.bass_management.clear_buffer;
0x0001CF        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_buffer>
0x0001D0        D1A90007                 r8 = M[r7 + 7];
0x0001D1        FD000011 01402844        r2 = Null + 1124420;
0x0001D3        D129000B                 r0 = M[r7 + 11];
0x0001D4        D3200000                 r0 = M[r0 + Null];
0x0001D5        FD000019 0130BC66        r1 = Null + 1686630;
0x0001D7        21027D00                 Null = r0 - 32000;
0x0001D8        00430000                 if EQ r2 = r1 + Null;
0x0001D9        FD000012 0130ACB2        r1 = Null + 1223858;
0x0001DB        FD000000 2102AC44        Null = r0 - 44100;
0x0001DD        00430000                 if EQ r2 = r1 + Null;
0x0001DE        D16A0006                 r4 = M[r8 + 6];
0x0001DF        9166000D                 r4 = r4 ASHIFT 13;
0x0001E0        CC16004F                 rMAC = r4 * r2 (SS);
0x0001E1        D51A0007                 M[r8 + 7] = rMAC;
0x0001E2        51C00000                 L0 = Null + 0;
0x0001E3        DC0D000F                 rts;

 <$bass_management.zero_data>
0x0001E4        D1A90007                 r8 = M[r7 + 7];
0x0001E5        D12A0009                 r0 = M[r8 + 9];
0x0001E6        D13A0008                 r1 = M[r8 + 8];
0x0001E7        03330000                 r1 = r1 + r1;
0x0001E8        03230000                 r0 = r0 + r1;
0x0001E9        00C2002F                 r10 = r0 + r0;
0x0001EA        D1290008                 r0 = M[r7 + 8];
0x0001EB        5000002F                 I0 = Null + r0;
0x0001EC        51C00000                 L0 = Null + 0;
0x0001ED        01200000                 r0 = Null + 0;
0x0001EE        E5F00002                 do $M.bass_management.clear_data_memory;
0x0001EF        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_data_memory>
0x0001F0        DC0D000F                 rts;

 <$bass_management>
0x0001F1        F3D00000                 push rLink;
0x0001F2        D1290009                 r0 = M[r7 + 9];
0x0001F3        D3200000                 r0 = M[r0 + Null];
0x0001F4        D139000A                 r1 = M[r7 + 10];
0x0001F5        8002003F                 Null = r0 AND r1;
0x0001F6        DD1000D9                 if NE jump $M.bass_management.bypass;
0x0001F7        D1A90007                 r8 = M[r7 + 7];
0x0001F8        D1290000                 r0 = M[r7 + 0];
0x0001F9        E1F000EE                 call $M.bass_management.get_ptrs;
0x0001FA        00C5000F                 r10 = r3 + Null;
0x0001FB        D1290006                 r0 = M[r7 + 6];
0x0001FC        5020002F                 I2 = Null + r0;
0x0001FD        D1290004                 r0 = M[r7 + 4];
0x0001FE        DD000008                 if EQ jump $M.bass_management.clearBassBuffer;
0x0001FF        E1F000E8                 call $M.bass_management.get_ptrs;
0x000200        5000002F                 I0 = Null + r0;
0x000201        50C0003F                 L0 = Null + r1;
0x000202        E5F00003                 do $M.bass_management.inputLFEcopyLoop;
0x000203        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000204        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.inputLFEcopyLoop>
0x000205        DDF00004                 jump $M.bass_management.bassChannelReadyForMixingLR;

 <$M.bass_management.clearBassBuffer>
0x000206        01200000                 r0 = Null + 0;
0x000207        E5F00002                 do $M.bass_management.bassChannelReadyForMixingLR;
0x000208        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.bassChannelReadyForMixingLR>
0x000209        D1290000                 r0 = M[r7 + 0];
0x00020A        E1F000DD                 call $M.bass_management.get_ptrs;
0x00020B        5000002F                 I0 = Null + r0;
0x00020C        50C0003F                 L0 = Null + r1;
0x00020D        00C5000F                 r10 = r3 + Null;
0x00020E        D1290001                 r0 = M[r7 + 1];
0x00020F        E1F000D8                 call $M.bass_management.get_ptrs;
0x000210        5040002F                 I4 = Null + r0;
0x000211        50E0003F                 L4 = Null + r1;
0x000212        D1290006                 r0 = M[r7 + 6];
0x000213        5020002F                 I2 = Null + r0;
0x000214        D16A0001                 r4 = M[r8 + 1];
0x000215        D17A0003                 r5 = M[r8 + 3];
0x000216        E5F00008                 do $M.bass_management.mixToBassBufferLoop;
0x000217        03003141                 Null = Null + Null, r1 = M[I0,1], r2 = M[I4,1];
0x000218        23112800                 rMAC = rMAC - rMAC, r0 = M[I2,0];
0x000219        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00021A        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x00021B        AC14006F                 rMAC = rMAC + r2 * r4 (SS);
0x00021C        91210002                 r0 = rMAC ASHIFT 2;
0x00021D        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.mixToBassBufferLoop>
0x00021E        E1F00094                 call $M.bass_management.copyLRinToLRout;
0x00021F        D12A0000                 r0 = M[r8 + 0];
0x000220        81020001                 Null = r0 AND 0x1;
0x000221        DD000017                 if EQ jump $M.bass_management.dontFilterLeftRight;
0x000222        D1290002                 r0 = M[r7 + 2];
0x000223        E1F000C4                 call $M.bass_management.get_ptrs;
0x000224        D1690008                 r4 = M[r7 + 8];
0x000225        5040006F                 I4 = Null + r4;
0x000226        51E00000                 L4 = Null + 0;
0x000227        D16A0007                 r4 = M[r8 + 7];
0x000228        018A000A                 r6 = r8 + 10;
0x000229        5020008F                 I2 = Null + r6;
0x00022A        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.leftHPFloop>
0x00022B        03007900                 Null = Null + Null, r5 = M[I2,1];
0x00022C        E1F00051                 call $M.bass_management.HighPassFilter;
0x00022D        E488003F                 r6 = r6 - 1;
0x00022E        DD10FFFD                 if NE jump $M.bass_management.leftHPFloop;
0x00022F        D1290003                 r0 = M[r7 + 3];
0x000230        E1F000B7                 call $M.bass_management.get_ptrs;
0x000231        018A000A                 r6 = r8 + 10;
0x000232        5020008F                 I2 = Null + r6;
0x000233        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.rightHPFloop>
0x000234        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000235        E1F00048                 call $M.bass_management.HighPassFilter;
0x000236        E488003F                 r6 = r6 - 1;
0x000237        DD10FFFD                 if NE jump $M.bass_management.rightHPFloop;

 <$M.bass_management.dontFilterLeftRight>
0x000238        D12A0000                 r0 = M[r8 + 0];
0x000239        81020002                 Null = r0 AND 0x2;
0x00023A        DD000015                 if EQ jump $M.bass_management.dontFilterBassChannel;
0x00023B        D1290000                 r0 = M[r7 + 0];
0x00023C        E1F000AB                 call $M.bass_management.get_ptrs;
0x00023D        D1290006                 r0 = M[r7 + 6];
0x00023E        01300000                 r1 = Null + 0;
0x00023F        D1690008                 r4 = M[r7 + 8];
0x000240        D17A0008                 r5 = M[r8 + 8];
0x000241        99770004                 r5 = r5 * 4 (int);
0x000242        03670000                 r4 = r4 + r5;
0x000243        5040006F                 I4 = Null + r4;
0x000244        51E00000                 L4 = Null + 0;
0x000245        D16A0007                 r4 = M[r8 + 7];
0x000246        018A000A                 r6 = r8 + 10;
0x000247        D17A0008                 r5 = M[r8 + 8];
0x000248        0087008F                 r6 = r5 + r6;
0x000249        5020008F                 I2 = Null + r6;
0x00024A        D18A0009                 r6 = M[r8 + 9];

 <$M.bass_management.subLPFloop>
0x00024B        03007900                 Null = Null + Null, r5 = M[I2,1];
0x00024C        E1F00050                 call $M.bass_management.LowPassFilter;
0x00024D        E488003F                 r6 = r6 - 1;
0x00024E        DD10FFFD                 if NE jump $M.bass_management.subLPFloop;

 <$M.bass_management.dontFilterBassChannel>
0x00024F        D1290002                 r0 = M[r7 + 2];
0x000250        E1F00097                 call $M.bass_management.get_ptrs;
0x000251        5000002F                 I0 = Null + r0;
0x000252        50C0003F                 L0 = Null + r1;
0x000253        00C5000F                 r10 = r3 + Null;
0x000254        D1290003                 r0 = M[r7 + 3];
0x000255        E1F00092                 call $M.bass_management.get_ptrs;
0x000256        5040002F                 I4 = Null + r0;
0x000257        50E0003F                 L4 = Null + r1;
0x000258        D1290006                 r0 = M[r7 + 6];
0x000259        5020002F                 I2 = Null + r0;
0x00025A        D16A0002                 r4 = M[r8 + 2];
0x00025B        D17A0004                 r5 = M[r8 + 4];
0x00025C        E5F0000B                 do $M.bass_management.mixBassBufferToLeftRightLoop;
0x00025D        03004900                 Null = Null + Null, r2 = M[I2,1];
0x00025E        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x00025F        AC12006F                 rMAC = rMAC + r0 * r4 (SS);
0x000260        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x000261        91210002                 r0 = rMAC ASHIFT 2;
0x000262        23110030                 rMAC = rMAC - rMAC, r1 = M[I4,0];
0x000263        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000264        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x000265        91310002                 r1 = rMAC ASHIFT 2;
0x000266        0300A1B1                 Null = Null + Null, M[I0,1] = r0, M[I4,1] = r1;

 <$M.bass_management.mixBassBufferToLeftRightLoop>
0x000267        D1290006                 r0 = M[r7 + 6];
0x000268        5020002F                 I2 = Null + r0;
0x000269        D1290005                 r0 = M[r7 + 5];
0x00026A        E1F0007D                 call $M.bass_management.get_ptrs;
0x00026B        5010002F                 I1 = Null + r0;
0x00026C        50D0003F                 L1 = Null + r1;
0x00026D        47010000                 Null = Null + I1;
0x00026E        DD00000A                 if EQ jump $M.bass_management.dontCopyBassToSub;
0x00026F        D1290000                 r0 = M[r7 + 0];
0x000270        E1F00077                 call $M.bass_management.get_ptrs;
0x000271        00C5000F                 r10 = r3 + Null;
0x000272        D17A0005                 r5 = M[r8 + 5];
0x000273        E5F00005                 do $M.bass_management.dontCopyBassToSub;
0x000274        23112900                 rMAC = rMAC - rMAC, r0 = M[I2,1];
0x000275        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000276        91210002                 r0 = rMAC ASHIFT 2;
0x000277        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.dontCopyBassToSub>
0x000278        51C00000                 L0 = Null + 0;
0x000279        51D00000                 L1 = Null + 0;
0x00027A        51E00000                 L4 = Null + 0;
0x00027B        51F00000                 L5 = Null + 0;
0x00027C        DDF00F6E                 jump $pop_rLink_and_rts;

 <$M.bass_management.HighPassFilter>
0x00027D        F100102C                 pushm <r0, r1, r3, r10>;
0x00027E        5000002F                 I0 = Null + r0;
0x00027F        50C0003F                 L0 = Null + r1;
0x000280        00C5000F                 r10 = r3 + Null;
0x000281        CC16006F                 rMAC = r4 * r4 (SS);
0x000282        0031000F                 r1 = rMAC + Null;
0x000283        FD000020 01500000        r3 = Null + 2097152;
0x000285        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x000287        BC13005F                 rMAC = rMAC - r1 * r3 (SS);
0x000288        BC16007F                 rMAC = rMAC - r4 * r5 (SS);
0x000289        0051000F                 r3 = rMAC + Null;
0x00028A        03000031                 Null = Null + Null, r1 = M[I4,1];
0x00028B        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x00028C        E5F0000C                 do $M.bass_management.highPassFilterLoop;
0x00028D        0014000F                 rMAC = r2 + Null;
0x00028E        AF362000                 rMAC = rMAC + r1 * r4 (SS), r0 = M[I0,0];
0x00028F        0041000F                 r2 = rMAC + Null;
0x000290        CC12005F                 rMAC = r0 * r3 (SS);
0x000291        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x000292        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x000293        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x000294        0021000F                 r0 = rMAC + Null;
0x000295        0013000F                 rMAC = r1 + Null;
0x000296        AF26A100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r0;
0x000297        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.highPassFilterLoop>
0x000298        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x000299        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x00029A        F104102C                 popm <r0, r1, r3, r10>;
0x00029B        DC0D000F                 rts;

 <$M.bass_management.LowPassFilter>
0x00029C        F100102C                 pushm <r0, r1, r3, r10>;
0x00029D        5000002F                 I0 = Null + r0;
0x00029E        50C0003F                 L0 = Null + r1;
0x00029F        00C5000F                 r10 = r3 + Null;
0x0002A0        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0002A1        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x0002A2        E5F0000C                 do $M.bass_management.lowPassFilterLoop;
0x0002A3        0014000F                 rMAC = r2 + Null;
0x0002A4        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x0002A5        0041000F                 r2 = rMAC + Null;
0x0002A6        03001000                 Null = Null + Null, rMAC = M[I0,0];
0x0002A7        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x0002A8        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0002A9        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0002AA        0021000F                 r0 = rMAC + Null;
0x0002AB        0013000F                 rMAC = r1 + Null;
0x0002AC        AF26C100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r2;
0x0002AD        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.lowPassFilterLoop>
0x0002AE        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0002AF        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x0002B0        F104102C                 popm <r0, r1, r3, r10>;
0x0002B1        DC0D000F                 rts;

 <$M.bass_management.copyLRinToLRout>
0x0002B2        F3D00000                 push rLink;
0x0002B3        D1290000                 r0 = M[r7 + 0];
0x0002B4        E1F00033                 call $M.bass_management.get_ptrs;
0x0002B5        5000002F                 I0 = Null + r0;
0x0002B6        50C0003F                 L0 = Null + r1;
0x0002B7        00C5000F                 r10 = r3 + Null;
0x0002B8        D1290001                 r0 = M[r7 + 1];
0x0002B9        E1F0002E                 call $M.bass_management.get_ptrs;
0x0002BA        5040002F                 I4 = Null + r0;
0x0002BB        50E0003F                 L4 = Null + r1;
0x0002BC        D1290002                 r0 = M[r7 + 2];
0x0002BD        005C000F                 r3 = r10 + Null;
0x0002BE        E1F00F2A                 call $frmbuffer.set_frame_size;
0x0002BF        E1F00028                 call $M.bass_management.get_ptrs;
0x0002C0        5010002F                 I1 = Null + r0;
0x0002C1        50D0003F                 L1 = Null + r1;
0x0002C2        D1290003                 r0 = M[r7 + 3];
0x0002C3        005C000F                 r3 = r10 + Null;
0x0002C4        E1F00F24                 call $frmbuffer.set_frame_size;
0x0002C5        E1F00022                 call $M.bass_management.get_ptrs;
0x0002C6        5050002F                 I5 = Null + r0;
0x0002C7        50F0003F                 L5 = Null + r1;
0x0002C8        D1290005                 r0 = M[r7 + 5];
0x0002C9        005C000F                 r3 = r10 + Null;
0x0002CA        E1F00F1E                 call $frmbuffer.set_frame_size;
0x0002CB        E5F00003                 do $M.bass_management.copyLRinToLRoutLoop;
0x0002CC        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002CD        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.bass_management.copyLRinToLRoutLoop>
0x0002CE        DDF00F1C                 jump $pop_rLink_and_rts;

 <$M.bass_management.bypass>
0x0002CF        E1F0FFE3                 call $M.bass_management.copyLRinToLRout;
0x0002D0        D1290005                 r0 = M[r7 + 5];
0x0002D1        DD000011                 if EQ jump $M.bass_management.bypassClearSubOutputLoop;
0x0002D2        E1F00015                 call $M.bass_management.get_ptrs;
0x0002D3        00C5000F                 r10 = r3 + Null;
0x0002D4        5010002F                 I1 = Null + r0;
0x0002D5        50D0003F                 L1 = Null + r1;
0x0002D6        D1290004                 r0 = M[r7 + 4];
0x0002D7        DD000008                 if EQ jump $M.bass_management.bypassClearSubOutput;
0x0002D8        E1F0000F                 call $M.bass_management.get_ptrs;
0x0002D9        5000002F                 I0 = Null + r0;
0x0002DA        50C0003F                 L0 = Null + r1;
0x0002DB        E5F00003                 do $M.bass_management.bypassLFEcopyLoop;
0x0002DC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0002DD        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassLFEcopyLoop>
0x0002DE        DDF00004                 jump $M.bass_management.bypassClearSubOutputLoop;

 <$M.bass_management.bypassClearSubOutput>
0x0002DF        01200000                 r0 = Null + 0;
0x0002E0        E5F00002                 do $M.bass_management.bypassClearSubOutputLoop;
0x0002E1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassClearSubOutputLoop>
0x0002E2        51C00000                 L0 = Null + 0;
0x0002E3        51D00000                 L1 = Null + 0;
0x0002E4        51E00000                 L4 = Null + 0;
0x0002E5        51F00000                 L5 = Null + 0;
0x0002E6        DDF00F04                 jump $pop_rLink_and_rts;

 <$M.bass_management.get_ptrs>
0x0002E7        F3D00000                 push rLink;
0x0002E8        E1F00ED7                 call $frmbuffer.get_buffer;
0x0002E9        DDF00F01                 jump $pop_rLink_and_rts;

 <$cbops.auto_upsample_and_mix.main>
0x0002EA        F3D00000                 push rLink;
0x0002EB        FD000000 0150BB80        r3 = Null + 48000;
0x0002ED        01601F40                 r4 = Null + 8000;
0x0002EE        D13A0006                 r1 = M[r8 + 6];
0x0002EF        D0330001                 if NE r1 = M[r1 + Null];
0x0002F0        00360000                 if EQ r1 = r4 + Null;
0x0002F1        D14A0004                 r2 = M[r8 + 4];
0x0002F2        D0440001                 if NE r2 = M[r2 + Null];
0x0002F3        00450000                 if EQ r2 = r3 + Null;
0x0002F4        D12A000B                 r0 = M[r8 + 11];
0x0002F5        2002003F                 Null = r0 - r1;
0x0002F6        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x0002F7        D12A000A                 r0 = M[r8 + 10];
0x0002F8        2002004F                 Null = r0 - r2;
0x0002F9        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x0002FA        D53A000B                 M[r8 + 11] = r1;
0x0002FB        D54A000A                 M[r8 + 10] = r2;
0x0002FC        D50A000C                 M[r8 + 12] = Null;
0x0002FD        FD00007F 0120FFFF        r0 = Null + 8388607;
0x0002FF        D52A0009                 M[r8 + 9] = r0;
0x000300        E460002F                 r4 = Null + 1;
0x000301        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x000303        2004002F                 Null = r2 - r0;
0x000304        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000305        01600002                 r4 = Null + 2;
0x000306        E450002F                 r3 = Null + 1;
0x000307        2003004F                 Null = r1 - r2;
0x000308        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000309        00500004                 if NEG r3 = Null + Null;
0x00030A        2033004C                 if GT r1 = r1 - r2;
0x00030B        D55A000C                 M[r8 + 12] = r3;
0x00030C        0013000F                 rMAC = r1 + Null;
0x00030D        91340001                 r1 = r2 ASHIFT 1;
0x00030E        D9030000                 Div = rMAC / r1;
0x00030F        D9200001                 r0 = DivResult;
0x000310        D9300002                 r1 = DivRemainder;
0x000311        E450002F                 r3 = Null + 1;
0x000312        2003004F                 Null = r1 - r2;
0x000313        00220055                 if POS r0 = r0 + r3;
0x000314        D52A0009                 M[r8 + 9] = r0;
0x000315        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x000316        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x000317        D12A0002                 r0 = M[r8 + 2];
0x000318        E1F00E77                 call $cbuffer.calc_amount_data;
0x000319        D13A0009                 r1 = M[r8 + 9];
0x00031A        D15A000C                 r3 = M[r8 + 12];
0x00031B        9B5C0000                 r3 = r3 * r10 (int);
0x00031C        973C0000                 r1 = r1 * r10 (frac);
0x00031D        E433002F                 r1 = r1 + 1;
0x00031E        03350000                 r1 = r1 + r3;
0x00031F        D14A0010                 r2 = M[r8 + 16];
0x000320        E444002F                 r2 = r2 + 1;
0x000321        D16A000F                 r4 = M[r8 + 15];
0x000322        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x000323        0002000F                 Null = r0 + Null;
0x000324        00400001                 if NE r2 = Null + Null;
0x000325        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x000326        2002003F                 Null = r0 - r1;
0x000327        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x000328        0026000F                 r0 = r4 + Null;
0x000329        E450002F                 r3 = Null + 1;
0x00032A        21040003                 Null = r2 - 3;
0x00032B        88660055                 if POS r4 = r4 XOR r3;
0x00032C        FD00007F 0130FFFF        r1 = Null + 8388607;
0x00032E        D15A000E                 r3 = M[r8 + 14];
0x00032F        2006002F                 Null = r4 - r0;
0x000330        00530001                 if NE r3 = r1 + Null;
0x000331        D54A0010                 M[r8 + 16] = r2;
0x000332        D55A000E                 M[r8 + 14] = r3;
0x000333        D56A000F                 M[r8 + 15] = r4;
0x000334        8406005F                 Null = r4 OR r3;
0x000335        DD000EB5                 if EQ jump $pop_rLink_and_rts;
0x000336        D12A0002                 r0 = M[r8 + 2];
0x000337        E1F00E7E                 call $cbuffer.get_read_address_and_size;
0x000338        5000002F                 I0 = Null + r0;
0x000339        50C0003F                 L0 = Null + r1;
0x00033A        51D0000C                 L1 = Null + 12;
0x00033B        D12A0005                 r0 = M[r8 + 5];
0x00033C        5010002F                 I1 = Null + r0;
0x00033D        D12A0000                 r0 = M[r8 + 0];
0x00033E        D038002F                 r1 = M[r6 + r0];
0x00033F        5040003F                 I4 = Null + r1;
0x000340        D039002F                 r1 = M[r7 + r0];
0x000341        50E0003F                 L4 = Null + r1;
0x000342        51502E98                 I5 = Null + 11928;
0x000343        51F00001                 L5 = Null + 1;
0x000344        D12A0001                 r0 = M[r8 + 1];
0x000345        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_cahnnel;
0x000346        D038002F                 r1 = M[r6 + r0];
0x000347        5050003F                 I5 = Null + r1;
0x000348        D039002F                 r1 = M[r7 + r0];
0x000349        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_cahnnel>
0x00034A        D16A0008                 r4 = M[r8 + 8];
0x00034B        FD00007F 0150FFFF        r3 = Null + 8388607;
0x00034D        D14A000E                 r2 = M[r8 + 14];
0x00034E        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x00034F        D10A000F                 Null = M[r8 + 15];
0x000350        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x000351        FD00007F 0160FFFF        r4 = Null + 8388607;
0x000353        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x000354        23560000                 r3 = r3 - r4;
0x000355        FD00007F 0180FFFF        r6 = Null + 8388607;
0x000357        FD000002 0170AAAB        r5 = Null + 174763;
0x000359        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x00035A        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x00035B        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x00035C        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x00035D        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x00035E        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x00035F        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x000360        D54A000E                 M[r8 + 14] = r2;
0x000361        DDF00E89                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x000362        01400000                 r2 = Null + 0;
0x000363        D54A000E                 M[r8 + 14] = r2;
0x000364        DDF00E86                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x000365        D12A0011                 r0 = M[r8 + 17];
0x000366        21020000                 Null = r0 - 0;
0x000367        DD000013                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x000368        21020002                 Null = r0 - 2;
0x000369        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x00036A        009C000F                 r7 = r10 + Null;
0x00036B        DDF00061                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x00036C        D16A0007                 r4 = M[r8 + 7];
0x00036D        D17A0008                 r5 = M[r8 + 8];
0x00036E        009C000F                 r7 = r10 + Null;
0x00036F        23442000                 r2 = r2 - r2, r0 = M[I0,0];
0x000370        FD00007F 0180FFFF        r6 = Null + 8388607;
0x000372        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x000373        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x000374        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x000375        AF28C100                 rMAC = rMAC + r0 * r6 (SS), M[I0,1] = r2;
0x000376        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x000377        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x000378        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x000379        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x00037A        D17A0003                 r5 = M[r8 + 3];
0x00037B        5137007E                 I3 = r5 + 126;
0x00037C        D17A0009                 r5 = M[r8 + 9];
0x00037D        D16A000D                 r4 = M[r8 + 13];
0x00037E        51B00001                 M3 = Null + 1;
0x00037F        01800015                 r6 = Null + 21;
0x000380        70A0008F                 M2 = Null - r6;
0x000381        5080008F                 M0 = Null + r6;
0x000382        01900000                 r7 = Null + 0;
0x000383        D10A000C                 Null = M[r8 + 12];
0x000384        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x000385        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x000386        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x000387        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x000388        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x000389        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x00038A        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x00038B        03670000                 r4 = r4 + r5;
0x00038C        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x00038D        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x00038E        FD000080 21660000        r4 = r4 - -8388608;
0x000390        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x000391        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x000392        CC16008F                 rMAC = r4 * r6 (SS);
0x000393        8D510018                 r3 = rMAC LSHIFT 24;
0x000394        8D55007F                 r3 = r3 LSHIFT -1;
0x000395        8D410000                 r2 = rMAC LSHIFT 0;
0x000396        5863004F                 I6 = I3 + r2;
0x000397        6524FFEA                 r0 = -22 - r2;
0x000398        7092004F                 M1 = r0 - r2;
0x000399        5871000F                 I7 = I1 + Null;
0x00039A        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x00039B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00039C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00039D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00039E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00039F        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003A0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A3        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A5        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003A6        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0003A7        79990002                 M1 = M1 - 2;
0x0003A8        474B0000                 r2 = r2 + M3;
0x0003A9        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0003AA        71980001                 M1 = r6 - 1;
0x0003AB        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0003AC        5863004F                 I6 = I3 + r2;
0x0003AD        0041000F                 r2 = rMAC + Null;
0x0003AE        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003AF        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003B0        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003B1        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003B2        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003B3        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003B4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003B5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003B6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003B7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003B8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003B9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003BA        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0003BB        5817000F                 I1 = I7 + Null;
0x0003BC        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x0003BD        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0003BF        D14A0007                 r2 = M[r8 + 7];
0x0003C0        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x0003C1        D12A0008                 r0 = M[r8 + 8];
0x0003C2        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x0003C3        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003C5        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x0003C6        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003C8        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x0003C9        4420001F                 r0 = Null + I1;
0x0003CA        D52A0005                 M[r8 + 5] = r0;
0x0003CB        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x0003CC        D12A0002                 r0 = M[r8 + 2];
0x0003CD        E1F00DC2                 call $cbuffer.calc_amount_data;
0x0003CE        2039002F                 r1 = r7 - r0;
0x0003CF        20990035                 if POS r7 = r7 - r1;
0x0003D0        D12A0002                 r0 = M[r8 + 2];
0x0003D1        E1F00DE4                 call $cbuffer.get_read_address_and_size;
0x0003D2        5000002F                 I0 = Null + r0;
0x0003D3        50C0003F                 L0 = Null + r1;
0x0003D4        5080009F                 M0 = Null + r7;
0x0003D5        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0003D6        4430000F                 r1 = Null + I0;
0x0003D7        D12A0002                 r0 = M[r8 + 2];
0x0003D8        E1F00DEC                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x0003D9        51E00000                 L4 = Null + 0;
0x0003DA        51D00000                 L1 = Null + 0;
0x0003DB        51C00000                 L0 = Null + 0;
0x0003DC        51F00000                 L5 = Null + 0;
0x0003DD        DDF00E0D                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x0003DE        F3D00000                 push rLink;
0x0003DF        092007FF                 r0 = Null + M[$app_config.io];
0x0003E0        21020005                 Null = r0 - 5;
0x0003E1        DD000003                 if EQ jump $M.sra_tagtimes.usb_fix;
0x0003E2        21020008                 Null = r0 - 8;
0x0003E3        DD100025                 if NE jump $M.sra_tagtimes.calc_a2dp_fix_rate;

 <$M.sra_tagtimes.usb_fix>
0x0003E4        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x0003E6        E1F00DA9                 call $cbuffer.calc_amount_data;
0x0003E7        0062000F                 r4 = r0 + Null;
0x0003E8        0074000F                 r5 = r2 + Null;
0x0003E9        FD0000FF 09305A77        r1 = Null + M[0xff5a77];
0x0003EB        8D660008                 r4 = r4 LSHIFT 8;
0x0003EC        FD000001 CD1647AE        rMAC = r4 * 0.0099999904632568359 (SS);
0x0003EE        FD00007E AD13B852        rMAC = rMAC + r1 * 0.99000000953674316 (SS);
0x0003F0        FD0000FF 19105A77        M[0xff5a77] = rMAC + Null;
0x0003F2        8D770009                 r5 = r5 LSHIFT 9;
0x0003F3        D9070000                 Div = rMAC / r5;
0x0003F4        D9600001                 r4 = DivResult;
0x0003F5        FD000059 6566999A        r4 = 5872026 - r4;
0x0003F7        FD000019 2126999A        r0 = r4 - 1677722;
0x0003F9        20660025                 if POS r4 = r4 - r0;
0x0003FA        FD000019 0126999A        r0 = r4 + 1677722;
0x0003FC        20660024                 if NEG r4 = r4 - r0;
0x0003FD        FD000000 9526A3D7        r0 = r4 * 0.004999995231628418 (frac);
0x0003FF        FD0000FF 09305A73        r1 = Null + M[0xff5a73];
0x000401        2062003F                 r4 = r0 - r1;
0x000402        95660400                 r4 = r4 * 0.03125 (frac);
0x000403        03360000                 r1 = r1 + r4;
0x000404        FD0000FF 19305A73        M[0xff5a73] = r1 + Null;
0x000406        019020C5                 r7 = Null + 8389;
0x000407        DDF00069                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.calc_a2dp_fix_rate>
0x000408        FD0000FF 09205A5D        r0 = Null + M[0xff5a5d];
0x00040A        E1F00D85                 call $cbuffer.calc_amount_data;
0x00040B        0072000F                 r5 = r0 + Null;

 <$M.sra_tagtimes.skip_port_data>
0x00040C        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x00040E        E1F00D81                 call $cbuffer.calc_amount_data;
0x00040F        03720000                 r5 = r5 + r0;
0x000410        FD0000FF 09775A72        r5 = r5 + M[0xff5a72];
0x000412        FD0000FF 19705A72        M[0xff5a72] = r5 + Null;
0x000414        FD0000FF 09605A71        r4 = Null + M[0xff5a71];
0x000416        E466002F                 r4 = r4 + 1;
0x000417        FD0000FF 19605A71        M[0xff5a71] = r4 + Null;
0x000419        FD0000FF 09305A5C        r1 = Null + M[$sra_struct];
0x00041B        95332000                 r1 = r1 * 0.25 (frac);
0x00041C        2006003F                 Null = r4 - r1;
0x00041D        DD40006A                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x00041E        019051EC                 r7 = Null + 20972;
0x00041F        FD0000FF 09005A76        Null = Null + M[0xff5a76];
0x000421        DD000002                 if EQ jump $M.sra_tagtimes.no_long_term;
0x000422        019020C5                 r7 = Null + 8389;

 <$M.sra_tagtimes.no_long_term>
0x000423        FD0000FF 19005A71        M[0xff5a71] = Null + Null;
0x000425        FD0000FF 19005A72        M[0xff5a72] = Null + Null;
0x000427        FD0000FF 09805A73        r6 = Null + M[0xff5a73];
0x000429        9128007E                 r0 = r6 ASHIFT -2;
0x00042A        FD0000FF 39825A73        M[0xff5a73] = r6 - r0;
0x00042C        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x00042E        D3200000                 r0 = M[r0 + Null];
0x00042F        9B260000                 r0 = r0 * r4 (int);
0x000430        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000431        D9020000                 Div = rMAC / r0;
0x000432        D9300001                 r1 = DivResult;
0x000433        FD0000FF 09605A77        r4 = Null + M[0xff5a77];
0x000435        FD0000FF 19305A77        M[0xff5a77] = r1 + Null;
0x000437        2063006F                 r4 = r1 - r4;
0x000438        FD00007D 210370A4        Null = r1 - 8220836;
0x00043A        DD40000B                 if NEG jump $M.sra_tagtimes.not_full;
0x00043B        21281062                 r0 = r6 - 4194;
0x00043C        FD0000FF 09325A60        r1 = r0 + M[0xff5a60];
0x00043E        20220034                 if NEG r0 = r0 - r1;
0x00043F        FD000001 0132EB85        r1 = r0 + 125829;
0x000441        20220034                 if NEG r0 = r0 - r1;
0x000442        FD0000FF 19205A73        M[0xff5a73] = r0 + Null;
0x000444        DDF0002C                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.not_full>
0x000445        FD00006C 2123CCCD        r0 = r1 - 7130317;
0x000447        DD400007                 if NEG jump $M.sra_tagtimes.check_for_empty;
0x000448        FD0000FE 9522147B        r0 = r0 * -0.014999985694885254 (frac);
0x00044A        FD000001 010647AE        Null = r4 + 83886;
0x00044C        00280004                 if NEG r0 = r6 + Null;
0x00044D        DDF0001B                 jump $M.sra_tagtimes.fix_rate;

 <$M.sra_tagtimes.check_for_empty>
0x00044E        FD00004C 2123CCCD        r0 = r1 - 5033165;
0x000450        DD500020                 if POS jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.handle_empty>
0x000451        FD000019 0142999A        r2 = r0 + 1677722;
0x000453        20220044                 if NEG r0 = r0 - r2;
0x000454        FD0000FB 9522851F        r0 = r0 * -0.034999966621398926 (frac);
0x000456        FD000006 21066666        Null = r4 - 419430;
0x000458        00280005                 if POS r0 = r6 + Null;
0x000459        FD000002 01468F5C        r2 = r4 + 167772;
0x00045B        DD50000A                 if POS jump $M.sra_tagtimes.no_extra;
0x00045C        FD000006 01546666        r3 = r2 + 419430;
0x00045E        20440055                 if POS r2 = r2 - r3;
0x00045F        FD0000FF 9544BE77        r2 = r2 * -0.001999974250793457 (frac);
0x000461        03480000                 r2 = r2 + r6;
0x000462        2004002F                 Null = r2 - r0;
0x000463        00240005                 if POS r0 = r2 + Null;
0x000464        03240000                 r0 = r0 + r2;

 <$M.sra_tagtimes.no_extra>
0x000465        FD000019 2103999A        Null = r1 - 1677722;
0x000467        00280004                 if NEG r0 = r6 + Null;

 <$M.sra_tagtimes.fix_rate>
0x000468        0038009F                 r1 = r6 + r7;
0x000469        2002003F                 Null = r0 - r1;
0x00046A        00230005                 if POS r0 = r1 + Null;
0x00046B        2038009F                 r1 = r6 - r7;
0x00046C        2002003F                 Null = r0 - r1;
0x00046D        00230004                 if NEG r0 = r1 + Null;
0x00046E        FD0000FF 19205A73        M[0xff5a73] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x000470        FD0000FF 09205A74        r0 = Null + M[0xff5a74];
0x000472        FD0000FF 09225A73        r0 = r0 + M[0xff5a73];
0x000474        FD0000FF 29325A60        r1 = r0 - M[0xff5a60];
0x000476        20220035                 if POS r0 = r0 - r1;
0x000477        FD0000FF 09325A60        r1 = r0 + M[0xff5a60];
0x000479        20220034                 if NEG r0 = r0 - r1;
0x00047A        FD000001 0132EB85        r1 = r0 + 125829;
0x00047C        20220034                 if NEG r0 = r0 - r1;
0x00047D        FD0000FF 09805A6D        r6 = Null + M[0xff5a6d];
0x00047F        0038009F                 r1 = r6 + r7;
0x000480        2002003F                 Null = r0 - r1;
0x000481        00230005                 if POS r0 = r1 + Null;
0x000482        2038009F                 r1 = r6 - r7;
0x000483        2002003F                 Null = r0 - r1;
0x000484        00230004                 if NEG r0 = r1 + Null;
0x000485        FD0000FF 19205A6D        M[0xff5a6d] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x000487        FD0000FF 09205A5D        r0 = Null + M[0xff5a5d];
0x000489        E1F00D06                 call $cbuffer.calc_amount_data;
0x00048A        0052000F                 r3 = r0 + Null;
0x00048B        FD0000FF 09205A63        r0 = Null + M[0xff5a63];
0x00048D        E422002F                 r0 = r0 + 1;
0x00048E        0005000F                 Null = r3 + Null;
0x00048F        00200001                 if NE r0 = Null + Null;
0x000490        FD0000FF 19205A63        M[0xff5a63] = r0 + Null;
0x000492        21020190                 Null = r0 - 400;
0x000493        DD400004                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x000494        FD0000FF 19005A73        M[0xff5a73] = Null + Null;
0x000496        DDF00031                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x000497        FD0000FF 09205A64        r0 = Null + M[0xff5a64];
0x000499        0130064A                 r1 = Null + 1610;
0x00049A        E422002F                 r0 = r0 + 1;
0x00049B        2002003F                 Null = r0 - r1;
0x00049C        00230005                 if POS r0 = r1 + Null;
0x00049D        FD0000FF 19205A64        M[0xff5a64] = r0 + Null;
0x00049F        FD0000FF 09205A65        r0 = Null + M[0xff5a65];
0x0004A1        FD0000FF D12266E9        r0 = M[r0 + -39191];
0x0004A3        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x0004A4        FD0000FF 09205A64        r0 = Null + M[0xff5a64];
0x0004A6        21020640                 Null = r0 - 1600;
0x0004A7        DD500002                 if POS jump $M.sra_tagtimes.start;
0x0004A8        DDF0001E                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x0004A9        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x0004AB        E1F00D0F                 call $cbuffer.get_write_address_and_size;
0x0004AC        FD0000FF 19205A66        M[0xff5a66] = r0 + Null;
0x0004AE        E420002F                 r0 = Null + 1;
0x0004AF        FD0000FF 19205A65        M[0xff5a65] = r0 + Null;
0x0004B1        FD0000FF 19005A68        M[0xff5a68] = Null + Null;

 <$M.sra_tagtimes.counting>
0x0004B3        FD0000FF 09205A68        r0 = Null + M[0xff5a68];
0x0004B5        E422002F                 r0 = r0 + 1;
0x0004B6        FD0000FF 19205A68        M[0xff5a68] = r0 + Null;
0x0004B8        E422003F                 r0 = r0 - 1;
0x0004B9        FD0000FF 29025A5C        Null = r0 - M[$sra_struct];
0x0004BB        DD40000B                 if NEG jump $M.sra_tagtimes.end;
0x0004BC        FD0000FF 09205A69        r0 = Null + M[0xff5a69];
0x0004BE        21020002                 Null = r0 - 2;
0x0004BF        DD100008                 if NE jump $reset_sra;
0x0004C0        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x0004C2        E1F00CF8                 call $cbuffer.get_write_address_and_size;
0x0004C3        FD0000FF 19205A67        M[0xff5a67] = r0 + Null;
0x0004C5        DDF0FFDF                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x0004C6        DDF00D24                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x0004C7        FD0000FF 19005A64        M[0xff5a64] = Null + Null;
0x0004C9        FD0000FF 19005A69        M[0xff5a69] = Null + Null;
0x0004CB        FD0000FF 19005A67        M[0xff5a67] = Null + Null;
0x0004CD        FD0000FF 19005A66        M[0xff5a66] = Null + Null;
0x0004CF        FD0000FF 19005A65        M[0xff5a65] = Null + Null;
0x0004D1        DDF00D19                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x0004D2        F3D00000                 push rLink;
0x0004D3        092007FF                 r0 = Null + M[$app_config.io];
0x0004D4        21020005                 Null = r0 - 5;
0x0004D5        DD000005                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0004D6        21020008                 Null = r0 - 8;
0x0004D7        DD000003                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0004D8        09200482                 r0 = Null + M[0x482];
0x0004D9        DD00FFEE                 if EQ jump $reset_sra;

 <$M.sra_calcrate.skip_a2dp_sra_reset>
0x0004DA        FD0000FF 09205A69        r0 = Null + M[0xff5a69];
0x0004DC        D1222E26                 r0 = M[r0 + 11814];
0x0004DD        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x0004DE        FD0000FF 09205A66        r0 = Null + M[0xff5a66];
0x0004E0        DD0000A8                 if EQ jump $M.sra_calcrate.end;
0x0004E1        E420002F                 r0 = Null + 1;
0x0004E2        FD0000FF 19205A69        M[0xff5a69] = r0 + Null;

 <$M.sra_calcrate.start>
0x0004E4        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x0004E6        E1F00CCF                 call $cbuffer.get_read_address_and_size;
0x0004E7        FD0000FF 09305A6A        r1 = Null + M[0xff5a6a];
0x0004E9        FD0000FF 09405A66        r2 = Null + M[0xff5a66];
0x0004EB        E1F000A8                 call $M.sra_calcrate.is_it_within_range;
0x0004EC        0005000F                 Null = r3 + Null;
0x0004ED        DD00009B                 if EQ jump $M.sra_calcrate.end;
0x0004EE        FD0000FF 19005A66        M[0xff5a66] = Null + Null;
0x0004F0        FD0000FF 19005A6C        M[0xff5a6c] = Null + Null;
0x0004F2        01200002                 r0 = Null + 2;
0x0004F3        FD0000FF 19205A69        M[0xff5a69] = r0 + Null;
0x0004F5        DDF00093                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x0004F6        FD0000FF 09205A5F        r0 = Null + M[0xff5a5f];
0x0004F8        E1F00CC2                 call $cbuffer.get_write_address_and_size;
0x0004F9        FD0000FF 29425A6B        r2 = r0 - M[0xff5a6b];
0x0004FB        00440034                 if NEG r2 = r2 + r1;
0x0004FC        FD0000FF 09345A6C        r1 = r2 + M[0xff5a6c];
0x0004FE        FD0000FF 19305A6C        M[0xff5a6c] = r1 + Null;
0x000500        FD0000FF 09405A67        r2 = Null + M[0xff5a67];
0x000502        DD000086                 if EQ jump $M.sra_calcrate.end;
0x000503        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x000505        E1F00CB0                 call $cbuffer.get_read_address_and_size;
0x000506        FD0000FF 09305A6A        r1 = Null + M[0xff5a6a];
0x000508        FD0000FF 09405A67        r2 = Null + M[0xff5a67];
0x00050A        E1F00089                 call $M.sra_calcrate.is_it_within_range;
0x00050B        0005000F                 Null = r3 + Null;
0x00050C        DD00007C                 if EQ jump $M.sra_calcrate.end;
0x00050D        FD0000FF 19005A67        M[0xff5a67] = Null + Null;
0x00050F        01200000                 r0 = Null + 0;
0x000510        FD0000FF 19205A69        M[0xff5a69] = r0 + Null;
0x000512        FD0000FF 09405A61        r2 = Null + M[0xff5a61];
0x000514        E450002F                 r3 = Null + 1;
0x000515        FD0000FF 29345A6C        r1 = r2 - M[0xff5a6c];
0x000517        20500054                 if NEG r3 = Null - r3;
0x000518        9B350000                 r1 = r1 * r3 (int);
0x000519        FD0000FF 09905A60        r7 = Null + M[0xff5a60];
0x00051B        99990006                 r7 = r7 * 6 (int);
0x00051C        97490000                 r2 = r2 * r7 (frac);
0x00051D        2043004F                 r2 = r1 - r2;
0x00051E        DD50FFC0                 if POS jump $M.sra_calcrate.idle;
0x00051F        9B350000                 r1 = r1 * r3 (int);
0x000520        FD0000FF 09205A6F        r0 = Null + M[0xff5a6f];
0x000522        FD0000FF D5325A7C        M[r0 + -42372] = r1;
0x000524        E422002F                 r0 = r0 + 1;
0x000525        8122001F                 r0 = r0 AND 0x1f;
0x000526        FD0000FF 19205A6F        M[0xff5a6f] = r0 + Null;
0x000528        DD100004                 if NE jump $M.sra_calcrate.init_phase_passed;
0x000529        E440002F                 r2 = Null + 1;
0x00052A        FD0000FF 19405A70        M[0xff5a70] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x00052C        01300020                 r1 = Null + 32;
0x00052D        FD0000FF 09005A70        Null = Null + M[0xff5a70];
0x00052F        00230001                 if NE r0 = r1 + Null;
0x000530        FD0000FF 09005A76        Null = Null + M[0xff5a76];
0x000532        DD000003                 if EQ jump $M.sra_calcrate.calc_final_rate;
0x000533        81020001                 Null = r0 AND 0x1;
0x000534        DD10FFAA                 if NE jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.calc_final_rate>
0x000535        E4C2003F                 r10 = r0 - 1;
0x000536        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000538        FD0000FF 51005A7C        I0 = Null + -42372;
0x00053A        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x00053B        E5F00002                 do $M.sra_calcrate.acc_loop;
0x00053C        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x00053D        03340000                 r1 = r1 + r2;
0x00053E        20500054                 if NEG r3 = Null - r3;
0x00053F        97350000                 r1 = r1 * r3 (frac);
0x000540        01100000                 rMAC = Null + 0;
0x000541        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x000542        D9020000                 Div = rMAC / r0;
0x000543        D9300001                 r1 = DivResult;
0x000544        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x000545        FD0000FF 09405A61        r2 = Null + M[0xff5a61];
0x000547        D9040000                 Div = rMAC / r2;
0x000548        D9300001                 r1 = DivResult;
0x000549        FD0000FF 29435A60        r2 = r1 - M[0xff5a60];
0x00054B        20330045                 if POS r1 = r1 - r2;
0x00054C        97350000                 r1 = r1 * r3 (frac);
0x00054D        FD0000FF 19305A74        M[0xff5a74] = r1 + Null;
0x00054F        8D82007F                 r6 = r0 LSHIFT -1;
0x000550        81920001                 r7 = r0 AND 0x1;
0x000551        21080006                 Null = r6 - 6;
0x000552        DD40FF8C                 if NEG jump $M.sra_calcrate.idle;
0x000553        FD0000FF 09605A6F        r4 = Null + M[0xff5a6f];
0x000555        FD0000FF 29025A6F        Null = r0 - M[0xff5a6f];
0x000557        00600000                 if EQ r4 = Null + Null;
0x000558        03690000                 r4 = r4 + r7;
0x000559        00C8000F                 r10 = r6 + Null;
0x00055A        01300000                 r1 = Null + 0;
0x00055B        E5F00006                 do $M.sra_calcrate.read_first_half_ents;
0x00055C        FD0000FF D1565A7C        r3 = M[r4 + -42372];
0x00055E        03350000                 r1 = r1 + r3;
0x00055F        E466002F                 r4 = r4 + 1;
0x000560        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_first_half_ents>
0x000561        00C8000F                 r10 = r6 + Null;
0x000562        01400000                 r2 = Null + 0;
0x000563        E5F00006                 do $M.sra_calcrate.read_second_half_ents;
0x000564        FD0000FF D1565A7C        r3 = M[r4 + -42372];
0x000566        03450000                 r2 = r2 + r3;
0x000567        E466002F                 r4 = r4 + 1;
0x000568        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_second_half_ents>
0x000569        2053004F                 r3 = r1 - r2;
0x00056A        20500054                 if NEG r3 = Null - r3;
0x00056B        91E5007F                 rMAC = r3 ASHIFT -1 (MI);
0x00056C        FD0000FF 09205A61        r0 = Null + M[0xff5a61];
0x00056E        D9020000                 Div = rMAC / r0;
0x00056F        D9300001                 r1 = DivResult;
0x000570        99481A37                 r2 = r6 * 6711 (int);
0x000571        2003004F                 Null = r1 - r2;
0x000572        DD50FF6C                 if POS jump $M.sra_calcrate.idle;
0x000573        E420002F                 r0 = Null + 1;
0x000574        FD0000FF 19205A76        M[0xff5a76] = r0 + Null;
0x000576        FD0000FF 09205A74        r0 = Null + M[0xff5a74];
0x000578        FD0000FF 29325A75        r1 = r0 - M[0xff5a75];
0x00057A        20300034                 if NEG r1 = Null - r1;
0x00057B        2103068E                 Null = r1 - 1678;
0x00057C        DD40FF62                 if NEG jump $M.sra_calcrate.idle;
0x00057D        FD0000FF 19205A75        M[0xff5a75] = r0 + Null;
0x00057F        9122007A                 r0 = r0 ASHIFT -6;
0x000580        91220001                 r0 = r0 ASHIFT 1;
0x000581        85520001                 r3 = r0 OR 0x1;
0x000582        01600000                 r4 = Null + 0;
0x000583        01700000                 r5 = Null + 0;
0x000584        01800000                 r6 = Null + 0;
0x000585        01407070                 r2 = Null + 28784;
0x000586        E1F00A5D                 call $message.send_short;
0x000587        DDF0FF57                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x000588        FD0000FF 09205A5E        r0 = Null + M[0xff5a5e];
0x00058A        E1F00C2B                 call $cbuffer.get_read_address_and_size;
0x00058B        FD0000FF 19205A6A        M[0xff5a6a] = r0 + Null;
0x00058D        FD0000FF 09205A5F        r0 = Null + M[0xff5a5f];
0x00058F        E1F00C2B                 call $cbuffer.get_write_address_and_size;
0x000590        FD0000FF 19205A6B        M[0xff5a6b] = r0 + Null;

 <$M.sra_calcrate.exit>
0x000592        DDF00C58                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x000593        E450002F                 r3 = Null + 1;
0x000594        2002003F                 Null = r0 - r1;
0x000595        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x000596        2004002F                 Null = r2 - r0;
0x000597        00500005                 if POS r3 = Null + Null;
0x000598        2004003F                 Null = r2 - r1;
0x000599        00500004                 if NEG r3 = Null + Null;
0x00059A        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x00059B        2004003F                 Null = r2 - r1;
0x00059C        DC0D0005                 if POS rts;
0x00059D        2004002F                 Null = r2 - r0;
0x00059E        00500005                 if POS r3 = Null + Null;
0x00059F        DC0D000F                 rts;

 <$volume_and_limit.apply_volume>
0x0005A0        F3D00000                 push rLink;
0x0005A1        00A9000F                 r8 = r7 + Null;
0x0005A2        D12A0003                 r0 = M[r8 + 3];
0x0005A3        D3200000                 r0 = M[r0 + Null];
0x0005A4        01100200                 rMAC = Null + 512;
0x0005A5        D9020000                 Div = rMAC / r0;
0x0005A6        D1CA0002                 r10 = M[r8 + 2];
0x0005A7        DDD00C43                 if LE jump $pop_rLink_and_rts;
0x0005A8        018A000A                 r6 = r8 + 10;
0x0005A9        FD00007F 0140FFFF        r2 = Null + 8388607;
0x0005AB        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x0005AC        D1280000                 r0 = M[r6 + 0];
0x0005AD        D1520002                 r3 = M[r0 + 2];
0x0005AE        2004005F                 Null = r2 - r3;
0x0005AF        00450005                 if POS r2 = r3 + Null;
0x0005B0        D1280001                 r0 = M[r6 + 1];
0x0005B1        D1520002                 r3 = M[r0 + 2];
0x0005B2        2004005F                 Null = r2 - r3;
0x0005B3        00450005                 if POS r2 = r3 + Null;
0x0005B4        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x0005B5        00C4000F                 r10 = r2 + Null;
0x0005B6        DDD00C34                 if LE jump $pop_rLink_and_rts;
0x0005B7        0920FE93                 r0 = Null + M[0xfffe93];
0x0005B8        F3200000                 push r0;
0x0005B9        D9200001                 r0 = DivResult;
0x0005BA        CC12004F                 rMAC = r0 * r2 (SS);
0x0005BB        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x0005BC        F3C00000                 push r10;
0x0005BD        F3100000                 push rMAC;
0x0005BE        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x0005BF        9D710017                 r5 = rMAC * 23 (int) (sat);
0x0005C0        E420002F                 r0 = Null + 1;
0x0005C1        1920FE93                 M[0xfffe93] = r0 + Null;
0x0005C2        D1CA0002                 r10 = M[r8 + 2];
0x0005C3        018A000A                 r6 = r8 + 10;
0x0005C4        51A00034                 M2 = Null + 52;
0x0005C5        D15A0004                 r3 = M[r8 + 4];
0x0005C6        01600000                 r4 = Null + 0;
0x0005C7        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x0005C8        D1280002                 r0 = M[r6 + 2];
0x0005C9        CC15002F                 rMAC = r3 * r0 (SS);
0x0005CA        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0005CB        D1380003                 r1 = M[r6 + 3];
0x0005CC        2021003F                 r0 = rMAC - r1;
0x0005CD        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x0005CE        20200024                 if NEG r0 = Null - r0;
0x0005CF        9443007F                 r2 = r1 * r5 (frac);
0x0005D0        474A0000                 r2 = r2 + M2;
0x0005D1        E442005F                 r2 = MIN r0;
0x0005D2        2001003F                 Null = rMAC - r1;
0x0005D3        20400044                 if NEG r2 = Null - r2;
0x0005D4        03340000                 r1 = r1 + r2;
0x0005D5        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x0005D6        E463006F                 r4 = MAX r1;
0x0005D7        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x0005D8        1900FE93                 M[0xfffe93] = Null + Null;
0x0005D9        01500000                 r3 = Null + 0;
0x0005DA        D12A0000                 r0 = M[r8 + 0];
0x0005DB        D13A0001                 r1 = M[r8 + 1];
0x0005DC        8002003F                 Null = r0 AND r1;
0x0005DD        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x0005DE        FD000008 21060000        Null = r4 - 524288;
0x0005E0        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x0005E1        018A000A                 r6 = r8 + 10;
0x0005E2        D12A0002                 r0 = M[r8 + 2];
0x0005E3        5090002F                 M1 = Null + r0;
0x0005E4        01600000                 r4 = Null + 0;
0x0005E5        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x0005E6        D1380003                 r1 = M[r6 + 3];
0x0005E7        FD000008 21030000        Null = r1 - 524288;
0x0005E9        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x0005EA        F1C8FFFE                 r10 = M[SP + -0x2];
0x0005EB        D1280000                 r0 = M[r6 + 0];
0x0005EC        E1F00BD3                 call $frmbuffer.get_buffer;
0x0005ED        5000002F                 I0 = Null + r0;
0x0005EE        50C0003F                 L0 = Null + r1;
0x0005EF        E4CC003F                 r10 = r10 - 1;
0x0005F0        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x0005F1        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x0005F2        E444004F                 r2 = ABS r2;
0x0005F3        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x0005F4        E444004F                 r2 = ABS r2;
0x0005F5        E474006F                 r5 = MAX r2;
0x0005F6        D1380003                 r1 = M[r6 + 3];
0x0005F7        97730000                 r5 = r5 * r1 (frac);
0x0005F8        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x0005F9        01880005                 r6 = r6 + 5;
0x0005FA        79990001                 M1 = M1 - 1;
0x0005FB        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x0005FC        51C00000                 L0 = Null + 0;
0x0005FD        01500000                 r3 = Null + 0;
0x0005FE        D14A0006                 r2 = M[r8 + 6];
0x0005FF        2006004F                 Null = r4 - r2;
0x000600        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000601        0016000F                 rMAC = r4 + Null;
0x000602        E1F00A8B                 call $math.log2_table;
0x000603        D15A0005                 r3 = M[r8 + 5];
0x000604        D13A0007                 r1 = M[r8 + 7];
0x000605        2025002F                 r0 = r3 - r0;
0x000606        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x000607        F128FFFF                 r0 = M[SP + -0x1];
0x000608        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x00060A        E1F00AC7                 call $math.pow2_table;
0x00060B        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x00060D        9432002F                 r1 = r0 * r0 (frac);
0x00060E        97330000                 r1 = r1 * r1 (frac);
0x00060F        9432003F                 r1 = r0 * r1 (frac);
0x000610        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x000612        D12A0008                 r0 = M[r8 + 8];
0x000613        2075002F                 r5 = r3 - r0;
0x000614        00460005                 if POS r2 = r4 + Null;
0x000615        97740000                 r5 = r5 * r2 (frac);
0x000616        03270000                 r0 = r0 + r5;
0x000617        00200005                 if POS r0 = Null + Null;
0x000618        2042005F                 r2 = r0 - r3;
0x000619        20400044                 if NEG r2 = Null - r2;
0x00061A        21040054                 Null = r2 - 84;
0x00061B        00250004                 if NEG r0 = r3 + Null;
0x00061C        D52A0008                 M[r8 + 8] = r0;
0x00061D        E1F00AB4                 call $math.pow2_table;
0x00061E        D16A0009                 r4 = M[r8 + 9];
0x00061F        D52A0009                 M[r8 + 9] = r0;
0x000620        018A000A                 r6 = r8 + 10;
0x000621        D12A0002                 r0 = M[r8 + 2];
0x000622        5090002F                 M1 = Null + r0;
0x000623        E420002F                 r0 = Null + 1;
0x000624        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x000625        D1280000                 r0 = M[r6 + 0];
0x000626        E1F00B99                 call $frmbuffer.get_buffer;
0x000627        5000002F                 I0 = Null + r0;
0x000628        50C0003F                 L0 = Null + r1;
0x000629        D1280001                 r0 = M[r6 + 1];
0x00062A        E1F00B95                 call $frmbuffer.get_buffer;
0x00062B        5040002F                 I4 = Null + r0;
0x00062C        50E0003F                 L4 = Null + r1;
0x00062D        D1380003                 r1 = M[r6 + 3];
0x00062E        D12A0009                 r0 = M[r8 + 9];
0x00062F        9443002F                 r2 = r1 * r0 (frac);
0x000630        D1380004                 r1 = M[r6 + 4];
0x000631        23430000                 r2 = r2 - r1;
0x000632        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x000633        F1C8FFFE                 r10 = M[SP + -0x2];
0x000634        D90C0000                 Div = rMAC / r10;
0x000635        E4CC003F                 r10 = r10 - 1;
0x000636        01500004                 r3 = Null + 4;
0x000637        D9700001                 r5 = DivResult;
0x000638        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x000639        CC14003F                 rMAC = r2 * r1 (SS);
0x00063A        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x00063B        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x00063C        03370000                 r1 = r1 + r5;
0x00063D        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x00063E        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x00063F        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x000640        D5380004                 M[r6 + 4] = r1;
0x000641        01880005                 r6 = r6 + 5;
0x000642        79990001                 M1 = M1 - 1;
0x000643        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x000644        51C00000                 L0 = Null + 0;
0x000645        51E00000                 L4 = Null + 0;
0x000646        F3240000                 pop r0;
0x000647        F3240000                 pop r0;
0x000648        F3240000                 pop r0;
0x000649        1920FE93                 M[0xfffe93] = r0 + Null;
0x00064A        DDF00BA0                 jump $pop_rLink_and_rts;

 <$frame_sync.usb_in_stereo_audio_copy>
0x00064B        F3D00000                 push rLink;
0x00064C        D50A0009                 M[r8 + 9] = Null;

 <$frame_sync.usb_in_stereo_audio_copy_retry>
0x00064D        D12A0000                 r0 = M[r8 + 0];
0x00064E        8182000F                 r6 = r0 AND 0xf;
0x00064F        0068000F                 r4 = r6 + Null;
0x000650        01400062                 r2 = Null + 98;
0x000651        01500005                 r3 = Null + 5;
0x000652        65080007                 Null = 7 - r6;
0x000653        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.lower_port;
0x000654        0068004F                 r4 = r6 + r2;
0x000655        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_stereo_audio_copy.lower_port>
0x000656        5148FE2B                 I4 = r6 + -469;
0x000657        D13A0007                 r1 = M[r8 + 7];
0x000658        FD0000FF D12366AC        r0 = M[r1 + -39252];
0x00065A        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_stereo_audio_copy.idle>
0x00065B        D50A0008                 M[r8 + 8] = Null;
0x00065C        E420002F                 r0 = Null + 1;
0x00065D        D13A0006                 r1 = M[r8 + 6];
0x00065E        00230001                 if NE r0 = r1 + Null;
0x00065F        D52A0006                 M[r8 + 6] = r0;
0x000660        D506FE7B                 M[r4 + -389] = Null;
0x000661        D12A0000                 r0 = M[r8 + 0];
0x000662        E1F00B2D                 call $cbuffer.calc_amount_data;
0x000663        00C3000F                 r10 = r1 + Null;
0x000664        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.empty_loop;
0x000665        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.empty_loop>
0x000666        0900FE33                 Null = Null + M[0xfffe33];
0x000667        D12A0000                 r0 = M[r8 + 0];
0x000668        E1F00B27                 call $cbuffer.calc_amount_data;
0x000669        0003000F                 Null = r1 + Null;
0x00066A        DD10004E                 if NE jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x00066B        E420002F                 r0 = Null + 1;
0x00066C        D52A0007                 M[r8 + 7] = r0;
0x00066D        DDF0004B                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.syncing_a>
0x00066E        D12A0000                 r0 = M[r8 + 0];
0x00066F        E1F00B20                 call $cbuffer.calc_amount_data;
0x000670        D12A0003                 r0 = M[r8 + 3];
0x000671        21C20004                 r10 = r0 - 4;
0x000672        E422002F                 r0 = r0 + 1;
0x000673        2003002F                 Null = r1 - r0;
0x000674        DD400044                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000675        D13A0005                 r1 = M[r8 + 5];
0x000676        E433002F                 r1 = r1 + 1;
0x000677        8133007F                 r1 = r1 AND 0x7f;
0x000678        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000679        D14A0007                 r2 = M[r8 + 7];
0x00067A        01500002                 r3 = Null + 2;
0x00067B        D55A0007                 M[r8 + 7] = r3;
0x00067C        E404003F                 Null = r2 - 1;
0x00067D        DD000014                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x00067E        2003002F                 Null = r1 - r0;
0x00067F        DD000012                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000680        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000681        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000682        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000683        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000684        2003002F                 Null = r1 - r0;
0x000685        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.large_packet;
0x000686        01200000                 r0 = Null + 0;
0x000687        D52A0007                 M[r8 + 7] = r0;
0x000688        DDF00030                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.large_packet>
0x000689        D13A0006                 r1 = M[r8 + 6];
0x00068A        21330002                 r1 = r1 - 2;
0x00068B        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.skip_all_large;
0x00068C        01300000                 r1 = Null + 0;
0x00068D        01CC0004                 r10 = r10 + 4;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_all_large>
0x00068E        D53A0008                 M[r8 + 8] = r1;
0x00068F        01300003                 r1 = Null + 3;
0x000690        D53A0007                 M[r8 + 7] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_and_update>
0x000691        D52A0005                 M[r8 + 5] = r0;
0x000692        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.skip_loop;
0x000693        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_loop>
0x000694        D12A0000                 r0 = M[r8 + 0];
0x000695        4430004F                 r1 = Null + I4;
0x000696        E1F00B2E                 call $cbuffer.set_read_address;
0x000697        DDF00021                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.synced>
0x000698        D12A0001                 r0 = M[r8 + 1];
0x000699        E1F00AE6                 call $cbuffer.calc_amount_space;
0x00069A        0052000F                 r3 = r0 + Null;
0x00069B        D12A0002                 r0 = M[r8 + 2];
0x00069C        E1F00AE3                 call $cbuffer.calc_amount_space;
0x00069D        2005002F                 Null = r3 - r0;
0x00069E        00520005                 if POS r3 = r0 + Null;
0x00069F        D19A0003                 r7 = M[r8 + 3];
0x0006A0        9199007E                 r7 = r7 ASHIFT -2;
0x0006A1        2005009F                 Null = r3 - r7;
0x0006A2        DD400016                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0006A3        0900FE33                 Null = Null + M[0xfffe33];
0x0006A4        D12A0000                 r0 = M[r8 + 0];
0x0006A5        E1F00AEA                 call $cbuffer.calc_amount_data;
0x0006A6        01C0FFFC                 r10 = Null + -4;
0x0006A7        D15A0008                 r3 = M[r8 + 8];
0x0006A8        20CC00C0                 if EQ r10 = r10 - r10;
0x0006A9        D12A0003                 r0 = M[r8 + 3];
0x0006AA        032C0000                 r0 = r0 + r10;
0x0006AB        8DC2007E                 r10 = r0 LSHIFT -2;
0x0006AC        E422002F                 r0 = r0 + 1;
0x0006AD        2003002F                 Null = r1 - r0;
0x0006AE        DD40000A                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0006AF        D13A0006                 r1 = M[r8 + 6];
0x0006B0        E433003F                 r1 = r1 - 1;
0x0006B1        E425003F                 r0 = r3 - 1;
0x0006B2        00230004                 if NEG r0 = r1 + Null;
0x0006B3        D52A0008                 M[r8 + 8] = r0;
0x0006B4        E1F00007                 call $M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper;
0x0006B5        E420002F                 r0 = Null + 1;
0x0006B6        D52A0009                 M[r8 + 9] = r0;
0x0006B7        DDF0FF96                 jump $frame_sync.usb_in_stereo_audio_copy_retry;

 <$M.frame_sync.usb_in_stereo_audio_copy.exit>
0x0006B8        51C00000                 L0 = Null + 0;
0x0006B9        51F00000                 L5 = Null + 0;
0x0006BA        DDF00B30                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper>
0x0006BB        F3D00000                 push rLink;
0x0006BC        D13A0005                 r1 = M[r8 + 5];
0x0006BD        E433002F                 r1 = r1 + 1;
0x0006BE        8133007F                 r1 = r1 AND 0x7f;
0x0006BF        D506FE7B                 M[r4 + -389] = Null;
0x0006C0        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0006C1        D52A0005                 M[r8 + 5] = r0;
0x0006C2        2003002F                 Null = r1 - r0;
0x0006C3        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.copy_data;
0x0006C4        01200000                 r0 = Null + 0;
0x0006C5        D52A0007                 M[r8 + 7] = r0;
0x0006C6        DDF0001B                 jump $M.frame_sync.usb_in_stereo_audio_copy.lexit;

 <$M.frame_sync.usb_in_stereo_audio_copy.copy_data>
0x0006C7        E420002F                 r0 = Null + 1;
0x0006C8        D526FE7B                 M[r4 + -389] = r0;
0x0006C9        D12A0001                 r0 = M[r8 + 1];
0x0006CA        E1F00AF0                 call $cbuffer.get_write_address_and_size;
0x0006CB        5000002F                 I0 = Null + r0;
0x0006CC        50C0003F                 L0 = Null + r1;
0x0006CD        D12A0002                 r0 = M[r8 + 2];
0x0006CE        E1F00AEC                 call $cbuffer.get_write_address_and_size;
0x0006CF        5050002F                 I5 = Null + r0;
0x0006D0        50F0003F                 L5 = Null + r1;
0x0006D1        D15A0004                 r3 = M[r8 + 4];
0x0006D2        E5F00006                 do $M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop;
0x0006D3        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0006D4        93250000                 r0 = r0 ASHIFT r3;
0x0006D5        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0006D6        93350000                 r1 = r1 ASHIFT r3;
0x0006D7        0300A1B5                 Null = Null + Null, M[I0,1] = r0, M[I5,1] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop>
0x0006D8        D12A0000                 r0 = M[r8 + 0];
0x0006D9        4430004F                 r1 = Null + I4;
0x0006DA        E1F00AEA                 call $cbuffer.set_read_address;
0x0006DB        D12A0001                 r0 = M[r8 + 1];
0x0006DC        4430000F                 r1 = Null + I0;
0x0006DD        E1F00AEB                 call $cbuffer.set_write_address;
0x0006DE        D12A0002                 r0 = M[r8 + 2];
0x0006DF        4430005F                 r1 = Null + I5;
0x0006E0        E1F00AE8                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_stereo_audio_copy.lexit>
0x0006E1        DDF00B09                 jump $pop_rLink_and_rts;

 <$stereo_3d_enhancement.initialize>
0x0006E2        F3D00000                 push rLink;
0x0006E3        D12A0004                 r0 = M[r8 + 4];
0x0006E4        E1F00AD1                 call $cbuffer.get_read_address_and_size;
0x0006E5        5010002F                 I1 = Null + r0;
0x0006E6        50D0003F                 L1 = Null + r1;
0x0006E7        5000002F                 I0 = Null + r0;
0x0006E8        50C0003F                 L0 = Null + r1;
0x0006E9        D12A0005                 r0 = M[r8 + 5];
0x0006EA        E1F00ACB                 call $cbuffer.get_read_address_and_size;
0x0006EB        5040002F                 I4 = Null + r0;
0x0006EC        50E0003F                 L4 = Null + r1;
0x0006ED        5050002F                 I5 = Null + r0;
0x0006EE        50F0003F                 L5 = Null + r1;
0x0006EF        01C008A0                 r10 = Null + 2208;
0x0006F0        0020000F                 r0 = Null + Null;
0x0006F1        E5F00002                 do $M.stereo_3d_enhancement.loop_clear_buffers;
0x0006F2        0300A5A5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r0;

 <$M.stereo_3d_enhancement.loop_clear_buffers>
0x0006F3        D14A0007                 r2 = M[r8 + 7];
0x0006F4        5080004F                 M0 = Null + r2;
0x0006F5        02002030                 Null = Null + Null, r0 = M[I0,M0], r1 = M[I4,M0];
0x0006F6        D12A0004                 r0 = M[r8 + 4];
0x0006F7        4430000F                 r1 = Null + I0;
0x0006F8        E1F00AD0                 call $cbuffer.set_write_address;
0x0006F9        D12A0005                 r0 = M[r8 + 5];
0x0006FA        4430004F                 r1 = Null + I4;
0x0006FB        E1F00ACD                 call $cbuffer.set_write_address;
0x0006FC        51C00000                 L0 = Null + 0;
0x0006FD        51D00000                 L1 = Null + 0;
0x0006FE        51E00000                 L4 = Null + 0;
0x0006FF        51F00000                 L5 = Null + 0;
0x000700        DDF00AEA                 jump $pop_rLink_and_rts;
0x000701        DC0D000F                 rts;

 <$stereo_3d_enhancement>
0x000702        D12A0009                 r0 = M[r8 + 9];
0x000703        D13A000A                 r1 = M[r8 + 10];
0x000704        009A000F                 r7 = r8 + Null;
0x000705        83320000                 r1 = r1 AND r0;
0x000706        DD10072A                 if NE jump $M.audio_proc.stereo_copy.Process.func;
0x000707        F3D00000                 push rLink;
0x000708        D12A0000                 r0 = M[r8 + 0];
0x000709        E1F00AB6                 call $frmbuffer.get_buffer;
0x00070A        5000002F                 I0 = Null + r0;
0x00070B        50C0003F                 L0 = Null + r1;
0x00070C        D12A0001                 r0 = M[r8 + 1];
0x00070D        E1F00AB2                 call $frmbuffer.get_buffer;
0x00070E        5040002F                 I4 = Null + r0;
0x00070F        50E0003F                 L4 = Null + r1;
0x000710        00C5000F                 r10 = r3 + Null;
0x000711        D12A0004                 r0 = M[r8 + 4];
0x000712        E1F00AA8                 call $cbuffer.get_write_address_and_size;
0x000713        5010002F                 I1 = Null + r0;
0x000714        50D0003F                 L1 = Null + r1;
0x000715        D12A0005                 r0 = M[r8 + 5];
0x000716        E1F00AA4                 call $cbuffer.get_write_address_and_size;
0x000717        5050002F                 I5 = Null + r0;
0x000718        50F0003F                 L5 = Null + r1;
0x000719        007C000F                 r5 = r10 + Null;
0x00071A        E5F00003                 do $M.stereo_3d_enhancement.loop_copy;
0x00071B        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x00071C        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.stereo_3d_enhancement.loop_copy>
0x00071D        D12A0004                 r0 = M[r8 + 4];
0x00071E        4430001F                 r1 = Null + I1;
0x00071F        E1F00AA9                 call $cbuffer.set_write_address;
0x000720        D12A0005                 r0 = M[r8 + 5];
0x000721        4430005F                 r1 = Null + I5;
0x000722        E1F00AA6                 call $cbuffer.set_write_address;
0x000723        51C00000                 L0 = Null + 0;
0x000724        51E00000                 L4 = Null + 0;
0x000725        51D00000                 L1 = Null + 0;
0x000726        51F00000                 L5 = Null + 0;
0x000727        E4C7003F                 r10 = r5 - 1;
0x000728        D12A0007                 r0 = M[r8 + 7];
0x000729        E430002F                 r1 = Null + 1;
0x00072A        7083002F                 M0 = r1 - r0;
0x00072B        5090002F                 M1 = Null + r0;
0x00072C        50A0003F                 M2 = Null + r1;
0x00072D        51B0FFF9                 M3 = Null + -7;
0x00072E        D12A0006                 r0 = M[r8 + 6];
0x00072F        5020002F                 I2 = Null + r0;
0x000730        D12A0004                 r0 = M[r8 + 4];
0x000731        E1F00A84                 call $cbuffer.get_read_address_and_size;
0x000732        5010002F                 I1 = Null + r0;
0x000733        50D0003F                 L1 = Null + r1;
0x000734        D12A0005                 r0 = M[r8 + 5];
0x000735        E1F00A80                 call $cbuffer.get_read_address_and_size;
0x000736        5050002F                 I5 = Null + r0;
0x000737        50F0003F                 L5 = Null + r1;
0x000738        D12A0002                 r0 = M[r8 + 2];
0x000739        0057000F                 r3 = r5 + Null;
0x00073A        E1F00AAE                 call $frmbuffer.set_frame_size;
0x00073B        E1F00A84                 call $frmbuffer.get_buffer;
0x00073C        5000002F                 I0 = Null + r0;
0x00073D        50C0003F                 L0 = Null + r1;
0x00073E        D12A0003                 r0 = M[r8 + 3];
0x00073F        0057000F                 r3 = r5 + Null;
0x000740        E1F00AA8                 call $frmbuffer.set_frame_size;
0x000741        E1F00A7E                 call $frmbuffer.get_buffer;
0x000742        50407A2F                 I4 = Null + r0, r5 = M[I2,M2];
0x000743        50E0553F                 L4 = Null + r1, r3 = M[I1,M1];
0x000744        FD000080 01800000        r6 = Null + -8388608;
0x000746        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000747        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x000748        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x000749        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x00074A        AC127A7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M2];
0x00074B        0062001F                 r4 = r0 + rMAC;
0x00074C        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x00074D        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x00074E        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x00074F        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x000750        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x000751        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x000752        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];
0x000753        E5F0000D                 do $M.stereo_3d_enhancement.loop_dsp;
0x000754        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x000755        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x000756        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x000757        AC12E27F                 rMAC = rMAC + r0 * r5 (SS), M[I0,M2] = r4;
0x000758        00627A1F                 r4 = r0 + rMAC, r5 = M[I2,M2];
0x000759        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x00075A        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x00075B        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x00075C        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x00075D        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x00075E        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x00075F        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];

 <$M.stereo_3d_enhancement.loop_dsp>
0x000760        50E0E20F                 L4 = Null + Null, M[I0,M2] = r4;
0x000761        7FCC3700                 L0 = L0 - L0, r1 = M[I1,-1];
0x000762        D12A0005                 r0 = M[r8 + 5];
0x000763        4430005F                 r1 = Null + I5;
0x000764        E1F00A60                 call $cbuffer.set_read_address;
0x000765        D12A0004                 r0 = M[r8 + 4];
0x000766        4430001F                 r1 = Null + I1;
0x000767        E1F00A5D                 call $cbuffer.set_read_address;
0x000768        51F00000                 L5 = Null + 0;
0x000769        51D00000                 L1 = Null + 0;
0x00076A        DDF00A80                 jump $pop_rLink_and_rts;

 <$latency.calc_encoded_latency>
0x00076B        F3D00000                 push rLink;
0x00076C        D1290001                 r0 = M[r7 + 1];
0x00076D        DD000A7D                 if EQ jump $pop_rLink_and_rts;
0x00076E        D1290001                 r0 = M[r7 + 1];
0x00076F        E1F00A10                 call $cbuffer.calc_amount_space;
0x000770        21020002                 Null = r0 - 2;
0x000771        DD50000D                 if POS jump $M.latency_measure.calc_encoded_latency.buffer_full_check_done;
0x000772        E1F00A25                 call $block_interrupts;
0x000773        D1290001                 r0 = M[r7 + 1];
0x000774        E1F00A46                 call $cbuffer.get_write_address_and_size;
0x000775        50F0003F                 L5 = Null + r1;
0x000776        5050002F                 I5 = Null + r0;
0x000777        5180FFFC                 M0 = Null + -4;
0x000778        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x000779        4430005F                 r1 = Null + I5;
0x00077A        D1290001                 r0 = M[r7 + 1];
0x00077B        E1F00A4D                 call $cbuffer.set_write_address;
0x00077C        51F00000                 L5 = Null + 0;
0x00077D        E1F009EE                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.buffer_full_check_done>
0x00077E        D1290003                 r0 = M[r7 + 3];
0x00077F        D1490008                 r2 = M[r7 + 8];
0x000780        D1320002                 r1 = M[r0 + 2];
0x000781        2043004F                 r2 = r1 - r2;
0x000782        DD000A68                 if EQ jump $pop_rLink_and_rts;
0x000783        D1290002                 r0 = M[r7 + 2];
0x000784        D1520001                 r3 = M[r0 + 1];
0x000785        D1290007                 r0 = M[r7 + 7];
0x000786        2002005F                 Null = r0 - r3;
0x000787        DD000A63                 if EQ jump $pop_rLink_and_rts;
0x000788        D1290001                 r0 = M[r7 + 1];
0x000789        E1F00A06                 call $cbuffer.calc_amount_data;
0x00078A        91C2007F                 r10 = r0 ASHIFT -1;
0x00078B        DD000049                 if EQ jump $M.latency_measure.calc_encoded_latency.end;
0x00078C        212C0003                 r0 = r10 - 3;
0x00078D        20CC0025                 if POS r10 = r10 - r0;
0x00078E        D1290001                 r0 = M[r7 + 1];
0x00078F        E1F00A26                 call $cbuffer.get_read_address_and_size;
0x000790        5050002F                 I5 = Null + r0;
0x000791        50F0003F                 L5 = Null + r1;
0x000792        D1290002                 r0 = M[r7 + 2];
0x000793        D1220001                 r0 = M[r0 + 1];
0x000794        D1390007                 r1 = M[r7 + 7];
0x000795        E5F00006                 do $M.latency_measure.calc_encoded_latency.search_loop;
0x000796        03000045                 Null = Null + Null, r2 = M[I5,1];
0x000797        03000065                 Null = Null + Null, r4 = M[I5,1];
0x000798        E1F00043                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x000799        0005000F                 Null = r3 + Null;
0x00079A        DD100003                 if NE jump $M.latency_measure.calc_encoded_latency.entry_found;

 <$M.latency_measure.calc_encoded_latency.search_loop>
0x00079B        51F00000                 L5 = Null + 0;
0x00079C        DDF00038                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.entry_found>
0x00079D        4430005F                 r1 = Null + I5;
0x00079E        D1290001                 r0 = M[r7 + 1];
0x00079F        E1F00A25                 call $cbuffer.set_read_address;
0x0007A0        51F00000                 L5 = Null + 0;
0x0007A1        E1F009F6                 call $block_interrupts;
0x0007A2        F3600000                 push r4;
0x0007A3        F3900000                 push r7;
0x0007A4        D1990000                 r7 = M[r7 + 0];
0x0007A5        E1F003E9                 call $latency.calc_pcm_latency;
0x0007A6        F3940000                 pop r7;
0x0007A7        F3640000                 pop r4;
0x0007A8        0950FE71                 r3 = Null + M[0xfffe71];
0x0007A9        2065006F                 r4 = r3 - r4;
0x0007AA        20600064                 if NEG r4 = Null - r4;
0x0007AB        03680000                 r4 = r4 + r6;
0x0007AC        DD400027                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0007AD        D1290003                 r0 = M[r7 + 3];
0x0007AE        E1F00A0C                 call $cbuffer.get_write_address_and_size;
0x0007AF        D1490008                 r2 = M[r7 + 8];
0x0007B0        23240000                 r0 = r0 - r2;
0x0007B1        00220034                 if NEG r0 = r0 + r1;
0x0007B2        D1390004                 r1 = M[r7 + 4];
0x0007B3        D3300000                 r1 = M[r1 + Null];
0x0007B4        D1490005                 r2 = M[r7 + 5];
0x0007B5        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0007B6        D3400000                 r2 = M[r2 + Null];
0x0007B7        DD000002                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0007B8        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_encoded_latency.no_warp>
0x0007B9        9453004F                 r3 = r1 * r2 (frac);
0x0007BA        9445004F                 r2 = r3 * r2 (frac);
0x0007BB        0053005F                 r3 = r1 + r3;
0x0007BC        0035004F                 r1 = r3 + r2;
0x0007BD        CC12003F                 rMAC = r0 * r1 (SS);
0x0007BE        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0007BF        8D310000                 r1 = rMAC LSHIFT 0;
0x0007C0        23630000                 r4 = r4 - r1;
0x0007C1        DD400012                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0007C2        D1C90006                 r10 = M[r7 + 6];
0x0007C3        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.min_done;
0x0007C4        212C0004                 r0 = r10 - 4;
0x0007C5        20CC0025                 if POS r10 = r10 - r0;
0x0007C6        E4CC003F                 r10 = r10 - 1;
0x0007C7        5159000A                 I5 = r7 + 10;
0x0007C8        03000035                 Null = Null + Null, r1 = M[I5,1];
0x0007C9        E5F00005                 do $M.latency_measure.calc_encoded_latency.loop_min;
0x0007CA        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0007CB        2002003F                 Null = r0 - r1;
0x0007CC        00320004                 if NEG r1 = r0 + Null;
0x0007CD        030000A6                 Null = Null + Null, M[I5,2] = r0;

 <$M.latency_measure.calc_encoded_latency.loop_min>
0x0007CE        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0007CF        030000E4                 Null = Null + Null, M[I5,0] = r4;
0x0007D0        2006003F                 Null = r4 - r1;
0x0007D1        00630005                 if POS r4 = r1 + Null;

 <$M.latency_measure.calc_encoded_latency.min_done>
0x0007D2        D5690009                 M[r7 + 9] = r4;

 <$M.latency_measure.calc_encoded_latency.end_calc>
0x0007D3        E1F00998                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.end>
0x0007D4        D1290002                 r0 = M[r7 + 2];
0x0007D5        D1220001                 r0 = M[r0 + 1];
0x0007D6        D5290007                 M[r7 + 7] = r0;
0x0007D7        D1290003                 r0 = M[r7 + 3];
0x0007D8        D1220002                 r0 = M[r0 + 2];
0x0007D9        D5290008                 M[r7 + 8] = r0;
0x0007DA        DDF00A10                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_encoded_latency.is_address_within_range>
0x0007DB        E450002F                 r3 = Null + 1;
0x0007DC        2002003F                 Null = r0 - r1;
0x0007DD        DD400006                 if NEG jump $M.latency_measure.calc_encoded_latency.neg_part;

 <$M.latency_measure.calc_encoded_latency.pos_part>
0x0007DE        2004002F                 Null = r2 - r0;
0x0007DF        00500005                 if POS r3 = Null + Null;
0x0007E0        2004003F                 Null = r2 - r1;
0x0007E1        00500004                 if NEG r3 = Null + Null;
0x0007E2        DC0D000F                 rts;

 <$M.latency_measure.calc_encoded_latency.neg_part>
0x0007E3        2004003F                 Null = r2 - r1;
0x0007E4        DC0D0005                 if POS rts;
0x0007E5        2004002F                 Null = r2 - r0;
0x0007E6        00500005                 if POS r3 = Null + Null;
0x0007E7        DC0D000F                 rts;

 <$cmpd100.analysis>
0x0007E8        D12A0000                 r0 = M[r8 + 0];
0x0007E9        D13A0001                 r1 = M[r8 + 1];
0x0007EA        83320000                 r1 = r1 AND r0;
0x0007EB        DC0D0001                 if NE rts;
0x0007EC        F3D00000                 push rLink;
0x0007ED        D12A0002                 r0 = M[r8 + 2];
0x0007EE        E1F009D1                 call $frmbuffer.get_buffer;
0x0007EF        5000002F                 I0 = Null + r0;
0x0007F0        50C0003F                 L0 = Null + r1;
0x0007F1        D12A0003                 r0 = M[r8 + 3];
0x0007F2        E1F009CD                 call $frmbuffer.get_buffer;
0x0007F3        5040002F                 I4 = Null + r0;
0x0007F4        50E0003F                 L4 = Null + r1;
0x0007F5        00C5000F                 r10 = r3 + Null;
0x0007F6        01400000                 r2 = Null + 0;
0x0007F7        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x0007F8        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0007F9        2002000F                 Null = r0 - Null;
0x0007FA        20200024                 if NEG r0 = Null - r0;
0x0007FB        2003000F                 Null = r1 - Null;
0x0007FC        20300034                 if NEG r1 = Null - r1;
0x0007FD        2002003F                 Null = r0 - r1;
0x0007FE        00230004                 if NEG r0 = r1 + Null;
0x0007FF        2004002F                 Null = r2 - r0;
0x000800        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x000801        FD0000FF 1940673A        M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x000803        0014000F                 rMAC = r2 + Null;
0x000804        E1F00889                 call $math.log2_table;
0x000805        19202E9B                 M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x000806        D14A001D                 r2 = M[r8 + 29];
0x000807        0042004F                 r2 = r0 + r2;
0x000808        51C00000                 L0 = Null + 0;
0x000809        51E00000                 L4 = Null + 0;
0x00080A        513A0008                 I3 = r8 + 8;
0x00080B        514A0012                 I4 = r8 + 18;
0x00080C        51900001                 M1 = Null + 1;
0x00080D        D15A000D                 r3 = M[r8 + 13];
0x00080E        D16A000C                 r4 = M[r8 + 12];
0x00080F        D17A000B                 r5 = M[r8 + 11];
0x000810        D18A000A                 r6 = M[r8 + 10];
0x000811        2024005F                 r0 = r2 - r3;
0x000812        DD40000E                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x000813        D13A0011                 r1 = M[r8 + 17];
0x000814        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000815        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000816        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000817        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000818        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000819        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x00081A        510A001B                 I0 = r8 + 27;
0x00081B        19102E9C                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00081C        01300005                 r1 = Null + 5;
0x00081D        FD0000FF 1930673B        M[$M.cmpd100.analysis.region] = r1 + Null;
0x00081F        DDF0002F                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x000820        2024006F                 r0 = r2 - r4;
0x000821        DD40000D                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x000822        D13A0010                 r1 = M[r8 + 16];
0x000823        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000824        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000825        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000826        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000827        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000828        510A0019                 I0 = r8 + 25;
0x000829        19102E9C                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00082A        01300004                 r1 = Null + 4;
0x00082B        FD0000FF 1930673B        M[$M.cmpd100.analysis.region] = r1 + Null;
0x00082D        DDF00021                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x00082E        2024007F                 r0 = r2 - r5;
0x00082F        DD40000C                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x000830        D13A000F                 r1 = M[r8 + 15];
0x000831        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000832        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000833        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000834        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000835        510A0017                 I0 = r8 + 23;
0x000836        19102E9C                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000837        01300003                 r1 = Null + 3;
0x000838        FD0000FF 1930673B        M[$M.cmpd100.analysis.region] = r1 + Null;
0x00083A        DDF00014                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x00083B        2024008F                 r0 = r2 - r6;
0x00083C        DD40000C                 if NEG jump $M.cmpd100.analysis.gain_one;
0x00083D        D13A000E                 r1 = M[r8 + 14];
0x00083E        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x00083F        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x000840        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000841        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000842        510A0015                 I0 = r8 + 21;
0x000843        19102E9C                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000844        01300002                 r1 = Null + 2;
0x000845        FD0000FF 1930673B        M[$M.cmpd100.analysis.region] = r1 + Null;
0x000847        DDF00007                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x000848        510A0017                 I0 = r8 + 23;
0x000849        01100000                 rMAC = Null + 0;
0x00084A        19102E9C                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00084B        E430002F                 r1 = Null + 1;
0x00084C        FD0000FF 1930673B        M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x00084E        D16A0007                 r4 = M[r8 + 7];
0x00084F        5040006F                 I4 = Null + r4;
0x000850        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x000851        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x000852        00540004                 if NEG r3 = r2 + Null;
0x000853        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x000854        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x000855        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x000856        DDF00994                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x000857        F3D00000                 push rLink;
0x000858        51900001                 M1 = Null + 1;
0x000859        510A0001                 I0 = r8 + 1;
0x00085A        01807FFF                 r6 = Null + 32767;
0x00085B        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x00085C        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x00085D        FD0000FF 51105F93        I1 = Null + -41069;
0x00085F        19A02E8E                 M[$cbops.struc_ptr] = r8 + Null;
0x000860        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x000861        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000862        E1F0092D                 call $cbuffer.calc_amount_data;
0x000863        2002008F                 Null = r0 - r6;
0x000864        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x000865        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000866        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x000867        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000868        E1F00917                 call $cbuffer.calc_amount_space;
0x000869        2002009F                 Null = r0 - r7;
0x00086A        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x00086B        0078000F                 r5 = r6 + Null;
0x00086C        2007009F                 Null = r5 - r7;
0x00086D        00790005                 if POS r5 = r7 + Null;
0x00086E        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x00086F        D12A0001                 r0 = M[r8 + 1];
0x000870        01AA0002                 r8 = r8 + 2;
0x000871        D1220001                 r0 = M[r0 + 1];
0x000872        E0020001                 if NE call r0;
0x000873        D1AAFFFE                 r8 = M[r8 + -2];
0x000874        E40A002F                 Null = r8 + 1;
0x000875        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x000876        21270200                 r0 = r5 - 512;
0x000877        20770025                 if POS r5 = r5 - r0;
0x000878        09A02E8E                 r8 = Null + M[$cbops.struc_ptr];
0x000879        FD0000FF 1970672E        M[$cbops.amount_to_use] = r5 + Null;
0x00087B        DD000041                 if EQ jump $M.cbops.copy.done;
0x00087C        19702E8F                 M[$cbops.amount_written] = r5 + Null;
0x00087D        510A0001                 I0 = r8 + 1;
0x00087E        51402CD7                 I4 = Null + 11479;
0x00087F        FD0000FF 51105F83        I1 = Null + -41085;
0x000881        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000882        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000883        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x000884        E1F00931                 call $cbuffer.get_read_address_and_size;
0x000885        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000886        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x000887        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000888        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x000889        E1F00931                 call $cbuffer.get_write_address_and_size;
0x00088A        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x00088B        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x00088C        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x00088D        01802CD7                 r6 = Null + 11479;
0x00088E        FD0000FF 01905F83        r7 = Null + -41085;
0x000890        FD0000FF 09C0672E        r10 = Null + M[$cbops.amount_to_use];
0x000892        D12A0001                 r0 = M[r8 + 1];
0x000893        01AA0002                 r8 = r8 + 2;
0x000894        D1220002                 r0 = M[r0 + 2];
0x000895        E0020001                 if NE call r0;
0x000896        D1AAFFFE                 r8 = M[r8 + -2];
0x000897        E40A002F                 Null = r8 + 1;
0x000898        DD10FFF5                 if NE jump $M.cbops.copy.operator_functions_loop;
0x000899        09A02E8E                 r8 = Null + M[$cbops.struc_ptr];
0x00089A        511A0001                 I1 = r8 + 1;
0x00089B        51202CD7                 I2 = Null + 11479;
0x00089C        FD0000FF 51305F83        I3 = Null + -41085;
0x00089E        51900001                 M1 = Null + 1;
0x00089F        FD0000FF 0920672E        r0 = Null + M[$cbops.amount_to_use];
0x0008A1        50A0002F                 M2 = Null + r0;
0x0008A2        09202E8F                 r0 = Null + M[$cbops.amount_written];
0x0008A3        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x0008A4        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x0008A5        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0008A6        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0008A7        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x0008A8        5000003F                 I0 = Null + r1;
0x0008A9        50C0004F                 L0 = Null + r2;
0x0008AA        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x0008AB        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x0008AC        E1F00918                 call $cbuffer.set_read_address;
0x0008AD        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0008AE        79770001                 I7 = I7 - 1;
0x0008AF        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x0008B0        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x0008B1        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0008B2        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0008B3        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x0008B4        5000003F                 I0 = Null + r1;
0x0008B5        50C0004F                 L0 = Null + r2;
0x0008B6        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x0008B7        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x0008B8        E1F00910                 call $cbuffer.set_write_address;
0x0008B9        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0008BA        79770001                 I7 = I7 - 1;
0x0008BB        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x0008BC        DDF0092E                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x0008BD        F3D00000                 push rLink;
0x0008BE        D12A0000                 r0 = M[r8 + 0];
0x0008BF        D038002F                 r1 = M[r6 + r0];
0x0008C0        5000003F                 I0 = Null + r1;
0x0008C1        D039002F                 r1 = M[r7 + r0];
0x0008C2        50C0003F                 L0 = Null + r1;
0x0008C3        D12A0001                 r0 = M[r8 + 1];
0x0008C4        D038002F                 r1 = M[r6 + r0];
0x0008C5        5040003F                 I4 = Null + r1;
0x0008C6        D039002F                 r1 = M[r7 + r0];
0x0008C7        50E0003F                 L4 = Null + r1;
0x0008C8        09402E94                 r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x0008C9        D15A0003                 r3 = M[r8 + 3];
0x0008CA        FD00007F 0170FFFF        r5 = Null + 8388607;
0x0008CC        FD0000FF D12566DA        r0 = M[r3 + -39206];
0x0008CE        D19A0002                 r7 = M[r8 + 2];
0x0008CF        6589FFE8                 r6 = -24 - r7;
0x0008D0        9087008F                 r6 = r5 ASHIFT r6;
0x0008D1        51900011                 M1 = Null + 17;
0x0008D2        01603555                 r4 = Null + 13653;
0x0008D3        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x0008D4        FD00007F 0150FFFF        r3 = Null + 8388607;
0x0008D6        9065009F                 r4 = r3 ASHIFT r7;
0x0008D7        E4CC003F                 r10 = r10 - 1;
0x0008D8        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008D9        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008DA        E416005F                 rMAC = MIN r4;
0x0008DB        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x0008DC        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x0008DD        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008DE        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x0008DF        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0008E0        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x0008E1        FD0000FF 5150345F        I5 = Null + -52129;
0x0008E3        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008E4        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008E5        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x0008E6        9B460000                 r2 = r2 * r4 (int);
0x0008E7        47490000                 r2 = r2 + M1;
0x0008E8        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008E9        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x0008EA        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x0008EB        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x0008EC        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x0008ED        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x0008EE        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x0008EF        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x0008F0        51D00005                 L1 = Null + 5;
0x0008F1        D12A0004                 r0 = M[r8 + 4];
0x0008F2        5010002F                 I1 = Null + r0;
0x0008F3        FD0000FF 51503459        I5 = Null + -52135;
0x0008F5        5180FFFA                 M0 = Null + -6;
0x0008F6        FD0000FF 1980345F        M[0xff345f] = r6 + Null;
0x0008F8        95886000                 r6 = r6 * 0.75 (frac);
0x0008F9        E450003F                 r3 = Null - 1;
0x0008FA        2020009F                 r0 = Null - r7;
0x0008FB        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0008FC        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x0008FD        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x0008FE        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x0008FF        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000900        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000901        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000902        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x000903        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x000904        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x000905        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x000906        47490000                 r2 = r2 + M1;
0x000907        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x000908        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x000909        8031005F                 r1 = rMAC AND r3;
0x00090A        90E3009F                 rMAC = r1 ASHIFT r7;
0x00090B        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x00090C        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x00090D        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x00090E        4420001F                 r0 = Null + I1;
0x00090F        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000910        51C00000                 L0 = Null + 0;
0x000911        51E00000                 L4 = Null + 0;
0x000912        19402E94                 M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000913        DDF008D7                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x000914        F3D00000                 push rLink;
0x000915        5F380000                 I3 = I3 + M0;
0x000916        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000917        F3E20000                 push FP;
0x000918        F3A60000                 pop B0;
0x000919        F107000A                 FP = FP + 10;
0x00091A        F3E20000                 push FP;
0x00091B        F3C60000                 pop B4;
0x00091C        F007003F                 FP = FP + r1;
0x00091D        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x00091E        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x00091F        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000920        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000921        5060003F                 I6 = Null + r1;
0x000922        F3210000                 push I2;
0x000923        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x000924        9946000A                 r2 = r4 * 10 (int);
0x000925        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000926        5FB60000                 M3 = M3 + I6;
0x000927        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000928        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000929        5040002F                 I4 = Null + r0;
0x00092A        51C0000A                 L0 = Null + 10;
0x00092B        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x00092C        2055005A                 if GE r3 = r3 - r3;
0x00092D        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x00092E        004400B4                 if NEG r2 = r2 + r9;
0x00092F        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000930        4422008C                 if GT r0 = r0 + M0;
0x000931        0003000F                 Null = r1 + Null;
0x000932        00230001                 if NE r0 = r1 + Null;
0x000933        23C20000                 r10 = r10 - r0;
0x000934        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x000935        9434006F                 r1 = r2 * r4 (frac);
0x000936        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x000937        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000938        E007000F                 call r5;
0x000939        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x00093A        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x00093B        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x00093C        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00093D        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00093E        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00093F        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000940        7C7B007F                 I7 = M3 - I7;
0x000941        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000942        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000943        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000944        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000945        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000946        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000947        903100AF                 r1 = rMAC ASHIFT r8;
0x000948        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000949        79330003                 I3 = I3 - 3;
0x00094A        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x00094B        2055005A                 if GE r3 = r3 - r3;
0x00094C        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x00094D        004400B4                 if NEG r2 = r2 + r9;
0x00094E        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x00094F        4422008C                 if GT r0 = r0 + M0;
0x000950        23C20000                 r10 = r10 - r0;
0x000951        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x000952        006200CF                 r4 = r0 + r10;
0x000953        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x000954        0026000F                 r0 = r4 + Null;
0x000955        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x000956        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000957        E007000F                 call r5;
0x000958        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000959        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x00095A        5832000F                 I3 = I2 + Null;
0x00095B        F3250000                 pop I2;
0x00095C        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x00095D        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x00095E        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x00095F        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x000960        DDF0088A                 jump $pop_rLink_and_rts;

 <$message.received_service_routine>
0x000961        F3D00000                 push rLink;
0x000962        51800000                 M0 = Null + 0;
0x000963        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000964        8132FFF0                 r1 = r0 AND 0xfff0;
0x000965        8903FFF0                 Null = r1 XOR 0xfff0;
0x000966        DD10001E                 if NE jump $M.message.received_service_routine.non_long_message;
0x000967        81020001                 Null = r0 AND 0x1;
0x000968        DD000003                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000969        FD0000FF 1900672A        M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x00096B        FD0000FF 0930672A        r1 = Null + M[$message.long_message_size];
0x00096D        21030052                 Null = r1 - 82;
0x00096E        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x00096F        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000970        0940E006                 r2 = Null + M[0xffe006];
0x000971        D5430F00                 M[r1 + 3840] = r2;
0x000972        0940E007                 r2 = Null + M[0xffe007];
0x000973        D5430F01                 M[r1 + 3841] = r2;
0x000974        0940E008                 r2 = Null + M[0xffe008];
0x000975        D5430F02                 M[r1 + 3842] = r2;
0x000976        0940E009                 r2 = Null + M[0xffe009];
0x000977        D5430F03                 M[r1 + 3843] = r2;
0x000978        01330004                 r1 = r1 + 4;
0x000979        FD0000FF 1930672A        M[$message.long_message_size] = r1 + Null;
0x00097B        81020002                 Null = r0 AND 0x2;
0x00097C        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x00097D        0970E001                 r5 = Null + M[0xffe001];
0x00097E        E477002F                 r5 = r5 + 1;
0x00097F        1970E001                 M[0xffe001] = r5 + Null;
0x000980        DDF0086A                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x000981        09200F00                 r0 = Null + M[$message.long_message_data];
0x000982        8122FFFF                 r0 = r0 AND 0xffff;
0x000983        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000984        01C00032                 r10 = Null + 50;
0x000985        FD0000FF 09306728        r1 = Null + M[$message.last_addr];
0x000987        E5F00009                 do $M.message.received_service_routine.loop;
0x000988        E403002F                 Null = r1 + 1;
0x000989        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x00098A        D1430003                 r2 = M[r1 + 3];
0x00098B        8052004F                 r3 = r0 AND r2;
0x00098C        D1430001                 r2 = M[r1 + 1];
0x00098D        2005004F                 Null = r3 - r2;
0x00098E        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x00098F        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000990        E1F01835                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000991        0970E001                 r5 = Null + M[0xffe001];
0x000992        E477002F                 r5 = r5 + 1;
0x000993        1970E001                 M[0xffe001] = r5 + Null;
0x000994        DDF00856                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000995        D1D30002                 rLink = M[r1 + 2];
0x000996        47080000                 Null = Null + M0;
0x000997        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000998        0032000F                 r1 = r0 + Null;
0x000999        09400F01                 r2 = Null + M[0xf01];
0x00099A        01500F02                 r3 = Null + 3842;
0x00099B        0120FFFE                 r0 = Null + -2;
0x00099C        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x00099D        0930E006                 r1 = Null + M[0xffe006];
0x00099E        0940E007                 r2 = Null + M[0xffe007];
0x00099F        0950E008                 r3 = Null + M[0xffe008];
0x0009A0        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x0009A1        0970E001                 r5 = Null + M[0xffe001];
0x0009A2        E477002F                 r5 = r5 + 1;
0x0009A3        1970E001                 M[0xffe001] = r5 + Null;
0x0009A4        E00D000F                 call rLink;
0x0009A5        DDF00845                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x0009A6        F3D00000                 push rLink;
0x0009A7        F3E20000                 push FP;
0x0009A8        51800001                 M0 = Null + 1;
0x0009A9        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x0009AB        500000AF                 I0 = Null + r8;
0x0009AC        F2A02000                 push r8, r0 = M[I0,M0];
0x0009AD        D038002F                 r1 = M[r6 + r0];
0x0009AE        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x0009AF        D039002F                 r1 = M[r7 + r0];
0x0009B0        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x0009B1        D038006F                 r1 = M[r6 + r4];
0x0009B2        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x0009B3        D039006F                 r1 = M[r7 + r4];
0x0009B4        50F0003F                 L5 = Null + r1;
0x0009B5        FD0000FF 09306737        r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0009B7        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x0009B8        FD0000FF 19C06737        M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x0009BA        0005000F                 Null = r3 + Null;
0x0009BB        DD00002B                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x0009BC        016A0010                 r4 = r8 + 16;
0x0009BD        F3600000                 push r4;
0x0009BE        F3E60000                 pop FP;
0x0009BF        512A000B                 I2 = r8 + 11;
0x0009C0        51350005                 I3 = r3 + 5;
0x0009C1        D1950004                 r7 = M[r3 + 4];
0x0009C2        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x0009C3        D12A0005                 r0 = M[r8 + 5];
0x0009C4        F1000084                 pushm <r0, r5>;
0x0009C5        F1018020                 pushm <I5, L5>;
0x0009C6        5050002F                 I5 = Null + r0;
0x0009C7        50F0000F                 L5 = Null + Null;
0x0009C8        0070000F                 r5 = Null + Null;
0x0009C9        512A0007                 I2 = r8 + 7;
0x0009CA        E009000F                 call r7;
0x0009CB        50D0000F                 L1 = Null + Null;
0x0009CC        00C9000F                 r10 = r7 + Null;
0x0009CD        0040000F                 r2 = Null + Null;
0x0009CE        F1058020                 popm <I5, L5>;
0x0009CF        F1040084                 popm <r0, r5>;
0x0009D0        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x0009D1        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x0009D2        03000000                 Null = Null + Null;
0x0009D3        E002000F                 call r0;
0x0009D4        19902E8F                 M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x0009D5        F3A40000                 pop r8;
0x0009D6        50D0000F                 L1 = Null + Null;
0x0009D7        50F0000F                 L5 = Null + Null;
0x0009D8        F3000000                 push Null;
0x0009D9        F1AAFFFF                 B0 = M[SP + -0x1];
0x0009DA        F1BAFFFF                 B1 = M[SP + -0x1];
0x0009DB        F1CAFFFF                 B4 = M[SP + -0x1];
0x0009DC        F3D60000                 pop B5;
0x0009DD        FD0000FF 09306737        r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0009DF        D12AFFFE                 r0 = M[r8 + -2];
0x0009E0        E402002F                 Null = r0 + 1;
0x0009E1        00930000                 if EQ r7 = r1 + Null;
0x0009E2        FD0000FF 1990672E        M[$cbops.amount_to_use] = r7 + Null;
0x0009E4        F3E60000                 pop FP;
0x0009E5        DDF00805                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x0009E6        009C000F                 r7 = r10 + Null;
0x0009E7        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x0009E8        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x0009E9        93E40000                 rMAC = rMAC ASHIFT r2;
0x0009EA        93E70000                 rMAC = rMAC ASHIFT r5;
0x0009EB        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x0009EC        DDF0FFE9                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x0009ED        F3D00000                 push rLink;
0x0009EE        2103000C                 Null = r1 - 12;
0x0009EF        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x0009F0        D5532C4B                 M[r1 + 11339] = r3;
0x0009F1        FD0000FF D5435B84        M[r1 + -42108] = r2;
0x0009F3        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x0009F4        FD0000FF 09206725        r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x0009F6        E0020001                 if NE call r0;
0x0009F7        DDF007F3                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x0009F8        0023000F                 r0 = r1 + Null;
0x0009F9        D144FFFF                 r2 = M[r2 + -1];
0x0009FA        01300040                 r1 = Null + 64;
0x0009FB        8D440078                 r2 = r2 LSHIFT -8;
0x0009FC        8C43004F                 r2 = r1 LSHIFT r2;
0x0009FD        D54204E5                 M[r0 + 1253] = r2;
0x0009FE        E430002F                 r1 = Null + 1;
0x0009FF        0140000D                 r2 = Null + 13;
0x000A00        2105F000                 Null = r3 - -4096;
0x000A01        00340004                 if NEG r1 = r2 + Null;
0x000A02        F3200000                 push r0;
0x000A03        F3400000                 push r2;
0x000A04        01400062                 r2 = Null + 98;
0x000A05        65020007                 Null = 7 - r0;
0x000A06        00220044                 if NEG r0 = r0 + r2;
0x000A07        D532FE7B                 M[r0 + -389] = r1;
0x000A08        F3440000                 pop r2;
0x000A09        F3240000                 pop r0;
0x000A0A        0032000F                 r1 = r0 + Null;
0x000A0B        09202E85                 r0 = Null + M[$cbuffer.read_port_connect_address];
0x000A0C        E0020001                 if NE call r0;
0x000A0D        DDF007DD                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000A0E        D5532C4B                 M[r1 + 11339] = r3;
0x000A0F        FD0000FF D5435B84        M[r1 + -42108] = r2;
0x000A11        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000A12        FD0000FF 09206724        r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000A14        E0020001                 if NE call r0;
0x000A15        DDF007D5                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000A16        0023000F                 r0 = r1 + Null;
0x000A17        D144FFFF                 r2 = M[r2 + -1];
0x000A18        01300040                 r1 = Null + 64;
0x000A19        8D440078                 r2 = r2 LSHIFT -8;
0x000A1A        8C43004F                 r2 = r1 LSHIFT r2;
0x000A1B        D54204E5                 M[r0 + 1253] = r2;
0x000A1C        01300009                 r1 = Null + 9;
0x000A1D        01400005                 r2 = Null + 5;
0x000A1E        2105F000                 Null = r3 - -4096;
0x000A1F        00340004                 if NEG r1 = r2 + Null;
0x000A20        F3200000                 push r0;
0x000A21        F3400000                 push r2;
0x000A22        2122000C                 r0 = r0 - 12;
0x000A23        01400066                 r2 = Null + 102;
0x000A24        65020007                 Null = 7 - r0;
0x000A25        00220044                 if NEG r0 = r0 + r2;
0x000A26        D532FE73                 M[r0 + -397] = r1;
0x000A27        F3440000                 pop r2;
0x000A28        F3240000                 pop r0;
0x000A29        0032000F                 r1 = r0 + Null;
0x000A2A        09202E84                 r0 = Null + M[$cbuffer.write_port_connect_address];
0x000A2B        E0020001                 if NE call r0;
0x000A2C        DDF007BE                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000A2D        F3D00000                 push rLink;
0x000A2E        5F380000                 I3 = I3 + M0;
0x000A2F        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000A30        F3E20000                 push FP;
0x000A31        F3A60000                 pop B0;
0x000A32        F107000A                 FP = FP + 10;
0x000A33        F3E20000                 push FP;
0x000A34        F3C60000                 pop B4;
0x000A35        F007003F                 FP = FP + r1;
0x000A36        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000A37        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000A38        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000A39        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000A3A        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000A3B        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000A3C        9946000A                 r2 = r4 * 10 (int);
0x000A3D        F3210000                 push I2;
0x000A3E        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000A3F        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000A40        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000A41        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000A42        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000A43        51C0000A                 L0 = Null + 10;
0x000A44        9845007F                 r2 = r3 * r5 (int);
0x000A45        004400B4                 if NEG r2 = r2 + r9;
0x000A46        9434006F                 r1 = r2 * r4 (frac);
0x000A47        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x000A48        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000A49        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000A4A        5876003F                 I7 = I6 + r1;
0x000A4B        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000A4C        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A4D        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A4E        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A4F        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A50        7C7B007F                 I7 = M3 - I7;
0x000A51        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A52        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A53        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A54        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A55        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A56        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000A57        5823000F                 I2 = I3 + Null;
0x000A58        E002000F                 call r0;
0x000A59        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000A5A        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000A5B        2005006F                 Null = r3 - r4;
0x000A5C        2055005A                 if GE r3 = r3 - r3;
0x000A5D        9845007F                 r2 = r3 * r5 (int);
0x000A5E        004400B4                 if NEG r2 = r2 + r9;
0x000A5F        9434006F                 r1 = r2 * r4 (frac);
0x000A60        2007004F                 Null = r5 - r2;
0x000A61        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000A62        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000A63        5832000F                 I3 = I2 + Null;
0x000A64        F3250000                 pop I2;
0x000A65        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000A66        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000A67        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000A68        50E0000F                 L4 = Null + Null;
0x000A69        DDF00781                 jump $pop_rLink_and_rts;

 <$audio_proc.peq.process>
0x000A6A        F3D00000                 push rLink;
0x000A6B        D1290000                 r0 = M[r7 + 0];
0x000A6C        E1F00753                 call $frmbuffer.get_buffer;
0x000A6D        5040002F                 I4 = Null + r0;
0x000A6E        50E0003F                 L4 = Null + r1;
0x000A6F        0065000F                 r4 = r3 + Null;
0x000A70        D1290001                 r0 = M[r7 + 1];
0x000A71        E1F00777                 call $frmbuffer.set_frame_size;
0x000A72        E1F0074D                 call $frmbuffer.get_buffer;
0x000A73        5000002F                 I0 = Null + r0;
0x000A74        50C0003F                 L0 = Null + r1;
0x000A75        F3D40000                 pop rLink;

 <$audio_proc.peq.process_op>
0x000A76        51900001                 M1 = Null + 1;
0x000A77        51390003                 I3 = r7 + 3;
0x000A78        5180FFFF                 M0 = Null + -1;
0x000A79        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000A7A        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000A7B        F3200000                 push r0;
0x000A7C        F3D60000                 pop B5;
0x000A7D        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000A7E        F3200000                 push r0;
0x000A7F        F3B60000                 pop B1;
0x000A80        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000A81        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000A82        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000A83        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x000A84        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x000A85        21830002                 r6 = r1 - 2;
0x000A86        D1490002                 r2 = M[r7 + 2];
0x000A87        99440005                 r2 = r2 * 5 (int);
0x000A88        5B240000                 I2 = I2 + r2;
0x000A89        5F2A0000                 I2 = I2 + M2;
0x000A8A        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.peq.process.peq_block_loop>
0x000A8B        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000A8C        CE272A55                 rMAC = r0 * r5 (SS), r0 = M[I2,M2], r3 = M[I5,M1];
0x000A8D        9021458F                 r0 = rMAC ASHIFT r6, r2 = M[I1,M1];
0x000A8E        E5F00009                 do $M.audio_proc.peq.process.biquad_loop;
0x000A8F        CE544534                 rMAC = r3 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000A90        AE3445B5                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I1,M1], M[I5,M1] = r1;
0x000A91        AE2400A5                 rMAC = rMAC + r0 * r2 (SS), M[I5,M1] = r0;
0x000A92        02004535                 Null = Null + Null, r2 = M[I1,M1], r1 = M[I5,M1];
0x000A93        BE344534                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000A94        BE344955                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I2,M1], r3 = M[I5,M1];
0x000A95        0021000F                 r0 = rMAC + Null;
0x000A96        92244500                 r0 = r0 ASHIFT r2, r2 = M[I1,M1];

 <$M.audio_proc.peq.process.biquad_loop>
0x000A97        02000054                 Null = Null + Null, r3 = M[I5,M0];
0x000A98        020044B5                 Null = Null + Null, r2 = M[I1,M0], M[I5,M1] = r1;
0x000A99        91520002                 r3 = r0 ASHIFT 2;
0x000A9A        6669D1A5                 r4 = r4 - M1, M[I0,M1] = r3, M[I5,M1] = r0;
0x000A9B        DD10FFF0                 if NE jump $M.audio_proc.peq.process.peq_block_loop;
0x000A9C        50C0000F                 L0 = Null + Null;
0x000A9D        50E0000F                 L4 = Null + Null;
0x000A9E        50D0000F                 L1 = Null + Null;
0x000A9F        50F0000F                 L5 = Null + Null;
0x000AA0        F3000000                 push Null;
0x000AA1        F1BAFFFF                 B1 = M[SP + -0x1];
0x000AA2        F3D60000                 pop B5;
0x000AA3        DC0D000F                 rts;

 <$M.audio_proc.stream_gain.Process.func>
0x000AA4        F3D00000                 push rLink;
0x000AA5        D1290000                 r0 = M[r7 + 0];
0x000AA6        E1F00719                 call $frmbuffer.get_buffer;
0x000AA7        5000002F                 I0 = Null + r0;
0x000AA8        50C0003F                 L0 = Null + r1;
0x000AA9        00C5000F                 r10 = r3 + Null;
0x000AAA        D1290001                 r0 = M[r7 + 1];
0x000AAB        E1F0073D                 call $frmbuffer.set_frame_size;
0x000AAC        E1F00713                 call $frmbuffer.get_buffer;
0x000AAD        5040002F                 I4 = Null + r0;
0x000AAE        50E0003F                 L4 = Null + r1;
0x000AAF        F3D40000                 pop rLink;
0x000AB0        D1390002                 r1 = M[r7 + 2];
0x000AB1        D1490003                 r2 = M[r7 + 3];
0x000AB2        D3300000                 r1 = M[r1 + Null];
0x000AB3        D3400000                 r2 = M[r2 + Null];
0x000AB4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000AB5        210A0000                 Null = r8 - 0;
0x000AB6        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000AB7        D15A0002                 r3 = M[r8 + 2];
0x000AB8        D16A0003                 r4 = M[r8 + 3];
0x000AB9        2003005F                 Null = r1 - r3;
0x000ABA        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000ABB        2004006F                 Null = r2 - r4;
0x000ABC        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000ABD        D17A0001                 r5 = M[r8 + 1];
0x000ABE        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000ABF        D18A0000                 r6 = M[r8 + 0];
0x000AC0        03780000                 r5 = r5 + r6;
0x000AC1        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000AC3        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000AC4        CC12003F                 rMAC = r0 * r1 (SS);
0x000AC5        9081004F                 r6 = rMAC ASHIFT r2;
0x000AC6        97870000                 r6 = r6 * r5 (frac);
0x000AC7        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000AC9        CC12005F                 rMAC = r0 * r3 (SS);
0x000ACA        9021006F                 r0 = rMAC ASHIFT r4;
0x000ACB        97290000                 r0 = r0 * r7 (frac);
0x000ACC        03280000                 r0 = r0 + r6;
0x000ACD        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000ACE        D57A0001                 M[r8 + 1] = r5;
0x000ACF        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000AD0        D53A0002                 M[r8 + 2] = r1;
0x000AD1        D54A0003                 M[r8 + 3] = r2;
0x000AD2        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000AD3        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000AD4        CC12003F                 rMAC = r0 * r1 (SS);
0x000AD5        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000AD6        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000AD7        50C0000F                 L0 = Null + Null;
0x000AD8        50E0000F                 L4 = Null + Null;
0x000AD9        DC0D000F                 rts;

 <$cmpd100.applygain>
0x000ADA        D12A0000                 r0 = M[r8 + 0];
0x000ADB        D13A0001                 r1 = M[r8 + 1];
0x000ADC        83320000                 r1 = r1 AND r0;
0x000ADD        DC0D0001                 if NE rts;
0x000ADE        F3D00000                 push rLink;
0x000ADF        D12A0002                 r0 = M[r8 + 2];
0x000AE0        E1F006DF                 call $frmbuffer.get_buffer;
0x000AE1        5000002F                 I0 = Null + r0;
0x000AE2        50C0003F                 L0 = Null + r1;
0x000AE3        D12A0003                 r0 = M[r8 + 3];
0x000AE4        E1F006DB                 call $frmbuffer.get_buffer;
0x000AE5        5040002F                 I4 = Null + r0;
0x000AE6        50E0003F                 L4 = Null + r1;
0x000AE7        00C5000F                 r10 = r3 + Null;
0x000AE8        D12A0004                 r0 = M[r8 + 4];
0x000AE9        E1F006FF                 call $frmbuffer.set_frame_size;
0x000AEA        E1F006D5                 call $frmbuffer.get_buffer;
0x000AEB        5010002F                 I1 = Null + r0;
0x000AEC        50D0003F                 L1 = Null + r1;
0x000AED        D12A0005                 r0 = M[r8 + 5];
0x000AEE        005C000F                 r3 = r10 + Null;
0x000AEF        E1F006F9                 call $frmbuffer.set_frame_size;
0x000AF0        E1F006CF                 call $frmbuffer.get_buffer;
0x000AF1        5050002F                 I5 = Null + r0;
0x000AF2        50F0003F                 L5 = Null + r1;
0x000AF3        D14A0006                 r2 = M[r8 + 6];
0x000AF4        D15A0007                 r3 = M[r8 + 7];
0x000AF5        D025000F                 r0 = M[r3 + Null];
0x000AF6        91220004                 r0 = r0 ASHIFT 4;
0x000AF7        FD000003 21220000        r0 = r0 - 196608;
0x000AF9        E1F005D8                 call $math.pow2_table;
0x000AFA        FD0000FF 1920673C        M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000AFC        9462004F                 r4 = r0 * r2 (frac);
0x000AFD        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000AFE        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000AFF        CC12006F                 rMAC = r0 * r4 (SS);
0x000B00        91210007                 r0 = rMAC ASHIFT 7;
0x000B01        9413006F                 rMAC = r1 * r4 (frac);
0x000B02        91310007                 r1 = rMAC ASHIFT 7;
0x000B03        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000B04        51C00000                 L0 = Null + 0;
0x000B05        51D00000                 L1 = Null + 0;
0x000B06        51E00000                 L4 = Null + 0;
0x000B07        51F00000                 L5 = Null + 0;
0x000B08        DDF006E2                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x000B09        F3D00000                 push rLink;
0x000B0A        FD0000FF 01A06622        r8 = Null + -39390;
0x000B0C        FD0000FF 019065FF        r7 = Null + -39425;
0x000B0E        09002E53                 Null = Null + M[$stereo_tone];
0x000B0F        00A90001                 if NE r8 = r7 + Null;
0x000B10        E1F0FD47                 call $cbops.copy;
0x000B11        E1F002DE                 call $detect_end_of_aux_stream;
0x000B12        01302DC0                 r1 = Null + 11712;
0x000B13        09402E5A                 r2 = Null + M[$tmr_period_tone_copy];
0x000B14        01500B09                 r3 = Null + 2825;
0x000B15        E1F006C8                 call $timer.schedule_event_in_period;
0x000B16        DDF006D4                 jump $pop_rLink_and_rts;

 <$tone_copy_extra>
0x000B17        F3D00000                 push rLink;
0x000B18        09201FFC                 r0 = Null + M[0x1ffc];
0x000B19        FD0000FF 09305BD8        r1 = Null + M[0xff5bd8];
0x000B1B        FD0000FF 090066FC        Null = Null + M[$mono_stereo_mode];
0x000B1D        00230000                 if EQ r0 = r1 + Null;
0x000B1E        0002000F                 Null = r0 + Null;
0x000B1F        DD0006CB                 if EQ jump $pop_rLink_and_rts;
0x000B20        012000AD                 r0 = Null + 173;
0x000B21        E1F0066E                 call $cbuffer.calc_amount_data;
0x000B22        FD0000FF 094066F2        r2 = Null + M[$current_tone_sampling_rate];
0x000B24        FD000000 CD1405DC        rMAC = r2 * 0.00017881393432617188 (SS);
0x000B26        9141000D                 r2 = rMAC ASHIFT 13;
0x000B27        FD000000 95443255        r2 = r2 * 0.0015360116958618164 (frac);
0x000B29        2002004F                 Null = r0 - r2;
0x000B2A        DD5006C0                 if POS jump $pop_rLink_and_rts;
0x000B2B        FD0000FF 01A06622        r8 = Null + -39390;
0x000B2D        FD0000FF 019065FF        r7 = Null + -39425;
0x000B2F        09002E53                 Null = Null + M[$stereo_tone];
0x000B30        00A90001                 if NE r8 = r7 + Null;
0x000B31        E1F0FD26                 call $cbops.copy;
0x000B32        DDF006B8                 jump $pop_rLink_and_rts;

 <$media_packet_boundary_detection>
0x000B33        F3D00000                 push rLink;
0x000B34        FD0000FF 012066D1        r0 = Null + -39215;
0x000B36        E1F00659                 call $cbuffer.calc_amount_data;
0x000B37        21020030                 Null = r0 - 48;
0x000B38        DD000026                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000B39        FD0000FF 012066B0        r0 = Null + -39248;
0x000B3B        E1F00644                 call $cbuffer.calc_amount_space;
0x000B3C        0002000F                 Null = r0 + Null;
0x000B3D        DD000021                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000B3E        FD0000FF 012066B0        r0 = Null + -39248;
0x000B40        E1F0067A                 call $cbuffer.get_write_address_and_size;
0x000B41        09602E7F                 r4 = Null + M[$codec_packets_info_last_write_address];
0x000B42        2002006F                 Null = r0 - r4;
0x000B43        DD00001B                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000B44        0940FE71                 r2 = Null + M[0xfffe71];
0x000B45        FD0000FF 2954671F        r3 = r2 - M[$codec_packets_info_last_timer_time];
0x000B47        29052E80                 Null = r3 - M[$codec_packets_info_timer_gap];
0x000B48        DD900016                 if LS jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000B49        FD0000FF 1940671F        M[$codec_packets_info_last_timer_time] = r2 + Null;
0x000B4B        FD0000FF 012066B0        r0 = Null + -39248;
0x000B4D        E1F0066D                 call $cbuffer.get_write_address_and_size;
0x000B4E        5000006F                 I0 = Null + r4;
0x000B4F        50C0003F                 L0 = Null + r1;
0x000B50        03006100                 Null = Null + Null, r4 = M[I0,1];
0x000B51        4460000F                 r4 = Null + I0;
0x000B52        FD0000FF 012066D1        r0 = Null + -39215;
0x000B54        E1F00666                 call $cbuffer.get_write_address_and_size;
0x000B55        5000002F                 I0 = Null + r0;
0x000B56        50C0003F                 L0 = Null + r1;
0x000B57        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x000B58        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x000B59        51C00000                 L0 = Null + 0;
0x000B5A        FD0000FF 012066D1        r0 = Null + -39215;
0x000B5C        4430000F                 r1 = Null + I0;
0x000B5D        E1F0066B                 call $cbuffer.set_write_address;

 <$M.media_packet_boundary_detection.done_with_latency_reporting>
0x000B5E        DDF0068C                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm_24>
0x000B5F        F3D00000                 push rLink;
0x000B60        0082000F                 r6 = r0 + Null;
0x000B61        81730001                 r5 = r1 AND 0x1;
0x000B62        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000B63        0028000F                 r0 = r6 + Null;
0x000B64        99360003                 r1 = r4 * 3 (int);
0x000B65        F3300000                 push r1;
0x000B66        E1F0063A                 call $flash.map_page_into_dm;
0x000B67        5010002F                 I1 = Null + r0;
0x000B68        00C6000F                 r10 = r4 + Null;
0x000B69        F3240000                 pop r0;
0x000B6A        2002003F                 Null = r0 - r1;
0x000B6B        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000B6C        99330002                 r1 = r1 * 2 (int);
0x000B6D        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000B6F        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000B70        236C0000                 r4 = r4 - r10;
0x000B71        992C0003                 r0 = r10 * 3 (int);
0x000B72        03820000                 r6 = r6 + r0;
0x000B73        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x000B74        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000B75        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000B76        8D220008                 r0 = r0 LSHIFT 8;
0x000B77        8D530078                 r3 = r1 LSHIFT -8;
0x000B78        815500FF                 r3 = r3 AND 0xff;
0x000B79        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000B7A        8122FFFF                 r0 = r0 AND 0xffff;
0x000B7B        8D330010                 r1 = r1 LSHIFT 16;
0x000B7C        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000B7D        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000B7E        0006000F                 Null = r4 + Null;
0x000B7F        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000B80        0007000F                 Null = r5 + Null;
0x000B81        DD000669                 if EQ jump $pop_rLink_and_rts;
0x000B82        0028000F                 r0 = r6 + Null;
0x000B83        01300002                 r1 = Null + 2;
0x000B84        E1F0061C                 call $flash.map_page_into_dm;
0x000B85        5010002F                 I1 = Null + r0;
0x000B86        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000B87        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000B88        8D220008                 r0 = r0 LSHIFT 8;
0x000B89        8D330078                 r1 = r1 LSHIFT -8;
0x000B8A        813300FF                 r1 = r1 AND 0xff;
0x000B8B        8423002F                 r0 = r1 OR r0;
0x000B8C        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x000B8D        DDF0065D                 jump $pop_rLink_and_rts;

 <$latency.calc_pcm_latency>
0x000B8E        F3D00000                 push rLink;
0x000B8F        E1F00608                 call $block_interrupts;
0x000B90        D1A90000                 r8 = M[r7 + 0];
0x000B91        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000B92        D02A000F                 r0 = M[r8 + Null];
0x000B93        DD000010                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000B94        D802000F                 Null = SIGNDET r0;
0x000B95        DD10000A                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000B96        0900FE33                 Null = Null + M[0xfffe33];
0x000B97        8132001F                 r1 = r0 AND 0x1f;
0x000B98        2103000C                 Null = r1 - 12;
0x000B99        DD400006                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000B9A        E1F005E5                 call $cbuffer.calc_amount_space;
0x000B9B        E422002F                 r0 = r0 + 1;
0x000B9C        9144007F                 r2 = r2 ASHIFT -1;
0x000B9D        2024002F                 r0 = r2 - r0;
0x000B9E        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000B9F        E1F005F0                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000BA0        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000BA1        01AA0003                 r8 = r8 + 3;
0x000BA2        DDF0FFF0                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000BA3        D1A90001                 r8 = M[r7 + 1];
0x000BA4        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000BA5        D02A000F                 r0 = M[r8 + Null];
0x000BA6        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000BA7        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000BA8        01AA0003                 r8 = r8 + 3;
0x000BA9        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000BAA        E1F005C1                 call $interrupt.unblock;
0x000BAB        DDF0063F                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000BAC        D13A0001                 r1 = M[r8 + 1];
0x000BAD        D3300000                 r1 = M[r1 + Null];
0x000BAE        D14A0002                 r2 = M[r8 + 2];
0x000BAF        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000BB0        D3400000                 r2 = M[r2 + Null];
0x000BB1        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000BB2        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000BB3        9453004F                 r3 = r1 * r2 (frac);
0x000BB4        9445004F                 r2 = r3 * r2 (frac);
0x000BB5        0053005F                 r3 = r1 + r3;
0x000BB6        0035004F                 r1 = r3 + r2;
0x000BB7        CC12003F                 rMAC = r0 * r1 (SS);
0x000BB8        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000BB9        8D310000                 r1 = rMAC LSHIFT 0;
0x000BBA        03830000                 r6 = r6 + r1;
0x000BBB        DC0D000F                 rts;

 <$M.mips_profile.mainstart>
0x000BBC        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BBD        D52A0001                 M[r8 + 1] = r0;
0x000BBE        D50A0005                 M[r8 + 5] = Null;
0x000BBF        D12A0000                 r0 = M[r8 + 0];
0x000BC0        DD000002                 if EQ jump $M.mips_profile.init;
0x000BC1        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000BC2        0920FE71                 r0 = Null + M[0xfffe71];
0x000BC3        D52A0009                 M[r8 + 9] = r0;
0x000BC4        E420002F                 r0 = Null + 1;
0x000BC5        D52A0000                 M[r8 + 0] = r0;
0x000BC6        D50A0002                 M[r8 + 2] = Null;
0x000BC7        D50A0004                 M[r8 + 4] = Null;
0x000BC8        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x000BC9        D12A0000                 r0 = M[r8 + 0];
0x000BCA        DC0D0000                 if EQ rts;
0x000BCB        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BCC        D13A0001                 r1 = M[r8 + 1];
0x000BCD        23230000                 r0 = r0 - r1;
0x000BCE        D13A0005                 r1 = M[r8 + 5];
0x000BCF        23230000                 r0 = r0 - r1;
0x000BD0        D13A0002                 r1 = M[r8 + 2];
0x000BD1        03230000                 r0 = r0 + r1;
0x000BD2        D52A0002                 M[r8 + 2] = r0;
0x000BD3        0920FE71                 r0 = Null + M[0xfffe71];
0x000BD4        D13A0009                 r1 = M[r8 + 9];
0x000BD5        23230000                 r0 = r0 - r1;
0x000BD6        09302E65                 r1 = Null + M[$M.mips_profile.evalinterval_us];
0x000BD7        2002003F                 Null = r0 - r1;
0x000BD8        DC0D0004                 if NEG rts;
0x000BD9        D12A0002                 r0 = M[r8 + 2];
0x000BDA        D52A0006                 M[r8 + 6] = r0;
0x000BDB        D13A0004                 r1 = M[r8 + 4];
0x000BDC        D53A0007                 M[r8 + 7] = r1;
0x000BDD        03230000                 r0 = r0 + r1;
0x000BDE        D52A0008                 M[r8 + 8] = r0;
0x000BDF        D50A0000                 M[r8 + 0] = Null;
0x000BE0        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000BE1        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BE2        D52A0003                 M[r8 + 3] = r0;
0x000BE3        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x000BE4        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BE5        D13A0003                 r1 = M[r8 + 3];
0x000BE6        23230000                 r0 = r0 - r1;
0x000BE7        D13A0004                 r1 = M[r8 + 4];
0x000BE8        0032003F                 r1 = r0 + r1;
0x000BE9        D53A0004                 M[r8 + 4] = r1;
0x000BEA        D13A0005                 r1 = M[r8 + 5];
0x000BEB        0032003F                 r1 = r0 + r1;
0x000BEC        D53A0005                 M[r8 + 5] = r1;
0x000BED        DC0D000F                 rts;

 <$wall_clock.message_handler>
0x000BEE        F3D00000                 push rLink;
0x000BEF        E455002F                 r3 = r3 + 1;
0x000BF0        01C00007                 r10 = Null + 7;
0x000BF1        FD0000FF 0980672D        r6 = Null + M[$wall_clock.last_addr];
0x000BF3        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000BF4        E408002F                 Null = r6 + 1;
0x000BF5        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000BF6        D1280001                 r0 = M[r6 + 1];
0x000BF7        D135FFFF                 r1 = M[r3 + -1];
0x000BF8        813300FF                 r1 = r1 AND 0xff;
0x000BF9        2002003F                 Null = r0 - r1;
0x000BFA        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x000BFB        D1280002                 r0 = M[r6 + 2];
0x000BFC        2802005F                 Null = r0 - M[r3];
0x000BFD        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000BFE        D1280003                 r0 = M[r6 + 3];
0x000BFF        D1350001                 r1 = M[r3 + 1];
0x000C00        2002003F                 Null = r0 - r1;
0x000C01        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C02        D1280004                 r0 = M[r6 + 4];
0x000C03        D1350002                 r1 = M[r3 + 2];
0x000C04        2002003F                 Null = r0 - r1;
0x000C05        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000C06        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000C07        E1F015BE                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000C08        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000C09        D1350003                 r1 = M[r3 + 3];
0x000C0A        D1450004                 r2 = M[r3 + 4];
0x000C0B        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000C0C        811100FF                 rMAC = rMAC AND 0xff;
0x000C0D        991104E2                 rMAC = rMAC * 1250 (int);
0x000C0E        8D330010                 r1 = r1 LSHIFT 16;
0x000C0F        8144FFFF                 r2 = r2 AND 0xffff;
0x000C10        03430000                 r2 = r2 + r1;
0x000C11        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000C13        8D410016                 r2 = rMAC LSHIFT 22;
0x000C14        D1650006                 r4 = M[r3 + 6];
0x000C15        D1550005                 r3 = M[r3 + 5];
0x000C16        8D550010                 r3 = r3 LSHIFT 16;
0x000C17        8166FFFF                 r4 = r4 AND 0xffff;
0x000C18        03650000                 r4 = r4 + r3;
0x000C19        23460000                 r2 = r2 - r4;
0x000C1A        D5480005                 M[r6 + 5] = r2;
0x000C1B        D1280006                 r0 = M[r6 + 6];
0x000C1C        E0020001                 if NE call r0;
0x000C1D        DDF005CD                 jump $pop_rLink_and_rts;

 <$M.report_latency_to_vm.init>
0x000C1E        F3D00000                 push rLink;
0x000C1F        FD0000FF 09406722        r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000C21        01500C24                 r3 = Null + 3108;
0x000C22        E1F005BE                 call $timer.schedule_event_in;
0x000C23        DDF005C7                 jump $pop_rLink_and_rts;

 <$report_latency_to_vm>
0x000C24        F3D00000                 push rLink;
0x000C25        01401023                 r2 = Null + 4131;
0x000C26        FD0000FF 012035F2        r0 = Null + -51726;
0x000C28        D1520009                 r3 = M[r0 + 9];
0x000C29        FD0000FF 09206723        r0 = Null + M[$M.configure_latency_reporting.average_latency];
0x000C2B        09A02E81                 r8 = Null + M[$alpha];
0x000C2C        FD00007F 653AFFFF        r1 = 8388607 - r8;
0x000C2E        CC1A005F                 rMAC = r8 * r3 (SS);
0x000C2F        AC13002F                 rMAC = rMAC + r1 * r0 (SS);
0x000C30        0051000F                 r3 = rMAC + Null;
0x000C31        FD0000FF 19506723        M[$M.configure_latency_reporting.average_latency] = r3 + Null;
0x000C33        FD0000FF 09606721        r4 = Null + M[$M.report_latency_to_vm.reported_latency];
0x000C35        2065006F                 r4 = r3 - r4;
0x000C36        20600064                 if NEG r4 = Null - r4;
0x000C37        29062E83                 Null = r4 - M[$M.configure_latency_reporting.min_change];
0x000C38        DD400008                 if NEG jump $M.report_latency_to_vm.do_not_send_msg;
0x000C39        FD0000FF 19506721        M[$M.report_latency_to_vm.reported_latency] = r3 + Null;
0x000C3B        FD000001 955547AE        r3 = r3 * 0.0099999904632568359 (frac);
0x000C3D        21257FFF                 r0 = r3 - 32767;
0x000C3E        20550025                 if POS r3 = r3 - r0;
0x000C3F        E1F003A4                 call $message.send_short;

 <$M.report_latency_to_vm.do_not_send_msg>
0x000C40        FD0000FF 01306694        r1 = Null + -39276;
0x000C42        FD0000FF 09406722        r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000C44        01500C24                 r3 = Null + 3108;
0x000C45        E1F00598                 call $timer.schedule_event_in_period;
0x000C46        DDF005A4                 jump $pop_rLink_and_rts;

 <$audio_out_copy_handler>
0x000C47        F3D00000                 push rLink;
0x000C48        FD0000FF 09206701        r0 = Null + M[$music_example.sync_flag_ptr];
0x000C4A        1820000F                 M[r0] = Null + Null;
0x000C4B        FD000080 0120000D        r0 = Null + -8388595;
0x000C4D        E440002F                 r2 = Null + 1;
0x000C4E        E1F00561                 call $cbuffer.is_it_enabled;
0x000C4F        00400000                 if EQ r2 = Null + Null;
0x000C50        FD0000FF 194066FC        M[$mono_stereo_mode] = r2 + Null;
0x000C52        01A02C87                 r8 = Null + 11399;
0x000C53        FD0000FF 01905BE9        r7 = Null + -42007;
0x000C55        0004000F                 Null = r2 + Null;
0x000C56        00A90000                 if EQ r8 = r7 + Null;
0x000C57        FD0000FF 19A066F7        M[$latency_calc_current_warp] = r8 + Null;
0x000C59        FD0000FF 01A034F9        r8 = Null + -51975;
0x000C5B        01902D8F                 r7 = Null + 11663;
0x000C5C        FD0000FF 090066FC        Null = Null + M[$mono_stereo_mode];
0x000C5E        00A90000                 if EQ r8 = r7 + Null;
0x000C5F        E1F0FBF8                 call $cbops.copy;
0x000C60        E1F0FEB7                 call $tone_copy_extra;
0x000C61        09A02E5C                 r8 = Null + M[$stereo_copy_struc_ptr];
0x000C62        FD0000FF 099066FB        r7 = Null + M[$mono_copy_struc_ptr];
0x000C64        FD0000FF 090066FC        Null = Null + M[$mono_stereo_mode];
0x000C66        00A90000                 if EQ r8 = r7 + Null;
0x000C67        E1F00D62                 call $cbops.dac_av_copy;
0x000C68        FD0000FF 0130664C        r1 = Null + -39348;
0x000C6A        014005DC                 r2 = Null + 1500;
0x000C6B        01500C47                 r3 = Null + 3143;
0x000C6C        E1F00571                 call $timer.schedule_event_in_period;
0x000C6D        DDF0057D                 jump $pop_rLink_and_rts;

 <$message.send_long>
0x000C6E        F3D00000                 push rLink;
0x000C6F        E1F00528                 call $block_interrupts;
0x000C70        0140FFFE                 r2 = Null + -2;
0x000C71        01C60005                 r10 = r4 + 5;
0x000C72        8DCC007E                 r10 = r10 LSHIFT -2;
0x000C73        FD0000FF 09306729        r1 = Null + M[$message.queue_write_ptr];
0x000C75        8580FFF1                 r6 = Null OR 0xfff1;
0x000C76        E5F0001B                 do $M.message.send_long.long_message_loop;
0x000C77        01230005                 r0 = r1 + 5;
0x000C78        2102006E                 Null = r0 - 110;
0x000C79        00200000                 if EQ r0 = Null + Null;
0x000C7A        29022E89                 Null = r0 - M[$message.queue_read_ptr];
0x000C7B        DD000019                 if EQ jump $M.message.send_long.all_done;
0x000C7C        E40C003F                 Null = r10 - 1;
0x000C7D        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x000C7E        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x000C7F        D583075A                 M[r1 + 1882] = r6;
0x000C80        81080001                 Null = r6 AND 0x1;
0x000C81        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x000C82        E488003F                 r6 = r6 - 1;
0x000C83        D553075B                 M[r1 + 1883] = r3;
0x000C84        D563075C                 M[r1 + 1884] = r4;
0x000C85        21770002                 r5 = r5 - 2;
0x000C86        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x000C87        D047000F                 r2 = M[r5 + Null];
0x000C88        D543075B                 M[r1 + 1883] = r2;
0x000C89        D1470001                 r2 = M[r5 + 1];
0x000C8A        D543075C                 M[r1 + 1884] = r2;

 <$M.message.send_long.last_two_words>
0x000C8B        D1470002                 r2 = M[r5 + 2];
0x000C8C        D543075D                 M[r1 + 1885] = r2;
0x000C8D        D1470003                 r2 = M[r5 + 3];
0x000C8E        D543075E                 M[r1 + 1886] = r2;
0x000C8F        01770004                 r5 = r5 + 4;
0x000C90        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x000C91        FD0000FF 19206729        M[$message.queue_write_ptr] = r0 + Null;
0x000C93        E1F000F2                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x000C94        E1F004D7                 call $interrupt.unblock;
0x000C95        DDF00555                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x000C96        59330002                 I3 = I3 + 2;
0x000C97        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x000C98        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000C99        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x000C9A        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000C9B        70A0006F                 M2 = Null - r4;
0x000C9C        99460006                 r2 = r4 * 6 (int);
0x000C9D        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000C9E        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000C9F        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000CA0        5000002F                 I0 = Null + r0;
0x000CA1        51C00006                 L0 = Null + 6;
0x000CA2        F3E20000                 push FP;
0x000CA3        F3A60000                 pop B0;
0x000CA4        F1070006                 FP = FP + 6;
0x000CA5        9845007F                 r2 = r3 * r5 (int);
0x000CA6        004400B4                 if NEG r2 = r2 + r9;
0x000CA7        9434006F                 r1 = r2 * r4 (frac);
0x000CA8        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x000CA9        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000CAA        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x000CAB        5876003F                 I7 = I6 + r1;
0x000CAC        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000CAD        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CAE        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CAF        7C7B007F                 I7 = M3 - I7;
0x000CB0        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CB1        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CB2        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CB3        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000CB4        903100AF                 r1 = rMAC ASHIFT r8;
0x000CB5        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000CB6        2005006F                 Null = r3 - r4;
0x000CB7        2055005A                 if GE r3 = r3 - r3;
0x000CB8        9845007F                 r2 = r3 * r5 (int);
0x000CB9        004400B4                 if NEG r2 = r2 + r9;
0x000CBA        9434006F                 r1 = r2 * r4 (frac);
0x000CBB        2007004F                 Null = r5 - r2;
0x000CBC        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000CBD        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000CBE        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000CBF        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000CC0        5F280000                 I2 = I2 + M0;
0x000CC1        DC0D000F                 rts;

 <$set_tone_rate_from_vm>
0x000CC2        8133FFFF                 r1 = r1 AND 0xffff;
0x000CC3        01100FA0                 rMAC = Null + 4000;
0x000CC4        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x000CC6        D9030000                 Div = rMAC / r1;
0x000CC7        FD0000FF 193066F2        M[$current_tone_sampling_rate] = r1 + Null;
0x000CC9        01200003                 r0 = Null + 3;
0x000CCA        81040002                 Null = r2 AND 0x2;
0x000CCB        00200001                 if NE r0 = Null + Null;
0x000CCC        01220008                 r0 = r0 + 8;
0x000CCD        19202DA2                 M[0x2da2] = r0 + Null;
0x000CCE        19202D7C                 M[0x2d7c] = r0 + Null;
0x000CCF        D9500001                 r3 = DivResult;
0x000CD0        81240001                 r0 = r2 AND 0x1;
0x000CD1        00550050                 if EQ r3 = r3 + r3;
0x000CD2        19502E5A                 M[$tmr_period_tone_copy] = r3 + Null;
0x000CD3        19202E53                 M[$stereo_tone] = r0 + Null;
0x000CD4        DD000006                 if EQ jump $M.set_tone_rate_from_vm.mono_tone;

 <$M.set_tone_rate_from_vm.stereo_tone>
0x000CD5        E420003F                 r0 = Null - 1;
0x000CD6        09301FF4                 r1 = Null + M[0x1ff4];
0x000CD7        9143007F                 r2 = r1 ASHIFT -1;
0x000CD8        0054000F                 r3 = r2 + Null;
0x000CD9        DDF00005                 jump $M.set_tone_rate_from_vm.set_op;

 <$M.set_tone_rate_from_vm.mono_tone>
0x000CDA        E420002F                 r0 = Null + 1;
0x000CDB        01300000                 r1 = Null + 0;
0x000CDC        09401FF4                 r2 = Null + M[0x1ff4];
0x000CDD        01500000                 r3 = Null + 0;

 <$M.set_tone_rate_from_vm.set_op>
0x000CDE        19201FEE                 M[0x1fee] = r0 + Null;
0x000CDF        FD0000FF 19303FF5        M[0xff3ff5] = r1 + Null;
0x000CE1        FD0000FF 19405BD0        M[0xff5bd0] = r2 + Null;
0x000CE3        19502C96                 M[0x2c96] = r3 + Null;
0x000CE4        092000AF                 r0 = Null + M[0xaf];
0x000CE5        192000AE                 M[0xae] = r0 + Null;
0x000CE6        FD0000FF 092066BB        r0 = Null + M[0xff66bb];
0x000CE8        FD0000FF 192066BA        M[0xff66ba] = r0 + Null;
0x000CEA        E420002F                 r0 = Null + 1;
0x000CEB        19202E54                 M[$aux_input_stream_available] = r0 + Null;
0x000CEC        DC0D000F                 rts;

 <$con_in_copy_handler>
0x000CED        F3D00000                 push rLink;
0x000CEE        FD0000FF 092066B2        r0 = Null + M[0xff66b2];
0x000CF0        19202E7F                 M[$codec_packets_info_last_write_address] = r0 + Null;
0x000CF1        E1F0F6ED                 call $sra_tagtimes;
0x000CF2        092007FF                 r0 = Null + M[$app_config.io];
0x000CF3        21020005                 Null = r0 - 5;
0x000CF4        DD100005                 if NE jump $M.con_in_copy_handler.skip_usb_copy;
0x000CF5        01A004C5                 r8 = Null + 1221;
0x000CF6        0190064B                 r7 = Null + 1611;
0x000CF7        E1F0105D                 call $run_usb_state_mc;
0x000CF8        DDF0000D                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_usb_copy>
0x000CF9        21020008                 Null = r0 - 8;
0x000CFA        DD100004                 if NE jump $M.con_in_copy_handler.skip_analogue_copy;
0x000CFB        01A004D7                 r8 = Null + 1239;
0x000CFC        E1F0FB5B                 call $cbops.copy;
0x000CFD        DDF00008                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_analogue_copy>
0x000CFE        01A02D99                 r8 = Null + 11673;
0x000CFF        E1F0FB58                 call $cbops.copy;

 <$M.con_in_copy_handler.input_read_done>
0x000D00        FD0000FF 012066B0        r0 = Null + -39248;
0x000D02        E1F0048D                 call $cbuffer.calc_amount_data;
0x000D03        FD0000FF 192066FD        M[$codec_level] = r0 + Null;

 <$M.con_in_copy_handler.copy_done>
0x000D05        09002E82                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x000D06        DD000002                 if EQ jump $M.con_in_copy_handler.skip_packet_detection;
0x000D07        E1F0FE2C                 call $media_packet_boundary_detection;

 <$M.con_in_copy_handler.skip_packet_detection>
0x000D08        01302DBC                 r1 = Null + 11708;
0x000D09        FD0000FF 094066F9        r2 = Null + M[$tmr_period_con_copy];
0x000D0B        01500CED                 r3 = Null + 3309;
0x000D0C        E1F004D1                 call $timer.schedule_event_in_period;
0x000D0D        DDF004DD                 jump $pop_rLink_and_rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000D0E        8132001F                 r1 = r0 AND 0x1f;
0x000D0F        2133000C                 r1 = r1 - 12;
0x000D10        19402E51                 M[$cbuffer.tmp] = r2 + Null;
0x000D11        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000D13        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000D14        19502E52                 M[0x2e52] = r3 + Null;
0x000D15        01400066                 r2 = Null + 102;
0x000D16        65030007                 Null = 7 - r1;
0x000D17        00330044                 if NEG r1 = r1 + r2;
0x000D18        D153FE73                 r3 = M[r1 + -397];
0x000D19        FD000030 81420000        r2 = r0 AND 0x300000;
0x000D1B        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000D1C        8155FFFB                 r3 = r3 AND 0xfffb;
0x000D1D        8D44006B                 r2 = r2 LSHIFT -21;
0x000D1E        8D440002                 r2 = r2 LSHIFT 2;
0x000D1F        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000D20        FD000003 81428000        r2 = r0 AND 0x38000;
0x000D22        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000D23        8155FFFC                 r3 = r3 AND 0xfffc;
0x000D24        8D440070                 r2 = r2 LSHIFT -16;
0x000D25        8D440000                 r2 = r2 LSHIFT 0;
0x000D26        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000D27        81426000                 r2 = r0 AND 0x6000;
0x000D28        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000D29        8155FFF7                 r3 = r3 AND 0xfff7;
0x000D2A        8D440072                 r2 = r2 LSHIFT -14;
0x000D2B        8D440003                 r2 = r2 LSHIFT 3;
0x000D2C        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000D2D        D553FE73                 M[r1 + -397] = r3;
0x000D2E        09502E52                 r3 = Null + M[0x2e52];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000D2F        8132001F                 r1 = r0 AND 0x1f;
0x000D30        2133000C                 r1 = r1 - 12;
0x000D31        01400009                 r2 = Null + 9;
0x000D32        65030007                 Null = 7 - r1;
0x000D33        00330044                 if NEG r1 = r1 + r2;
0x000D34        09402E51                 r2 = Null + M[$cbuffer.tmp];
0x000D35        0123FE23                 r0 = r1 + -477;
0x000D36        E430002F                 r1 = Null + 1;
0x000D37        DC0D000F                 rts;

 <$audio_proc.delay.process>
0x000D38        F3D00000                 push rLink;
0x000D39        D12A0000                 r0 = M[r8 + 0];
0x000D3A        E1F00485                 call $frmbuffer.get_buffer;
0x000D3B        5040002F                 I4 = Null + r0;
0x000D3C        50E0003F                 L4 = Null + r1;
0x000D3D        00C5000F                 r10 = r3 + Null;
0x000D3E        D12A0001                 r0 = M[r8 + 1];
0x000D3F        E1F004A9                 call $frmbuffer.set_frame_size;
0x000D40        E1F0047F                 call $frmbuffer.get_buffer;
0x000D41        5050002F                 I5 = Null + r0;
0x000D42        50F0003F                 L5 = Null + r1;
0x000D43        D12A0003                 r0 = M[r8 + 3];
0x000D44        70A0002F                 M2 = Null - r0;
0x000D45        DD000013                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000D46        D12A0002                 r0 = M[r8 + 2];
0x000D47        E1F00473                 call $cbuffer.get_write_address_and_size;
0x000D48        5010002F                 I1 = Null + r0;
0x000D49        50D0003F                 L1 = Null + r1;
0x000D4A        5000002F                 I0 = Null + r0;
0x000D4B        50C0003F                 L0 = Null + r1;
0x000D4C        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000D4D        E5F00003                 do $M.audio_proc.delay.process.loop_delay;
0x000D4E        03003121                 Null = Null + Null, r1 = M[I0,1], r0 = M[I4,1];
0x000D4F        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_delay>
0x000D50        D12A0002                 r0 = M[r8 + 2];
0x000D51        4430001F                 r1 = Null + I1;
0x000D52        E1F00476                 call $cbuffer.set_write_address;

 <$M.audio_proc.delay.process.jp_done>
0x000D53        51C00000                 L0 = Null + 0;
0x000D54        51D00000                 L1 = Null + 0;
0x000D55        51E00000                 L4 = Null + 0;
0x000D56        51F00000                 L5 = Null + 0;
0x000D57        DDF00493                 jump $pop_rLink_and_rts;

 <$M.audio_proc.delay.process.jp_no_delay>
0x000D58        E5F00003                 do $M.audio_proc.delay.process.loop_copy;
0x000D59        03000031                 Null = Null + Null, r1 = M[I4,1];
0x000D5A        030000B5                 Null = Null + Null, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_copy>
0x000D5B        DDF0FFF8                 jump $M.audio_proc.delay.process.jp_done;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000D5C        8132001F                 r1 = r0 AND 0x1f;
0x000D5D        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000D5F        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x000D60        19402E51                 M[$cbuffer.tmp] = r2 + Null;
0x000D61        19502E52                 M[0x2e52] = r3 + Null;
0x000D62        01400062                 r2 = Null + 98;
0x000D63        65030007                 Null = 7 - r1;
0x000D64        00330044                 if NEG r1 = r1 + r2;
0x000D65        D153FE7B                 r3 = M[r1 + -389];
0x000D66        FD000030 81420000        r2 = r0 AND 0x300000;
0x000D68        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000D69        8155FFFB                 r3 = r3 AND 0xfffb;
0x000D6A        8D44006B                 r2 = r2 LSHIFT -21;
0x000D6B        8D440002                 r2 = r2 LSHIFT 2;
0x000D6C        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000D6D        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000D6F        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000D70        8155FFF7                 r3 = r3 AND 0xfff7;
0x000D71        8D44006D                 r2 = r2 LSHIFT -19;
0x000D72        8D440003                 r2 = r2 LSHIFT 3;
0x000D73        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x000D74        FD000003 81428000        r2 = r0 AND 0x38000;
0x000D76        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000D77        8155FFFC                 r3 = r3 AND 0xfffc;
0x000D78        8D440070                 r2 = r2 LSHIFT -16;
0x000D79        8D440000                 r2 = r2 LSHIFT 0;
0x000D7A        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000D7B        D553FE7B                 M[r1 + -389] = r3;
0x000D7C        09402E51                 r2 = Null + M[$cbuffer.tmp];
0x000D7D        09502E52                 r3 = Null + M[0x2e52];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000D7E        8122001F                 r0 = r0 AND 0x1f;
0x000D7F        01300005                 r1 = Null + 5;
0x000D80        65020007                 Null = 7 - r0;
0x000D81        00220034                 if NEG r0 = r0 + r1;
0x000D82        0122FE2B                 r0 = r0 + -469;
0x000D83        E430002F                 r1 = Null + 1;
0x000D84        DC0D000F                 rts;

 <$message.private.try_to_send_message>
0x000D85        F3D00000                 push rLink;
0x000D86        E1F00411                 call $block_interrupts;
0x000D87        0920E000                 r0 = Null + M[0xffe000];
0x000D88        29222E8A                 r0 = r0 - M[$message.last_seq_sent];
0x000D89        8102FFFF                 Null = r0 AND 0xffff;
0x000D8A        DD100016                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x000D8B        09302E89                 r1 = Null + M[$message.queue_read_ptr];
0x000D8C        D123075B                 r0 = M[r1 + 1883];
0x000D8D        1920E002                 M[0xffe002] = r0 + Null;
0x000D8E        D123075C                 r0 = M[r1 + 1884];
0x000D8F        1920E003                 M[0xffe003] = r0 + Null;
0x000D90        D123075D                 r0 = M[r1 + 1885];
0x000D91        1920E004                 M[0xffe004] = r0 + Null;
0x000D92        D123075E                 r0 = M[r1 + 1886];
0x000D93        1920E005                 M[0xffe005] = r0 + Null;
0x000D94        09202E8A                 r0 = Null + M[$message.last_seq_sent];
0x000D95        E422002F                 r0 = r0 + 1;
0x000D96        19202E8A                 M[$message.last_seq_sent] = r0 + Null;
0x000D97        D123075A                 r0 = M[r1 + 1882];
0x000D98        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x000D99        01330005                 r1 = r1 + 5;
0x000D9A        2103006E                 Null = r1 - 110;
0x000D9B        00300000                 if EQ r1 = Null + Null;
0x000D9C        19302E89                 M[$message.queue_read_ptr] = r1 + Null;
0x000D9D        FD0000FF 29036729        Null = r1 - M[$message.queue_write_ptr];
0x000D9F        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x000DA0        09402E0F                 r2 = Null + M[0x2e0f];
0x000DA1        E1F0027E                 call $timer.cancel_event;
0x000DA2        01302E0C                 r1 = Null + 11788;
0x000DA3        014003E8                 r2 = Null + 1000;
0x000DA4        01500D85                 r3 = Null + 3461;
0x000DA5        E1F0043B                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x000DA6        E1F003C5                 call $interrupt.unblock;
0x000DA7        DDF00443                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x000DA8        FD0000FF 19006737        M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x000DAA        D14A0002                 r2 = M[r8 + 2];
0x000DAB        DC0D0000                 if EQ rts;
0x000DAC        51800001                 M0 = Null + 1;
0x000DAD        5020004F                 I2 = Null + r2;
0x000DAE        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x000DAF        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x000DB0        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x000DB1        67180000                 rMAC = rMAC - M0;
0x000DB2        00100004                 if NEG rMAC = Null + Null;
0x000DB3        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x000DB4        00710005                 if POS r5 = rMAC + Null;
0x000DB5        D16A0006                 r4 = M[r8 + 6];
0x000DB6        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x000DB7        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000DB8        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x000DB9        67180000                 rMAC = rMAC - M0;
0x000DBA        00100004                 if NEG rMAC = Null + Null;
0x000DBB        2007001F                 Null = r5 - rMAC;
0x000DBC        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x000DBD        D10A000F                 Null = M[r8 + 15];
0x000DBE        DC0D0001                 if NE rts;
0x000DBF        F3D00000                 push rLink;
0x000DC0        D15A0002                 r3 = M[r8 + 2];
0x000DC1        D55A000F                 M[r8 + 15] = r3;
0x000DC2        016A0010                 r4 = r8 + 16;
0x000DC3        512A000B                 I2 = r8 + 11;
0x000DC4        51350005                 I3 = r3 + 5;
0x000DC5        D1050004                 Null = M[r3 + 4];
0x000DC6        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x000DC7        512A0007                 I2 = r8 + 7;
0x000DC8        E1F0027A                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x000DC9        5F380000                 I3 = I3 + M0;
0x000DCA        E1F00278                 call $reset_iir_resampler;
0x000DCB        50C0000F                 L0 = Null + Null;
0x000DCC        DDF0041E                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x000DCD        F3D00000                 push rLink;
0x000DCE        E1F003C9                 call $block_interrupts;
0x000DCF        01C00032                 r10 = Null + 50;
0x000DD0        01602E8D                 r4 = Null + 11917;
0x000DD1        09202E8D                 r0 = Null + M[$timer.last_addr];
0x000DD2        E5F00008                 do $M.timer.schedule_event_at.loop;
0x000DD3        E402002F                 Null = r0 + 1;
0x000DD4        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x000DD5        D1720001                 r5 = M[r0 + 1];
0x000DD6        2004007F                 Null = r2 - r5;
0x000DD7        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000DD8        0062000F                 r4 = r0 + Null;
0x000DD9        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x000DDA        E1F013EB                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x000DDB        D5360000                 M[r4 + 0] = r1;
0x000DDC        D5230000                 M[r1 + 0] = r0;
0x000DDD        D5430001                 M[r1 + 1] = r2;
0x000DDE        D5530002                 M[r1 + 2] = r3;
0x000DDF        FD0000FF 0950672C        r3 = Null + M[$timer.id];
0x000DE1        D5530003                 M[r1 + 3] = r3;
0x000DE2        E425002F                 r0 = r3 + 1;
0x000DE3        20200050                 if EQ r0 = Null - r3;
0x000DE4        FD0000FF 1920672C        M[$timer.id] = r0 + Null;
0x000DE6        0900FE1F                 Null = Null + M[0xfffe1f];
0x000DE7        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x000DE8        2904FE21                 Null = r2 - M[0xfffe21];
0x000DE9        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x000DEA        1940FE21                 M[0xfffe21] = r2 + Null;
0x000DEB        E420002F                 r0 = Null + 1;
0x000DEC        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x000DED        E1F0037E                 call $interrupt.unblock;
0x000DEE        DDF003FC                 jump $pop_rLink_and_rts;

 <$detect_end_of_aux_stream>
0x000DEF        F3D00000                 push rLink;
0x000DF0        09502E54                 r3 = Null + M[$aux_input_stream_available];
0x000DF1        DD0003F9                 if EQ jump $pop_rLink_and_rts;
0x000DF2        012000AD                 r0 = Null + 173;
0x000DF3        E1F0039C                 call $cbuffer.calc_amount_data;
0x000DF4        81050002                 Null = r3 AND 0x2;
0x000DF5        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x000DF6        0002000F                 Null = r0 + Null;
0x000DF7        DD0003F3                 if EQ jump $pop_rLink_and_rts;
0x000DF8        85550002                 r3 = r3 OR 0x2;
0x000DF9        19502E54                 M[$aux_input_stream_available] = r3 + Null;
0x000DFA        19002E5D                 M[$no_tone_timer] = Null + Null;
0x000DFB        DDF003EF                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x000DFC        09302E5D                 r1 = Null + M[$no_tone_timer];
0x000DFD        09332E5A                 r1 = r1 + M[$tmr_period_tone_copy];
0x000DFE        0002000F                 Null = r0 + Null;
0x000DFF        00300001                 if NE r1 = Null + Null;
0x000E00        19302E5D                 M[$no_tone_timer] = r1 + Null;
0x000E01        21037530                 Null = r1 - 30000;
0x000E02        DD4003E8                 if NEG jump $pop_rLink_and_rts;
0x000E03        01401080                 r2 = Null + 4224;
0x000E04        01500000                 r3 = Null + 0;
0x000E05        01600000                 r4 = Null + 0;
0x000E06        01700000                 r5 = Null + 0;
0x000E07        01800000                 r6 = Null + 0;
0x000E08        E1F001DB                 call $message.send_short;
0x000E09        19002E54                 M[$aux_input_stream_available] = Null + Null;
0x000E0A        19002E5D                 M[$no_tone_timer] = Null + Null;
0x000E0B        DDF003DF                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x000E0C        8132001F                 r1 = r0 AND 0x1f;
0x000E0D        2133000C                 r1 = r1 - 12;
0x000E0E        D1432C57                 r2 = M[r1 + 11351];
0x000E0F        00200000                 if EQ r0 = Null + Null;
0x000E10        DC0D0000                 if EQ rts;
0x000E11        19502E51                 M[$cbuffer.tmp] = r3 + Null;
0x000E12        D054000F                 r3 = M[r2 + Null];
0x000E13        FD0000FF D1435B90        r2 = M[r1 + -42096];
0x000E15        D3400000                 r2 = M[r2 + Null];
0x000E16        23540000                 r3 = r3 - r2;
0x000E17        D14304F1                 r2 = M[r1 + 1265];
0x000E18        E434003F                 r1 = r2 - 1;
0x000E19        8035003F                 r1 = r3 AND r1;
0x000E1A        00340000                 if EQ r1 = r2 + Null;
0x000E1B        E433003F                 r1 = r1 - 1;
0x000E1C        09502E51                 r3 = Null + M[$cbuffer.tmp];
0x000E1D        FD000003 81228000        r0 = r0 AND 0x38000;
0x000E1F        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E20        FD000001 21028000        Null = r0 - 98304;
0x000E22        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E23        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x000E24        FD000002 21028000        Null = r0 - 163840;
0x000E26        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x000E27        9123007E                 r0 = r1 ASHIFT -2;
0x000E28        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x000E29        E423003F                 r0 = r1 - 1;
0x000E2A        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000E2B        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x000E2C        0023000F                 r0 = r1 + Null;
0x000E2D        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x000E2E        9123007F                 r0 = r1 ASHIFT -1;
0x000E2F        DC0D000F                 rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x000E30        F3D00000                 push rLink;
0x000E31        D1290000                 r0 = M[r7 + 0];
0x000E32        E1F0038D                 call $frmbuffer.get_buffer;
0x000E33        5000002F                 I0 = Null + r0;
0x000E34        50C0003F                 L0 = Null + r1;
0x000E35        D1290001                 r0 = M[r7 + 1];
0x000E36        E1F00389                 call $frmbuffer.get_buffer;
0x000E37        5040002F                 I4 = Null + r0;
0x000E38        50E0003F                 L4 = Null + r1;
0x000E39        00C5000F                 r10 = r3 + Null;
0x000E3A        D1290002                 r0 = M[r7 + 2];
0x000E3B        E1F003AD                 call $frmbuffer.set_frame_size;
0x000E3C        E1F00383                 call $frmbuffer.get_buffer;
0x000E3D        5010002F                 I1 = Null + r0;
0x000E3E        50D0003F                 L1 = Null + r1;
0x000E3F        005C000F                 r3 = r10 + Null;
0x000E40        D1290003                 r0 = M[r7 + 3];
0x000E41        E1F003A7                 call $frmbuffer.set_frame_size;
0x000E42        E1F0037D                 call $frmbuffer.get_buffer;
0x000E43        5050002F                 I5 = Null + r0;
0x000E44        50F0003F                 L5 = Null + r1;
0x000E45        F3D40000                 pop rLink;
0x000E46        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x000E47        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x000E48        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x000E49        50C0000F                 L0 = Null + Null;
0x000E4A        50D0000F                 L1 = Null + Null;
0x000E4B        50E0000F                 L4 = Null + Null;
0x000E4C        50F0000F                 L5 = Null + Null;
0x000E4D        DC0D000F                 rts;

 <$cbops.shift_24bit.main>
0x000E4E        51800001                 M0 = Null + 1;
0x000E4F        DDF00002                 jump $M.cbops.shift.main.ready;

 <$cbops.shift.main>
0x000E50        51800000                 M0 = Null + 0;

 <$M.cbops.shift.main.ready>
0x000E51        D12A0000                 r0 = M[r8 + 0];
0x000E52        D038002F                 r1 = M[r6 + r0];
0x000E53        5000003F                 I0 = Null + r1;
0x000E54        D039002F                 r1 = M[r7 + r0];
0x000E55        50C0003F                 L0 = Null + r1;
0x000E56        D12A0001                 r0 = M[r8 + 1];
0x000E57        D038002F                 r1 = M[r6 + r0];
0x000E58        5040003F                 I4 = Null + r1;
0x000E59        D039002F                 r1 = M[r7 + r0];
0x000E5A        50E0003F                 L4 = Null + r1;
0x000E5B        D14A0002                 r2 = M[r8 + 2];
0x000E5C        E4CC003F                 r10 = r10 - 1;
0x000E5D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000E5E        93240000                 r0 = r0 ASHIFT r2;
0x000E5F        47080000                 Null = Null + M0;
0x000E60        DD100005                 if NE jump $M.cbops.shift.main.do_double_write;
0x000E61        E5F00003                 do $M.cbops.shift.main.loop;
0x000E62        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000E63        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x000E64        DDF0000A                 jump $M.cbops.shift.main.done;

 <$M.cbops.shift.main.do_double_write>
0x000E65        8D320008                 r1 = r0 LSHIFT 8;
0x000E66        8D220078                 r0 = r0 LSHIFT -8;
0x000E67        E5F00006                 do $M.cbops.shift.main.two_write_loop;
0x000E68        030051B1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r1;
0x000E69        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000E6A        93540000                 r3 = r3 ASHIFT r2;
0x000E6B        8D350008                 r1 = r3 LSHIFT 8;
0x000E6C        8D250078                 r0 = r3 LSHIFT -8;

 <$M.cbops.shift.main.two_write_loop>
0x000E6D        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.shift.main.done>
0x000E6E        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000E6F        51E00000                 L4 = Null + 0;
0x000E70        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x000E71        8132001F                 r1 = r0 AND 0x1f;
0x000E72        D1432C4B                 r2 = M[r1 + 11339];
0x000E73        00200000                 if EQ r0 = Null + Null;
0x000E74        DC0D0000                 if EQ rts;
0x000E75        D3400000                 r2 = M[r2 + Null];
0x000E76        19502E51                 M[$cbuffer.tmp] = r3 + Null;
0x000E77        FD0000FF D1535B84        r3 = M[r1 + -42108];
0x000E79        D3500000                 r3 = M[r3 + Null];
0x000E7A        2054005F                 r3 = r2 - r3;
0x000E7B        D14304E5                 r2 = M[r1 + 1253];
0x000E7C        E434003F                 r1 = r2 - 1;
0x000E7D        8035003F                 r1 = r3 AND r1;
0x000E7E        09502E51                 r3 = Null + M[$cbuffer.tmp];
0x000E7F        FD000003 81228000        r0 = r0 AND 0x38000;
0x000E81        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000E82        FD000001 21028000        Null = r0 - 98304;
0x000E84        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000E85        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x000E86        FD000002 21028000        Null = r0 - 163840;
0x000E88        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x000E89        9123007E                 r0 = r1 ASHIFT -2;
0x000E8A        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x000E8B        E423003F                 r0 = r1 - 1;
0x000E8C        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000E8D        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x000E8E        0023000F                 r0 = r1 + Null;
0x000E8F        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x000E90        9123007F                 r0 = r1 ASHIFT -1;
0x000E91        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x000E92        5020009F                 I2 = Null + r7;
0x000E93        51900001                 M1 = Null + 1;
0x000E94        F3D00000                 push rLink;
0x000E95        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x000E96        E1F00329                 call $frmbuffer.get_buffer;
0x000E97        5000002F                 I0 = Null + r0;
0x000E98        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x000E99        E1F00326                 call $frmbuffer.get_buffer;
0x000E9A        5010002F                 I1 = Null + r0;
0x000E9B        50D0003F                 L1 = Null + r1;
0x000E9C        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x000E9D        E1F0034B                 call $frmbuffer.set_frame_size;
0x000E9E        E1F00321                 call $frmbuffer.get_buffer;
0x000E9F        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x000EA0        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x000EA1        F3D40000                 pop rLink;
0x000EA2        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x000EA3        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x000EA4        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x000EA5        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x000EA6        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x000EA7        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x000EA8        9041008F                 r2 = rMAC ASHIFT r6;
0x000EA9        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x000EAA        51C00000                 L0 = Null + 0;
0x000EAB        51D00000                 L1 = Null + 0;
0x000EAC        51E00000                 L4 = Null + 0;
0x000EAD        DC0D000F                 rts;

 <$cbops.copy_op_24bit_audio.main>
0x000EAE        51800001                 M0 = Null + 1;
0x000EAF        DDF00002                 jump $M.cbops.copy_op.main.ready;

 <$cbops.copy_op.main>
0x000EB0        51800000                 M0 = Null + 0;

 <$M.cbops.copy_op.main.ready>
0x000EB1        D12A0000                 r0 = M[r8 + 0];
0x000EB2        D038002F                 r1 = M[r6 + r0];
0x000EB3        5000003F                 I0 = Null + r1;
0x000EB4        D039002F                 r1 = M[r7 + r0];
0x000EB5        50C0003F                 L0 = Null + r1;
0x000EB6        D12A0001                 r0 = M[r8 + 1];
0x000EB7        D038002F                 r1 = M[r6 + r0];
0x000EB8        5040003F                 I4 = Null + r1;
0x000EB9        D039002F                 r1 = M[r7 + r0];
0x000EBA        50E0003F                 L4 = Null + r1;
0x000EBB        E4CC003F                 r10 = r10 - 1;
0x000EBC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000EBD        47080000                 Null = Null + M0;
0x000EBE        DD100004                 if NE jump $M.cbops.copy_op.main.do_double_write;
0x000EBF        E5F00002                 do $M.cbops.copy_op.main.loop;
0x000EC0        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x000EC1        DDF00009                 jump $M.cbops.copy_op.main.done;

 <$M.cbops.copy_op.main.do_double_write>
0x000EC2        8D320008                 r1 = r0 LSHIFT 8;
0x000EC3        8D220078                 r0 = r0 LSHIFT -8;
0x000EC4        E5F00005                 do $M.cbops.copy_op.main.two_write_loop;
0x000EC5        030041B1                 Null = Null + Null, r2 = M[I0,1], M[I4,1] = r1;
0x000EC6        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000EC7        8D340008                 r1 = r2 LSHIFT 8;
0x000EC8        8D240078                 r0 = r2 LSHIFT -8;

 <$M.cbops.copy_op.main.two_write_loop>
0x000EC9        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.copy_op.main.done>
0x000ECA        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000ECB        51E00000                 L4 = Null + 0;
0x000ECC        DC0D000F                 rts;

 <$pskey.result_message_handler>
0x000ECD        FD000000 21028008        Null = r0 - 32776;
0x000ECF        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x000ED0        D035000F                 r1 = M[r3 + Null];
0x000ED1        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000ED2        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000ED3        FD0000FF 1900672B        M[$pskey.request_in_progress] = Null + Null;
0x000ED5        01702E8C                 r5 = Null + 11916;
0x000ED6        09202E8C                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000ED7        D1620001                 r4 = M[r0 + 1];
0x000ED8        2003006F                 Null = r1 - r4;
0x000ED9        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000EDA        0072000F                 r5 = r0 + Null;
0x000EDB        D1220000                 r0 = M[r0 + 0];
0x000EDC        E402002F                 Null = r0 + 1;
0x000EDD        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x000EDE        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x000EDF        F3D00000                 push rLink;
0x000EE0        D1620000                 r4 = M[r0 + 0];
0x000EE1        D5670000                 M[r5 + 0] = r4;
0x000EE2        D1220002                 r0 = M[r0 + 2];
0x000EE3        E002000F                 call r0;
0x000EE4        09302E8C                 r1 = Null + M[$pskey.last_addr];
0x000EE5        E403002F                 Null = r1 + 1;
0x000EE6        E1100059                 if NE call $pskey.private.send_request;
0x000EE7        DDF00303                 jump $pop_rLink_and_rts;

 <$cbops.dc_remove.main>
0x000EE8        D12A0000                 r0 = M[r8 + 0];
0x000EE9        D038002F                 r1 = M[r6 + r0];
0x000EEA        5000003F                 I0 = Null + r1;
0x000EEB        D039002F                 r1 = M[r7 + r0];
0x000EEC        50C0003F                 L0 = Null + r1;
0x000EED        D12A0001                 r0 = M[r8 + 1];
0x000EEE        D038002F                 r1 = M[r6 + r0];
0x000EEF        5040003F                 I4 = Null + r1;
0x000EF0        D039002F                 r1 = M[r7 + r0];
0x000EF1        50E0003F                 L4 = Null + r1;
0x000EF2        D11A0002                 rMAC = M[r8 + 2];
0x000EF3        013009D5                 r1 = Null + 2517;
0x000EF4        FD000080 01500000        r3 = Null + -8388608;
0x000EF6        2045003F                 r2 = r3 - r1;
0x000EF7        E4CC003F                 r10 = r10 - 1;
0x000EF8        CF142100                 rMAC = rMAC * r2 (SS), r0 = M[I0,1];
0x000EF9        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000EFA        23210000                 r0 = r0 - rMAC;
0x000EFB        9C220056                 if V r0 = r0 * r3 (int) (sat);
0x000EFC        E5F00005                 do $M.cbops.dc_remove.main.loop;
0x000EFD        CF1421A1                 rMAC = rMAC * r2 (SS), r0 = M[I0,1], M[I4,1] = r0;
0x000EFE        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000EFF        23210000                 r0 = r0 - rMAC;
0x000F00        9C220056                 if V r0 = r0 * r3 (int) (sat);

 <$M.cbops.dc_remove.main.loop>
0x000F01        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000F02        51E00000                 L4 = Null + 0;
0x000F03        D51A0002                 M[r8 + 2] = rMAC;
0x000F04        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x000F05        01300019                 r1 = Null + 25;
0x000F06        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x000F07        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F08        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F09        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F0F        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F10        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F11        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F12        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F13        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F14        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F15        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F16        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F17        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F18        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F19        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F1A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F1B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F1C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F1D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F1E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F1F        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F20        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F21        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x000F22        D12A0000                 r0 = M[r8 + 0];
0x000F23        D038002F                 r1 = M[r6 + r0];
0x000F24        5000003F                 I0 = Null + r1;
0x000F25        D039002F                 r1 = M[r7 + r0];
0x000F26        50C0003F                 L0 = Null + r1;
0x000F27        D12A0001                 r0 = M[r8 + 1];
0x000F28        D038002F                 r1 = M[r6 + r0];
0x000F29        5040003F                 I4 = Null + r1;
0x000F2A        D039002F                 r1 = M[r7 + r0];
0x000F2B        50E0003F                 L4 = Null + r1;
0x000F2C        D12A0002                 r0 = M[r8 + 2];
0x000F2D        D038002F                 r1 = M[r6 + r0];
0x000F2E        5050003F                 I5 = Null + r1;
0x000F2F        D039002F                 r1 = M[r7 + r0];
0x000F30        50F0003F                 L5 = Null + r1;
0x000F31        D14A0003                 r2 = M[r8 + 3];
0x000F32        8DCC007F                 r10 = r10 LSHIFT -1;
0x000F33        19C02E8F                 M[$cbops.amount_written] = r10 + Null;
0x000F34        E4CC003F                 r10 = r10 - 1;
0x000F35        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000F36        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x000F37        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F38        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F39        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x000F3A        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F3B        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F3C        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x000F3D        51F00000                 L5 = Null + 0;
0x000F3E        DC0D000F                 rts;

 <$pskey.private.send_request>
0x000F3F        FD0000FF 0900672B        Null = Null + M[$pskey.request_in_progress];
0x000F41        DC0D0001                 if NE rts;
0x000F42        F3D00000                 push rLink;
0x000F43        09402E17                 r2 = Null + M[0x2e17];
0x000F44        E1F000DB                 call $timer.cancel_event;
0x000F45        E1F00263                 call $message.send_queue_space;
0x000F46        21020005                 Null = r0 - 5;
0x000F47        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x000F48        09302E8C                 r1 = Null + M[$pskey.last_addr];
0x000F49        85408006                 r2 = Null OR 0x8006;
0x000F4A        D1530001                 r3 = M[r1 + 1];
0x000F4B        E1F00098                 call $message.send_short;
0x000F4C        E420002F                 r0 = Null + 1;
0x000F4D        FD0000FF 1920672B        M[$pskey.request_in_progress] = r0 + Null;
0x000F4F        DDF0029B                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x000F50        01302E14                 r1 = Null + 11796;
0x000F51        01402710                 r2 = Null + 10000;
0x000F52        01500F3F                 r3 = Null + 3903;
0x000F53        E1F0028D                 call $timer.schedule_event_in;
0x000F54        DDF00296                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x000F55        01300017                 r1 = Null + 23;
0x000F56        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x000F57        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F58        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F59        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F60        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F61        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F62        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F63        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F64        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F65        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F66        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F67        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F68        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F69        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6D        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F6E        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F6F        DC0D000F                 rts;

 <$M.configure_latency_reporting.func>
0x000F70        F3D00000                 push rLink;
0x000F71        994403E8                 r2 = r2 * 1000 (int);
0x000F72        995503E8                 r3 = r3 * 1000 (int);
0x000F73        996603E8                 r4 = r4 * 1000 (int);
0x000F74        19302E82                 M[$M.configure_latency_reporting.enabled] = r1 + Null;
0x000F75        E4600030                 if EQ r4 = Null - 1;
0x000F76        FD0000FF 19406722        M[$M.configure_latency_reporting.report_period] = r2 + Null;
0x000F78        19502E83                 M[$M.configure_latency_reporting.min_change] = r3 + Null;
0x000F79        FD0000FF 19606723        M[$M.configure_latency_reporting.average_latency] = r4 + Null;
0x000F7B        0003000F                 Null = r1 + Null;
0x000F7C        DD100006                 if NE jump $M.configure_latency_reporting.no_cancel_needed;
0x000F7D        FD0000FF 01306694        r1 = Null + -39276;
0x000F7F        D1430003                 r2 = M[r1 + 3];
0x000F80        E110009F                 if NE call $timer.cancel_event;
0x000F81        DDF00004                 jump $M.configure_latency_reporting.done;

 <$M.configure_latency_reporting.no_cancel_needed>
0x000F82        FD0000FF 01306694        r1 = Null + -39276;
0x000F84        E1F0FC9A                 call $M.report_latency_to_vm.init;

 <$M.configure_latency_reporting.done>
0x000F85        DDF00265                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x000F86        01300015                 r1 = Null + 21;
0x000F87        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x000F88        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F89        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8F        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F90        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F91        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F92        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F93        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F94        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F95        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F96        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F97        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F98        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F99        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F9A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F9B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F9C        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F9D        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F9E        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x000F9F        F3D00000                 push rLink;
0x000FA0        51900001                 M1 = Null + 1;
0x000FA1        E1F001F6                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000FA2        D0B9000F                 r9 = M[r7 + Null];
0x000FA3        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000FA4        D14B0006                 r2 = M[r9 + 6];
0x000FA5        D12B0000                 r0 = M[r9 + 0];
0x000FA6        D1320000                 r1 = M[r0 + 0];
0x000FA7        D16B0003                 r4 = M[r9 + 3];
0x000FA8        50D0003F                 L1 = Null + r1;
0x000FA9        E004000F                 call r2;
0x000FAA        5080006F                 M0 = Null + r4;
0x000FAB        D042000F                 r2 = M[r0 + Null];
0x000FAC        5010004F                 I1 = Null + r2;
0x000FAD        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000FAE        4440001F                 r2 = Null + I1;
0x000FAF        1824000F                 M[r0] = r2 + Null;
0x000FB0        E499002F                 r7 = r7 + 1;
0x000FB1        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000FB2        E1F001B9                 call $interrupt.unblock;
0x000FB3        50D0000F                 L1 = Null + Null;
0x000FB4        DDF00236                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x000FB5        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000FB6        09302E8D                 r1 = Null + M[$timer.last_addr];
0x000FB7        E403002F                 Null = r1 + 1;
0x000FB8        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000FB9        D1230001                 r0 = M[r1 + 1];
0x000FBA        2942FE71                 r2 = r0 - M[0xfffe71];
0x000FBB        21040000                 Null = r2 - 0;
0x000FBC        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000FBD        D1D30002                 rLink = M[r1 + 2];
0x000FBE        D1230003                 r0 = M[r1 + 3];
0x000FBF        D5030003                 M[r1 + 3] = Null;
0x000FC0        D1430000                 r2 = M[r1 + 0];
0x000FC1        19402E8D                 M[$timer.last_addr] = r2 + Null;
0x000FC2        E00D000F                 call rLink;
0x000FC3        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000FC4        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000FC5        1920FE21                 M[0xfffe21] = r0 + Null;
0x000FC6        E450002F                 r3 = Null + 1;
0x000FC7        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000FC8        DDF00222                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x000FC9        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000FCA        DDF00220                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x000FCB        D5CB0008                 M[r9 + 8] = r10;
0x000FCC        D14B000A                 r2 = M[r9 + 10];
0x000FCD        200400CF                 Null = r2 - r10;
0x000FCE        004C0005                 if POS r2 = r10 + Null;
0x000FCF        D15B000B                 r3 = M[r9 + 11];
0x000FD0        200500CF                 Null = r3 - r10;
0x000FD1        005C0004                 if NEG r3 = r10 + Null;
0x000FD2        D1CB0007                 r10 = M[r9 + 7];
0x000FD3        67C90000                 r10 = r10 - M1;
0x000FD4        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x000FD5        D54B000A                 M[r9 + 10] = r2;
0x000FD6        D55B000B                 M[r9 + 11] = r3;
0x000FD7        D5CB0007                 M[r9 + 7] = r10;
0x000FD8        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x000FD9        D50B000B                 M[r9 + 11] = Null;
0x000FDA        D56B000A                 M[r9 + 10] = r4;
0x000FDB        D1CB0004                 r10 = M[r9 + 4];
0x000FDC        23540000                 r3 = r3 - r2;
0x000FDD        035C0000                 r3 = r3 + r10;
0x000FDE        00500004                 if NEG r3 = Null + Null;
0x000FDF        D55B0009                 M[r9 + 9] = r3;
0x000FE0        01C00078                 r10 = Null + 120;
0x000FE1        D5CB0007                 M[r9 + 7] = r10;
0x000FE2        DC0D000F                 rts;

 <$message.send_short>
0x000FE3        F3D00000                 push rLink;
0x000FE4        E1F001B3                 call $block_interrupts;
0x000FE5        FD0000FF 09306729        r1 = Null + M[$message.queue_write_ptr];
0x000FE7        01230005                 r0 = r1 + 5;
0x000FE8        2102006E                 Null = r0 - 110;
0x000FE9        00200000                 if EQ r0 = Null + Null;
0x000FEA        29022E89                 Null = r0 - M[$message.queue_read_ptr];
0x000FEB        DD000009                 if EQ jump $M.message.send_short.all_done;
0x000FEC        FD0000FF 19206729        M[$message.queue_write_ptr] = r0 + Null;
0x000FEE        D543075A                 M[r1 + 1882] = r2;
0x000FEF        D553075B                 M[r1 + 1883] = r3;
0x000FF0        D563075C                 M[r1 + 1884] = r4;
0x000FF1        D573075D                 M[r1 + 1885] = r5;
0x000FF2        D583075E                 M[r1 + 1886] = r6;
0x000FF3        E1F0FD92                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x000FF4        E1F00177                 call $interrupt.unblock;
0x000FF5        DDF001F5                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_streams_ind>
0x000FF6        F3D00000                 push rLink;
0x000FF7        E1F001A0                 call $block_interrupts;
0x000FF8        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x000FF9        D0B9000F                 r9 = M[r7 + Null];
0x000FFA        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x000FFB        D15B0005                 r3 = M[r9 + 5];
0x000FFC        D12B0000                 r0 = M[r9 + 0];
0x000FFD        D1320000                 r1 = M[r0 + 0];
0x000FFE        D1820001                 r6 = M[r0 + 1];
0x000FFF        D1A20002                 r8 = M[r0 + 2];
0x001000        50D0003F                 L1 = Null + r1;
0x001001        D16B0003                 r4 = M[r9 + 3];
0x001002        D56B0002                 M[r9 + 2] = r4;
0x001003        E005000F                 call r3;
0x001004        D58B0001                 M[r9 + 1] = r6;
0x001005        E499002F                 r7 = r7 + 1;
0x001006        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x001007        E1F00164                 call $interrupt.unblock;
0x001008        50D0000F                 L1 = Null + Null;
0x001009        DDF001E1                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x00100A        F3D00000                 push rLink;
0x00100B        D1820002                 r6 = M[r0 + 2];
0x00100C        D1A20001                 r8 = M[r0 + 1];
0x00100D        20C800AF                 r10 = r6 - r8;
0x00100E        00CC0034                 if NEG r10 = r10 + r1;
0x00100F        E1F0FFBC                 call $frame_sync.analyze_stream_ind;
0x001010        D15B0008                 r3 = M[r9 + 8];
0x001011        D14B0009                 r2 = M[r9 + 9];
0x001012        23540000                 r3 = r3 - r2;
0x001013        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x001014        D14B0004                 r2 = M[r9 + 4];
0x001015        9144007F                 r2 = r2 ASHIFT -1;
0x001016        03540000                 r3 = r3 + r2;
0x001017        2006005F                 Null = r4 - r3;
0x001018        00560004                 if NEG r3 = r4 + Null;
0x001019        D14B000C                 r2 = M[r9 + 12];
0x00101A        23450000                 r2 = r2 - r3;
0x00101B        D54B000C                 M[r9 + 12] = r2;
0x00101C        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x00101D        01220002                 r0 = r0 + 2;
0x00101E        DDF001CC                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x00101F        F3D00000                 push rLink;
0x001020        E1F00177                 call $block_interrupts;
0x001021        01C00032                 r10 = Null + 50;
0x001022        01602E8D                 r4 = Null + 11917;
0x001023        09202E8D                 r0 = Null + M[$timer.last_addr];
0x001024        E5F00008                 do $M.timer.cancel_event.loop;
0x001025        E402002F                 Null = r0 + 1;
0x001026        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x001027        D1720003                 r5 = M[r0 + 3];
0x001028        2004007F                 Null = r2 - r5;
0x001029        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x00102A        0062000F                 r4 = r0 + Null;
0x00102B        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x00102C        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x00102D        D1320000                 r1 = M[r0 + 0];
0x00102E        D5360000                 M[r4 + 0] = r1;
0x00102F        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x001030        E1F0013B                 call $interrupt.unblock;
0x001031        DDF001B9                 jump $pop_rLink_and_rts;

 <$cbuffer.empty_buffer>
0x001032        F3D00000                 push rLink;
0x001033        0052000F                 r3 = r0 + Null;
0x001034        D802000F                 Null = SIGNDET r0;
0x001035        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x001036        E1F00184                 call $cbuffer.get_write_address_and_size;
0x001037        0032000F                 r1 = r0 + Null;
0x001038        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x001039        E1F00156                 call $cbuffer.calc_amount_data;
0x00103A        00C2000F                 r10 = r0 + Null;
0x00103B        0025000F                 r0 = r3 + Null;
0x00103C        E1F00179                 call $cbuffer.get_read_address_and_size;
0x00103D        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x00103E        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x00103F        0025000F                 r0 = r3 + Null;
0x001040        E1F00184                 call $cbuffer.set_read_address;
0x001041        DDF001A9                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x001042        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x001043        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x001044        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x001045        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x001046        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x001047        03650000                 r4 = r4 + r3;
0x001048        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x001049        03620000                 r4 = r4 + r0;
0x00104A        59330004                 I3 = I3 + 4;
0x00104B        00C2000F                 r10 = r0 + Null;
0x00104C        DC0D0000                 if EQ rts;
0x00104D        5000003F                 I0 = Null + r1;
0x00104E        59330002                 I3 = I3 + 2;
0x00104F        F2D03C00                 push rLink, r1 = M[I3,M0];
0x001050        21330002                 r1 = r1 - 2;
0x001051        E003000F                 call r1;
0x001052        5B330000                 I3 = I3 + r1;
0x001053        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x001054        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x001055        DDF00195                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x001056        F3D00000                 push rLink;
0x001057        E1F00140                 call $block_interrupts;
0x001058        D5430001                 M[r1 + 1] = r2;
0x001059        D5530002                 M[r1 + 2] = r3;
0x00105A        E450003F                 r3 = Null - 1;
0x00105B        D5530000                 M[r1 + 0] = r3;
0x00105C        01202E8C                 r0 = Null + 11916;

 <$M.pskey.read_key.find_end_of_list>
0x00105D        0042000F                 r2 = r0 + Null;
0x00105E        D1240000                 r0 = M[r2 + 0];
0x00105F        E402002F                 Null = r0 + 1;
0x001060        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x001061        D5340000                 M[r2 + 0] = r1;
0x001062        21042E8C                 Null = r2 - 11916;
0x001063        E100FEDC                 if EQ call $pskey.private.send_request;
0x001064        E1F00107                 call $interrupt.unblock;
0x001065        DDF00185                 jump $pop_rLink_and_rts;

 <$latency.reset_encoded_latency>
0x001066        F3D00000                 push rLink;
0x001067        D1290001                 r0 = M[r7 + 1];
0x001068        DD00000E                 if EQ jump $M.latency_measure.reset.encoded_reset_done;
0x001069        E1F0FFC9                 call $cbuffer.empty_buffer;
0x00106A        D1290002                 r0 = M[r7 + 2];
0x00106B        D1220001                 r0 = M[r0 + 1];
0x00106C        D5290007                 M[r7 + 7] = r0;
0x00106D        D1290003                 r0 = M[r7 + 3];
0x00106E        D1220002                 r0 = M[r0 + 2];
0x00106F        D5290008                 M[r7 + 8] = r0;
0x001070        FD00007F 0120FFFF        r0 = Null + 8388607;
0x001072        D529000A                 M[r7 + 10] = r0;
0x001073        D529000B                 M[r7 + 11] = r0;
0x001074        D529000C                 M[r7 + 12] = r0;
0x001075        D529000D                 M[r7 + 13] = r0;

 <$M.latency_measure.reset.encoded_reset_done>
0x001076        DDF00174                 jump $pop_rLink_and_rts;

 <$cbops.switch_op.helper>
0x001077        E440002F                 r2 = Null + 1;
0x001078        D12A0000                 r0 = M[r8 + 0];
0x001079        D13A0002                 r1 = M[r8 + 2];
0x00107A        00340000                 if EQ r1 = r2 + Null;
0x00107B        D3200000                 r0 = M[r0 + Null];
0x00107C        D14A0003                 r2 = M[r8 + 3];
0x00107D        88220031                 if NE r0 = r0 XOR r1;
0x00107E        83230000                 r0 = r0 AND r1;
0x00107F        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x001080        D12A0001                 r0 = M[r8 + 1];
0x001081        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x001082        21AAFFFD                 r8 = r8 - -3;
0x001083        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x001084        D12AFFFE                 r0 = M[r8 + -2];
0x001085        E402002F                 Null = r0 + 1;
0x001086        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x001087        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x001088        DC0D000F                 rts;

 <$math.log2_abs_table>
0x001089        D881000F                 r6 = SIGNDET rMAC;
0x00108A        93E80000                 rMAC = rMAC ASHIFT r6;
0x00108B        20100014                 if NEG rMAC = Null - rMAC;
0x00108C        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x00108D        D881000F                 r6 = SIGNDET rMAC;
0x00108E        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x00108F        E488002F                 r6 = r6 + 1;
0x001090        91880010                 r6 = r6 ASHIFT 16;
0x001091        8D310002                 r1 = rMAC LSHIFT 2;
0x001092        8D33006D                 r1 = r1 LSHIFT -19;
0x001093        8D210007                 r0 = rMAC LSHIFT 7;
0x001094        8D22007F                 r0 = r0 LSHIFT -1;
0x001095        D11300DD                 rMAC = M[r1 + 221];
0x001096        D13300DE                 r1 = M[r1 + 222];
0x001097        23310000                 r1 = r1 - rMAC;
0x001098        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x001099        2021008F                 r0 = rMAC - r6;
0x00109A        DC0D000F                 rts;

 <$math.pow2_taylor>
0x00109B        F3010000                 push I0;
0x00109C        510004DE                 I0 = Null + 1246;
0x00109D        91920070                 r7 = r0 ASHIFT -16;
0x00109E        8D820008                 r6 = r0 LSHIFT 8;
0x00109F        8D88007F                 r6 = r6 LSHIFT -1;
0x0010A0        F3913100                 push M1, r1 = M[I0,1];
0x0010A1        51900001                 M1 = Null + 1;
0x0010A2        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x0010A3        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A4        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010A5        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A6        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010A7        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A8        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x0010A9        9023009F                 r0 = r1 ASHIFT r7;
0x0010AA        F3950000                 pop M1;
0x0010AB        F3050000                 pop I0;
0x0010AC        DC0D000F                 rts;

 <$flash.copy_to_dm>
0x0010AD        F3D00000                 push rLink;
0x0010AE        0062000F                 r4 = r0 + Null;
0x0010AF        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x0010B0        0026000F                 r0 = r4 + Null;
0x0010B1        0037000F                 r1 = r5 + Null;
0x0010B2        E1F000EE                 call $flash.map_page_into_dm;
0x0010B3        00C3000F                 r10 = r1 + Null;
0x0010B4        5010002F                 I1 = Null + r0;
0x0010B5        E5F00003                 do $M.flash.copy_to_dm.loop;
0x0010B6        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0010B7        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x0010B8        03630000                 r4 = r4 + r1;
0x0010B9        23730000                 r5 = r5 - r1;
0x0010BA        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x0010BB        DDF0012F                 jump $pop_rLink_and_rts;

 <$M.MUTE_CONTROL.Process.func>
0x0010BC        F3D00000                 push rLink;
0x0010BD        D1290000                 r0 = M[r7 + 0];
0x0010BE        E1F00101                 call $frmbuffer.get_buffer;
0x0010BF        F3D40000                 pop rLink;
0x0010C0        D1490001                 r2 = M[r7 + 1];
0x0010C1        D1690002                 r4 = M[r7 + 2];
0x0010C2        D3400000                 r2 = M[r2 + Null];
0x0010C3        23640000                 r4 = r4 - r2;
0x0010C4        DD100006                 if NE jump $M.MUTE_CONTROL.Process.loop_mute;
0x0010C5        00C5000F                 r10 = r3 + Null;
0x0010C6        5000002F                 I0 = Null + r0;
0x0010C7        50C0003F                 L0 = Null + r1;
0x0010C8        E5F00002                 do $M.MUTE_CONTROL.Process.loop_mute;
0x0010C9        0300E100                 Null = Null + Null, M[I0,1] = r4;

 <$M.MUTE_CONTROL.Process.loop_mute>
0x0010CA        51C00000                 L0 = Null + 0;
0x0010CB        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x0010CC        91820070                 r6 = r0 ASHIFT -16;
0x0010CD        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x0010CE        FD00007F 0120FFFE        r0 = Null + 8388606;
0x0010D0        DC0D000F                 rts;

 <$math.pow2_table>
0x0010D1        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x0010D2        8D920008                 r7 = r0 LSHIFT 8;
0x0010D3        8D99006D                 r7 = r7 LSHIFT -19;
0x0010D4        E488002F                 r6 = r6 + 1;
0x0010D5        D1390450                 r1 = M[r7 + 1104];
0x0010D6        D1990451                 r7 = M[r7 + 1105];
0x0010D7        23930000                 r7 = r7 - r1;
0x0010D8        8D22000D                 r0 = r0 LSHIFT 13;
0x0010D9        8D22007F                 r0 = r0 LSHIFT -1;
0x0010DA        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x0010DB        9023008F                 r0 = r1 ASHIFT r6;
0x0010DC        DC0D000F                 rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x0010DD        F3D00000                 push rLink;
0x0010DE        D1290000                 r0 = M[r7 + 0];
0x0010DF        E1F000E0                 call $frmbuffer.get_buffer;
0x0010E0        5000002F                 I0 = Null + r0;
0x0010E1        50C0003F                 L0 = Null + r1;
0x0010E2        F3D40000                 pop rLink;
0x0010E3        51900001                 M1 = Null + 1;
0x0010E4        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x0010E5        D1590001                 r3 = M[r7 + 1];
0x0010E6        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x0010E7        E466004F                 r4 = ABS r4;
0x0010E8        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x0010E9        50C0000F                 L0 = Null + Null;
0x0010EA        D5590001                 M[r7 + 1] = r3;
0x0010EB        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x0010EC        F3D00000                 push rLink;
0x0010ED        8122001F                 r0 = r0 AND 0x1f;
0x0010EE        2122000C                 r0 = r0 - 12;
0x0010EF        0900FE33                 Null = Null + M[0xfffe33];
0x0010F0        09002E86                 Null = Null + M[$cbuffer.auto_mcu_message];
0x0010F1        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0010F2        D1322C57                 r1 = M[r0 + 11351];
0x0010F3        2103F000                 Null = r1 - -4096;
0x0010F4        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0010F5        85408003                 r2 = Null OR 0x8003;
0x0010F6        ED520001                 r3 = 0x1 ASHIFT r0;
0x0010F7        E1F0FEEC                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x0010F8        DDF000F2                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x0010F9        F3D00000                 push rLink;
0x0010FA        F3200000                 push r0;
0x0010FB        E1F000BA                 call $cbuffer.get_read_address_and_size;
0x0010FC        5000002F                 I0 = Null + r0;
0x0010FD        50C0003F                 L0 = Null + r1;
0x0010FE        50B000CF                 M3 = Null + r10;
0x0010FF        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x001100        F3240000                 pop r0;
0x001101        4430000F                 r1 = Null + I0;
0x001102        E1F000C2                 call $cbuffer.set_read_address;
0x001103        51C00000                 L0 = Null + 0;
0x001104        DDF000E6                 jump $pop_rLink_and_rts;

 <$cbops.limited_copy.amount_to_use>
0x001105        D12A0000                 r0 = M[r8 + 0];
0x001106        E402002F                 Null = r0 + 1;
0x001107        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_read_limit;
0x001108        2028002F                 r0 = r6 - r0;
0x001109        00200004                 if NEG r0 = Null + Null;
0x00110A        2007002F                 Null = r5 - r0;
0x00110B        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_read_limit>
0x00110C        D12A0001                 r0 = M[r8 + 1];
0x00110D        E402002F                 Null = r0 + 1;
0x00110E        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_write_limit;
0x00110F        2029002F                 r0 = r7 - r0;
0x001110        00200004                 if NEG r0 = Null + Null;
0x001111        2007002F                 Null = r5 - r0;
0x001112        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_write_limit>
0x001113        DC0D000F                 rts;

 <$frame_sync.distribute_read_insert_ind>
0x001114        20C000CF                 r10 = Null - r10;
0x001115        D14B0004                 r2 = M[r9 + 4];
0x001116        9144007F                 r2 = r2 ASHIFT -1;
0x001117        03C40000                 r10 = r10 + r2;
0x001118        D14B000C                 r2 = M[r9 + 12];
0x001119        034C0000                 r2 = r2 + r10;
0x00111A        D54B000C                 M[r9 + 12] = r2;
0x00111B        5010008F                 I1 = Null + r6;
0x00111C        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x00111D        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x00111E        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x00111F        03004500                 Null = Null + Null, r2 = M[I1,1];
0x001120        4480001F                 r6 = Null + I1;
0x001121        D5820001                 M[r0 + 1] = r6;
0x001122        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x001123        F3D00000                 push rLink;
0x001124        8122001F                 r0 = r0 AND 0x1f;
0x001125        0900FE33                 Null = Null + M[0xfffe33];
0x001126        09002E86                 Null = Null + M[$cbuffer.auto_mcu_message];
0x001127        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001128        D1322C4B                 r1 = M[r0 + 11339];
0x001129        2103F000                 Null = r1 - -4096;
0x00112A        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x00112B        85408002                 r2 = Null OR 0x8002;
0x00112C        ED520001                 r3 = 0x1 ASHIFT r0;
0x00112D        E1F0FEB6                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x00112E        DDF000BC                 jump $pop_rLink_and_rts;

 <$frame_sync.update_input_streams_ind>
0x00112F        D15B0008                 r3 = M[r9 + 8];
0x001130        D14B0009                 r2 = M[r9 + 9];
0x001131        23540000                 r3 = r3 - r2;
0x001132        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x001133        D14B0004                 r2 = M[r9 + 4];
0x001134        9144007F                 r2 = r2 ASHIFT -1;
0x001135        03540000                 r3 = r3 + r2;
0x001136        D14B000C                 r2 = M[r9 + 12];
0x001137        23450000                 r2 = r2 - r3;
0x001138        D54B000C                 M[r9 + 12] = r2;
0x001139        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x00113A        E422002F                 r0 = r0 + 1;
0x00113B        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x00113C        D12A000C                 r0 = M[r8 + 12];
0x00113D        9462009F                 r4 = r0 * r7 (frac);
0x00113E        2069006F                 r4 = r7 - r4;
0x00113F        D10A0009                 Null = M[r8 + 9];
0x001140        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x001141        2126005F                 r0 = r4 - 95;
0x001142        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x001143        21660002                 r4 = r4 - 2;
0x001144        00600004                 if NEG r4 = Null + Null;
0x001145        2006007F                 Null = r4 - r5;
0x001146        00760004                 if NEG r5 = r4 + Null;
0x001147        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x001148        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x001149        D036000F                 r1 = M[r4 + Null];
0x00114A        DD0000A0                 if EQ jump $pop_rLink_and_rts;
0x00114B        D1460001                 r2 = M[r4 + 1];
0x00114C        D1560002                 r3 = M[r4 + 2];
0x00114D        D1260003                 r0 = M[r4 + 3];
0x00114E        01660004                 r4 = r4 + 4;
0x00114F        19602E9A                 M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x001150        E002000F                 call r0;
0x001151        09602E9A                 r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x001152        DDF0FFF7                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.distribute_output_stream_ind>
0x001153        501000AF                 I1 = Null + r8;
0x001154        238A0000                 r6 = r6 - r8;
0x001155        0088003D                 if LE r6 = r6 + r1;
0x001156        67890000                 r6 = r6 - M1;
0x001157        70A8006F                 M2 = r6 - r4;
0x001158        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x001159        444000AF                 r2 = Null + M2;
0x00115A        D54B000C                 M[r9 + 12] = r2;
0x00115B        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x00115C        4480001F                 r6 = Null + I1;
0x00115D        D5820002                 M[r0 + 2] = r6;
0x00115E        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x00115F        D1C90002                 r10 = M[r7 + 2];
0x001160        0189000A                 r6 = r7 + 10;
0x001161        D1590004                 r3 = M[r7 + 4];
0x001162        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x001163        D1280002                 r0 = M[r6 + 2];
0x001164        CC15002F                 rMAC = r3 * r0 (SS);
0x001165        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x001166        D5180003                 M[r6 + 3] = rMAC;
0x001167        D5180004                 M[r6 + 4] = rMAC;
0x001168        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x001169        D5090008                 M[r7 + 8] = Null;
0x00116A        DC0D000F                 rts;

 <$interrupt.unblock>
0x00116B        FD0000FF 09206727        r0 = Null + M[$interrupt.block_count];
0x00116D        E1001058                 if EQ call $error;
0x00116E        E422003F                 r0 = r0 - 1;
0x00116F        FD0000FF 19206727        M[$interrupt.block_count] = r0 + Null;
0x001171        DC0D0001                 if NE rts;
0x001172        E420002F                 r0 = Null + 1;
0x001173        1920FE12                 M[0xfffe12] = r0 + Null;
0x001174        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x001175        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x001176        D076000F                 r5 = M[r4 + Null];
0x001177        DD000073                 if EQ jump $pop_rLink_and_rts;
0x001178        D1960001                 r7 = M[r4 + 1];
0x001179        D1A60002                 r8 = M[r4 + 2];
0x00117A        01660003                 r4 = r4 + 3;
0x00117B        F3600000                 push r4;
0x00117C        E007000F                 call r5;
0x00117D        F3640000                 pop r4;
0x00117E        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x00117F        D802000F                 Null = SIGNDET r0;
0x001180        DD00FC8C                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x001181        D1420000                 r2 = M[r0 + 0];
0x001182        D1320002                 r1 = M[r0 + 2];
0x001183        D1220001                 r0 = M[r0 + 1];
0x001184        23230000                 r0 = r0 - r1;
0x001185        0022004D                 if LE r0 = r0 + r2;
0x001186        E422003F                 r0 = r0 - 1;
0x001187        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x001188        F3D00000                 push rLink;
0x001189        23A80000                 r8 = r8 - r6;
0x00118A        00AA0034                 if NEG r8 = r8 + r1;
0x00118B        20CA006F                 r10 = r8 - r4;
0x00118C        E140FF88                 if NEG call $frame_sync.distribute_read_insert_ind;
0x00118D        E1F0FE3E                 call $frame_sync.analyze_stream_ind;
0x00118E        DDF0005C                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x00118F        D802000F                 Null = SIGNDET r0;
0x001190        DD00FCE1                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x001191        D1420000                 r2 = M[r0 + 0];
0x001192        D1320002                 r1 = M[r0 + 2];
0x001193        D1220001                 r0 = M[r0 + 1];
0x001194        2023002F                 r0 = r1 - r0;
0x001195        00220044                 if NEG r0 = r0 + r2;
0x001196        DC0D000F                 rts;

 <$block_interrupts>
0x001197        FD0000FF 09206727        r0 = Null + M[$interrupt.block_count];
0x001199        E422002F                 r0 = r0 + 1;
0x00119A        FD0000FF 19206727        M[$interrupt.block_count] = r0 + Null;
0x00119C        1900FE12                 M[0xfffe12] = Null + Null;
0x00119D        03000000                 Null = Null + Null;
0x00119E        03000000                 Null = Null + Null;
0x00119F        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x0011A0        9152007F                 r3 = r0 ASHIFT -1;
0x0011A1        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x0011A2        81520001                 r3 = r0 AND 0x1;
0x0011A3        65251000                 r0 = 4096 - r3;
0x0011A4        2023002F                 r0 = r1 - r0;
0x0011A5        20330025                 if POS r1 = r1 - r0;
0x0011A6        0125D000                 r0 = r3 + -12288;
0x0011A7        DC0D000F                 rts;

 <$message.send_queue_space>
0x0011A8        09202E89                 r0 = Null + M[$message.queue_read_ptr];
0x0011A9        FD0000FF 29226729        r0 = r0 - M[$message.queue_write_ptr];
0x0011AB        E422003F                 r0 = r0 - 1;
0x0011AC        DC0D0005                 if POS rts;
0x0011AD        0122006E                 r0 = r0 + 110;
0x0011AE        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x0011AF        D802000F                 Null = SIGNDET r0;
0x0011B0        DC0D0001                 if NE rts;
0x0011B1        8122001F                 r0 = r0 AND 0x1f;
0x0011B2        FD0000FF D1025B84        Null = M[r0 + -42108];
0x0011B4        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x0011B5        D802000F                 Null = SIGNDET r0;
0x0011B6        DD00FBA6                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x0011B7        D1320000                 r1 = M[r0 + 0];
0x0011B8        D1220001                 r0 = M[r0 + 1];
0x0011B9        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x0011BA        D802000F                 Null = SIGNDET r0;
0x0011BB        DD00FB53                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x0011BC        D1320000                 r1 = M[r0 + 0];
0x0011BD        D1220002                 r0 = M[r0 + 2];
0x0011BE        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x0011BF        D1520002                 r3 = M[r0 + 2];
0x0011C0        D1420000                 r2 = M[r0 + 0];
0x0011C1        D1220001                 r0 = M[r0 + 1];
0x0011C2        D1340000                 r1 = M[r2 + 0];
0x0011C3        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x0011C4        D802000F                 Null = SIGNDET r0;
0x0011C5        DD00FF5E                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x0011C6        D5320001                 M[r0 + 1] = r1;
0x0011C7        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x0011C8        D802000F                 Null = SIGNDET r0;
0x0011C9        DD00FF23                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x0011CA        D5320002                 M[r0 + 2] = r1;
0x0011CB        DC0D000F                 rts;

 <$message.send>
0x0011CC        2104FFFE                 Null = r2 - -2;
0x0011CD        DD00FAA1                 if EQ jump $message.send_long;
0x0011CE        DDF0FE15                 jump $message.send_short;

 <$cbops.deinterleave.amount_to_use>
0x0011CF        8D77007F                 r5 = r5 LSHIFT -1;
0x0011D0        2007009F                 Null = r5 - r7;
0x0011D1        00790005                 if POS r5 = r7 + Null;
0x0011D2        8D770001                 r5 = r5 LSHIFT 1;
0x0011D3        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x0011D4        8D220002                 r0 = r0 LSHIFT 2;
0x0011D5        01103D09                 rMAC = Null + 15625;
0x0011D6        D9020000                 Div = rMAC / r0;
0x0011D7        D9200001                 r0 = DivResult;
0x0011D8        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x0011D9        D5320002                 M[r0 + 2] = r1;
0x0011DA        D5320001                 M[r0 + 1] = r1;
0x0011DB        D5420000                 M[r0 + 0] = r2;
0x0011DC        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x0011DD        D1230001                 r0 = M[r1 + 1];
0x0011DE        03420000                 r2 = r2 + r0;
0x0011DF        DDF0FBEE                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x0011E0        0944FE71                 r2 = r2 + M[0xfffe71];
0x0011E1        DDF0FBEC                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x0011E2        01500000                 r3 = Null + 0;
0x0011E3        DDF0FE94                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x0011E4        E450002F                 r3 = Null + 1;
0x0011E5        DDF0FE92                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x0011E6        01500002                 r3 = Null + 2;
0x0011E7        DDF0FE90                 jump $cbops.switch_op.helper;

 <$frmbuffer.set_frame_size>
0x0011E8        D5520002                 M[r0 + 2] = r3;
0x0011E9        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x0011EA        F3D40000                 pop rLink;
0x0011EB        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x0011EC        D50A0002                 M[r8 + 2] = Null;
0x0011ED        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x0011EE        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x0011EF        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x0011F0        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x0011F1        F3010000                 push I0;
0x0011F2        51001BF2                 I0 = Null + 7154;
0x0011F3        E1F00657                 call $kal_float_lib.div;
0x0011F4        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0011F5        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0011F6        E1F00622                 call $kal_float_lib.mul;
0x0011F7        0042000F                 r2 = r0 + Null;
0x0011F8        0053000F                 r3 = r1 + Null;
0x0011F9        0062000F                 r4 = r0 + Null;
0x0011FA        0073000F                 r5 = r1 + Null;
0x0011FB        E1F0061D                 call $kal_float_lib.mul;
0x0011FC        0082000F                 r6 = r0 + Null;
0x0011FD        0093000F                 r7 = r1 + Null;
0x0011FE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0011FF        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001200        01C00005                 r10 = Null + 5;
0x001201        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x001202        0048000F                 r2 = r6 + Null;
0x001203        0059000F                 r3 = r7 + Null;
0x001204        E1F00614                 call $kal_float_lib.mul;
0x001205        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001206        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001207        E1F005FF                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x001208        0046000F                 r2 = r4 + Null;
0x001209        0057000F                 r3 = r5 + Null;
0x00120A        E1F0060E                 call $kal_float_lib.mul;
0x00120B        F3050000                 pop I0;
0x00120C        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x00120D        F3D40000                 pop rLink;
0x00120E        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x00120F        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x001210        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x001211        F3010000                 push I0;
0x001212        FD0000FF 51005FE5        I0 = Null + -40987;
0x001214        0062000F                 r4 = r0 + Null;
0x001215        0073000F                 r5 = r1 + Null;
0x001216        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001217        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x001218        E1F00632                 call $kal_float_lib.div;
0x001219        0042000F                 r2 = r0 + Null;
0x00121A        0053000F                 r3 = r1 + Null;
0x00121B        E1F005DE                 call $kal_float_lib.float_to_int;
0x00121C        0082000F                 r6 = r0 + Null;
0x00121D        E1F005D6                 call $kal_float_lib.int_to_float;
0x00121E        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00121F        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001220        E1F005F8                 call $kal_float_lib.mul;
0x001221        0042000F                 r2 = r0 + Null;
0x001222        0053000F                 r3 = r1 + Null;
0x001223        0026000F                 r0 = r4 + Null;
0x001224        0037000F                 r1 = r5 + Null;
0x001225        E1F005EA                 call $kal_float_lib.sub;
0x001226        0062000F                 r4 = r0 + Null;
0x001227        0073000F                 r5 = r1 + Null;
0x001228        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001229        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00122A        01C00003                 r10 = Null + 3;
0x00122B        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x00122C        0046000F                 r2 = r4 + Null;
0x00122D        0057000F                 r3 = r5 + Null;
0x00122E        E1F005EA                 call $kal_float_lib.mul;
0x00122F        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001230        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001231        E1F005D5                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x001232        03280000                 r0 = r0 + r6;
0x001233        F3050000                 pop I0;
0x001234        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x001235        F3D40000                 pop rLink;
0x001236        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x001237        F1002001                 pushm <FP(=SP), rLink>;
0x001238        012000FF                 r0 = Null + 255;
0x001239        F1387FF6                 r1 = M[FP + -0xa];
0x00123A        83320000                 r1 = r1 AND r0;
0x00123B        F1487FF8                 r2 = M[FP + -0x8];
0x00123C        83420000                 r2 = r2 AND r0;
0x00123D        E434006F                 r1 = MAX r2;
0x00123E        F1487FFA                 r2 = M[FP + -0x6];
0x00123F        83420000                 r2 = r2 AND r0;
0x001240        E434006F                 r1 = MAX r2;
0x001241        F1487FFC                 r2 = M[FP + -0x4];
0x001242        83420000                 r2 = r2 AND r0;
0x001243        E434006F                 r1 = MAX r2;
0x001244        F1487FFE                 r2 = M[FP + -0x2];
0x001245        83420000                 r2 = r2 AND r0;
0x001246        E434006F                 r1 = MAX r2;
0x001247        2143007F                 r2 = r1 - 127;
0x001248        F1287FF6                 r0 = M[FP + -0xa];
0x001249        F1387FF7                 r1 = M[FP + -0x9];
0x00124A        23240000                 r0 = r0 - r2;
0x00124B        E1F005B3                 call $kal_float_lib.float_to_frac;
0x00124C        F12C7FF0                 M[FP + -0x10] = r0;
0x00124D        F1287FF8                 r0 = M[FP + -0x8];
0x00124E        F1387FF9                 r1 = M[FP + -0x7];
0x00124F        23240000                 r0 = r0 - r2;
0x001250        E1F005AE                 call $kal_float_lib.float_to_frac;
0x001251        F12C7FF1                 M[FP + -0xf] = r0;
0x001252        F1287FFA                 r0 = M[FP + -0x6];
0x001253        F1387FFB                 r1 = M[FP + -0x5];
0x001254        23240000                 r0 = r0 - r2;
0x001255        E1F005A9                 call $kal_float_lib.float_to_frac;
0x001256        F12C7FF2                 M[FP + -0xe] = r0;
0x001257        F1287FFC                 r0 = M[FP + -0x4];
0x001258        F1387FFD                 r1 = M[FP + -0x3];
0x001259        23240000                 r0 = r0 - r2;
0x00125A        E1F005A4                 call $kal_float_lib.float_to_frac;
0x00125B        F12C7FF3                 M[FP + -0xd] = r0;
0x00125C        F1287FFE                 r0 = M[FP + -0x2];
0x00125D        F1387FFF                 r1 = M[FP + -0x1];
0x00125E        23240000                 r0 = r0 - r2;
0x00125F        E1F0059F                 call $kal_float_lib.float_to_frac;
0x001260        F12C7FF4                 M[FP + -0xc] = r0;
0x001261        F14C7FF5                 M[FP + -0xb] = r2;
0x001262        F1042001                 popm <FP, rLink>;
0x001263        F103FFF6                 SP = SP + -10;
0x001264        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x001265        F1002005                 pushm <FP(=SP), r0, rLink>;
0x001266        E420002F                 r0 = Null + 1;
0x001267        F12C7FFA                 M[FP + -0x6] = r0;
0x001268        01200000                 r0 = Null + 0;
0x001269        F12C7FFC                 M[FP + -0x4] = r0;
0x00126A        F12C7FFB                 M[FP + -0x5] = r0;
0x00126B        F12C7FFF                 M[FP + -0x1] = r0;
0x00126C        F12C7FFE                 M[FP + -0x2] = r0;
0x00126D        FD000040 01200000        r0 = Null + 4194304;
0x00126F        F12C7FFD                 M[FP + -0x3] = r0;
0x001270        F1042005                 popm <FP, r0, rLink>;
0x001271        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x001272        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001273        F1287FFC                 r0 = M[FP + -0x4];
0x001274        F1387FFD                 r1 = M[FP + -0x3];
0x001275        F1487FFE                 r2 = M[FP + -0x2];
0x001276        F1587FFF                 r3 = M[FP + -0x1];
0x001277        E1F0FF78                 call $kal_filter_coef_lib.__warp;
0x001278        0062000F                 r4 = r0 + Null;
0x001279        0073000F                 r5 = r1 + Null;
0x00127A        01400080                 r2 = Null + 128;
0x00127B        FD000080 01500000        r3 = Null + -8388608;
0x00127D        E1F00589                 call $kal_float_lib.add;
0x00127E        E1F005AF                 call $kal_float_lib.recip;
0x00127F        0082000F                 r6 = r0 + Null;
0x001280        0093000F                 r7 = r1 + Null;
0x001281        0046000F                 r2 = r4 + Null;
0x001282        0057000F                 r3 = r5 + Null;
0x001283        E1F00595                 call $kal_float_lib.mul;
0x001284        F1030006                 SP = SP + 6;
0x001285        F100000C                 pushm <r0, r1>;
0x001286        F100000C                 pushm <r0, r1>;
0x001287        01200000                 r0 = Null + 0;
0x001288        01300000                 r1 = Null + 0;
0x001289        F100000C                 pushm <r0, r1>;
0x00128A        0026000F                 r0 = r4 + Null;
0x00128B        0037000F                 r1 = r5 + Null;
0x00128C        01400080                 r2 = Null + 128;
0x00128D        FD000080 01500000        r3 = Null + -8388608;
0x00128F        E1F00580                 call $kal_float_lib.sub;
0x001290        0048000F                 r2 = r6 + Null;
0x001291        0059000F                 r3 = r7 + Null;
0x001292        E1F00586                 call $kal_float_lib.mul;
0x001293        F100000C                 pushm <r0, r1>;
0x001294        01200000                 r0 = Null + 0;
0x001295        01300000                 r1 = Null + 0;
0x001296        F100000C                 pushm <r0, r1>;
0x001297        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x001298        F3240000                 pop r0;
0x001299        F12C7FF6                 M[FP + -0xa] = r0;
0x00129A        F3240000                 pop r0;
0x00129B        F12C7FF8                 M[FP + -0x8] = r0;
0x00129C        F3240000                 pop r0;
0x00129D        F12C7FF7                 M[FP + -0x9] = r0;
0x00129E        F3240000                 pop r0;
0x00129F        F12C7FFB                 M[FP + -0x5] = r0;
0x0012A0        F3240000                 pop r0;
0x0012A1        F12C7FFA                 M[FP + -0x6] = r0;
0x0012A2        F3240000                 pop r0;
0x0012A3        F12C7FF9                 M[FP + -0x7] = r0;
0x0012A4        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012A5        F103FFFC                 SP = SP + -4;
0x0012A6        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x0012A7        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012A8        F1287FFC                 r0 = M[FP + -0x4];
0x0012A9        F1387FFD                 r1 = M[FP + -0x3];
0x0012AA        F1487FFE                 r2 = M[FP + -0x2];
0x0012AB        F1587FFF                 r3 = M[FP + -0x1];
0x0012AC        E1F0FF43                 call $kal_filter_coef_lib.__warp;
0x0012AD        0062000F                 r4 = r0 + Null;
0x0012AE        0073000F                 r5 = r1 + Null;
0x0012AF        01400080                 r2 = Null + 128;
0x0012B0        FD000080 01500000        r3 = Null + -8388608;
0x0012B2        E1F00554                 call $kal_float_lib.add;
0x0012B3        E1F0057A                 call $kal_float_lib.recip;
0x0012B4        0082000F                 r6 = r0 + Null;
0x0012B5        0093000F                 r7 = r1 + Null;
0x0012B6        F1030006                 SP = SP + 6;
0x0012B7        F100000C                 pushm <r0, r1>;
0x0012B8        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0012BA        F100000C                 pushm <r0, r1>;
0x0012BB        01200000                 r0 = Null + 0;
0x0012BC        01300000                 r1 = Null + 0;
0x0012BD        F100000C                 pushm <r0, r1>;
0x0012BE        0026000F                 r0 = r4 + Null;
0x0012BF        0037000F                 r1 = r5 + Null;
0x0012C0        01400080                 r2 = Null + 128;
0x0012C1        FD000080 01500000        r3 = Null + -8388608;
0x0012C3        E1F0054C                 call $kal_float_lib.sub;
0x0012C4        0048000F                 r2 = r6 + Null;
0x0012C5        0059000F                 r3 = r7 + Null;
0x0012C6        E1F00552                 call $kal_float_lib.mul;
0x0012C7        F100000C                 pushm <r0, r1>;
0x0012C8        01200000                 r0 = Null + 0;
0x0012C9        01300000                 r1 = Null + 0;
0x0012CA        F100000C                 pushm <r0, r1>;
0x0012CB        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0012CC        F3240000                 pop r0;
0x0012CD        F12C7FF6                 M[FP + -0xa] = r0;
0x0012CE        F3240000                 pop r0;
0x0012CF        F12C7FF8                 M[FP + -0x8] = r0;
0x0012D0        F3240000                 pop r0;
0x0012D1        F12C7FF7                 M[FP + -0x9] = r0;
0x0012D2        F3240000                 pop r0;
0x0012D3        F12C7FFB                 M[FP + -0x5] = r0;
0x0012D4        F3240000                 pop r0;
0x0012D5        F12C7FFA                 M[FP + -0x6] = r0;
0x0012D6        F3240000                 pop r0;
0x0012D7        F12C7FF9                 M[FP + -0x7] = r0;
0x0012D8        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012D9        F103FFFC                 SP = SP + -4;
0x0012DA        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x0012DB        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012DC        F1287FFC                 r0 = M[FP + -0x4];
0x0012DD        F1387FFD                 r1 = M[FP + -0x3];
0x0012DE        F1487FFE                 r2 = M[FP + -0x2];
0x0012DF        F1587FFF                 r3 = M[FP + -0x1];
0x0012E0        E1F0FF0F                 call $kal_filter_coef_lib.__warp;
0x0012E1        0062000F                 r4 = r0 + Null;
0x0012E2        0073000F                 r5 = r1 + Null;
0x0012E3        01400080                 r2 = Null + 128;
0x0012E4        FD000080 01500000        r3 = Null + -8388608;
0x0012E6        E1F00520                 call $kal_float_lib.add;
0x0012E7        E1F00546                 call $kal_float_lib.recip;
0x0012E8        0082000F                 r6 = r0 + Null;
0x0012E9        0093000F                 r7 = r1 + Null;
0x0012EA        F1030006                 SP = SP + 6;
0x0012EB        01200080                 r0 = Null + 128;
0x0012EC        FD000080 01300000        r1 = Null + -8388608;
0x0012EE        0046000F                 r2 = r4 + Null;
0x0012EF        0057000F                 r3 = r5 + Null;
0x0012F0        E1F0051F                 call $kal_float_lib.sub;
0x0012F1        0048000F                 r2 = r6 + Null;
0x0012F2        0059000F                 r3 = r7 + Null;
0x0012F3        E1F00525                 call $kal_float_lib.mul;
0x0012F4        F100000C                 pushm <r0, r1>;
0x0012F5        0042000F                 r2 = r0 + Null;
0x0012F6        0053000F                 r3 = r1 + Null;
0x0012F7        01200080                 r0 = Null + 128;
0x0012F8        FD000080 01300000        r1 = Null + -8388608;
0x0012FA        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0012FC        F100000C                 pushm <r0, r1>;
0x0012FD        01200000                 r0 = Null + 0;
0x0012FE        01300000                 r1 = Null + 0;
0x0012FF        F100000C                 pushm <r0, r1>;
0x001300        0024000F                 r0 = r2 + Null;
0x001301        0035000F                 r1 = r3 + Null;
0x001302        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001304        F100000C                 pushm <r0, r1>;
0x001305        01200000                 r0 = Null + 0;
0x001306        01300000                 r1 = Null + 0;
0x001307        F100000C                 pushm <r0, r1>;
0x001308        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x001309        F3240000                 pop r0;
0x00130A        F12C7FF6                 M[FP + -0xa] = r0;
0x00130B        F3240000                 pop r0;
0x00130C        F12C7FF8                 M[FP + -0x8] = r0;
0x00130D        F3240000                 pop r0;
0x00130E        F12C7FF7                 M[FP + -0x9] = r0;
0x00130F        F3240000                 pop r0;
0x001310        F12C7FFB                 M[FP + -0x5] = r0;
0x001311        F3240000                 pop r0;
0x001312        F12C7FFA                 M[FP + -0x6] = r0;
0x001313        F3240000                 pop r0;
0x001314        F12C7FF9                 M[FP + -0x7] = r0;
0x001315        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001316        F103FFFC                 SP = SP + -4;
0x001317        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x001318        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001319        F1030004                 SP = SP + 4;
0x00131A        F1287FF8                 r0 = M[FP + -0x8];
0x00131B        F1387FF9                 r1 = M[FP + -0x7];
0x00131C        F1487FFE                 r2 = M[FP + -0x2];
0x00131D        F1587FFF                 r3 = M[FP + -0x1];
0x00131E        E1F0FED1                 call $kal_filter_coef_lib.__warp;
0x00131F        0062000F                 r4 = r0 + Null;
0x001320        0073000F                 r5 = r1 + Null;
0x001321        F1287FFC                 r0 = M[FP + -0x4];
0x001322        F1387FFD                 r1 = M[FP + -0x3];
0x001323        E1F0FEEC                 call $kal_filter_coef_lib.__db2lin;
0x001324        F12C000C                 M[FP + 0xc] = r0;
0x001325        F13C000D                 M[FP + 0xd] = r1;
0x001326        F1287FFA                 r0 = M[FP + -0x6];
0x001327        F1387FFB                 r1 = M[FP + -0x5];
0x001328        E422003F                 r0 = r0 - 1;
0x001329        E1F0FEE6                 call $kal_filter_coef_lib.__db2lin;
0x00132A        0042000F                 r2 = r0 + Null;
0x00132B        0053000F                 r3 = r1 + Null;
0x00132C        0026000F                 r0 = r4 + Null;
0x00132D        0037000F                 r1 = r5 + Null;
0x00132E        E1F0051C                 call $kal_float_lib.div;
0x00132F        0082000F                 r6 = r0 + Null;
0x001330        0093000F                 r7 = r1 + Null;
0x001331        0026000F                 r0 = r4 + Null;
0x001332        0037000F                 r1 = r5 + Null;
0x001333        E1F004E5                 call $kal_float_lib.mul;
0x001334        0062000F                 r4 = r0 + Null;
0x001335        0073000F                 r5 = r1 + Null;
0x001336        0028000F                 r0 = r6 + Null;
0x001337        0039000F                 r1 = r7 + Null;
0x001338        01400080                 r2 = Null + 128;
0x001339        FD000080 01500000        r3 = Null + -8388608;
0x00133B        E1F004CB                 call $kal_float_lib.add;
0x00133C        E1F004F1                 call $kal_float_lib.recip;
0x00133D        F12C000A                 M[FP + 0xa] = r0;
0x00133E        F13C000B                 M[FP + 0xb] = r1;
0x00133F        F1030006                 SP = SP + 6;
0x001340        0026000F                 r0 = r4 + Null;
0x001341        0037000F                 r1 = r5 + Null;
0x001342        01400080                 r2 = Null + 128;
0x001343        FD000080 01500000        r3 = Null + -8388608;
0x001345        E1F004C1                 call $kal_float_lib.add;
0x001346        F148000A                 r2 = M[FP + 0xa];
0x001347        F158000B                 r3 = M[FP + 0xb];
0x001348        E1F004D0                 call $kal_float_lib.mul;
0x001349        F148000C                 r2 = M[FP + 0xc];
0x00134A        F158000D                 r3 = M[FP + 0xd];
0x00134B        E1F004CD                 call $kal_float_lib.mul;
0x00134C        F100000C                 pushm <r0, r1>;
0x00134D        0026000F                 r0 = r4 + Null;
0x00134E        0037000F                 r1 = r5 + Null;
0x00134F        01400080                 r2 = Null + 128;
0x001350        FD000080 01500000        r3 = Null + -8388608;
0x001352        E1F004BD                 call $kal_float_lib.sub;
0x001353        F148000A                 r2 = M[FP + 0xa];
0x001354        F158000B                 r3 = M[FP + 0xb];
0x001355        E1F004C3                 call $kal_float_lib.mul;
0x001356        F148000C                 r2 = M[FP + 0xc];
0x001357        F158000D                 r3 = M[FP + 0xd];
0x001358        E1F004C0                 call $kal_float_lib.mul;
0x001359        F100000C                 pushm <r0, r1>;
0x00135A        01200000                 r0 = Null + 0;
0x00135B        01300000                 r1 = Null + 0;
0x00135C        F100000C                 pushm <r0, r1>;
0x00135D        0028000F                 r0 = r6 + Null;
0x00135E        0039000F                 r1 = r7 + Null;
0x00135F        01400080                 r2 = Null + 128;
0x001360        FD000080 01500000        r3 = Null + -8388608;
0x001362        E1F004AD                 call $kal_float_lib.sub;
0x001363        F148000A                 r2 = M[FP + 0xa];
0x001364        F158000B                 r3 = M[FP + 0xb];
0x001365        E1F004B3                 call $kal_float_lib.mul;
0x001366        F100000C                 pushm <r0, r1>;
0x001367        01200000                 r0 = Null + 0;
0x001368        01300000                 r1 = Null + 0;
0x001369        F100000C                 pushm <r0, r1>;
0x00136A        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x00136B        F3240000                 pop r0;
0x00136C        F12C7FF7                 M[FP + -0x9] = r0;
0x00136D        F3240000                 pop r0;
0x00136E        F12C7FF6                 M[FP + -0xa] = r0;
0x00136F        F3240000                 pop r0;
0x001370        F12C7FF5                 M[FP + -0xb] = r0;
0x001371        F3240000                 pop r0;
0x001372        F12C7FF4                 M[FP + -0xc] = r0;
0x001373        F3240000                 pop r0;
0x001374        F12C7FF3                 M[FP + -0xd] = r0;
0x001375        F3240000                 pop r0;
0x001376        F12C7FF2                 M[FP + -0xe] = r0;
0x001377        F103FFFC                 SP = SP + -4;
0x001378        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001379        F103FFF8                 SP = SP + -8;
0x00137A        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x00137B        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00137C        F1030006                 SP = SP + 6;
0x00137D        F1287FFA                 r0 = M[FP + -0x6];
0x00137E        F1387FFB                 r1 = M[FP + -0x5];
0x00137F        F100000C                 pushm <r0, r1>;
0x001380        F1287FFC                 r0 = M[FP + -0x4];
0x001381        F1387FFD                 r1 = M[FP + -0x3];
0x001382        F100000C                 pushm <r0, r1>;
0x001383        01200000                 r0 = Null + 0;
0x001384        01300000                 r1 = Null + 0;
0x001385        F100000C                 pushm <r0, r1>;
0x001386        F1287FFE                 r0 = M[FP + -0x2];
0x001387        F1387FFF                 r1 = M[FP + -0x1];
0x001388        F100000C                 pushm <r0, r1>;
0x001389        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x00138A        F3240000                 pop r0;
0x00138B        F12C7FF4                 M[FP + -0xc] = r0;
0x00138C        F3240000                 pop r0;
0x00138D        F12C7FF6                 M[FP + -0xa] = r0;
0x00138E        F3240000                 pop r0;
0x00138F        F12C7FF5                 M[FP + -0xb] = r0;
0x001390        F3240000                 pop r0;
0x001391        F12C7FF9                 M[FP + -0x7] = r0;
0x001392        F3240000                 pop r0;
0x001393        F12C7FF8                 M[FP + -0x8] = r0;
0x001394        F3240000                 pop r0;
0x001395        F12C7FF7                 M[FP + -0x9] = r0;
0x001396        F104200D                 popm <FP, r0, r1, rLink>;
0x001397        F103FFFA                 SP = SP + -6;
0x001398        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x001399        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00139A        F1030006                 SP = SP + 6;
0x00139B        F1287FFA                 r0 = M[FP + -0x6];
0x00139C        F1387FFB                 r1 = M[FP + -0x5];
0x00139D        F100000C                 pushm <r0, r1>;
0x00139E        F1287FFC                 r0 = M[FP + -0x4];
0x00139F        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013A1        F1387FFD                 r1 = M[FP + -0x3];
0x0013A2        F100000C                 pushm <r0, r1>;
0x0013A3        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013A5        F100000C                 pushm <r0, r1>;
0x0013A6        F1287FFE                 r0 = M[FP + -0x2];
0x0013A7        F1387FFF                 r1 = M[FP + -0x1];
0x0013A8        F100000C                 pushm <r0, r1>;
0x0013A9        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0013AA        F3240000                 pop r0;
0x0013AB        F12C7FF4                 M[FP + -0xc] = r0;
0x0013AC        F3240000                 pop r0;
0x0013AD        F12C7FF6                 M[FP + -0xa] = r0;
0x0013AE        F3240000                 pop r0;
0x0013AF        F12C7FF5                 M[FP + -0xb] = r0;
0x0013B0        F3240000                 pop r0;
0x0013B1        F12C7FF9                 M[FP + -0x7] = r0;
0x0013B2        F3240000                 pop r0;
0x0013B3        F12C7FF8                 M[FP + -0x8] = r0;
0x0013B4        F3240000                 pop r0;
0x0013B5        F12C7FF7                 M[FP + -0x9] = r0;
0x0013B6        F104200D                 popm <FP, r0, r1, rLink>;
0x0013B7        F103FFFA                 SP = SP + -6;
0x0013B8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x0013B9        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0013BA        F1030006                 SP = SP + 6;
0x0013BB        F1287FFA                 r0 = M[FP + -0x6];
0x0013BC        F1387FFB                 r1 = M[FP + -0x5];
0x0013BD        F100000C                 pushm <r0, r1>;
0x0013BE        F1287FFC                 r0 = M[FP + -0x4];
0x0013BF        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013C1        F1387FFD                 r1 = M[FP + -0x3];
0x0013C2        F100000C                 pushm <r0, r1>;
0x0013C3        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013C5        E422003F                 r0 = r0 - 1;
0x0013C6        F100000C                 pushm <r0, r1>;
0x0013C7        F1287FFE                 r0 = M[FP + -0x2];
0x0013C8        F1387FFF                 r1 = M[FP + -0x1];
0x0013C9        F100000C                 pushm <r0, r1>;
0x0013CA        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0013CB        F3240000                 pop r0;
0x0013CC        F12C7FF4                 M[FP + -0xc] = r0;
0x0013CD        F3240000                 pop r0;
0x0013CE        F12C7FF6                 M[FP + -0xa] = r0;
0x0013CF        F3240000                 pop r0;
0x0013D0        F12C7FF5                 M[FP + -0xb] = r0;
0x0013D1        F3240000                 pop r0;
0x0013D2        F12C7FF9                 M[FP + -0x7] = r0;
0x0013D3        F3240000                 pop r0;
0x0013D4        F12C7FF8                 M[FP + -0x8] = r0;
0x0013D5        F3240000                 pop r0;
0x0013D6        F12C7FF7                 M[FP + -0x9] = r0;
0x0013D7        F104200D                 popm <FP, r0, r1, rLink>;
0x0013D8        F103FFFA                 SP = SP + -6;
0x0013D9        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x0013DA        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0013DB        F1030002                 SP = SP + 2;
0x0013DC        F1287FFA                 r0 = M[FP + -0x6];
0x0013DD        F1387FFB                 r1 = M[FP + -0x5];
0x0013DE        F1487FFE                 r2 = M[FP + -0x2];
0x0013DF        F1587FFF                 r3 = M[FP + -0x1];
0x0013E0        E1F0FE0F                 call $kal_filter_coef_lib.__warp;
0x0013E1        0042000F                 r2 = r0 + Null;
0x0013E2        0053000F                 r3 = r1 + Null;
0x0013E3        E1F00435                 call $kal_float_lib.mul;
0x0013E4        0082000F                 r6 = r0 + Null;
0x0013E5        0093000F                 r7 = r1 + Null;
0x0013E6        0024000F                 r0 = r2 + Null;
0x0013E7        0035000F                 r1 = r3 + Null;
0x0013E8        F1487FFC                 r2 = M[FP + -0x4];
0x0013E9        F1587FFD                 r3 = M[FP + -0x3];
0x0013EA        E1F00460                 call $kal_float_lib.div;
0x0013EB        0062000F                 r4 = r0 + Null;
0x0013EC        0073000F                 r5 = r1 + Null;
0x0013ED        0048000F                 r2 = r6 + Null;
0x0013EE        0059000F                 r3 = r7 + Null;
0x0013EF        E1F00417                 call $kal_float_lib.add;
0x0013F0        01400080                 r2 = Null + 128;
0x0013F1        FD000080 01500000        r3 = Null + -8388608;
0x0013F3        E1F00413                 call $kal_float_lib.add;
0x0013F4        E1F00439                 call $kal_float_lib.recip;
0x0013F5        F12C000A                 M[FP + 0xa] = r0;
0x0013F6        F13C000B                 M[FP + 0xb] = r1;
0x0013F7        F1030006                 SP = SP + 6;
0x0013F8        0028000F                 r0 = r6 + Null;
0x0013F9        0039000F                 r1 = r7 + Null;
0x0013FA        F148000A                 r2 = M[FP + 0xa];
0x0013FB        F158000B                 r3 = M[FP + 0xb];
0x0013FC        E1F0041C                 call $kal_float_lib.mul;
0x0013FD        F100000C                 pushm <r0, r1>;
0x0013FE        E422002F                 r0 = r0 + 1;
0x0013FF        F100000C                 pushm <r0, r1>;
0x001400        E422003F                 r0 = r0 - 1;
0x001401        F100000C                 pushm <r0, r1>;
0x001402        0028000F                 r0 = r6 + Null;
0x001403        0039000F                 r1 = r7 + Null;
0x001404        01400081                 r2 = Null + 129;
0x001405        FD000080 01500000        r3 = Null + -8388608;
0x001407        E1F00411                 call $kal_float_lib.mul;
0x001408        E1F00407                 call $kal_float_lib.sub;
0x001409        F148000A                 r2 = M[FP + 0xa];
0x00140A        F158000B                 r3 = M[FP + 0xb];
0x00140B        E1F0040D                 call $kal_float_lib.mul;
0x00140C        F100000C                 pushm <r0, r1>;
0x00140D        0028000F                 r0 = r6 + Null;
0x00140E        0039000F                 r1 = r7 + Null;
0x00140F        0046000F                 r2 = r4 + Null;
0x001410        0057000F                 r3 = r5 + Null;
0x001411        E1F003FE                 call $kal_float_lib.sub;
0x001412        01400080                 r2 = Null + 128;
0x001413        FD000080 01500000        r3 = Null + -8388608;
0x001415        E1F003F1                 call $kal_float_lib.add;
0x001416        F148000A                 r2 = M[FP + 0xa];
0x001417        F158000B                 r3 = M[FP + 0xb];
0x001418        E1F00400                 call $kal_float_lib.mul;
0x001419        F100000C                 pushm <r0, r1>;
0x00141A        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x00141B        F3240000                 pop r0;
0x00141C        F12C7FF4                 M[FP + -0xc] = r0;
0x00141D        F3240000                 pop r0;
0x00141E        F12C7FF6                 M[FP + -0xa] = r0;
0x00141F        F3240000                 pop r0;
0x001420        F12C7FF5                 M[FP + -0xb] = r0;
0x001421        F3240000                 pop r0;
0x001422        F12C7FF9                 M[FP + -0x7] = r0;
0x001423        F3240000                 pop r0;
0x001424        F12C7FF8                 M[FP + -0x8] = r0;
0x001425        F3240000                 pop r0;
0x001426        F12C7FF7                 M[FP + -0x9] = r0;
0x001427        F103FFFE                 SP = SP + -2;
0x001428        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001429        F103FFFA                 SP = SP + -6;
0x00142A        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x00142B        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00142C        F1030002                 SP = SP + 2;
0x00142D        F1287FFA                 r0 = M[FP + -0x6];
0x00142E        F1387FFB                 r1 = M[FP + -0x5];
0x00142F        F1487FFE                 r2 = M[FP + -0x2];
0x001430        F1587FFF                 r3 = M[FP + -0x1];
0x001431        E1F0FDBE                 call $kal_filter_coef_lib.__warp;
0x001432        0042000F                 r2 = r0 + Null;
0x001433        0053000F                 r3 = r1 + Null;
0x001434        E1F003E4                 call $kal_float_lib.mul;
0x001435        0082000F                 r6 = r0 + Null;
0x001436        0093000F                 r7 = r1 + Null;
0x001437        0024000F                 r0 = r2 + Null;
0x001438        0035000F                 r1 = r3 + Null;
0x001439        F1487FFC                 r2 = M[FP + -0x4];
0x00143A        F1587FFD                 r3 = M[FP + -0x3];
0x00143B        E1F0040F                 call $kal_float_lib.div;
0x00143C        0062000F                 r4 = r0 + Null;
0x00143D        0073000F                 r5 = r1 + Null;
0x00143E        0048000F                 r2 = r6 + Null;
0x00143F        0059000F                 r3 = r7 + Null;
0x001440        E1F003C6                 call $kal_float_lib.add;
0x001441        01400080                 r2 = Null + 128;
0x001442        FD000080 01500000        r3 = Null + -8388608;
0x001444        E1F003C2                 call $kal_float_lib.add;
0x001445        E1F003E8                 call $kal_float_lib.recip;
0x001446        F12C000A                 M[FP + 0xa] = r0;
0x001447        F13C000B                 M[FP + 0xb] = r1;
0x001448        F1030006                 SP = SP + 6;
0x001449        F100000C                 pushm <r0, r1>;
0x00144A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00144C        E422002F                 r0 = r0 + 1;
0x00144D        F100000C                 pushm <r0, r1>;
0x00144E        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001450        E422003F                 r0 = r0 - 1;
0x001451        F100000C                 pushm <r0, r1>;
0x001452        0028000F                 r0 = r6 + Null;
0x001453        0039000F                 r1 = r7 + Null;
0x001454        01400081                 r2 = Null + 129;
0x001455        FD000080 01500000        r3 = Null + -8388608;
0x001457        E1F003C1                 call $kal_float_lib.mul;
0x001458        E1F003B7                 call $kal_float_lib.sub;
0x001459        F148000A                 r2 = M[FP + 0xa];
0x00145A        F158000B                 r3 = M[FP + 0xb];
0x00145B        E1F003BD                 call $kal_float_lib.mul;
0x00145C        F100000C                 pushm <r0, r1>;
0x00145D        0028000F                 r0 = r6 + Null;
0x00145E        0039000F                 r1 = r7 + Null;
0x00145F        0046000F                 r2 = r4 + Null;
0x001460        0057000F                 r3 = r5 + Null;
0x001461        E1F003AE                 call $kal_float_lib.sub;
0x001462        01400080                 r2 = Null + 128;
0x001463        FD000080 01500000        r3 = Null + -8388608;
0x001465        E1F003A1                 call $kal_float_lib.add;
0x001466        F148000A                 r2 = M[FP + 0xa];
0x001467        F158000B                 r3 = M[FP + 0xb];
0x001468        E1F003B0                 call $kal_float_lib.mul;
0x001469        F100000C                 pushm <r0, r1>;
0x00146A        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x00146B        F3240000                 pop r0;
0x00146C        F12C7FF4                 M[FP + -0xc] = r0;
0x00146D        F3240000                 pop r0;
0x00146E        F12C7FF6                 M[FP + -0xa] = r0;
0x00146F        F3240000                 pop r0;
0x001470        F12C7FF5                 M[FP + -0xb] = r0;
0x001471        F3240000                 pop r0;
0x001472        F12C7FF9                 M[FP + -0x7] = r0;
0x001473        F3240000                 pop r0;
0x001474        F12C7FF8                 M[FP + -0x8] = r0;
0x001475        F3240000                 pop r0;
0x001476        F12C7FF7                 M[FP + -0x9] = r0;
0x001477        F103FFFE                 SP = SP + -2;
0x001478        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001479        F103FFFA                 SP = SP + -6;
0x00147A        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x00147B        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00147C        F1030002                 SP = SP + 2;
0x00147D        F1287FFA                 r0 = M[FP + -0x6];
0x00147E        F1387FFB                 r1 = M[FP + -0x5];
0x00147F        F1487FFE                 r2 = M[FP + -0x2];
0x001480        F1587FFF                 r3 = M[FP + -0x1];
0x001481        E1F0FD6E                 call $kal_filter_coef_lib.__warp;
0x001482        0042000F                 r2 = r0 + Null;
0x001483        0053000F                 r3 = r1 + Null;
0x001484        E1F00394                 call $kal_float_lib.mul;
0x001485        0082000F                 r6 = r0 + Null;
0x001486        0093000F                 r7 = r1 + Null;
0x001487        0024000F                 r0 = r2 + Null;
0x001488        0035000F                 r1 = r3 + Null;
0x001489        F1487FFC                 r2 = M[FP + -0x4];
0x00148A        F1587FFD                 r3 = M[FP + -0x3];
0x00148B        E1F003BF                 call $kal_float_lib.div;
0x00148C        0062000F                 r4 = r0 + Null;
0x00148D        0073000F                 r5 = r1 + Null;
0x00148E        0048000F                 r2 = r6 + Null;
0x00148F        0059000F                 r3 = r7 + Null;
0x001490        E1F00376                 call $kal_float_lib.add;
0x001491        01400080                 r2 = Null + 128;
0x001492        FD000080 01500000        r3 = Null + -8388608;
0x001494        E1F00372                 call $kal_float_lib.add;
0x001495        E1F00398                 call $kal_float_lib.recip;
0x001496        F12C000A                 M[FP + 0xa] = r0;
0x001497        F13C000B                 M[FP + 0xb] = r1;
0x001498        F1030006                 SP = SP + 6;
0x001499        0028000F                 r0 = r6 + Null;
0x00149A        0039000F                 r1 = r7 + Null;
0x00149B        0046000F                 r2 = r4 + Null;
0x00149C        0057000F                 r3 = r5 + Null;
0x00149D        E1F00372                 call $kal_float_lib.sub;
0x00149E        01400080                 r2 = Null + 128;
0x00149F        FD000080 01500000        r3 = Null + -8388608;
0x0014A1        E1F00365                 call $kal_float_lib.add;
0x0014A2        F148000A                 r2 = M[FP + 0xa];
0x0014A3        F158000B                 r3 = M[FP + 0xb];
0x0014A4        E1F00374                 call $kal_float_lib.mul;
0x0014A5        F100000C                 pushm <r0, r1>;
0x0014A6        0062000F                 r4 = r0 + Null;
0x0014A7        0073000F                 r5 = r1 + Null;
0x0014A8        0028000F                 r0 = r6 + Null;
0x0014A9        0039000F                 r1 = r7 + Null;
0x0014AA        01400081                 r2 = Null + 129;
0x0014AB        FD000080 01500000        r3 = Null + -8388608;
0x0014AD        E1F0036B                 call $kal_float_lib.mul;
0x0014AE        E1F00361                 call $kal_float_lib.sub;
0x0014AF        F148000A                 r2 = M[FP + 0xa];
0x0014B0        F158000B                 r3 = M[FP + 0xb];
0x0014B1        E1F00367                 call $kal_float_lib.mul;
0x0014B2        F100000C                 pushm <r0, r1>;
0x0014B3        0082000F                 r6 = r0 + Null;
0x0014B4        0093000F                 r7 = r1 + Null;
0x0014B5        01200080                 r0 = Null + 128;
0x0014B6        FD000080 01300000        r1 = Null + -8388608;
0x0014B8        F100000C                 pushm <r0, r1>;
0x0014B9        F1000300                 pushm <r6, r7>;
0x0014BA        F10000C0                 pushm <r4, r5>;
0x0014BB        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0014BC        F3240000                 pop r0;
0x0014BD        F12C7FF4                 M[FP + -0xc] = r0;
0x0014BE        F3240000                 pop r0;
0x0014BF        F12C7FF6                 M[FP + -0xa] = r0;
0x0014C0        F3240000                 pop r0;
0x0014C1        F12C7FF5                 M[FP + -0xb] = r0;
0x0014C2        F3240000                 pop r0;
0x0014C3        F12C7FF9                 M[FP + -0x7] = r0;
0x0014C4        F3240000                 pop r0;
0x0014C5        F12C7FF8                 M[FP + -0x8] = r0;
0x0014C6        F3240000                 pop r0;
0x0014C7        F12C7FF7                 M[FP + -0x9] = r0;
0x0014C8        F103FFFE                 SP = SP + -2;
0x0014C9        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014CA        F103FFFA                 SP = SP + -6;
0x0014CB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x0014CC        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014CD        F1030008                 SP = SP + 8;
0x0014CE        F1287FF6                 r0 = M[FP + -0xa];
0x0014CF        F1387FF7                 r1 = M[FP + -0x9];
0x0014D0        F1487FFE                 r2 = M[FP + -0x2];
0x0014D1        F1587FFF                 r3 = M[FP + -0x1];
0x0014D2        E1F0FD1D                 call $kal_filter_coef_lib.__warp;
0x0014D3        0062000F                 r4 = r0 + Null;
0x0014D4        0073000F                 r5 = r1 + Null;
0x0014D5        F1287FFC                 r0 = M[FP + -0x4];
0x0014D6        F1387FFD                 r1 = M[FP + -0x3];
0x0014D7        E1F0FD38                 call $kal_filter_coef_lib.__db2lin;
0x0014D8        F12C000C                 M[FP + 0xc] = r0;
0x0014D9        F13C000D                 M[FP + 0xd] = r1;
0x0014DA        F1287FF8                 r0 = M[FP + -0x8];
0x0014DB        F1387FF9                 r1 = M[FP + -0x7];
0x0014DC        21220002                 r0 = r0 - 2;
0x0014DD        E1F0FD32                 call $kal_filter_coef_lib.__db2lin;
0x0014DE        0042000F                 r2 = r0 + Null;
0x0014DF        0053000F                 r3 = r1 + Null;
0x0014E0        0026000F                 r0 = r4 + Null;
0x0014E1        0037000F                 r1 = r5 + Null;
0x0014E2        E1F00368                 call $kal_float_lib.div;
0x0014E3        0082000F                 r6 = r0 + Null;
0x0014E4        0093000F                 r7 = r1 + Null;
0x0014E5        0026000F                 r0 = r4 + Null;
0x0014E6        0037000F                 r1 = r5 + Null;
0x0014E7        E1F00331                 call $kal_float_lib.mul;
0x0014E8        0062000F                 r4 = r0 + Null;
0x0014E9        0073000F                 r5 = r1 + Null;
0x0014EA        F1487FFA                 r2 = M[FP + -0x6];
0x0014EB        F1587FFB                 r3 = M[FP + -0x5];
0x0014EC        E1F0035E                 call $kal_float_lib.div;
0x0014ED        F12C000E                 M[FP + 0xe] = r0;
0x0014EE        F13C000F                 M[FP + 0xf] = r1;
0x0014EF        0028000F                 r0 = r6 + Null;
0x0014F0        0039000F                 r1 = r7 + Null;
0x0014F1        E1F00359                 call $kal_float_lib.div;
0x0014F2        F12C0010                 M[FP + 0x10] = r0;
0x0014F3        F13C0011                 M[FP + 0x11] = r1;
0x0014F4        0028000F                 r0 = r6 + Null;
0x0014F5        0039000F                 r1 = r7 + Null;
0x0014F6        0048000F                 r2 = r6 + Null;
0x0014F7        0059000F                 r3 = r7 + Null;
0x0014F8        E1F00320                 call $kal_float_lib.mul;
0x0014F9        0082000F                 r6 = r0 + Null;
0x0014FA        0093000F                 r7 = r1 + Null;
0x0014FB        F1480010                 r2 = M[FP + 0x10];
0x0014FC        F1580011                 r3 = M[FP + 0x11];
0x0014FD        E1F00309                 call $kal_float_lib.add;
0x0014FE        01400080                 r2 = Null + 128;
0x0014FF        FD000080 01500000        r3 = Null + -8388608;
0x001501        E1F00305                 call $kal_float_lib.add;
0x001502        E1F0032B                 call $kal_float_lib.recip;
0x001503        F12C000A                 M[FP + 0xa] = r0;
0x001504        F13C000B                 M[FP + 0xb] = r1;
0x001505        F1030006                 SP = SP + 6;
0x001506        0026000F                 r0 = r4 + Null;
0x001507        0037000F                 r1 = r5 + Null;
0x001508        0046000F                 r2 = r4 + Null;
0x001509        0057000F                 r3 = r5 + Null;
0x00150A        E1F0030E                 call $kal_float_lib.mul;
0x00150B        0062000F                 r4 = r0 + Null;
0x00150C        0073000F                 r5 = r1 + Null;
0x00150D        F148000E                 r2 = M[FP + 0xe];
0x00150E        F158000F                 r3 = M[FP + 0xf];
0x00150F        E1F002F7                 call $kal_float_lib.add;
0x001510        01400080                 r2 = Null + 128;
0x001511        FD000080 01500000        r3 = Null + -8388608;
0x001513        E1F002F3                 call $kal_float_lib.add;
0x001514        F148000A                 r2 = M[FP + 0xa];
0x001515        F158000B                 r3 = M[FP + 0xb];
0x001516        E1F00302                 call $kal_float_lib.mul;
0x001517        F148000C                 r2 = M[FP + 0xc];
0x001518        F158000D                 r3 = M[FP + 0xd];
0x001519        E1F002FF                 call $kal_float_lib.mul;
0x00151A        F100000C                 pushm <r0, r1>;
0x00151B        0026000F                 r0 = r4 + Null;
0x00151C        0037000F                 r1 = r5 + Null;
0x00151D        01400081                 r2 = Null + 129;
0x00151E        FD000080 01500000        r3 = Null + -8388608;
0x001520        E1F002F8                 call $kal_float_lib.mul;
0x001521        E1F002EE                 call $kal_float_lib.sub;
0x001522        F148000A                 r2 = M[FP + 0xa];
0x001523        F158000B                 r3 = M[FP + 0xb];
0x001524        E1F002F4                 call $kal_float_lib.mul;
0x001525        F148000C                 r2 = M[FP + 0xc];
0x001526        F158000D                 r3 = M[FP + 0xd];
0x001527        E1F002F1                 call $kal_float_lib.mul;
0x001528        F100000C                 pushm <r0, r1>;
0x001529        0026000F                 r0 = r4 + Null;
0x00152A        0037000F                 r1 = r5 + Null;
0x00152B        F148000E                 r2 = M[FP + 0xe];
0x00152C        F158000F                 r3 = M[FP + 0xf];
0x00152D        E1F002E2                 call $kal_float_lib.sub;
0x00152E        01400080                 r2 = Null + 128;
0x00152F        FD000080 01500000        r3 = Null + -8388608;
0x001531        E1F002D5                 call $kal_float_lib.add;
0x001532        F148000A                 r2 = M[FP + 0xa];
0x001533        F158000B                 r3 = M[FP + 0xb];
0x001534        E1F002E4                 call $kal_float_lib.mul;
0x001535        F148000C                 r2 = M[FP + 0xc];
0x001536        F158000D                 r3 = M[FP + 0xd];
0x001537        E1F002E1                 call $kal_float_lib.mul;
0x001538        F100000C                 pushm <r0, r1>;
0x001539        0028000F                 r0 = r6 + Null;
0x00153A        0039000F                 r1 = r7 + Null;
0x00153B        01400081                 r2 = Null + 129;
0x00153C        FD000080 01500000        r3 = Null + -8388608;
0x00153E        E1F002DA                 call $kal_float_lib.mul;
0x00153F        E1F002D0                 call $kal_float_lib.sub;
0x001540        F148000A                 r2 = M[FP + 0xa];
0x001541        F158000B                 r3 = M[FP + 0xb];
0x001542        E1F002D6                 call $kal_float_lib.mul;
0x001543        F100000C                 pushm <r0, r1>;
0x001544        0028000F                 r0 = r6 + Null;
0x001545        0039000F                 r1 = r7 + Null;
0x001546        F1480010                 r2 = M[FP + 0x10];
0x001547        F1580011                 r3 = M[FP + 0x11];
0x001548        E1F002C7                 call $kal_float_lib.sub;
0x001549        01400080                 r2 = Null + 128;
0x00154A        FD000080 01500000        r3 = Null + -8388608;
0x00154C        E1F002BA                 call $kal_float_lib.add;
0x00154D        F148000A                 r2 = M[FP + 0xa];
0x00154E        F158000B                 r3 = M[FP + 0xb];
0x00154F        E1F002C9                 call $kal_float_lib.mul;
0x001550        F100000C                 pushm <r0, r1>;
0x001551        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x001552        F3240000                 pop r0;
0x001553        F12C7FF5                 M[FP + -0xb] = r0;
0x001554        F3240000                 pop r0;
0x001555        F12C7FF4                 M[FP + -0xc] = r0;
0x001556        F3240000                 pop r0;
0x001557        F12C7FF3                 M[FP + -0xd] = r0;
0x001558        F3240000                 pop r0;
0x001559        F12C7FF2                 M[FP + -0xe] = r0;
0x00155A        F3240000                 pop r0;
0x00155B        F12C7FF1                 M[FP + -0xf] = r0;
0x00155C        F3240000                 pop r0;
0x00155D        F12C7FF0                 M[FP + -0x10] = r0;
0x00155E        F103FFF8                 SP = SP + -8;
0x00155F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001560        F103FFF6                 SP = SP + -10;
0x001561        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x001562        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001563        F1030006                 SP = SP + 6;
0x001564        F1287FF8                 r0 = M[FP + -0x8];
0x001565        F1387FF9                 r1 = M[FP + -0x7];
0x001566        F100000C                 pushm <r0, r1>;
0x001567        F1287FFA                 r0 = M[FP + -0x6];
0x001568        F1387FFB                 r1 = M[FP + -0x5];
0x001569        F100000C                 pushm <r0, r1>;
0x00156A        F1287FFC                 r0 = M[FP + -0x4];
0x00156B        F1387FFD                 r1 = M[FP + -0x3];
0x00156C        F100000C                 pushm <r0, r1>;
0x00156D        01200000                 r0 = Null + 0;
0x00156E        01300000                 r1 = Null + 0;
0x00156F        F100000C                 pushm <r0, r1>;
0x001570        F1287FFE                 r0 = M[FP + -0x2];
0x001571        F1387FFF                 r1 = M[FP + -0x1];
0x001572        F100000C                 pushm <r0, r1>;
0x001573        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001574        F3240000                 pop r0;
0x001575        F12C7FF2                 M[FP + -0xe] = r0;
0x001576        F3240000                 pop r0;
0x001577        F12C7FF4                 M[FP + -0xc] = r0;
0x001578        F3240000                 pop r0;
0x001579        F12C7FF3                 M[FP + -0xd] = r0;
0x00157A        F3240000                 pop r0;
0x00157B        F12C7FF7                 M[FP + -0x9] = r0;
0x00157C        F3240000                 pop r0;
0x00157D        F12C7FF6                 M[FP + -0xa] = r0;
0x00157E        F3240000                 pop r0;
0x00157F        F12C7FF5                 M[FP + -0xb] = r0;
0x001580        F104200D                 popm <FP, r0, r1, rLink>;
0x001581        F103FFF8                 SP = SP + -8;
0x001582        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x001583        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001584        F1030006                 SP = SP + 6;
0x001585        F1287FF8                 r0 = M[FP + -0x8];
0x001586        F1387FF9                 r1 = M[FP + -0x7];
0x001587        F100000C                 pushm <r0, r1>;
0x001588        F1287FFA                 r0 = M[FP + -0x6];
0x001589        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00158B        F1387FFB                 r1 = M[FP + -0x5];
0x00158C        F100000C                 pushm <r0, r1>;
0x00158D        F1287FFC                 r0 = M[FP + -0x4];
0x00158E        F1387FFD                 r1 = M[FP + -0x3];
0x00158F        F100000C                 pushm <r0, r1>;
0x001590        F1287FFA                 r0 = M[FP + -0x6];
0x001591        F1387FFB                 r1 = M[FP + -0x5];
0x001592        F100000C                 pushm <r0, r1>;
0x001593        F1287FFE                 r0 = M[FP + -0x2];
0x001594        F1387FFF                 r1 = M[FP + -0x1];
0x001595        F100000C                 pushm <r0, r1>;
0x001596        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001597        F3240000                 pop r0;
0x001598        F12C7FF2                 M[FP + -0xe] = r0;
0x001599        F3240000                 pop r0;
0x00159A        F12C7FF4                 M[FP + -0xc] = r0;
0x00159B        F3240000                 pop r0;
0x00159C        F12C7FF3                 M[FP + -0xd] = r0;
0x00159D        F3240000                 pop r0;
0x00159E        F12C7FF7                 M[FP + -0x9] = r0;
0x00159F        F3240000                 pop r0;
0x0015A0        F12C7FF6                 M[FP + -0xa] = r0;
0x0015A1        F3240000                 pop r0;
0x0015A2        F12C7FF5                 M[FP + -0xb] = r0;
0x0015A3        F104200D                 popm <FP, r0, r1, rLink>;
0x0015A4        F103FFF8                 SP = SP + -8;
0x0015A5        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x0015A6        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0015A7        F1030006                 SP = SP + 6;
0x0015A8        F1287FF8                 r0 = M[FP + -0x8];
0x0015A9        F1387FF9                 r1 = M[FP + -0x7];
0x0015AA        F100000C                 pushm <r0, r1>;
0x0015AB        F1287FFA                 r0 = M[FP + -0x6];
0x0015AC        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015AE        F1387FFB                 r1 = M[FP + -0x5];
0x0015AF        F100000C                 pushm <r0, r1>;
0x0015B0        F1287FFC                 r0 = M[FP + -0x4];
0x0015B1        F1387FFD                 r1 = M[FP + -0x3];
0x0015B2        F100000C                 pushm <r0, r1>;
0x0015B3        F1287FFA                 r0 = M[FP + -0x6];
0x0015B4        E422003F                 r0 = r0 - 1;
0x0015B5        F1387FFB                 r1 = M[FP + -0x5];
0x0015B6        F100000C                 pushm <r0, r1>;
0x0015B7        F1287FFE                 r0 = M[FP + -0x2];
0x0015B8        F1387FFF                 r1 = M[FP + -0x1];
0x0015B9        F100000C                 pushm <r0, r1>;
0x0015BA        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0015BB        F3240000                 pop r0;
0x0015BC        F12C7FF2                 M[FP + -0xe] = r0;
0x0015BD        F3240000                 pop r0;
0x0015BE        F12C7FF4                 M[FP + -0xc] = r0;
0x0015BF        F3240000                 pop r0;
0x0015C0        F12C7FF3                 M[FP + -0xd] = r0;
0x0015C1        F3240000                 pop r0;
0x0015C2        F12C7FF7                 M[FP + -0x9] = r0;
0x0015C3        F3240000                 pop r0;
0x0015C4        F12C7FF6                 M[FP + -0xa] = r0;
0x0015C5        F3240000                 pop r0;
0x0015C6        F12C7FF5                 M[FP + -0xb] = r0;
0x0015C7        F104200D                 popm <FP, r0, r1, rLink>;
0x0015C8        F103FFF8                 SP = SP + -8;
0x0015C9        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x0015CA        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015CB        F1030004                 SP = SP + 4;
0x0015CC        F1287FFC                 r0 = M[FP + -0x4];
0x0015CD        E422002F                 r0 = r0 + 1;
0x0015CE        F1387FFD                 r1 = M[FP + -0x3];
0x0015CF        E1F0025E                 call $kal_float_lib.recip;
0x0015D0        FD000080 85220000        r0 = r0 OR 0x800000;
0x0015D2        0042000F                 r2 = r0 + Null;
0x0015D3        0053000F                 r3 = r1 + Null;
0x0015D4        0062000F                 r4 = r0 + Null;
0x0015D5        0073000F                 r5 = r1 + Null;
0x0015D6        E1F00242                 call $kal_float_lib.mul;
0x0015D7        01400080                 r2 = Null + 128;
0x0015D8        FD000080 01500000        r3 = Null + -8388608;
0x0015DA        E1F0022C                 call $kal_float_lib.add;
0x0015DB        E1F0027B                 call $kal_float_lib.rsqrt;
0x0015DC        E1F00251                 call $kal_float_lib.recip;
0x0015DD        0046000F                 r2 = r4 + Null;
0x0015DE        0057000F                 r3 = r5 + Null;
0x0015DF        E1F00227                 call $kal_float_lib.add;
0x0015E0        F1487FF8                 r2 = M[FP + -0x8];
0x0015E1        F1587FF9                 r3 = M[FP + -0x7];
0x0015E2        E1F00236                 call $kal_float_lib.mul;
0x0015E3        F1487FFE                 r2 = M[FP + -0x2];
0x0015E4        F1587FFF                 r3 = M[FP + -0x1];
0x0015E5        E1F0FC0A                 call $kal_filter_coef_lib.__warp;
0x0015E6        0062000F                 r4 = r0 + Null;
0x0015E7        0073000F                 r5 = r1 + Null;
0x0015E8        F1287FF8                 r0 = M[FP + -0x8];
0x0015E9        F1387FF9                 r1 = M[FP + -0x7];
0x0015EA        E1F0FC05                 call $kal_filter_coef_lib.__warp;
0x0015EB        F12C000A                 M[FP + 0xa] = r0;
0x0015EC        F13C000B                 M[FP + 0xb] = r1;
0x0015ED        0042000F                 r2 = r0 + Null;
0x0015EE        0053000F                 r3 = r1 + Null;
0x0015EF        E1F00229                 call $kal_float_lib.mul;
0x0015F0        F1000030                 pushm <r2, r3>;
0x0015F1        F100000C                 pushm <r0, r1>;
0x0015F2        0026000F                 r0 = r4 + Null;
0x0015F3        0037000F                 r1 = r5 + Null;
0x0015F4        0046000F                 r2 = r4 + Null;
0x0015F5        0057000F                 r3 = r5 + Null;
0x0015F6        E1F00222                 call $kal_float_lib.mul;
0x0015F7        F1040030                 popm <r2, r3>;
0x0015F8        E1F00217                 call $kal_float_lib.sub;
0x0015F9        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015FB        E1F00232                 call $kal_float_lib.recip;
0x0015FC        F1040030                 popm <r2, r3>;
0x0015FD        E1F0021B                 call $kal_float_lib.mul;
0x0015FE        0046000F                 r2 = r4 + Null;
0x0015FF        0057000F                 r3 = r5 + Null;
0x001600        E1F00218                 call $kal_float_lib.mul;
0x001601        0062000F                 r4 = r0 + Null;
0x001602        0073000F                 r5 = r1 + Null;
0x001603        F1287FFA                 r0 = M[FP + -0x6];
0x001604        F1387FFB                 r1 = M[FP + -0x5];
0x001605        0140007F                 r2 = Null + 127;
0x001606        FD000080 01500000        r3 = Null + -8388608;
0x001608        E1F00210                 call $kal_float_lib.mul;
0x001609        E1F0FC06                 call $kal_filter_coef_lib.__db2lin;
0x00160A        0042000F                 r2 = r0 + Null;
0x00160B        0053000F                 r3 = r1 + Null;
0x00160C        0026000F                 r0 = r4 + Null;
0x00160D        0037000F                 r1 = r5 + Null;
0x00160E        E1F0020A                 call $kal_float_lib.mul;
0x00160F        0082000F                 r6 = r0 + Null;
0x001610        0093000F                 r7 = r1 + Null;
0x001611        0026000F                 r0 = r4 + Null;
0x001612        0037000F                 r1 = r5 + Null;
0x001613        E1F00237                 call $kal_float_lib.div;
0x001614        0042000F                 r2 = r0 + Null;
0x001615        0053000F                 r3 = r1 + Null;
0x001616        F128000A                 r0 = M[FP + 0xa];
0x001617        F138000B                 r1 = M[FP + 0xb];
0x001618        E1F00232                 call $kal_float_lib.div;
0x001619        0062000F                 r4 = r0 + Null;
0x00161A        0073000F                 r5 = r1 + Null;
0x00161B        F128000A                 r0 = M[FP + 0xa];
0x00161C        F138000B                 r1 = M[FP + 0xb];
0x00161D        0048000F                 r2 = r6 + Null;
0x00161E        0059000F                 r3 = r7 + Null;
0x00161F        E1F0022B                 call $kal_float_lib.div;
0x001620        0082000F                 r6 = r0 + Null;
0x001621        0093000F                 r7 = r1 + Null;
0x001622        F128000A                 r0 = M[FP + 0xa];
0x001623        F138000B                 r1 = M[FP + 0xb];
0x001624        0042000F                 r2 = r0 + Null;
0x001625        0053000F                 r3 = r1 + Null;
0x001626        E1F001F2                 call $kal_float_lib.mul;
0x001627        F12C000A                 M[FP + 0xa] = r0;
0x001628        F13C000B                 M[FP + 0xb] = r1;
0x001629        0048000F                 r2 = r6 + Null;
0x00162A        0059000F                 r3 = r7 + Null;
0x00162B        E1F001DB                 call $kal_float_lib.add;
0x00162C        01400080                 r2 = Null + 128;
0x00162D        FD000080 01500000        r3 = Null + -8388608;
0x00162F        E1F001D7                 call $kal_float_lib.add;
0x001630        E1F001FD                 call $kal_float_lib.recip;
0x001631        F12C000C                 M[FP + 0xc] = r0;
0x001632        F13C000D                 M[FP + 0xd] = r1;
0x001633        F1030006                 SP = SP + 6;
0x001634        F128000A                 r0 = M[FP + 0xa];
0x001635        F138000B                 r1 = M[FP + 0xb];
0x001636        0046000F                 r2 = r4 + Null;
0x001637        0057000F                 r3 = r5 + Null;
0x001638        E1F001CE                 call $kal_float_lib.add;
0x001639        01400080                 r2 = Null + 128;
0x00163A        FD000080 01500000        r3 = Null + -8388608;
0x00163C        E1F001CA                 call $kal_float_lib.add;
0x00163D        F148000C                 r2 = M[FP + 0xc];
0x00163E        F158000D                 r3 = M[FP + 0xd];
0x00163F        E1F001D9                 call $kal_float_lib.mul;
0x001640        F100000C                 pushm <r0, r1>;
0x001641        F128000A                 r0 = M[FP + 0xa];
0x001642        F138000B                 r1 = M[FP + 0xb];
0x001643        01400081                 r2 = Null + 129;
0x001644        FD000080 01500000        r3 = Null + -8388608;
0x001646        E1F001D2                 call $kal_float_lib.mul;
0x001647        E1F001C8                 call $kal_float_lib.sub;
0x001648        F148000C                 r2 = M[FP + 0xc];
0x001649        F158000D                 r3 = M[FP + 0xd];
0x00164A        E1F001CE                 call $kal_float_lib.mul;
0x00164B        F100000C                 pushm <r0, r1>;
0x00164C        F128000A                 r0 = M[FP + 0xa];
0x00164D        F138000B                 r1 = M[FP + 0xb];
0x00164E        0046000F                 r2 = r4 + Null;
0x00164F        0057000F                 r3 = r5 + Null;
0x001650        E1F001BF                 call $kal_float_lib.sub;
0x001651        01400080                 r2 = Null + 128;
0x001652        FD000080 01500000        r3 = Null + -8388608;
0x001654        E1F001B2                 call $kal_float_lib.add;
0x001655        F148000C                 r2 = M[FP + 0xc];
0x001656        F158000D                 r3 = M[FP + 0xd];
0x001657        E1F001C1                 call $kal_float_lib.mul;
0x001658        F100000C                 pushm <r0, r1>;
0x001659        F128000A                 r0 = M[FP + 0xa];
0x00165A        F138000B                 r1 = M[FP + 0xb];
0x00165B        01400081                 r2 = Null + 129;
0x00165C        FD000080 01500000        r3 = Null + -8388608;
0x00165E        E1F001BA                 call $kal_float_lib.mul;
0x00165F        E1F001B0                 call $kal_float_lib.sub;
0x001660        F148000C                 r2 = M[FP + 0xc];
0x001661        F158000D                 r3 = M[FP + 0xd];
0x001662        E1F001B6                 call $kal_float_lib.mul;
0x001663        F100000C                 pushm <r0, r1>;
0x001664        F128000A                 r0 = M[FP + 0xa];
0x001665        F138000B                 r1 = M[FP + 0xb];
0x001666        0048000F                 r2 = r6 + Null;
0x001667        0059000F                 r3 = r7 + Null;
0x001668        E1F001A7                 call $kal_float_lib.sub;
0x001669        01400080                 r2 = Null + 128;
0x00166A        FD000080 01500000        r3 = Null + -8388608;
0x00166C        E1F0019A                 call $kal_float_lib.add;
0x00166D        F148000C                 r2 = M[FP + 0xc];
0x00166E        F158000D                 r3 = M[FP + 0xd];
0x00166F        E1F001A9                 call $kal_float_lib.mul;
0x001670        F100000C                 pushm <r0, r1>;
0x001671        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x001672        F3240000                 pop r0;
0x001673        F12C7FF2                 M[FP + -0xe] = r0;
0x001674        F3240000                 pop r0;
0x001675        F12C7FF4                 M[FP + -0xc] = r0;
0x001676        F3240000                 pop r0;
0x001677        F12C7FF3                 M[FP + -0xd] = r0;
0x001678        F3240000                 pop r0;
0x001679        F12C7FF7                 M[FP + -0x9] = r0;
0x00167A        F3240000                 pop r0;
0x00167B        F12C7FF6                 M[FP + -0xa] = r0;
0x00167C        F3240000                 pop r0;
0x00167D        F12C7FF5                 M[FP + -0xb] = r0;
0x00167E        F103FFFC                 SP = SP + -4;
0x00167F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001680        F103FFF8                 SP = SP + -8;
0x001681        DC0D000F                 rts;

 <$sbc.calc_bit_allocation>
0x001682        F3D00000                 push rLink;
0x001683        51900001                 M1 = Null + 1;
0x001684        D12B001E                 r0 = M[r9 + 30];
0x001685        81220002                 r0 = r0 AND 0x2;
0x001686        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x001687        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x001688        D13B0020                 r1 = M[r9 + 32];
0x001689        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x00168A        D1CB0021                 r10 = M[r9 + 33];
0x00168B        983200CF                 r1 = r0 * r10 (int);
0x00168C        D1CB0018                 r10 = M[r9 + 24];
0x00168D        501300CF                 I1 = r1 + r10;
0x00168E        D1CB001A                 r10 = M[r9 + 26];
0x00168F        502300CF                 I2 = r1 + r10;
0x001690        D1CB0021                 r10 = M[r9 + 33];
0x001691        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x001692        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001693        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x001694        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x001695        D1CB0021                 r10 = M[r9 + 33];
0x001696        983200CF                 r1 = r0 * r10 (int);
0x001697        D16B0018                 r4 = M[r9 + 24];
0x001698        5013006F                 I1 = r1 + r4;
0x001699        D16B001A                 r4 = M[r9 + 26];
0x00169A        5023006F                 I2 = r1 + r4;
0x00169B        E460003F                 r4 = Null - 1;
0x00169C        D13B001C                 r1 = M[r9 + 28];
0x00169D        9B3C0000                 r1 = r1 * r10 (int);
0x00169E        D14B0017                 r2 = M[r9 + 23];
0x00169F        5033004F                 I3 = r1 + r2;
0x0016A0        51440010                 I4 = r2 + 16;
0x0016A1        210C0008                 Null = r10 - 8;
0x0016A2        54330040                 if EQ I3 = r1 + I4;
0x0016A3        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x0016A4        0140FFFB                 r2 = Null + -5;
0x0016A5        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0016A6        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x0016A7        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x0016A8        2043005F                 r2 = r1 - r3;
0x0016A9        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x0016AA        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x0016AB        D1CB0021                 r10 = M[r9 + 33];
0x0016AC        983200CF                 r1 = r0 * r10 (int);
0x0016AD        D14B001A                 r2 = M[r9 + 26];
0x0016AE        5023004F                 I2 = r1 + r2;
0x0016AF        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x0016B0        D1CB0021                 r10 = M[r9 + 33];
0x0016B1        983200CF                 r1 = r0 * r10 (int);
0x0016B2        D17B001A                 r5 = M[r9 + 26];
0x0016B3        5023007F                 I2 = r1 + r5;
0x0016B4        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x0016B5        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x0016B6        D1CB0021                 r10 = M[r9 + 33];
0x0016B7        983200CF                 r1 = r0 * r10 (int);
0x0016B8        D1CB001B                 r10 = M[r9 + 27];
0x0016B9        501300CF                 I1 = r1 + r10;
0x0016BA        D1CB001A                 r10 = M[r9 + 26];
0x0016BB        502300CF                 I2 = r1 + r10;
0x0016BC        D1CB0021                 r10 = M[r9 + 33];
0x0016BD        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x0016BE        D1CB0021                 r10 = M[r9 + 33];
0x0016BF        983200CF                 r1 = r0 * r10 (int);
0x0016C0        D16B001B                 r4 = M[r9 + 27];
0x0016C1        5013006F                 I1 = r1 + r4;
0x0016C2        D16B001A                 r4 = M[r9 + 26];
0x0016C3        5023006F                 I2 = r1 + r4;
0x0016C4        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x0016C5        D13B0022                 r1 = M[r9 + 34];
0x0016C6        2005003F                 Null = r3 - r1;
0x0016C7        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x0016C8        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x0016C9        E466002F                 r4 = r4 + 1;
0x0016CA        200600CF                 Null = r4 - r10;
0x0016CB        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x0016CC        983200CF                 r1 = r0 * r10 (int);
0x0016CD        D16B001B                 r4 = M[r9 + 27];
0x0016CE        5013006F                 I1 = r1 + r4;
0x0016CF        D16B001A                 r4 = M[r9 + 26];
0x0016D0        5023006F                 I2 = r1 + r4;
0x0016D1        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x0016D2        D13B0022                 r1 = M[r9 + 34];
0x0016D3        2005003F                 Null = r3 - r1;
0x0016D4        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x0016D5        03003400                 Null = Null + Null, r1 = M[I1,0];
0x0016D6        03007900                 Null = Null + Null, r5 = M[I2,1];
0x0016D7        21030010                 Null = r1 - 16;
0x0016D8        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x0016D9        E433002F                 r1 = r1 + 1;
0x0016DA        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x0016DB        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0016DC        E466002F                 r4 = r4 + 1;
0x0016DD        200600CF                 Null = r4 - r10;
0x0016DE        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x0016DF        E422002F                 r0 = r0 + 1;
0x0016E0        D13B001F                 r1 = M[r9 + 31];
0x0016E1        2002003F                 Null = r0 - r1;
0x0016E2        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x0016E3        DDF0FB07                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x0016E4        D13B0020                 r1 = M[r9 + 32];
0x0016E5        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x0016E6        D1CB0021                 r10 = M[r9 + 33];
0x0016E7        99CC0002                 r10 = r10 * 2 (int);
0x0016E8        D13B0018                 r1 = M[r9 + 24];
0x0016E9        5010003F                 I1 = Null + r1;
0x0016EA        D13B001A                 r1 = M[r9 + 26];
0x0016EB        5020003F                 I2 = Null + r1;
0x0016EC        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x0016ED        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0016EE        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x0016EF        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x0016F0        D12B0021                 r0 = M[r9 + 33];
0x0016F1        E460003F                 r4 = Null - 1;
0x0016F2        D13B0018                 r1 = M[r9 + 24];
0x0016F3        5010003F                 I1 = Null + r1;
0x0016F4        D13B001A                 r1 = M[r9 + 26];
0x0016F5        5020003F                 I2 = Null + r1;
0x0016F6        D13B001C                 r1 = M[r9 + 28];
0x0016F7        9B320000                 r1 = r1 * r0 (int);
0x0016F8        D14B0017                 r2 = M[r9 + 23];
0x0016F9        5043004F                 I4 = r1 + r2;
0x0016FA        51340010                 I3 = r2 + 16;
0x0016FB        21020008                 Null = r0 - 8;
0x0016FC        54430030                 if EQ I4 = r1 + I3;
0x0016FD        01200002                 r0 = Null + 2;
0x0016FE        0170FFF6                 r5 = Null + -10;
0x0016FF        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001700        D1CB0021                 r10 = M[r9 + 33];
0x001701        59340001                 I3 = I4 + 1;
0x001702        03000050                 Null = Null + Null, r3 = M[I4,0];
0x001703        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x001704        0003000F                 Null = r1 + Null;
0x001705        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x001706        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x001707        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x001708        E422003F                 r0 = r0 - 1;
0x001709        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x00170A        D1CB0021                 r10 = M[r9 + 33];
0x00170B        99CC0002                 r10 = r10 * 2 (int);
0x00170C        D14B001A                 r2 = M[r9 + 26];
0x00170D        5020004F                 I2 = Null + r2;
0x00170E        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x00170F        D1CB0021                 r10 = M[r9 + 33];
0x001710        99CC0002                 r10 = r10 * 2 (int);
0x001711        D17B001A                 r5 = M[r9 + 26];
0x001712        5020007F                 I2 = Null + r5;
0x001713        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001714        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x001715        D1CB001B                 r10 = M[r9 + 27];
0x001716        501000CF                 I1 = Null + r10;
0x001717        D1CB001A                 r10 = M[r9 + 26];
0x001718        502000CF                 I2 = Null + r10;
0x001719        D1CB0021                 r10 = M[r9 + 33];
0x00171A        99CC0002                 r10 = r10 * 2 (int);
0x00171B        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x00171C        D1CB0021                 r10 = M[r9 + 33];
0x00171D        01600000                 r4 = Null + 0;
0x00171E        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x00171F        5022006F                 I2 = r0 + r4;
0x001720        D13B001B                 r1 = M[r9 + 27];
0x001721        5812003F                 I1 = I2 + r1;
0x001722        D13B001A                 r1 = M[r9 + 26];
0x001723        5B230000                 I2 = I2 + r1;
0x001724        D13B0022                 r1 = M[r9 + 34];
0x001725        2005003F                 Null = r3 - r1;
0x001726        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x001727        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001728        200200CF                 Null = r0 - r10;
0x001729        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x00172A        002C000F                 r0 = r10 + Null;
0x00172B        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x00172C        01200000                 r0 = Null + 0;
0x00172D        E466002F                 r4 = r4 + 1;
0x00172E        200600CF                 Null = r4 - r10;
0x00172F        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001730        01600000                 r4 = Null + 0;
0x001731        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001732        5022006F                 I2 = r0 + r4;
0x001733        D13B001B                 r1 = M[r9 + 27];
0x001734        5812003F                 I1 = I2 + r1;
0x001735        D13B001A                 r1 = M[r9 + 26];
0x001736        5B230000                 I2 = I2 + r1;
0x001737        D13B0022                 r1 = M[r9 + 34];
0x001738        2005003F                 Null = r3 - r1;
0x001739        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x00173A        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00173B        03007800                 Null = Null + Null, r5 = M[I2,0];
0x00173C        21030010                 Null = r1 - 16;
0x00173D        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x00173E        E433002F                 r1 = r1 + 1;
0x00173F        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001740        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001741        200200CF                 Null = r0 - r10;
0x001742        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x001743        002C000F                 r0 = r10 + Null;
0x001744        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x001745        01200000                 r0 = Null + 0;
0x001746        E466002F                 r4 = r4 + 1;
0x001747        200600CF                 Null = r4 - r10;
0x001748        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x001749        DDF0FAA1                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x00174A        01400000                 r2 = Null + 0;
0x00174B        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x00174C        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00174D        2004003F                 Null = r2 - r1;
0x00174E        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x00174F        01500000                 r3 = Null + 0;
0x001750        01600000                 r4 = Null + 0;
0x001751        E444002F                 r2 = r2 + 1;
0x001752        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x001753        E444003F                 r2 = r2 - 1;
0x001754        03560000                 r3 = r3 + r4;
0x001755        01600000                 r4 = Null + 0;
0x001756        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x001757        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001758        2073004F                 r5 = r1 - r2;
0x001759        21070002                 Null = r5 - 2;
0x00175A        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x00175B        21070010                 Null = r5 - 16;
0x00175C        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x00175D        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x00175E        E407003F                 Null = r5 - 1;
0x00175F        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x001760        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x001761        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x001762        0075006F                 r5 = r3 + r4;
0x001763        D1CB0022                 r10 = M[r9 + 34];
0x001764        200700CF                 Null = r5 - r10;
0x001765        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x001766        D13B0022                 r1 = M[r9 + 34];
0x001767        2007003F                 Null = r5 - r1;
0x001768        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x001769        03560000                 r3 = r3 + r4;
0x00176A        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x00176B        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x00176C        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00176D        2073004F                 r5 = r1 - r2;
0x00176E        01300000                 r1 = Null + 0;
0x00176F        21070002                 Null = r5 - 2;
0x001770        00370005                 if POS r1 = r5 + Null;
0x001771        01700010                 r5 = Null + 16;
0x001772        21030010                 Null = r1 - 16;
0x001773        00370005                 if POS r1 = r5 + Null;
0x001774        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x001775        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x001776        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001777        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001778        21030002                 Null = r1 - 2;
0x001779        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x00177A        21030010                 Null = r1 - 16;
0x00177B        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x00177C        E433002F                 r1 = r1 + 1;
0x00177D        E455002F                 r3 = r3 + 1;
0x00177E        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x00177F        23740000                 r5 = r5 - r2;
0x001780        E407003F                 Null = r5 - 1;
0x001781        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001782        D17B0022                 r5 = M[r9 + 34];
0x001783        23750000                 r5 = r5 - r3;
0x001784        21070002                 Null = r5 - 2;
0x001785        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001786        01300002                 r1 = Null + 2;
0x001787        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x001788        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001789        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x00178A        E420002F                 r0 = Null + 1;
0x00178B        D52B0036                 M[r9 + 54] = r0;
0x00178C        DDF0FA5E                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x00178D        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x00178E        01200000                 r0 = Null + 0;
0x00178F        01300000                 r1 = Null + 0;
0x001790        F3D40000                 pop rLink;
0x001791        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001792        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001793        0003000F                 Null = r1 + Null;
0x001794        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001795        F3600000                 push r4;
0x001796        816200FF                 r4 = r0 AND 0xff;
0x001797        FD000080 81220000        r0 = r0 AND 0x800000;
0x001799        0003000F                 Null = r1 + Null;
0x00179A        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x00179B        E466003F                 r4 = r4 - 1;
0x00179C        8D330001                 r1 = r1 LSHIFT 1;
0x00179D        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x00179E        816600FF                 r4 = r4 AND 0xff;
0x00179F        87260000                 r0 = r0 OR r4;
0x0017A0        F3640000                 pop r4;
0x0017A1        F3D40000                 pop rLink;
0x0017A2        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x0017A3        F1000330                 pushm <r2, r3, r6, r7>;
0x0017A4        0003000F                 Null = r1 + Null;
0x0017A5        00240000                 if EQ r0 = r2 + Null;
0x0017A6        0005000F                 Null = r3 + Null;
0x0017A7        00420000                 if EQ r2 = r0 + Null;
0x0017A8        817200FF                 r5 = r0 AND 0xff;
0x0017A9        818400FF                 r6 = r2 AND 0xff;
0x0017AA        2097008F                 r7 = r5 - r6;
0x0017AB        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x0017AC        2090009F                 r7 = Null - r7;
0x0017AD        8F590000                 r3 = r3 LSHIFT r7;
0x0017AE        E427002F                 r0 = r5 + 1;
0x0017AF        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x0017B0        8F390000                 r1 = r1 LSHIFT r7;
0x0017B1        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x0017B2        8D33007F                 r1 = r1 LSHIFT -1;
0x0017B3        8D55007F                 r3 = r3 LSHIFT -1;
0x0017B4        03350000                 r1 = r1 + r3;
0x0017B5        87260000                 r0 = r0 OR r4;
0x0017B6        F1040330                 popm <r2, r3, r6, r7>;
0x0017B7        F10400C0                 popm <r4, r5>;
0x0017B8        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x0017B9        F1000330                 pushm <r2, r3, r6, r7>;
0x0017BA        0003000F                 Null = r1 + Null;
0x0017BB        00240000                 if EQ r0 = r2 + Null;
0x0017BC        0005000F                 Null = r3 + Null;
0x0017BD        00420000                 if EQ r2 = r0 + Null;
0x0017BE        817200FF                 r5 = r0 AND 0xff;
0x0017BF        818400FF                 r6 = r2 AND 0xff;
0x0017C0        2097008F                 r7 = r5 - r6;
0x0017C1        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x0017C2        2090009F                 r7 = Null - r7;
0x0017C3        8F590000                 r3 = r3 LSHIFT r7;
0x0017C4        E427002F                 r0 = r5 + 1;
0x0017C5        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x0017C6        8F390000                 r1 = r1 LSHIFT r7;
0x0017C7        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x0017C8        8D33007F                 r1 = r1 LSHIFT -1;
0x0017C9        8D55007F                 r3 = r3 LSHIFT -1;
0x0017CA        2003005F                 Null = r1 - r3;
0x0017CB        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x0017CC        23350000                 r1 = r1 - r3;
0x0017CD        87260000                 r0 = r0 OR r4;
0x0017CE        F1040330                 popm <r2, r3, r6, r7>;
0x0017CF        F10400C0                 popm <r4, r5>;
0x0017D0        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x0017D1        2035003F                 r1 = r3 - r1;
0x0017D2        FD000080 89660000        r4 = r4 XOR 0x800000;
0x0017D4        87260000                 r0 = r0 OR r4;
0x0017D5        F1040330                 popm <r2, r3, r6, r7>;
0x0017D6        F10400C0                 popm <r4, r5>;
0x0017D7        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x0017D8        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x0017D9        0002000F                 Null = r0 + Null;
0x0017DA        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0017DB        F1000050                 pushm <r2, r4>;
0x0017DC        0042000F                 r2 = r0 + Null;
0x0017DD        FD000080 81620000        r4 = r0 AND 0x800000;
0x0017DF        20400041                 if NE r2 = Null - r2;
0x0017E0        0123007F                 r0 = r1 + 127;
0x0017E1        87260000                 r0 = r0 OR r4;
0x0017E2        0034000F                 r1 = r2 + Null;
0x0017E3        F1040050                 popm <r2, r4>;
0x0017E4        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x0017E5        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x0017E6        F1000060                 pushm <r3, r4>;
0x0017E7        8D33007F                 r1 = r1 LSHIFT -1;
0x0017E8        815200FF                 r3 = r0 AND 0xff;
0x0017E9        E455003F                 r3 = r3 - 1;
0x0017EA        FD000080 81620000        r4 = r0 AND 0x800000;
0x0017EC        20300031                 if NE r1 = Null - r1;
0x0017ED        21550097                 r3 = r3 - 151;
0x0017EE        03540000                 r3 = r3 + r2;
0x0017EF        9023005F                 r0 = r1 ASHIFT r3;
0x0017F0        F1040060                 popm <r3, r4>;
0x0017F1        F3D40000                 pop rLink;
0x0017F2        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x0017F3        F3D00000                 push rLink;
0x0017F4        01300018                 r1 = Null + 24;
0x0017F5        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x0017F6        F3D00000                 push rLink;
0x0017F7        E430002F                 r1 = Null + 1;
0x0017F8        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x0017F9        F1002010                 pushm <r2, rLink>;
0x0017FA        01400002                 r2 = Null + 2;
0x0017FB        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x0017FC        F1042010                 popm <r2, rLink>;
0x0017FD        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x0017FE        F1002010                 pushm <r2, rLink>;
0x0017FF        01400019                 r2 = Null + 25;
0x001800        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001801        F1042010                 popm <r2, rLink>;
0x001802        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x001803        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001805        DC0D000F                 rts;

 <$kal_float_lib.add>
0x001806        F3D00000                 push rLink;
0x001807        F10000C0                 pushm <r4, r5>;
0x001808        FD000080 81620000        r4 = r0 AND 0x800000;
0x00180A        FD000080 81740000        r5 = r2 AND 0x800000;
0x00180C        2006007F                 Null = r4 - r5;
0x00180D        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x00180E        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x00180F        F3D00000                 push rLink;
0x001810        F10000C0                 pushm <r4, r5>;
0x001811        FD000080 81620000        r4 = r0 AND 0x800000;
0x001813        FD000080 81740000        r5 = r2 AND 0x800000;
0x001815        2006007F                 Null = r4 - r5;
0x001816        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x001817        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x001818        F3D00000                 push rLink;
0x001819        0003000F                 Null = r1 + Null;
0x00181A        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x00181B        0005000F                 Null = r3 + Null;
0x00181C        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x00181D        F10000E0                 pushm <r3, r4, r5>;
0x00181E        816200FF                 r4 = r0 AND 0xff;
0x00181F        817400FF                 r5 = r2 AND 0xff;
0x001820        03670000                 r4 = r4 + r5;
0x001821        2166007F                 r4 = r4 - 127;
0x001822        8872004F                 r5 = r0 XOR r2;
0x001823        FD000080 81770000        r5 = r5 AND 0x800000;
0x001825        8426007F                 r0 = r4 OR r5;
0x001826        8D33007F                 r1 = r1 LSHIFT -1;
0x001827        8D55007F                 r3 = r3 LSHIFT -1;
0x001828        CC13005F                 rMAC = r1 * r3 (SS);
0x001829        0031000F                 r1 = rMAC + Null;
0x00182A        8D330001                 r1 = r1 LSHIFT 1;
0x00182B        F10400E0                 popm <r3, r4, r5>;
0x00182C        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x00182D        F3D00000                 push rLink;
0x00182E        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x00182F        654200FF                 r2 = 255 - r0;
0x001830        91530017                 r3 = r1 ASHIFT 23;
0x001831        F100000C                 pushm <r0, r1>;
0x001832        01C00006                 r10 = Null + 6;
0x001833        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001834        F104000C                 popm <r0, r1>;
0x001835        F100000C                 pushm <r0, r1>;
0x001836        E1F0FFE2                 call $kal_float_lib.mul;
0x001837        F100003C                 pushm <r0, r1, r2, r3>;
0x001838        F10400F0                 popm <r2, r3, r4, r5>;
0x001839        01200080                 r0 = Null + 128;
0x00183A        FD000080 01300000        r1 = Null + -8388608;
0x00183C        E1F0FFD3                 call $kal_float_lib.sub;
0x00183D        0046000F                 r2 = r4 + Null;
0x00183E        0057000F                 r3 = r5 + Null;
0x00183F        E1F0FFD9                 call $kal_float_lib.mul;
0x001840        0046000F                 r2 = r4 + Null;
0x001841        0057000F                 r3 = r5 + Null;
0x001842        E1F0FFC4                 call $kal_float_lib.add;
0x001843        0042000F                 r2 = r0 + Null;
0x001844        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001845        F104000C                 popm <r0, r1>;
0x001846        0024000F                 r0 = r2 + Null;
0x001847        0035000F                 r1 = r3 + Null;
0x001848        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x001849        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x00184A        F3D00000                 push rLink;
0x00184B        F1000030                 pushm <r2, r3>;
0x00184C        F100000C                 pushm <r0, r1>;
0x00184D        0024000F                 r0 = r2 + Null;
0x00184E        0035000F                 r1 = r3 + Null;
0x00184F        E1F0FFDE                 call $kal_float_lib.recip;
0x001850        0042000F                 r2 = r0 + Null;
0x001851        0053000F                 r3 = r1 + Null;
0x001852        F104000C                 popm <r0, r1>;
0x001853        E1F0FFC5                 call $kal_float_lib.mul;
0x001854        F1040030                 popm <r2, r3>;
0x001855        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x001856        F3D00000                 push rLink;
0x001857        0002000F                 Null = r0 + Null;
0x001858        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x001859        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x00185A        0062000F                 r4 = r0 + Null;
0x00185B        0073000F                 r5 = r1 + Null;
0x00185C        E482003F                 r6 = r0 - 1;
0x00185D        0093000F                 r7 = r1 + Null;
0x00185E        E466003F                 r4 = r4 - 1;
0x00185F        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x001861        8D66000E                 r4 = r4 LSHIFT 14;
0x001862        8D770077                 r5 = r5 LSHIFT -9;
0x001863        87670000                 r4 = r4 OR r5;
0x001864        FD00005F 01703759        r5 = Null + 6240089;
0x001866        2067006F                 r4 = r5 - r4;
0x001867        8D760008                 r5 = r4 LSHIFT 8;
0x001868        FD000080 85770000        r5 = r5 OR 0x800000;
0x00186A        8D660071                 r4 = r4 LSHIFT -15;
0x00186B        E466002F                 r4 = r4 + 1;
0x00186C        01C00003                 r10 = Null + 3;
0x00186D        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x00186E        0026000F                 r0 = r4 + Null;
0x00186F        0037000F                 r1 = r5 + Null;
0x001870        0046000F                 r2 = r4 + Null;
0x001871        0057000F                 r3 = r5 + Null;
0x001872        E1F0FFA6                 call $kal_float_lib.mul;
0x001873        0048000F                 r2 = r6 + Null;
0x001874        0059000F                 r3 = r7 + Null;
0x001875        E1F0FFA3                 call $kal_float_lib.mul;
0x001876        0042000F                 r2 = r0 + Null;
0x001877        0053000F                 r3 = r1 + Null;
0x001878        01200080                 r0 = Null + 128;
0x001879        FD0000C0 01300000        r1 = Null + -4194304;
0x00187B        E1F0FF94                 call $kal_float_lib.sub;
0x00187C        0046000F                 r2 = r4 + Null;
0x00187D        0057000F                 r3 = r5 + Null;
0x00187E        E1F0FF9A                 call $kal_float_lib.mul;
0x00187F        0062000F                 r4 = r0 + Null;
0x001880        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x001881        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001882        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.Subwoofer.l2cap_handler>
0x001883        F3D00000                 push rLink;
0x001884        E1F001B8                 call $create_sub_packet;
0x001885        E1F0F912                 call $block_interrupts;
0x001886        FD0000FF 01A0663B        r8 = Null + -39365;
0x001888        E1F0EFCF                 call $cbops.copy;
0x001889        01A02DB2                 r8 = Null + 11698;
0x00188A        E1F0EFCD                 call $cbops.copy;
0x00188B        E1F0F8E0                 call $interrupt.unblock;
0x00188C        DDF0F95E                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_preprocess>
0x00188D        F3D00000                 push rLink;
0x00188E        0930FE71                 r1 = Null + M[0xfffe71];
0x00188F        FD0000FF 1930671B        M[$time_before_fp] = r1 + Null;
0x001891        DDF0F959                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_post_process>
0x001892        F3D00000                 push rLink;
0x001893        E1F00348                 call $downsample_sub_to_1k2;
0x001894        0930FE71                 r1 = Null + M[0xfffe71];
0x001895        FD0000FF 2943671B        r2 = r1 - M[$time_before_fp];
0x001897        FD0000FF 0930671D        r1 = Null + M[$subwoofer.sco_offset];
0x001899        2043004F                 r2 = r1 - r2;
0x00189A        214401F4                 r2 = r2 - 500;
0x00189B        FD0000FF 0930670F        r1 = Null + M[$sco_param_tesco];
0x00189D        21030006                 Null = r1 - 6;
0x00189E        DD100003                 if NE jump $M.Subwoofer.do_not_send_duplicates;
0x00189F        E430002F                 r1 = Null + 1;
0x0018A0        19302E75                 M[$queue_another_bass_packet] = r1 + Null;

 <$M.Subwoofer.do_not_send_duplicates>
0x0018A1        01302E04                 r1 = Null + 11780;
0x0018A2        D1530003                 r3 = M[r1 + 3];
0x0018A3        DD100003                 if NE jump $M.Subwoofer.bass_packet_already_scheduled;
0x0018A4        015018A9                 r3 = Null + 6313;
0x0018A5        E1F0F93B                 call $timer.schedule_event_in;

 <$M.Subwoofer.bass_packet_already_scheduled>
0x0018A6        FD0000FF 19506713        M[$bass_timer_id] = r3 + Null;
0x0018A8        DDF0F942                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.send_bass_packet>
0x0018A9        F3D00000                 push rLink;
0x0018AA        E1F00192                 call $create_sub_packet;
0x0018AB        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x0018AD        E1F0F8D2                 call $cbuffer.calc_amount_space;
0x0018AE        FD0000FF 09606715        r4 = Null + M[$min_port_space];
0x0018B0        2002006F                 Null = r0 - r4;
0x0018B1        00620004                 if NEG r4 = r0 + Null;
0x0018B2        FD0000FF 19606715        M[$min_port_space] = r4 + Null;
0x0018B4        FD0000FF 01A06636        r8 = Null + -39370;
0x0018B6        E1F0EFA1                 call $cbops.copy;
0x0018B7        0930FE71                 r1 = Null + M[0xfffe71];
0x0018B8        FD0000FF 0940671A        r2 = Null + M[$esco_write_deadline];
0x0018BA        2053004F                 r3 = r1 - r2;
0x0018BB        DD40000B                 if NEG jump $M.Subwoofer.early;
0x0018BC        09602E76                 r4 = Null + M[$late_write_counter];
0x0018BD        E466002F                 r4 = r4 + 1;
0x0018BE        19602E76                 M[$late_write_counter] = r4 + Null;
0x0018BF        FD0000FF 09606716        r4 = Null + M[$max_late_write];
0x0018C1        2005006F                 Null = r3 - r4;
0x0018C2        00650005                 if POS r4 = r3 + Null;
0x0018C3        FD0000FF 19606716        M[$max_late_write] = r4 + Null;
0x0018C5        DDF0000E                 jump $M.Subwoofer.done_logging_debug_data;

 <$M.Subwoofer.early>
0x0018C6        09602E77                 r4 = Null + M[$early_write_counter];
0x0018C7        E466002F                 r4 = r4 + 1;
0x0018C8        19602E77                 M[$early_write_counter] = r4 + Null;
0x0018C9        FD0000FF 09606717        r4 = Null + M[$min_early_write];
0x0018CB        2005006F                 Null = r3 - r4;
0x0018CC        00650005                 if POS r4 = r3 + Null;
0x0018CD        FD0000FF 19606717        M[$min_early_write] = r4 + Null;
0x0018CF        09602E78                 r4 = Null + M[$max_early_write];
0x0018D0        2005006F                 Null = r3 - r4;
0x0018D1        00650004                 if NEG r4 = r3 + Null;
0x0018D2        19602E78                 M[$max_early_write] = r4 + Null;

 <$M.Subwoofer.done_logging_debug_data>
0x0018D3        FD0000FF 0960670F        r4 = Null + M[$sco_param_tesco];
0x0018D5        99660271                 r4 = r4 * 625 (int);
0x0018D6        03460000                 r2 = r2 + r4;
0x0018D7        FD0000FF 1940671A        M[$esco_write_deadline] = r2 + Null;
0x0018D9        09002E75                 Null = Null + M[$queue_another_bass_packet];
0x0018DA        DD000008                 if EQ jump $M.Subwoofer.done_sending_bass_packets;
0x0018DB        19002E75                 M[$queue_another_bass_packet] = Null + Null;
0x0018DC        01400EA6                 r2 = Null + 3750;
0x0018DD        01302E04                 r1 = Null + 11780;
0x0018DE        015018A9                 r3 = Null + 6313;
0x0018DF        E1F0F8FE                 call $timer.schedule_event_in_period;
0x0018E0        FD0000FF 19506713        M[$bass_timer_id] = r3 + Null;

 <$M.Subwoofer.done_sending_bass_packets>
0x0018E2        DDF0F908                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_connected_handler>
0x0018E3        2133000C                 r1 = r1 - 12;
0x0018E4        D1232E00                 r0 = M[r1 + 11776];
0x0018E5        DC02000F                 jump r0;

 <$M.Subwoofer.dummy>
0x0018E6        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_connected>
0x0018E7        F3D00000                 push rLink;
0x0018E8        FD000000 01408018        r2 = Null + 32792;
0x0018EA        0153000C                 r3 = r1 + 12;
0x0018EB        E1F0F8E1                 call $message.send;
0x0018EC        FD000091 0120A00E        r0 = Null + -7233522;
0x0018EE        FD0000FF 1920670B        M[$sub_link_port] = r0 + Null;
0x0018F0        E420002F                 r0 = Null + 1;
0x0018F1        FD0000FF 1920671C        M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x0018F3        092007FF                 r0 = Null + M[$app_config.io];
0x0018F4        21020005                 Null = r0 - 5;
0x0018F5        DD000004                 if EQ jump $M.Subwoofer.usb_input;
0x0018F6        01202E74                 r0 = Null + 11892;
0x0018F7        FD0000FF 19206701        M[$music_example.sync_flag_ptr] = r0 + Null;

 <$M.Subwoofer.usb_input>
0x0018F9        DDF0F8F1                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_connected>
0x0018FA        F3D00000                 push rLink;
0x0018FB        FD000000 01408018        r2 = Null + 32792;
0x0018FD        0153000C                 r3 = r1 + 12;
0x0018FE        E1F0F8CE                 call $message.send;
0x0018FF        01200BCC                 r0 = Null + 3020;
0x001900        FD0000FF 1920667B        M[0xff667b] = r0 + Null;
0x001902        19202DEB                 M[0x2deb] = r0 + Null;
0x001903        FD0000FF 19206654        M[$M.main.samples_latency_measure] = r0 + Null;
0x001905        FD0000FF 01A06678        r8 = Null + -39304;
0x001907        E1F00883                 call $audio_proc.delay.initialize;
0x001908        01A02DE8                 r8 = Null + 11752;
0x001909        E1F00881                 call $audio_proc.delay.initialize;
0x00190A        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x00190B        01500003                 r3 = Null + 3;
0x00190C        FD000000 2102BB80        Null = r0 - 48000;
0x00190E        DD000002                 if EQ jump $M.Subwoofer.set_data_objects;
0x00190F        01500002                 r3 = Null + 2;

 <$M.Subwoofer.set_data_objects>
0x001910        0125004A                 r0 = r3 + 74;
0x001911        19202DB8                 M[0x2db8] = r0 + Null;
0x001912        19202DBA                 M[0x2dba] = r0 + Null;
0x001913        19202D65                 M[0x2d65] = r0 + Null;
0x001914        19202D67                 M[0x2d67] = r0 + Null;
0x001915        FD000094 0120600F        r0 = Null + -7053297;
0x001917        FD0000FF 1920670B        M[$sub_link_port] = r0 + Null;
0x001919        E420002F                 r0 = Null + 1;
0x00191A        FD0000FF 1920671C        M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x00191C        09202E5B                 r0 = Null + M[$sra_rate_addr];
0x00191D        D3200000                 r0 = M[r0 + Null];
0x00191E        19202E7E                 M[$synchronized_rate] = r0 + Null;
0x00191F        01202E7E                 r0 = Null + 11902;
0x001920        FD0000FF 19205BE5        M[0xff5be5] = r0 + Null;
0x001922        19202C83                 M[0x2c83] = r0 + Null;
0x001923        01200168                 r0 = Null + 360;
0x001924        91220001                 r0 = r0 ASHIFT 1;
0x001925        19202E62                 M[$music_example.frame_processing_size] = r0 + Null;
0x001926        DDF0F8C4                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_disconnected_handler>
0x001927        2133000C                 r1 = r1 - 12;
0x001928        FD0000FF D1236690        r0 = M[r1 + -39280];
0x00192A        DC02000F                 jump r0;

 <$M.Subwoofer.dummy_disconnected>
0x00192B        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_disconnected>
0x00192C        F3D00000                 push rLink;
0x00192D        09202E5B                 r0 = Null + M[$sra_rate_addr];
0x00192E        19202C83                 M[0x2c83] = r0 + Null;
0x00192F        E1F00543                 call $disable_esco_subwoofer;
0x001930        DDF0F8BA                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_disconnected>
0x001931        F3D00000                 push rLink;
0x001932        09202E5B                 r0 = Null + M[$sra_rate_addr];
0x001933        FD0000FF 19205BE5        M[0xff5be5] = r0 + Null;
0x001935        19202C83                 M[0x2c83] = r0 + Null;
0x001936        E1F0053C                 call $disable_esco_subwoofer;
0x001937        DDF0F8B3                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.subwoofer_init>
0x001938        F3D00000                 push rLink;
0x001939        01300B85                 r1 = Null + 2949;
0x00193A        E1F005AA                 call $enable_esco_subwoofer;
0x00193B        012018E3                 r0 = Null + 6371;
0x00193C        19202E84                 M[$cbuffer.write_port_connect_address] = r0 + Null;
0x00193D        01201927                 r0 = Null + 6439;
0x00193E        FD0000FF 19206724        M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x001940        DDF0F8AA                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.synchronise>
0x001941        F3D00000                 push rLink;
0x001942        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x001944        FD000094 2102600F        Null = r0 - -7053297;
0x001946        DD100006                 if NE jump $M.Subwoofer.done_synchronise;
0x001947        01902DB7                 r7 = Null + 11703;
0x001948        01A02D63                 r8 = Null + 11619;
0x001949        E1F0038C                 call $calc_time_to_play;
0x00194A        FD0000FF 1980670D        M[$M.Subwoofer.playback_time] = r6 + Null;

 <$M.Subwoofer.done_synchronise>
0x00194C        DDF0F89E                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x00194D        F3D00000                 push rLink;
0x00194E        1970004F                 M[$sbcdec.codec_struc] = r5 + Null;
0x00194F        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x001950        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x001951        D1270000                 r0 = M[r5 + 0];
0x001952        E1F0F863                 call $cbuffer.get_read_address_and_size;
0x001953        5000002F                 I0 = Null + r0;
0x001954        50C0003F                 L0 = Null + r1;
0x001955        D1270000                 r0 = M[r5 + 0];
0x001956        E1F0F839                 call $cbuffer.calc_amount_data;
0x001957        00C2002F                 r10 = r0 + r0;
0x001958        21CC0002                 r10 = r10 - 2;
0x001959        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x00195A        006C000F                 r4 = r10 + Null;
0x00195B        E1F006D2                 call $sbcdec.find_sync;
0x00195C        21080063                 Null = r6 - 99;
0x00195D        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x00195E        236C0000                 r4 = r4 - r10;
0x00195F        D1270003                 r0 = M[r5 + 3];
0x001960        21020002                 Null = r0 - 2;
0x001961        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001962        D1270001                 r0 = M[r5 + 1];
0x001963        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001964        E1F0F81B                 call $cbuffer.calc_amount_space;
0x001965        21020080                 Null = r0 - 128;
0x001966        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001967        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x001968        D1270002                 r0 = M[r5 + 2];
0x001969        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x00196A        E1F0F815                 call $cbuffer.calc_amount_space;
0x00196B        21020080                 Null = r0 - 128;
0x00196C        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x00196D        01200002                 r0 = Null + 2;
0x00196E        D5270003                 M[r5 + 3] = r0;
0x00196F        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x001970        D1270000                 r0 = M[r5 + 0];
0x001971        E1F0F81E                 call $cbuffer.calc_amount_data;
0x001972        03220000                 r0 = r0 + r0;
0x001973        23260000                 r0 = r0 - r4;
0x001974        21020016                 Null = r0 - 22;
0x001975        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x001976        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x001977        E420002F                 r0 = Null + 1;
0x001978        D5270003                 M[r5 + 3] = r0;
0x001979        D1270000                 r0 = M[r5 + 0];
0x00197A        4430000F                 r1 = Null + I0;
0x00197B        E1F0F849                 call $cbuffer.set_read_address;
0x00197C        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x00197D        D52B0037                 M[r9 + 55] = r0;
0x00197E        E1F00314                 call $sbcdec.read_frame_header;
0x00197F        D12B0039                 r0 = M[r9 + 57];
0x001980        D13B0037                 r1 = M[r9 + 55];
0x001981        2002003F                 Null = r0 - r1;
0x001982        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x001983        5802000F                 I0 = I2 + Null;
0x001984        D58B003B                 M[r9 + 59] = r6;
0x001985        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x001986        D10B0036                 Null = M[r9 + 54];
0x001987        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x001988        E1F006EA                 call $sbcdec.read_scale_factors;
0x001989        D12B0023                 r0 = M[r9 + 35];
0x00198A        D13B0024                 r1 = M[r9 + 36];
0x00198B        23230000                 r0 = r0 - r1;
0x00198C        812200FF                 r0 = r0 AND 0xff;
0x00198D        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x00198E        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x00198F        4430000F                 r1 = Null + I0;
0x001990        D1270000                 r0 = M[r5 + 0];
0x001991        E1F0F833                 call $cbuffer.set_read_address;
0x001992        51C00000                 L0 = Null + 0;
0x001993        D12B003A                 r0 = M[r9 + 58];
0x001994        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x001995        01200005                 r0 = Null + 5;
0x001996        D5270003                 M[r5 + 3] = r0;
0x001997        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x001998        E1F0FCEA                 call $sbc.calc_bit_allocation;
0x001999        E1F0064D                 call $sbcdec.read_audio_samples;
0x00199A        E1F0075C                 call $sbcdec.byte_align;
0x00199B        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x00199C        4430000F                 r1 = Null + I0;
0x00199D        D1270000                 r0 = M[r5 + 0];
0x00199E        E1F0F826                 call $cbuffer.set_read_address;
0x00199F        51C00000                 L0 = Null + 0;
0x0019A0        D1270003                 r0 = M[r5 + 3];
0x0019A1        21020000                 Null = r0 - 0;
0x0019A2        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x0019A3        E1F003E4                 call $sbcdec.sample_reconstruction;
0x0019A4        D12B001E                 r0 = M[r9 + 30];
0x0019A5        21020003                 Null = r0 - 3;
0x0019A6        E1000588                 if EQ call $sbcdec.joint_stereo_decode;
0x0019A7        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x0019A8        D1270001                 r0 = M[r5 + 1];
0x0019A9        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x0019AA        E1F0F810                 call $cbuffer.get_write_address_and_size;
0x0019AB        5010002F                 I1 = Null + r0;
0x0019AC        50D0003F                 L1 = Null + r1;
0x0019AD        01700000                 r5 = Null + 0;
0x0019AE        E1F00285                 call $sbcdec.synthesis_subband_filter;
0x0019AF        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x0019B0        4430001F                 r1 = Null + I1;
0x0019B1        D1270001                 r0 = M[r5 + 1];
0x0019B2        E1F0F816                 call $cbuffer.set_write_address;
0x0019B3        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x0019B4        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x0019B5        D1270002                 r0 = M[r5 + 2];
0x0019B6        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x0019B7        E1F0F803                 call $cbuffer.get_write_address_and_size;
0x0019B8        5010002F                 I1 = Null + r0;
0x0019B9        50D0003F                 L1 = Null + r1;
0x0019BA        E470002F                 r5 = Null + 1;
0x0019BB        E1F00278                 call $sbcdec.synthesis_subband_filter;
0x0019BC        0970004F                 r5 = Null + M[$sbcdec.codec_struc];
0x0019BD        4430001F                 r1 = Null + I1;
0x0019BE        D1270002                 r0 = M[r5 + 2];
0x0019BF        E1F0F809                 call $cbuffer.set_write_address;
0x0019C0        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x0019C1        01200000                 r0 = Null + 0;
0x0019C2        D5270003                 M[r5 + 3] = r0;
0x0019C3        D12B001D                 r0 = M[r9 + 29];
0x0019C4        D13B0021                 r1 = M[r9 + 33];
0x0019C5        9B230000                 r0 = r0 * r1 (int);
0x0019C6        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x0019C7        51C00000                 L0 = Null + 0;
0x0019C8        DDF0F822                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy>
0x0019C9        F3D00000                 push rLink;
0x0019CA        E1F0052E                 call $cbops.av_copy.init_avcopy_struct;
0x0019CB        FD0000FF 1930672F        M[$M.cbops.av_copy.control_port] = r1 + Null;
0x0019CD        19202E90                 M[$M.cbops.av_copy.control_cbuffer] = r0 + Null;
0x0019CE        FD0000FF 0920672F        r0 = Null + M[$M.cbops.av_copy.control_port];
0x0019D0        E1F0F7DF                 call $cbuffer.is_it_enabled;
0x0019D1        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x0019D2        09202E90                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0019D3        E1F0F7BC                 call $cbuffer.calc_amount_data;
0x0019D4        19202E93                 M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x0019D5        FD0000FF 0920672F        r0 = Null + M[$M.cbops.av_copy.control_port];
0x0019D7        E1F0F7A8                 call $cbuffer.calc_amount_space;
0x0019D8        9144007F                 r2 = r2 ASHIFT -1;
0x0019D9        FD0000FF 29326731        r1 = r0 - M[$M.cbops.dac_av_copy.prev_port_mnt_space];
0x0019DB        FD0000FF 19206731        M[$M.cbops.dac_av_copy.prev_port_mnt_space] = r0 + Null;
0x0019DD        FD0000FF 09336733        r1 = r1 + M[$M.cbops.dac_av_copy.port_amount_written];
0x0019DF        00330044                 if NEG r1 = r1 + r2;
0x0019E0        DD40000A                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x0019E1        91230008                 r0 = r1 ASHIFT 8;
0x0019E2        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x0019E4        09302E91                 r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x0019E5        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x0019E7        03320000                 r1 = r1 + r0;
0x0019E8        19302E91                 M[$M.cbops.dac_av_copy.port_mnt_data_avg] = r1 + Null;
0x0019E9        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x0019EA        19002E8F                 M[$cbops.amount_written] = Null + Null;
0x0019EB        E1F0EE6C                 call $cbops.copy;
0x0019EC        09202E8F                 r0 = Null + M[$cbops.amount_written];
0x0019ED        FD0000FF 19206733        M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;
0x0019EF        FD0000FF 0920672F        r0 = Null + M[$M.cbops.av_copy.control_port];
0x0019F1        E1F0F78E                 call $cbuffer.calc_amount_space;
0x0019F2        9144007F                 r2 = r2 ASHIFT -1;
0x0019F3        2024002F                 r0 = r2 - r0;
0x0019F4        09302E91                 r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x0019F5        91330078                 r1 = r1 ASHIFT -8;
0x0019F6        09002E93                 Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x0019F7        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x0019F8        2093002F                 r7 = r1 - r0;
0x0019F9        DDB00015                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x0019FA        0093000F                 r7 = r1 + Null;
0x0019FB        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x0019FC        6592006E                 r7 = 110 - r0;
0x0019FD        DD400011                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x0019FE        00C9000F                 r10 = r7 + Null;
0x0019FF        01202E35                 r0 = Null + 11829;
0x001A00        E1F006CD                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001A01        00C9000F                 r10 = r7 + Null;
0x001A02        FD0000FF 012066D4        r0 = Null + -39212;
0x001A04        E1F006C9                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001A05        FD0000FF 01A065F2        r8 = Null + -39438;
0x001A07        19002E8F                 M[$cbops.amount_written] = Null + Null;
0x001A08        E1F0EE4F                 call $cbops.copy;
0x001A09        09202E8F                 r0 = Null + M[$cbops.amount_written];
0x001A0A        FD0000FF 09226733        r0 = r0 + M[$M.cbops.dac_av_copy.port_amount_written];
0x001A0C        FD0000FF 19206733        M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x001A0E        09202E90                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001A0F        E1F0F780                 call $cbuffer.calc_amount_data;
0x001A10        0082000F                 r6 = r0 + Null;
0x001A11        09202E90                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001A12        E1F0F7A3                 call $cbuffer.get_read_address_and_size;
0x001A13        0092000F                 r7 = r0 + Null;
0x001A14        FD0000FF 09506732        r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001A16        2105000A                 Null = r3 - 10;
0x001A17        DD00000D                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x001A18        01500000                 r3 = Null + 0;
0x001A19        29492E92                 r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001A1A        DD100007                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x001A1B        8D43007F                 r2 = r1 LSHIFT -1;
0x001A1C        2008004F                 Null = r6 - r2;
0x001A1D        DD400004                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x001A1E        FD0000FF 09506732        r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001A20        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x001A21        FD0000FF 19506732        M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = r3 + Null;
0x001A23        DDF00017                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x001A24        29492E92                 r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001A25        DD000004                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x001A26        FD0000FF 19006732        M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = Null + Null;
0x001A28        DDF00012                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x001A29        FD0000FF 09206730        r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001A2B        E110F764                 if NE call $cbuffer.calc_amount_data;
0x001A2C        2008002F                 Null = r6 - r0;
0x001A2D        00820005                 if POS r6 = r0 + Null;
0x001A2E        21280048                 r0 = r6 - 72;
0x001A2F        20880025                 if POS r6 = r6 - r0;
0x001A30        00C8000F                 r10 = r6 + Null;
0x001A31        09202E90                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001A32        E1F0F6C7                 call $cbuffer.advance_read_ptr;
0x001A33        09202E90                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001A34        E1F0F781                 call $cbuffer.get_read_address_and_size;
0x001A35        0092000F                 r7 = r0 + Null;
0x001A36        00C8000F                 r10 = r6 + Null;
0x001A37        FD0000FF 09206730        r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001A39        E110F6C0                 if NE call $cbuffer.advance_read_ptr;

 <$M.cbops.dac_av_copy.remove_end>
0x001A3A        19902E92                 M[$M.cbops.dac_av_copy.prev_buffer_read_addr] = r7 + Null;
0x001A3B        DDF0F7AF                 jump $pop_rLink_and_rts;

 <$create_sub_packet>
0x001A3C        F3D00000                 push rLink;
0x001A3D        01202E32                 r0 = Null + 11826;
0x001A3E        E1F0F751                 call $cbuffer.calc_amount_data;
0x001A3F        01400009                 r2 = Null + 9;
0x001A40        91540001                 r3 = r2 ASHIFT 1;
0x001A41        FD0000FF 0930670F        r1 = Null + M[$sco_param_tesco];
0x001A43        21030018                 Null = r1 - 24;
0x001A44        00450000                 if EQ r2 = r3 + Null;
0x001A45        20C2004F                 r10 = r0 - r2;
0x001A46        DD50000D                 if POS jump $M.create_sub_packet.continue;
0x001A47        20C000CF                 r10 = Null - r10;
0x001A48        01202E32                 r0 = Null + 11826;
0x001A49        E1F0F771                 call $cbuffer.get_write_address_and_size;
0x001A4A        5000002F                 I0 = Null + r0;
0x001A4B        50C0003F                 L0 = Null + r1;
0x001A4C        01200000                 r0 = Null + 0;
0x001A4D        E5F00002                 do $M.create_sub_packet.zero_insertion;
0x001A4E        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_insertion>
0x001A4F        01202E32                 r0 = Null + 11826;
0x001A50        4430000F                 r1 = Null + I0;
0x001A51        E1F0F777                 call $cbuffer.set_write_address;
0x001A52        51C00000                 L0 = Null + 0;

 <$M.create_sub_packet.continue>
0x001A53        01202E2F                 r0 = Null + 11823;
0x001A54        E1F0F766                 call $cbuffer.get_write_address_and_size;
0x001A55        5000002F                 I0 = Null + r0;
0x001A56        50C0003F                 L0 = Null + r1;
0x001A57        01202E32                 r0 = Null + 11826;
0x001A58        E1F0F75D                 call $cbuffer.get_read_address_and_size;
0x001A59        5040002F                 I4 = Null + r0;
0x001A5A        50E0003F                 L4 = Null + r1;
0x001A5B        09C02E71                 r10 = Null + M[$sco_param_to_air_size];
0x001A5C        91CC007F                 r10 = r10 ASHIFT -1;
0x001A5D        FD000000 0120F5F5        r0 = Null + 62965;
0x001A5F        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001A60        FD0000FF 0960671C        r4 = Null + M[$M.create_sub_packet.packet_counter];
0x001A62        8126FFFF                 r0 = r4 AND 0xffff;
0x001A63        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001A64        09202E7A                 r0 = Null + M[$wall_clock_adjustment];
0x001A65        0922FE71                 r0 = r0 + M[0xfffe71];
0x001A66        8D420070                 r2 = r0 LSHIFT -16;
0x001A67        FD0000FF 81760000        r5 = r4 AND 0xff0000;
0x001A69        8D770078                 r5 = r5 LSHIFT -8;
0x001A6A        0047004F                 r2 = r5 + r2;
0x001A6B        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001A6C        8142FFFF                 r2 = r0 AND 0xffff;
0x001A6D        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001A6E        FD0000FF 0930670B        r1 = Null + M[$sub_link_port];
0x001A70        FD000094 2103600F        Null = r1 - -7053297;
0x001A72        DD00001F                 if EQ jump $M.create_sub_packet.write_l2cap_sub_data;
0x001A73        215C000D                 r3 = r10 - 13;
0x001A74        01C00009                 r10 = Null + 9;
0x001A75        E5F00004                 do $M.create_sub_packet.copy_esco_sub_data_to_air;
0x001A76        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001A77        91220078                 r0 = r0 ASHIFT -8;
0x001A78        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_esco_sub_data_to_air>
0x001A79        00C5000F                 r10 = r3 + Null;
0x001A7A        E5F00003                 do $M.create_sub_packet.zero_padding;
0x001A7B        01200000                 r0 = Null + 0;
0x001A7C        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_padding>
0x001A7D        FD0000FF 0930670F        r1 = Null + M[$sco_param_tesco];
0x001A7F        21030006                 Null = r1 - 6;
0x001A80        DD100003                 if NE jump $M.create_sub_packet.update_read_addr;
0x001A81        E406003F                 Null = r4 - 1;
0x001A82        DD000004                 if EQ jump $M.create_sub_packet.dont_update_sub_1k2_read_ptrs;

 <$M.create_sub_packet.update_read_addr>
0x001A83        01202E32                 r0 = Null + 11826;
0x001A84        4430004F                 r1 = Null + I4;
0x001A85        E1F0F73F                 call $cbuffer.set_read_address;

 <$M.create_sub_packet.dont_update_sub_1k2_read_ptrs>
0x001A86        FD0000FF 0930670F        r1 = Null + M[$sco_param_tesco];
0x001A88        21030006                 Null = r1 - 6;
0x001A89        DD100007                 if NE jump $M.create_sub_packet.do_not_send_duplicates;
0x001A8A        E430002F                 r1 = Null + 1;
0x001A8B        E466002F                 r4 = r4 + 1;
0x001A8C        21060002                 Null = r4 - 2;
0x001A8D        00630001                 if NE r4 = r1 + Null;
0x001A8E        FD0000FF 1960671C        M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.do_not_send_duplicates>
0x001A90        DDF00018                 jump $M.create_sub_packet.done;

 <$M.create_sub_packet.write_l2cap_sub_data>
0x001A91        FD0000FF 0920670D        r0 = Null + M[$M.Subwoofer.playback_time];
0x001A93        8D420070                 r2 = r0 LSHIFT -16;
0x001A94        09302E7E                 r1 = Null + M[$synchronized_rate];
0x001A95        8D530070                 r3 = r1 LSHIFT -16;
0x001A96        8D550008                 r3 = r3 LSHIFT 8;
0x001A97        0045004F                 r2 = r3 + r2;
0x001A98        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001A99        8142FFFF                 r2 = r0 AND 0xffff;
0x001A9A        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001A9B        8143FFFF                 r2 = r1 AND 0xffff;
0x001A9C        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001A9D        01C00012                 r10 = Null + 18;
0x001A9E        E5F00004                 do $M.create_sub_packet.copy_l2cap_sub_data_to_air;
0x001A9F        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001AA0        91220078                 r0 = r0 ASHIFT -8;
0x001AA1        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_l2cap_sub_data_to_air>
0x001AA2        01202E32                 r0 = Null + 11826;
0x001AA3        4430004F                 r1 = Null + I4;
0x001AA4        E1F0F720                 call $cbuffer.set_read_address;
0x001AA5        E466002F                 r4 = r4 + 1;
0x001AA6        FD0000FF 1960671C        M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.done>
0x001AA8        01202E2F                 r0 = Null + 11823;
0x001AA9        4430000F                 r1 = Null + I0;
0x001AAA        E1F0F71E                 call $cbuffer.set_write_address;
0x001AAB        51C00000                 L0 = Null + 0;
0x001AAC        51E00000                 L4 = Null + 0;
0x001AAD        DDF0F73D                 jump $pop_rLink_and_rts;

 <$conn_init>
0x001AAE        F3D00000                 push rLink;
0x001AAF        015005DC                 r3 = Null + 1500;
0x001AB0        01601000                 r4 = Null + 4096;
0x001AB1        E1F004DB                 call $conn_init_cbuffers;
0x001AB2        092007FF                 r0 = Null + M[$app_config.io];
0x001AB3        21020005                 Null = r0 - 5;
0x001AB4        DD10001D                 if NE jump $M.conn_init.skip_usb_conn_init;
0x001AB5        012009C4                 r0 = Null + 2500;
0x001AB6        FD0000FF 19205A5C        M[$sra_struct] = r0 + Null;
0x001AB8        FD000080 01200000        r0 = Null + -8388608;
0x001ABA        FD0000FF 19205A5D        M[0xff5a5d] = r0 + Null;
0x001ABC        0120009D                 r0 = Null + 157;
0x001ABD        FD0000FF 19205A5E        M[0xff5a5e] = r0 + Null;
0x001ABF        012000A5                 r0 = Null + 165;
0x001AC0        FD0000FF 19205A5F        M[0xff5a5f] = r0 + Null;
0x001AC2        FD000000 0120A3D7        r0 = Null + 41943;
0x001AC4        FD0000FF 19205A60        M[0xff5a60] = r0 + Null;
0x001AC6        FD000001 01207700        r0 = Null + 96000;
0x001AC8        FD0000FF 19205A61        M[0xff5a61] = r0 + Null;
0x001ACA        01200320                 r0 = Null + 800;
0x001ACB        FD0000FF 192066F9        M[$tmr_period_con_copy] = r0 + Null;
0x001ACD        FD0000FF 51005BEF        I0 = Null + -42001;
0x001ACF        E1F019D2                 call $copy_codec_stats_pointers;
0x001AD0        DDF00049                 jump $M.conn_init.exit;

 <$M.conn_init.skip_usb_conn_init>
0x001AD1        21020008                 Null = r0 - 8;
0x001AD2        DD10001C                 if NE jump $M.conn_init.skip_analogue_conn_init;
0x001AD3        01200535                 r0 = Null + 1333;
0x001AD4        FD0000FF 19205A5C        M[$sra_struct] = r0 + Null;
0x001AD6        FD000080 01200000        r0 = Null + -8388608;
0x001AD8        FD0000FF 19205A5D        M[0xff5a5d] = r0 + Null;
0x001ADA        0120009D                 r0 = Null + 157;
0x001ADB        FD0000FF 19205A5E        M[0xff5a5e] = r0 + Null;
0x001ADD        012000A5                 r0 = Null + 165;
0x001ADE        FD0000FF 19205A5F        M[0xff5a5f] = r0 + Null;
0x001AE0        FD000000 0120A3D7        r0 = Null + 41943;
0x001AE2        FD0000FF 19205A60        M[0xff5a60] = r0 + Null;
0x001AE4        FD000001 01207700        r0 = Null + 96000;
0x001AE6        FD0000FF 19205A61        M[0xff5a61] = r0 + Null;
0x001AE8        012005DC                 r0 = Null + 1500;
0x001AE9        FD0000FF 192066F9        M[$tmr_period_con_copy] = r0 + Null;
0x001AEB        51002CC6                 I0 = Null + 11462;
0x001AEC        E1F019B5                 call $copy_codec_stats_pointers;
0x001AED        DDF0002C                 jump $M.conn_init.exit;

 <$M.conn_init.skip_analogue_conn_init>
0x001AEE        012007D0                 r0 = Null + 2000;
0x001AEF        FD0000FF 19205A5C        M[$sra_struct] = r0 + Null;
0x001AF1        FD000080 01200000        r0 = Null + -8388608;
0x001AF3        FD0000FF 19205A5D        M[0xff5a5d] = r0 + Null;
0x001AF5        FD0000FF 012066B0        r0 = Null + -39248;
0x001AF7        FD0000FF 19205A5E        M[0xff5a5e] = r0 + Null;
0x001AF9        0120009D                 r0 = Null + 157;
0x001AFA        FD0000FF 19205A5F        M[0xff5a5f] = r0 + Null;
0x001AFC        FD0000FF 090066F1        Null = Null + M[$current_dac_sampling_rate];
0x001AFE        DD100009                 if NE jump $M.conn_init.sra_conf_done;
0x001AFF        FD000000 0120A3D7        r0 = Null + 41943;
0x001B01        FD0000FF 19205A60        M[0xff5a60] = r0 + Null;
0x001B03        FD000001 01207700        r0 = Null + 96000;
0x001B05        FD0000FF 19205A61        M[0xff5a61] = r0 + Null;

 <$M.conn_init.sra_conf_done>
0x001B07        012003E8                 r0 = Null + 1000;
0x001B08        FD0000FF 192066F9        M[$tmr_period_con_copy] = r0 + Null;
0x001B0A        092007FF                 r0 = Null + M[$app_config.io];
0x001B0B        E402003F                 Null = r0 - 1;
0x001B0C        DD10000C                 if NE jump $M.conn_init.skip_sbc;
0x001B0D        0120194D                 r0 = Null + 6477;
0x001B0E        19200471                 M[$decoder_codec_stream_struc] = r0 + Null;
0x001B0F        012020E6                 r0 = Null + 8422;
0x001B10        19200472                 M[0x472] = r0 + Null;
0x001B11        0120203A                 r0 = Null + 8250;
0x001B12        19200473                 M[0x473] = r0 + Null;
0x001B13        01700474                 r5 = Null + 1140;
0x001B14        E1F002EF                 call $sbcdec.init_static_decoder;
0x001B15        51002CB5                 I0 = Null + 11445;
0x001B16        E1F0198B                 call $copy_codec_stats_pointers;
0x001B17        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x001B18        DDF006AD                 jump $error;

 <$M.conn_init.exit>
0x001B19        DDF0F6D1                 jump $pop_rLink_and_rts;

 <$codec.av_decode>
0x001B1A        F3D00000                 push rLink;
0x001B1B        FD0000FF 19706738        M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x001B1D        E420002F                 r0 = Null + 1;
0x001B1E        D5270006                 M[r5 + 6] = r0;
0x001B1F        0980FE71                 r6 = Null + M[0xfffe71];
0x001B20        D1270013                 r0 = M[r5 + 19];
0x001B21        D5870013                 M[r5 + 19] = r6;
0x001B22        23820000                 r6 = r6 - r0;
0x001B23        20800084                 if NEG r6 = Null - r6;
0x001B24        D1270003                 r0 = M[r5 + 3];
0x001B25        E1F0F695                 call $cbuffer.get_write_address_and_size;
0x001B26        D137000F                 r1 = M[r5 + 15];
0x001B27        D527000F                 M[r5 + 15] = r0;
0x001B28        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x001B2A        D1570010                 r3 = M[r5 + 16];
0x001B2B        0045008F                 r2 = r3 + r6;
0x001B2C        00410006                 if V r2 = rMAC + Null;
0x001B2D        2003002F                 Null = r1 - r0;
0x001B2E        00400001                 if NE r2 = Null + Null;
0x001B2F        D5470010                 M[r5 + 16] = r2;
0x001B30        D107000D                 Null = M[r5 + 13];
0x001B31        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x001B32        FD000002 210449F0        Null = r2 - 150000;
0x001B34        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x001B35        FD000002 210549F0        Null = r3 - 150000;
0x001B37        DD40002E                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x001B38        D1070011                 Null = M[r5 + 17];
0x001B39        DD100017                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x001B3A        E420002F                 r0 = Null + 1;
0x001B3B        D1370012                 r1 = M[r5 + 18];
0x001B3C        0004000F                 Null = r2 + Null;
0x001B3D        00320000                 if EQ r1 = r0 + Null;
0x001B3E        D5370012                 M[r5 + 18] = r1;
0x001B3F        DD000007                 if EQ jump $M.codec_av_decode.check_buf_level;
0x001B40        FD000001 21041170        Null = r2 - 70000;
0x001B42        DD400004                 if NEG jump $M.codec_av_decode.check_buf_level;
0x001B43        FD000001 21051170        Null = r3 - 70000;
0x001B45        DD400008                 if NEG jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x001B46        D1270003                 r0 = M[r5 + 3];
0x001B47        D1620000                 r4 = M[r0 + 0];
0x001B48        E1F0F647                 call $cbuffer.calc_amount_data;
0x001B49        D147000B                 r2 = M[r5 + 11];
0x001B4A        97460000                 r2 = r2 * r4 (frac);
0x001B4B        2002004F                 Null = r0 - r2;
0x001B4C        DD400031                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x001B4D        D5070012                 M[r5 + 18] = Null;
0x001B4E        E430002F                 r1 = Null + 1;
0x001B4F        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.decoding_proc>
0x001B50        01200000                 r0 = Null + 0;
0x001B51        D5270006                 M[r5 + 6] = r0;
0x001B52        D1270000                 r0 = M[r5 + 0];
0x001B53        01770003                 r5 = r5 + 3;
0x001B54        E002000F                 call r0;
0x001B55        FD0000FF 09706738        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001B57        D1370010                 r1 = M[r5 + 16];
0x001B58        D1270006                 r0 = M[r5 + 6];
0x001B59        21020000                 Null = r0 - 0;
0x001B5A        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x001B5B        00300000                 if EQ r1 = Null + Null;
0x001B5C        D5370010                 M[r5 + 16] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x001B5D        D1270006                 r0 = M[r5 + 6];
0x001B5E        E402003F                 Null = r0 - 1;
0x001B5F        DD10001E                 if NE jump $M.codec_av_decode.end;
0x001B60        D1370010                 r1 = M[r5 + 16];
0x001B61        D127000A                 r0 = M[r5 + 10];
0x001B62        2003002F                 Null = r1 - r0;
0x001B63        DD500019                 if POS jump $M.codec_av_decode.switchto_stall;
0x001B64        DDF00019                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x001B65        E1F0F632                 call $block_interrupts;
0x001B66        D1370003                 r1 = M[r5 + 3];
0x001B67        D1230002                 r0 = M[r1 + 2];
0x001B68        D5230001                 M[r1 + 1] = r0;
0x001B69        D527000F                 M[r5 + 15] = r0;
0x001B6A        D1370004                 r1 = M[r5 + 4];
0x001B6B        D1230001                 r0 = M[r1 + 1];
0x001B6C        D5230002                 M[r1 + 2] = r0;
0x001B6D        D1370005                 r1 = M[r5 + 5];
0x001B6E        D1230001                 r0 = M[r1 + 1];
0x001B6F        D5230002                 M[r1 + 2] = r0;
0x001B70        01770003                 r5 = r5 + 3;
0x001B71        D127FFFE                 r0 = M[r5 + -2];
0x001B72        E0020001                 if NE call r0;
0x001B73        FD0000FF 09706738        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001B75        D127000E                 r0 = M[r5 + 14];
0x001B76        E0020001                 if NE call r0;
0x001B77        FD0000FF 09706738        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001B79        E420002F                 r0 = Null + 1;
0x001B7A        19202E99                 M[$master_reset_needed] = r0 + Null;
0x001B7B        E1F0F5F0                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x001B7C        D5070011                 M[r5 + 17] = Null;

 <$M.codec_av_decode.end>
0x001B7D        DDF0F66D                 jump $pop_rLink_and_rts;

 <$wall_clock_message_handler>
0x001B7E        F3D00000                 push rLink;
0x001B7F        D1250004                 r0 = M[r3 + 4];
0x001B80        19202E6E                 M[$wall_clock_msw] = r0 + Null;
0x001B81        D1250005                 r0 = M[r3 + 5];
0x001B82        FD0000FF 1920670E        M[$wall_clock_lsw] = r0 + Null;
0x001B84        D1250006                 r0 = M[r3 + 6];
0x001B85        D1350007                 r1 = M[r3 + 7];
0x001B86        8D220010                 r0 = r0 LSHIFT 16;
0x001B87        8133FFFF                 r1 = r1 AND 0xffff;
0x001B88        03320000                 r1 = r1 + r0;
0x001B89        19302E6F                 M[$wall_clock_time] = r1 + Null;
0x001B8A        D1350004                 r1 = M[r3 + 4];
0x001B8B        19302E6E                 M[$wall_clock_msw] = r1 + Null;
0x001B8C        D1450005                 r2 = M[r3 + 5];
0x001B8D        FD0000FF 1940670E        M[$wall_clock_lsw] = r2 + Null;
0x001B8F        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x001B90        811100FF                 rMAC = rMAC AND 0xff;
0x001B91        991104E2                 rMAC = rMAC * 1250 (int);
0x001B92        8D330010                 r1 = r1 LSHIFT 16;
0x001B93        8144FFFF                 r2 = r2 AND 0xffff;
0x001B94        03430000                 r2 = r2 + r1;
0x001B95        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x001B97        8D410016                 r2 = rMAC LSHIFT 22;
0x001B98        D1650007                 r4 = M[r3 + 7];
0x001B99        D1550006                 r3 = M[r3 + 6];
0x001B9A        8D550010                 r3 = r3 LSHIFT 16;
0x001B9B        8166FFFF                 r4 = r4 AND 0xffff;
0x001B9C        03650000                 r4 = r4 + r3;
0x001B9D        23460000                 r2 = r2 - r4;
0x001B9E        19402E7A                 M[$wall_clock_adjustment] = r2 + Null;
0x001B9F        FD0000FF 0900670F        Null = Null + M[$sco_param_tesco];
0x001BA1        DD100039                 if NE jump $M.wall_clock_message_handler.done;
0x001BA2        E1F0F5F5                 call $block_interrupts;
0x001BA3        092000A7                 r0 = Null + M[0xa7];
0x001BA4        192000A6                 M[0xa6] = r0 + Null;
0x001BA5        FD0000FF 092066B8        r0 = Null + M[0xff66b8];
0x001BA7        FD0000FF 192066B7        M[0xff66b7] = r0 + Null;
0x001BA9        0920007F                 r0 = Null + M[0x7f];
0x001BAA        1920007E                 M[0x7e] = r0 + Null;
0x001BAB        09200097                 r0 = Null + M[0x97];
0x001BAC        19200096                 M[0x96] = r0 + Null;
0x001BAD        FD0000FF 092066D0        r0 = Null + M[0xff66d0];
0x001BAF        FD0000FF 192066CF        M[0xff66cf] = r0 + Null;
0x001BB1        09202E34                 r0 = Null + M[0x2e34];
0x001BB2        19202E33                 M[0x2e33] = r0 + Null;
0x001BB3        09202E31                 r0 = Null + M[0x2e31];
0x001BB4        19202E30                 M[0x2e30] = r0 + Null;
0x001BB5        E1F0F5B6                 call $interrupt.unblock;
0x001BB6        FD0000FF 0930670B        r1 = Null + M[$sub_link_port];
0x001BB8        FD000094 2103600F        Null = r1 - -7053297;
0x001BBA        DD00001B                 if EQ jump $M.wall_clock_message_handler.uses_l2cap;
0x001BBB        FD000000 01408014        r2 = Null + 32788;
0x001BBD        FD0000FF 0950670B        r3 = Null + M[$sub_link_port];
0x001BBF        8155001F                 r3 = r3 AND 0x1f;
0x001BC0        01600000                 r4 = Null + 0;
0x001BC1        01700000                 r5 = Null + 0;
0x001BC2        01800000                 r6 = Null + 0;
0x001BC3        E1F0F609                 call $message.send;
0x001BC4        0120028A                 r0 = Null + 650;
0x001BC5        91320001                 r1 = r0 ASHIFT 1;
0x001BC6        FD0000FF 0940670F        r2 = Null + M[$sco_param_tesco];
0x001BC8        21040018                 Null = r2 - 24;
0x001BC9        00230000                 if EQ r0 = r1 + Null;
0x001BCA        FD0000FF 1920667B        M[0xff667b] = r0 + Null;
0x001BCC        19202DEB                 M[0x2deb] = r0 + Null;
0x001BCD        FD0000FF 19206654        M[$M.main.samples_latency_measure] = r0 + Null;
0x001BCF        FD0000FF 01A06678        r8 = Null + -39304;
0x001BD1        E1F005B9                 call $audio_proc.delay.initialize;
0x001BD2        01A02DE8                 r8 = Null + 11752;
0x001BD3        E1F005B7                 call $audio_proc.delay.initialize;
0x001BD4        DDF00006                 jump $M.wall_clock_message_handler.done;

 <$M.wall_clock_message_handler.uses_l2cap>
0x001BD5        E420002F                 r0 = Null + 1;
0x001BD6        FD0000FF 1920670F        M[$sco_param_tesco] = r0 + Null;
0x001BD8        01200032                 r0 = Null + 50;
0x001BD9        19202E71                 M[$sco_param_to_air_size] = r0 + Null;

 <$M.wall_clock_message_handler.done>
0x001BDA        DDF0F610                 jump $pop_rLink_and_rts;

 <$downsample_sub_to_1k2>
0x001BDB        F3D00000                 push rLink;
0x001BDC        FD0000FF 012066CE        r0 = Null + -39218;
0x001BDE        E1F0F5B1                 call $cbuffer.calc_amount_data;
0x001BDF        00C2000F                 r10 = r0 + Null;
0x001BE0        21020028                 Null = r0 - 40;
0x001BE1        DD40F609                 if NEG jump $pop_rLink_and_rts;
0x001BE2        E1F003BC                 call $calc_sub_sra_ratio;
0x001BE3        FD0000FF 012066CE        r0 = Null + -39218;
0x001BE5        E1F0F5D0                 call $cbuffer.get_read_address_and_size;
0x001BE6        5000002F                 I0 = Null + r0;
0x001BE7        50C0003F                 L0 = Null + r1;
0x001BE8        01202E32                 r0 = Null + 11826;
0x001BE9        E1F0F5D1                 call $cbuffer.get_write_address_and_size;
0x001BEA        5040002F                 I4 = Null + r0;
0x001BEB        50E0003F                 L4 = Null + r1;
0x001BEC        51800028                 M0 = Null + 40;
0x001BED        01300000                 r1 = Null + 0;
0x001BEE        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x001BEF        FD000000 2102AC44        Null = r0 - 44100;
0x001BF1        DD100004                 if NE jump $M.downsample_sub_to_1k2.dont_modify;
0x001BF2        51800024                 M0 = Null + 36;
0x001BF3        FD000060 01300000        r1 = Null + 6291456;

 <$M.downsample_sub_to_1k2.dont_modify>
0x001BF5        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x001BF7        FD000094 2102600F        Null = r0 - -7053297;
0x001BF9        DD000011                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x001BFA        092007FF                 r0 = Null + M[$app_config.io];
0x001BFB        21020008                 Null = r0 - 8;
0x001BFC        DD00000E                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x001BFD        4440008F                 r2 = Null + M0;
0x001BFE        29202E7B                 r0 = Null - M[$sub_sra_ratio];
0x001BFF        8DE40200                 rMAC12 = r2 LSHIFT 0;
0x001C00        0053003F                 r3 = r1 + r1;
0x001C01        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x001C02        AC12004F                 rMAC = rMAC + r0 * r2 (SS);
0x001C03        91110017                 rMAC = rMAC ASHIFT 23 (56bit);
0x001C04        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x001C05        91110069                 rMAC = rMAC ASHIFT -23 (56bit);
0x001C06        8D410000                 r2 = rMAC LSHIFT 0;
0x001C07        5080004F                 M0 = Null + r2;
0x001C08        8D310018                 r1 = rMAC LSHIFT 24;
0x001C09        8D33007F                 r1 = r1 LSHIFT -1;

 <$M.downsample_sub_to_1k2.downsample>
0x001C0A        FD0000FF 09606719        r4 = Null + M[$M.downsample_sub_to_1k2.mute_index];
0x001C0C        FD0000FF 09706718        r5 = Null + M[$M.downsample_sub_to_1k2.mute_direction];
0x001C0E        09402E79                 r2 = Null + M[$M.downsample_sub_to_1k2.residual];

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop>
0x001C0F        4480008F                 r6 = Null + M0;
0x001C10        0054003F                 r3 = r2 + r1;
0x001C11        E488002A                 if GE r6 = r6 + 1;
0x001C12        23C80000                 r10 = r10 - r6;
0x001C13        DD400013                 if NEG jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit;
0x001C14        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001C15        03430000                 r2 = r2 + r1;
0x001C16        DD500004                 if POS jump $M.downsample_sub_to_1k2.no_extra_read;
0x001C17        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001C18        FD00007F 8144FFFF        r2 = r2 AND 0x7fffff;

 <$M.downsample_sub_to_1k2.no_extra_read>
0x001C1A        03670000                 r4 = r4 + r5;
0x001C1B        00600004                 if NEG r4 = Null + Null;
0x001C1C        01500007                 r3 = Null + 7;
0x001C1D        2005006F                 Null = r3 - r4;
0x001C1E        00650004                 if NEG r4 = r3 + Null;
0x001C1F        01502D5B                 r3 = Null + 11611;
0x001C20        0056005F                 r3 = r4 + r3;
0x001C21        D3500000                 r3 = M[r3 + Null];
0x001C22        97250000                 r0 = r0 * r3 (frac);
0x001C23        2020002F                 r0 = Null - r0;
0x001C24        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x001C25        DDF0FFEA                 jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop;

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit>
0x001C26        19402E79                 M[$M.downsample_sub_to_1k2.residual] = r2 + Null;
0x001C27        FD0000FF 19606719        M[$M.downsample_sub_to_1k2.mute_index] = r4 + Null;
0x001C29        FD0000FF 012066CE        r0 = Null + -39218;
0x001C2B        4430000F                 r1 = Null + I0;
0x001C2C        E1F0F598                 call $cbuffer.set_read_address;
0x001C2D        51C00000                 L0 = Null + 0;
0x001C2E        01202E32                 r0 = Null + 11826;
0x001C2F        4430004F                 r1 = Null + I4;
0x001C30        E1F0F598                 call $cbuffer.set_write_address;
0x001C31        51E00000                 L4 = Null + 0;
0x001C32        DDF0F5B8                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x001C33        F3D00000                 push rLink;
0x001C34        D13B0021                 r1 = M[r9 + 33];
0x001C35        5080003F                 M0 = Null + r1;
0x001C36        D14B001F                 r2 = M[r9 + 31];
0x001C37        9854003F                 r3 = r2 * r1 (int);
0x001C38        E455003F                 r3 = r3 - 1;
0x001C39        9823007F                 r0 = r1 * r5 (int);
0x001C3A        E404003F                 Null = r2 - 1;
0x001C3B        00200000                 if EQ r0 = Null + Null;
0x001C3C        D16B0014                 r4 = M[r9 + 20];
0x001C3D        5022006F                 I2 = r0 + r4;
0x001C3E        012B003C                 r0 = r9 + 60;
0x001C3F        D027002F                 r0 = M[r5 + r0];
0x001C40        5000002F                 I0 = Null + r0;
0x001C41        D16B001D                 r4 = M[r9 + 29];
0x001C42        69080004                 Null = M0 - 4;
0x001C43        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x001C44        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x001C45        D12B0015                 r0 = M[r9 + 21];
0x001C46        5040002F                 I4 = Null + r0;
0x001C47        D12B002E                 r0 = M[r9 + 46];
0x001C48        5050002F                 I5 = Null + r0;
0x001C49        51900001                 M1 = Null + 1;
0x001C4A        51A0FFF0                 M2 = Null + -16;
0x001C4B        51B0FFF9                 M3 = Null + -7;
0x001C4C        4CC8008F                 r10 = M0 + M0;
0x001C4D        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001C4E        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x001C4F        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C50        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C51        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C52        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C53        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C54        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C55        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001C56        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C57        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x001C58        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001C59        5B250000                 I2 = I2 + r3;
0x001C5A        51900018                 M1 = Null + 24;
0x001C5B        51A0FFB9                 M2 = Null + -71;
0x001C5C        51B0FF69                 M3 = Null + -151;
0x001C5D        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001C5E        5190FFD0                 M1 = Null + -48;
0x001C5F        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001C60        E466003F                 r4 = r4 - 1;
0x001C61        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x001C62        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x001C63        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x001C64        D12B0016                 r0 = M[r9 + 22];
0x001C65        5040002F                 I4 = Null + r0;
0x001C66        D12B002F                 r0 = M[r9 + 47];
0x001C67        5050002F                 I5 = Null + r0;
0x001C68        51900001                 M1 = Null + 1;
0x001C69        51A0FFF8                 M2 = Null + -8;
0x001C6A        51B0FFFD                 M3 = Null + -3;
0x001C6B        4CC8008F                 r10 = M0 + M0;
0x001C6C        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001C6D        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x001C6E        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C6F        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C70        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001C71        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001C72        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x001C73        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001C74        5B250000                 I2 = I2 + r3;
0x001C75        5190000C                 M1 = Null + 12;
0x001C76        51A0FFDD                 M2 = Null + -35;
0x001C77        51B0FFB5                 M3 = Null + -75;
0x001C78        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001C79        5190FFE8                 M1 = Null + -24;
0x001C7A        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001C7B        E466003F                 r4 = r4 - 1;
0x001C7C        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x001C7D        4420000F                 r0 = Null + I0;
0x001C7E        016B003C                 r4 = r9 + 60;
0x001C7F        D427006F                 M[r5 + r4] = r0;
0x001C80        51C00000                 L0 = Null + 0;
0x001C81        DDF0F569                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x001C82        44C0008F                 r10 = Null + M0;
0x001C83        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x001C84        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x001C85        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001C86        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001C87        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001C88        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001C89        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001C8A        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001C8B        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001C8C        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001C8D        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x001C8E        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001C8F        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x001C90        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x001C91        DC0D000F                 rts;

 <$sbcdec.read_frame_header>
0x001C92        F3D00000                 push rLink;
0x001C93        D50B0036                 M[r9 + 54] = Null;
0x001C94        E1F0027F                 call $sbcdec.get1byte;
0x001C95        0120000F                 r0 = Null + 15;
0x001C96        D52B0024                 M[r9 + 36] = r0;
0x001C97        E1F00280                 call $sbcdec.get2bits;
0x001C98        E1F0041F                 call $sbc.crc_calc;
0x001C99        D53B001C                 M[r9 + 28] = r1;
0x001C9A        E1F0027D                 call $sbcdec.get2bits;
0x001C9B        E1F0041C                 call $sbc.crc_calc;
0x001C9C        99330004                 r1 = r1 * 4 (int);
0x001C9D        01330004                 r1 = r1 + 4;
0x001C9E        D53B001D                 M[r9 + 29] = r1;
0x001C9F        E1F00278                 call $sbcdec.get2bits;
0x001CA0        E1F00417                 call $sbc.crc_calc;
0x001CA1        E420002F                 r0 = Null + 1;
0x001CA2        D53B001E                 M[r9 + 30] = r1;
0x001CA3        00220021                 if NE r0 = r0 + r0;
0x001CA4        D52B001F                 M[r9 + 31] = r0;
0x001CA5        E1F00274                 call $sbcdec.get1bit;
0x001CA6        E1F00411                 call $sbc.crc_calc;
0x001CA7        D53B0020                 M[r9 + 32] = r1;
0x001CA8        E1F00271                 call $sbcdec.get1bit;
0x001CA9        E1F0040E                 call $sbc.crc_calc;
0x001CAA        99330004                 r1 = r1 * 4 (int);
0x001CAB        01330004                 r1 = r1 + 4;
0x001CAC        D12B0021                 r0 = M[r9 + 33];
0x001CAD        2003002F                 Null = r1 - r0;
0x001CAE        E110038C                 if NE call $sbcdec.silence_decoder;
0x001CAF        D53B0021                 M[r9 + 33] = r1;
0x001CB0        E1F00263                 call $sbcdec.get1byte;
0x001CB1        E1F00406                 call $sbc.crc_calc;
0x001CB2        D53B0022                 M[r9 + 34] = r1;
0x001CB3        D14B0021                 r2 = M[r9 + 33];
0x001CB4        99440010                 r2 = r2 * 16 (int);
0x001CB5        D12B001E                 r0 = M[r9 + 30];
0x001CB6        21020002                 Null = r0 - 2;
0x001CB7        00440045                 if POS r2 = r2 + r2;
0x001CB8        212400FA                 r0 = r2 - 250;
0x001CB9        2044002C                 if GT r2 = r2 - r0;
0x001CBA        2004003F                 Null = r2 - r1;
0x001CBB        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001CBC        21030002                 Null = r1 - 2;
0x001CBD        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001CBE        E1F00255                 call $sbcdec.get1byte;
0x001CBF        D53B0023                 M[r9 + 35] = r1;
0x001CC0        D13B001E                 r1 = M[r9 + 30];
0x001CC1        21030003                 Null = r1 - 3;
0x001CC2        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x001CC3        D1AB0021                 r8 = M[r9 + 33];
0x001CC4        E4AA003F                 r8 = r8 - 1;
0x001CC5        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x001CC6        E1F00253                 call $sbcdec.get1bit;
0x001CC7        E1F003F0                 call $sbc.crc_calc;
0x001CC8        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001CC9        E4AA003F                 r8 = r8 - 1;
0x001CCA        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x001CCB        01200000                 r0 = Null + 0;
0x001CCC        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x001CCD        E1F0024C                 call $sbcdec.get1bit;
0x001CCE        E1F003E9                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x001CCF        E1F0033C                 call $sbc.calc_frame_length;
0x001CD0        D52B0039                 M[r9 + 57] = r0;
0x001CD1        DDF0F519                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x001CD2        E420002F                 r0 = Null + 1;
0x001CD3        D52B0036                 M[r9 + 54] = r0;
0x001CD4        DDF0F516                 jump $pop_rLink_and_rts;

 <$calc_time_to_play>
0x001CD5        F3D00000                 push rLink;
0x001CD6        E1F0F4C1                 call $block_interrupts;
0x001CD7        01800000                 r6 = Null + 0;

 <$M.calc_time_to_play.proc_loop>
0x001CD8        D029000F                 r0 = M[r7 + Null];
0x001CD9        DD00000A                 if EQ jump $M.calc_time_to_play.done_counting_cbuffer_data;
0x001CDA        E1F0F4B5                 call $cbuffer.calc_amount_data;
0x001CDB        D1390001                 r1 = M[r7 + 1];
0x001CDC        D3300000                 r1 = M[r1 + Null];
0x001CDD        CC12003F                 rMAC = r0 * r1 (SS);
0x001CDE        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001CDF        8D310000                 r1 = rMAC LSHIFT 0;
0x001CE0        03830000                 r6 = r6 + r1;
0x001CE1        01990002                 r7 = r7 + 2;
0x001CE2        DDF0FFF6                 jump $M.calc_time_to_play.proc_loop;

 <$M.calc_time_to_play.done_counting_cbuffer_data>
0x001CE3        0030000F                 r1 = Null + Null;
0x001CE4        0008000F                 Null = r6 + Null;
0x001CE5        DD100012                 if NE jump $M.calc_time_to_play.calculate_num_samples_in_port;
0x001CE6        D12A0000                 r0 = M[r8 + 0];
0x001CE7        D3200000                 r0 = M[r0 + Null];
0x001CE8        E1F0F497                 call $cbuffer.calc_amount_space;
0x001CE9        0012000F                 rMAC = r0 + Null;
0x001CEA        D12A0001                 r0 = M[r8 + 1];
0x001CEB        D3200000                 r0 = M[r0 + Null];
0x001CEC        E1F0F493                 call $cbuffer.calc_amount_space;
0x001CED        2001002F                 Null = rMAC - r0;
0x001CEE        00120005                 if POS rMAC = r0 + Null;
0x001CEF        D12A0000                 r0 = M[r8 + 0];
0x001CF0        00C1000F                 r10 = rMAC + Null;
0x001CF1        D052000F                 r3 = M[r0 + Null];
0x001CF2        E1F00373                 call $audio_insert_silence;
0x001CF3        D12A0001                 r0 = M[r8 + 1];
0x001CF4        00C1000F                 r10 = rMAC + Null;
0x001CF5        D052000F                 r3 = M[r0 + Null];
0x001CF6        E1F0036F                 call $audio_insert_silence;

 <$M.calc_time_to_play.calculate_num_samples_in_port>
0x001CF7        D12A0000                 r0 = M[r8 + 0];
0x001CF8        D3200000                 r0 = M[r0 + Null];
0x001CF9        E1F0F486                 call $cbuffer.calc_amount_space;
0x001CFA        E422002F                 r0 = r0 + 1;
0x001CFB        9144007F                 r2 = r2 ASHIFT -1;
0x001CFC        2024002F                 r0 = r2 - r0;
0x001CFD        D13A0002                 r1 = M[r8 + 2];
0x001CFE        D3300000                 r1 = M[r1 + Null];
0x001CFF        CC12003F                 rMAC = r0 * r1 (SS);
0x001D00        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001D01        8D310000                 r1 = rMAC LSHIFT 0;
0x001D02        F3300000                 push r1;
0x001D03        D12A0003                 r0 = M[r8 + 3];
0x001D04        D13A0004                 r1 = M[r8 + 4];
0x001D05        D3300000                 r1 = M[r1 + Null];
0x001D06        CC12003F                 rMAC = r0 * r1 (SS);
0x001D07        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001D08        8D310000                 r1 = rMAC LSHIFT 0;
0x001D09        03830000                 r6 = r6 + r1;
0x001D0A        09202E7E                 r0 = Null + M[$synchronized_rate];
0x001D0B        9428002F                 r0 = r6 * r0 (frac);
0x001D0C        0082008F                 r6 = r0 + r6;
0x001D0D        F3340000                 pop r1;
0x001D0E        0048003F                 r2 = r6 + r1;
0x001D0F        09302E7A                 r1 = Null + M[$wall_clock_adjustment];
0x001D10        0933FE71                 r1 = r1 + M[0xfffe71];
0x001D11        0083004F                 r6 = r1 + r2;
0x001D12        D58A0006                 M[r8 + 6] = r6;

 <$M.calc_time_to_play.done>
0x001D13        E1F0F458                 call $interrupt.unblock;
0x001D14        FD0000FF 0900671E        Null = Null + M[$warp_timer_id];
0x001D16        DD100006                 if NE jump $M.calc_time_to_play.do_not_set_timer;
0x001D17        01302DEC                 r1 = Null + 11756;
0x001D18        015020D8                 r3 = Null + 8408;
0x001D19        E1F0F4C7                 call $timer.schedule_event_in;
0x001D1A        FD0000FF 1950671E        M[$warp_timer_id] = r3 + Null;

 <$M.calc_time_to_play.do_not_set_timer>
0x001D1C        DDF0F4CE                 jump $pop_rLink_and_rts;

 <$sco_schedule_to_air>
0x001D1D        F3D00000                 push rLink;
0x001D1E        09302E6E                 r1 = Null + M[$wall_clock_msw];
0x001D1F        FD0000FF 0940670E        r2 = Null + M[$wall_clock_lsw];
0x001D21        8D330010                 r1 = r1 LSHIFT 16;
0x001D22        8144FFFF                 r2 = r2 AND 0xffff;
0x001D23        03430000                 r2 = r2 + r1;
0x001D24        09302E6E                 r1 = Null + M[$wall_clock_msw];
0x001D25        8D330078                 r1 = r1 LSHIFT -8;
0x001D26        09502E70                 r3 = Null + M[$sco_param_clock_msw];
0x001D27        FD0000FF 09606710        r4 = Null + M[$sco_param_clock_lsw];

 <$M.sco_schedule_to_air.sco_schedule_next_instant>
0x001D29        2086004F                 r6 = r4 - r2;
0x001D2A        2475003F                 r5 = r3 - r1 - Borrow;
0x001D2B        99780271                 r5 = r6 * 625 (int);
0x001D2C        9177007F                 r5 = r5 ASHIFT -1;
0x001D2D        09202E6F                 r0 = Null + M[$wall_clock_time];
0x001D2E        0042007F                 r2 = r0 + r5;
0x001D2F        29442E72                 r2 = r2 - M[$sco_param_to_air_time];
0x001D30        0054000F                 r3 = r2 + Null;
0x001D31        FD0000FF 2944671D        r2 = r2 - M[$subwoofer.sco_offset];
0x001D33        2904FE71                 Null = r2 - M[0xfffe71];
0x001D34        DD500008                 if POS jump $M.sco_schedule_to_air.continue;
0x001D35        FD0000FF 0930670F        r1 = Null + M[$sco_param_tesco];
0x001D37        99330271                 r1 = r1 * 625 (int);

 <$M.sco_schedule_to_air.advance>
0x001D38        03430000                 r2 = r2 + r1;
0x001D39        03530000                 r3 = r3 + r1;
0x001D3A        2904FE71                 Null = r2 - M[0xfffe71];
0x001D3B        DD40FFFD                 if NEG jump $M.sco_schedule_to_air.advance;

 <$M.sco_schedule_to_air.continue>
0x001D3C        FD0000FF 1950671A        M[$esco_write_deadline] = r3 + Null;
0x001D3E        F3400000                 push r2;
0x001D3F        09402E73                 r2 = Null + M[$sco_timer_id];
0x001D40        E1F0F2DF                 call $timer.cancel_event;
0x001D41        F3440000                 pop r2;
0x001D42        FD0000FF 01306688        r1 = Null + -39288;
0x001D44        0150207F                 r3 = Null + 8319;
0x001D45        E1F0F088                 call $timer.schedule_event_at;
0x001D46        19502E73                 M[$sco_timer_id] = r3 + Null;
0x001D47        FD0000FF 012066CE        r0 = Null + -39218;
0x001D49        E1F0F471                 call $cbuffer.get_write_address_and_size;
0x001D4A        5000002F                 I0 = Null + r0;
0x001D4B        50C0003F                 L0 = Null + r1;
0x001D4C        5180FF9C                 M0 = Null + -100;
0x001D4D        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001D4E        FD0000FF 012066CE        r0 = Null + -39218;
0x001D50        4430000F                 r1 = Null + I0;
0x001D51        E1F0F473                 call $cbuffer.set_read_address;
0x001D52        51C00000                 L0 = Null + 0;
0x001D53        DDF0F497                 jump $pop_rLink_and_rts;

 <$run_usb_state_mc>
0x001D54        F3D00000                 push rLink;
0x001D55        FD000080 01200000        r0 = Null + -8388608;
0x001D57        E1F0F438                 call $cbuffer.calc_amount_data;
0x001D58        09502E67                 r3 = Null + M[$usb_state];
0x001D59        FD0000FF D13566C5        r1 = M[r3 + -39227];
0x001D5B        E003000F                 call r1;
0x001D5C        19502E67                 M[$usb_state] = r3 + Null;
0x001D5D        DDF0F48D                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.paused_fn>
0x001D5E        F3D00000                 push rLink;
0x001D5F        FD000080 01200000        r0 = Null + -8388608;
0x001D61        E1F0F2D1                 call $cbuffer.empty_buffer;
0x001D62        E1F01619                 call $master_app_reset;
0x001D63        E450002F                 r3 = Null + 1;
0x001D64        E420002F                 r0 = Null + 1;
0x001D65        19202E5E                 M[$M.jitter_buffering.is_buffering] = r0 + Null;
0x001D66        DDF0F484                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.waiting_to_start_fn>
0x001D67        F3D00000                 push rLink;
0x001D68        0002000F                 Null = r0 + Null;
0x001D69        DD00000E                 if EQ jump $M.usb_state_mc.still_waiting_to_start;
0x001D6A        FD0000FF 19006707        M[$usb_pause_period_count] = Null + Null;
0x001D6C        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x001D6D        FD0000FF 09306708        r1 = Null + M[$usb_pause_silence_insertion_time];
0x001D6F        9472003F                 r5 = r0 * r1 (frac);
0x001D70        0160009D                 r4 = Null + 157;
0x001D71        E1F00265                 call $audio_prime_silence;
0x001D72        FD0000FF 016066B3        r4 = Null + -39245;
0x001D74        E1F00262                 call $audio_prime_silence;
0x001D75        E009000F                 call r7;
0x001D76        01500002                 r3 = Null + 2;

 <$M.usb_state_mc.still_waiting_to_start>
0x001D77        DDF0F473                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.running_fn>
0x001D78        F3D00000                 push rLink;
0x001D79        01700000                 r5 = Null + 0;
0x001D7A        FD0000FF 09606707        r4 = Null + M[$usb_pause_period_count];
0x001D7C        E466002F                 r4 = r4 + 1;
0x001D7D        0002000F                 Null = r0 + Null;
0x001D7E        00600001                 if NE r4 = Null + Null;
0x001D7F        FD0000FF 19606707        M[$usb_pause_period_count] = r4 + Null;
0x001D81        29062E68                 Null = r4 - M[$usb_pause_period_thresh];
0x001D82        00570005                 if POS r3 = r5 + Null;
0x001D83        F3500000                 push r3;
0x001D84        E009000F                 call r7;
0x001D85        F3540000                 pop r3;
0x001D86        DDF0F464                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x001D87        01700080                 r5 = Null + 128;
0x001D88        D1AB0030                 r8 = M[r9 + 48];
0x001D89        21AA0002                 r8 = r8 - 2;
0x001D8A        D13B0014                 r1 = M[r9 + 20];
0x001D8B        5000003F                 I0 = Null + r1;
0x001D8C        D13B001B                 r1 = M[r9 + 27];
0x001D8D        5010003F                 I1 = Null + r1;
0x001D8E        D13B0018                 r1 = M[r9 + 24];
0x001D8F        5020003F                 I2 = Null + r1;
0x001D90        D19B001F                 r7 = M[r9 + 31];
0x001D91        D13B0021                 r1 = M[r9 + 33];
0x001D92        9B390000                 r1 = r1 * r7 (int);
0x001D93        5080003F                 M0 = Null + r1;
0x001D94        70A0003F                 M2 = Null - r1;
0x001D95        50B3003F                 M3 = r1 + r1;
0x001D96        D14B001D                 r2 = M[r9 + 29];
0x001D97        9843004F                 r2 = r1 * r2 (int);
0x001D98        7090004F                 M1 = Null - r2;
0x001D99        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x001D9A        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x001D9B        D1CB001D                 r10 = M[r9 + 29];
0x001D9C        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001D9D        03034900                 Null = Null + r1, r2 = M[I2,1];
0x001D9E        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x001D9F        E444002F                 r2 = r2 + 1;
0x001DA0        D05A003F                 r3 = M[r8 + r1];
0x001DA1        2034003F                 r1 = r2 - r1;
0x001DA2        9067004F                 r4 = r5 ASHIFT r2;
0x001DA3        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001DA4        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x001DA5        8D220008                 r0 = r0 LSHIFT 8;
0x001DA6        01220080                 r0 = r0 + 128;
0x001DA7        C012005F                 rMAC = r0 * r3 (UU);
0x001DA8        8C21003F                 r0 = rMAC LSHIFT r1;
0x001DA9        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x001DAA        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x001DAB        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001DAC        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x001DAD        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x001DAE        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x001DAF        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x001DB0        E488003F                 r6 = r6 - 1;
0x001DB1        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x001DB2        E499003F                 r7 = r7 - 1;
0x001DB3        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x001DB4        DC0D000F                 rts;

 <$jitter_buffering>
0x001DB5        F3D00000                 push rLink;
0x001DB6        09002E5E                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x001DB7        DD000025                 if EQ jump $M.jitter_buffering.done;
0x001DB8        092007FF                 r0 = Null + M[$app_config.io];
0x001DB9        21020005                 Null = r0 - 5;
0x001DBA        DD100021                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x001DBB        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x001DBC        FD000000 2102BB80        Null = r0 - 48000;
0x001DBE        DD100003                 if NE jump $M.jitter_buffering.check_fs_44100;
0x001DBF        01600000                 r4 = Null + 0;
0x001DC0        DDF00015                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_44100>
0x001DC1        FD000000 2102AC44        Null = r0 - 44100;
0x001DC3        DD100003                 if NE jump $M.jitter_buffering.check_fs_32000;
0x001DC4        01600084                 r4 = Null + 132;
0x001DC5        DDF00010                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_32000>
0x001DC6        21027D00                 Null = r0 - 32000;
0x001DC7        DD100003                 if NE jump $M.jitter_buffering.check_fs_22050;
0x001DC8        01600000                 r4 = Null + 0;
0x001DC9        DDF0000C                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_22050>
0x001DCA        21025622                 Null = r0 - 22050;
0x001DCB        DD100003                 if NE jump $M.jitter_buffering.check_fs_16000;
0x001DCC        01600084                 r4 = Null + 132;
0x001DCD        DDF00008                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_16000>
0x001DCE        21023E80                 Null = r0 - 16000;
0x001DCF        DD100003                 if NE jump $M.jitter_buffering.check_fs_8000;
0x001DD0        01600000                 r4 = Null + 0;
0x001DD1        DDF00004                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_8000>
0x001DD2        21021F40                 Null = r0 - 8000;
0x001DD3        DD100008                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x001DD4        01600000                 r4 = Null + 0;

 <$M.jitter_buffering.buffering_state>
0x001DD5        09502E62                 r3 = Null + M[$music_example.frame_processing_size];
0x001DD6        03560000                 r3 = r3 + r4;
0x001DD7        0120009D                 r0 = Null + 157;
0x001DD8        E1F0F3B7                 call $cbuffer.calc_amount_data;
0x001DD9        2002005F                 Null = r0 - r3;
0x001DDA        DD400002                 if NEG jump $M.jitter_buffering.done;

 <$M.jitter_buffering.clear_buffering_flag>
0x001DDB        19002E5E                 M[$M.jitter_buffering.is_buffering] = Null + Null;

 <$M.jitter_buffering.done>
0x001DDC        DDF0F40E                 jump $pop_rLink_and_rts;

 <$sco_params_message_handler>
0x001DDD        F3D00000                 push rLink;
0x001DDE        D1250001                 r0 = M[r3 + 1];
0x001DDF        FD0000FF 1920670F        M[$sco_param_tesco] = r0 + Null;
0x001DE1        D1250003                 r0 = M[r3 + 3];
0x001DE2        19202E71                 M[$sco_param_to_air_size] = r0 + Null;
0x001DE3        D1250004                 r0 = M[r3 + 4];
0x001DE4        FD0000FF 19206711        M[$sco_param_from_air_size] = r0 + Null;
0x001DE6        D1250005                 r0 = M[r3 + 5];
0x001DE7        D1350006                 r1 = M[r3 + 6];
0x001DE8        8D220010                 r0 = r0 LSHIFT 16;
0x001DE9        8133FFFF                 r1 = r1 AND 0xffff;
0x001DEA        03320000                 r1 = r1 + r0;
0x001DEB        D1250005                 r0 = M[r3 + 5];
0x001DEC        8D220078                 r0 = r0 LSHIFT -8;
0x001DED        19202E70                 M[$sco_param_clock_msw] = r0 + Null;
0x001DEE        FD0000FF 19306710        M[$sco_param_clock_lsw] = r1 + Null;
0x001DF0        D1250007                 r0 = M[r3 + 7];
0x001DF1        8D220008                 r0 = r0 LSHIFT 8;
0x001DF2        91220078                 r0 = r0 ASHIFT -8;
0x001DF3        19202E72                 M[$sco_param_to_air_time] = r0 + Null;
0x001DF4        D1250008                 r0 = M[r3 + 8];
0x001DF5        8D220008                 r0 = r0 LSHIFT 8;
0x001DF6        91220078                 r0 = r0 ASHIFT -8;
0x001DF7        FD0000FF 19206712        M[$sco_param_from_air_time] = r0 + Null;
0x001DF9        09402E73                 r2 = Null + M[$sco_timer_id];
0x001DFA        E1F0F225                 call $timer.cancel_event;
0x001DFB        85408017                 r2 = Null OR 0x8017;
0x001DFC        FD0000FF 0950670B        r3 = Null + M[$sub_link_port];
0x001DFE        8155001F                 r3 = r3 AND 0x1f;
0x001DFF        09602E71                 r4 = Null + M[$sco_param_to_air_size];
0x001E00        E1F0F3CC                 call $message.send;
0x001E01        E1F0FF1C                 call $sco_schedule_to_air;
0x001E02        DDF0F3E8                 jump $pop_rLink_and_rts;

 <$sbcdec.init_static_decoder>
0x001E03        F3D00000                 push rLink;
0x001E04        01B01FA6                 r9 = Null + 8102;
0x001E05        D5B70005                 M[r5 + 5] = r9;
0x001E06        E1F002FF                 call $sbc.init_static_common;
0x001E07        FD0000FF 01203260        r0 = Null + -52640;
0x001E09        D52B002E                 M[r9 + 46] = r0;
0x001E0A        FD0000FF 012030D0        r0 = Null + -53040;
0x001E0C        D52B002F                 M[r9 + 47] = r0;
0x001E0D        FD0000FF 012030F0        r0 = Null + -53008;
0x001E0F        D52B0030                 M[r9 + 48] = r0;
0x001E10        FD0000FF 0120341B        r0 = Null + -52197;
0x001E12        D52B0031                 M[r9 + 49] = r0;
0x001E13        FD0000FF 01203000        r0 = Null + -53248;
0x001E15        D52B0032                 M[r9 + 50] = r0;
0x001E16        FD0000FF 01203100        r0 = Null + -52992;
0x001E18        D52B0033                 M[r9 + 51] = r0;
0x001E19        D50B003A                 M[r9 + 58] = Null;
0x001E1A        01200010                 r0 = Null + 16;
0x001E1B        D52B003B                 M[r9 + 59] = r0;
0x001E1C        FD0000FF 012035A0        r0 = Null + -51808;
0x001E1E        D52B003E                 M[r9 + 62] = r0;
0x001E1F        E1F002C7                 call $sbcdec.reset_decoder;
0x001E20        E1F002CC                 call $sbcdec.init_tables;
0x001E21        01302E1C                 r1 = Null + 11804;
0x001E22        01407010                 r2 = Null + 28688;
0x001E23        01501E26                 r3 = Null + 7718;
0x001E24        E1F00318                 call $message.register_handler;
0x001E25        DDF0F3C5                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x001E26        D53B0034                 M[r9 + 52] = r1;
0x001E27        DC0D000F                 rts;

 <$cbops.signal_detect_op.timer_handler>
0x001E28        F3D00000                 push rLink;
0x001E29        D13A0000                 r1 = M[r8 + 0];
0x001E2A        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x001E2B        D12A0002                 r0 = M[r8 + 2];
0x001E2C        2002003F                 Null = r0 - r1;
0x001E2D        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x001E2E        D14A0003                 r2 = M[r8 + 3];
0x001E2F        E444002F                 r2 = r2 + 1;
0x001E30        D54A0003                 M[r8 + 3] = r2;
0x001E31        D13A0001                 r1 = M[r8 + 1];
0x001E32        2004003F                 Null = r2 - r1;
0x001E33        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x001E34        D10A0004                 Null = M[r8 + 4];
0x001E35        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x001E36        01500000                 r3 = Null + 0;
0x001E37        D55A0004                 M[r8 + 4] = r3;
0x001E38        D14A0005                 r2 = M[r8 + 5];
0x001E39        E1F0F1AA                 call $message.send_short;
0x001E3A        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x001E3B        D10A0004                 Null = M[r8 + 4];
0x001E3C        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x001E3D        E450002F                 r3 = Null + 1;
0x001E3E        D55A0004                 M[r8 + 4] = r3;
0x001E3F        D14A0005                 r2 = M[r8 + 5];
0x001E40        E1F0F1A3                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x001E41        01400000                 r2 = Null + 0;
0x001E42        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x001E43        01200000                 r0 = Null + 0;
0x001E44        D52A0002                 M[r8 + 2] = r0;
0x001E45        DDF0F3A5                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x001E46        01200000                 r0 = Null + 0;
0x001E47        D52A0003                 M[r8 + 3] = r0;
0x001E48        D52A0002                 M[r8 + 2] = r0;
0x001E49        E420002F                 r0 = Null + 1;
0x001E4A        D52A0004                 M[r8 + 4] = r0;
0x001E4B        DDF0F39F                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x001E4C        F3D00000                 push rLink;
0x001E4D        00BC000F                 r9 = r10 + Null;
0x001E4E        D17A0002                 r5 = M[r8 + 2];
0x001E4F        511A0003                 I1 = r8 + 3;
0x001E50        51D00000                 L1 = Null + 0;
0x001E51        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x001E52        00CB000F                 r10 = r9 + Null;
0x001E53        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001E54        D038002F                 r1 = M[r6 + r0];
0x001E55        5000003F                 I0 = Null + r1;
0x001E56        D039002F                 r1 = M[r7 + r0];
0x001E57        50C0003F                 L0 = Null + r1;
0x001E58        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001E59        D038002F                 r1 = M[r6 + r0];
0x001E5A        5040003F                 I4 = Null + r1;
0x001E5B        D039002F                 r1 = M[r7 + r0];
0x001E5C        50E0003F                 L4 = Null + r1;
0x001E5D        D12A0001                 r0 = M[r8 + 1];
0x001E5E        D13A0000                 r1 = M[r8 + 0];
0x001E5F        E5F0000D                 do $M.cbops.soft_mute.sampleLoop;
0x001E60        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x001E61        00200004                 if NEG r0 = Null + Null;
0x001E62        0160001F                 r4 = Null + 31;
0x001E63        2006002F                 Null = r4 - r0;
0x001E64        00260004                 if NEG r0 = r4 + Null;
0x001E65        FD0000FF 01605B2D        r4 = Null + -42195;
0x001E67        0062006F                 r4 = r0 + r4;
0x001E68        D3600000                 r4 = M[r4 + Null];
0x001E69        97460000                 r2 = r2 * r4 (frac);
0x001E6A        2040004F                 r2 = Null - r2;
0x001E6B        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x001E6C        E477003F                 r5 = r5 - 1;
0x001E6D        DD10FFE5                 if NE jump $M.cbops.soft_mute.channelLoop;
0x001E6E        D52A0001                 M[r8 + 1] = r0;
0x001E6F        51C00000                 L0 = Null + 0;
0x001E70        51E00000                 L4 = Null + 0;
0x001E71        DDF0F379                 jump $pop_rLink_and_rts;

 <$disable_esco_subwoofer>
0x001E72        F3D00000                 push rLink;
0x001E73        09402E73                 r2 = Null + M[$sco_timer_id];
0x001E74        E1F0F1AB                 call $timer.cancel_event;
0x001E75        09402E7C                 r2 = Null + M[$wall_clock_timer_id];
0x001E76        E1F0F1A9                 call $timer.cancel_event;
0x001E77        FD0000FF 09406713        r2 = Null + M[$bass_timer_id];
0x001E79        E1F0F1A6                 call $timer.cancel_event;
0x001E7A        FD0000FF 1900668C        M[$bdaddr_struc] = Null + Null;
0x001E7C        FD0000FF 1900668D        M[0xff668d] = Null + Null;
0x001E7E        FD0000FF 1900668E        M[0xff668e] = Null + Null;
0x001E80        FD0000FF 1900668F        M[0xff668f] = Null + Null;
0x001E82        FD0000FF 1900670F        M[$sco_param_tesco] = Null + Null;
0x001E84        FD0000FF 1900670B        M[$sub_link_port] = Null + Null;
0x001E86        FD0000FF 19006739        M[$frame_sync.sync_flag] = Null + Null;
0x001E88        FD0000FF 1900667B        M[0xff667b] = Null + Null;
0x001E8A        19002DEB                 M[0x2deb] = Null + Null;
0x001E8B        FD0000FF 19006654        M[$M.main.samples_latency_measure] = Null + Null;
0x001E8D        FD0000FF 01206739        r0 = Null + -39111;
0x001E8F        FD0000FF 19206701        M[$music_example.sync_flag_ptr] = r0 + Null;
0x001E91        01200168                 r0 = Null + 360;
0x001E92        19202E62                 M[$music_example.frame_processing_size] = r0 + Null;

 <$M.disable_esco_subwoofer.done>
0x001E93        DDF0F357                 jump $pop_rLink_and_rts;

 <$bdaddr_message_handler>
0x001E94        F3D00000                 push rLink;
0x001E95        8D330078                 r1 = r1 LSHIFT -8;
0x001E96        FD0000FF 1930668C        M[$bdaddr_struc] = r1 + Null;
0x001E98        FD0000FF 1940668D        M[0xff668d] = r2 + Null;
0x001E9A        FD0000FF 1950668E        M[0xff668e] = r3 + Null;
0x001E9C        FD0000FF 1960668F        M[0xff668f] = r4 + Null;
0x001E9E        8540801B                 r2 = Null OR 0x801b;
0x001E9F        FD0000FF 0950668C        r3 = Null + M[$bdaddr_struc];
0x001EA1        FD0000FF 0960668D        r4 = Null + M[0xff668d];
0x001EA3        FD0000FF 0970668E        r5 = Null + M[0xff668e];
0x001EA5        FD0000FF 0980668F        r6 = Null + M[0xff668f];
0x001EA7        E1F0F325                 call $message.send;
0x001EA8        01302DFC                 r1 = Null + 11772;
0x001EA9        FD000001 014086A0        r2 = Null + 100000;
0x001EAB        01501FC4                 r3 = Null + 8132;
0x001EAC        E1F0F334                 call $timer.schedule_event_in;
0x001EAD        E430002F                 r1 = Null + 1;
0x001EAE        19302E7D                 M[$subwoofer.running] = r1 + Null;
0x001EAF        DDF0F33B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x001EB0        090007FF                 Null = Null + M[$app_config.io];
0x001EB1        DC0D0005                 if POS rts;
0x001EB2        193007FF                 M[$app_config.io] = r1 + Null;
0x001EB3        21030005                 Null = r1 - 5;
0x001EB4        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_usb;
0x001EB5        01200003                 r0 = Null + 3;
0x001EB6        FD0000FF 192066F8        M[$codec_type] = r0 + Null;
0x001EB8        0120011D                 r0 = Null + 285;
0x001EB9        19202E59                 M[$codec_config] = r0 + Null;
0x001EBA        DDF00012                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_usb>
0x001EBB        21030008                 Null = r1 - 8;
0x001EBC        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_analogue;
0x001EBD        01200006                 r0 = Null + 6;
0x001EBE        FD0000FF 192066F8        M[$codec_type] = r0 + Null;
0x001EC0        01200120                 r0 = Null + 288;
0x001EC1        19202E59                 M[$codec_config] = r0 + Null;
0x001EC2        DDF0000A                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_analogue>
0x001EC3        21030001                 Null = r1 - 1;
0x001EC4        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_sbc;
0x001EC5        01200000                 r0 = Null + 0;
0x001EC6        FD0000FF 192066F8        M[$codec_type] = r0 + Null;
0x001EC8        0120011A                 r0 = Null + 282;
0x001EC9        19202E59                 M[$codec_config] = r0 + Null;
0x001ECA        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_sbc>
0x001ECB        DDF002FA                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x001ECC        DC0D000F                 rts;

 <$sbcdec.private.init_tables>
0x001ECD        F3D00000                 push rLink;
0x001ECE        09402CF3                 r2 = Null + M[$flash.windowed_data16.address];
0x001ECF        D12B002E                 r0 = M[r9 + 46];
0x001ED0        5000002F                 I0 = Null + r0;
0x001ED1        01200000                 r0 = Null + 0;
0x001ED2        01300080                 r1 = Null + 128;
0x001ED3        E1F0EC8C                 call $flash.copy_to_dm_24;
0x001ED4        D12B002F                 r0 = M[r9 + 47];
0x001ED5        5000002F                 I0 = Null + r0;
0x001ED6        01200174                 r0 = Null + 372;
0x001ED7        01300020                 r1 = Null + 32;
0x001ED8        E1F0EC87                 call $flash.copy_to_dm_24;
0x001ED9        D12B0030                 r0 = M[r9 + 48];
0x001EDA        5000002F                 I0 = Null + r0;
0x001EDB        012001EE                 r0 = Null + 494;
0x001EDC        0130000F                 r1 = Null + 15;
0x001EDD        E1F0EC82                 call $flash.copy_to_dm_24;
0x001EDE        D12B0031                 r0 = M[r9 + 49];
0x001EDF        5000002F                 I0 = Null + r0;
0x001EE0        012001D4                 r0 = Null + 468;
0x001EE1        01300011                 r1 = Null + 17;
0x001EE2        E1F0EC7D                 call $flash.copy_to_dm_24;
0x001EE3        DDF0F307                 jump $pop_rLink_and_rts;

 <$enable_esco_subwoofer>
0x001EE4        F3D00000                 push rLink;
0x001EE5        FD0000FF 1930671D        M[$subwoofer.sco_offset] = r1 + Null;
0x001EE7        01302DF4                 r1 = Null + 11764;
0x001EE8        FD000000 01408019        r2 = Null + 32793;
0x001EEA        01501E94                 r3 = Null + 7828;
0x001EEB        E1F00251                 call $message.register_handler;
0x001EEC        FD0000FF 01306684        r1 = Null + -39292;
0x001EEE        FD000000 01408015        r2 = Null + 32789;
0x001EF0        01501DDD                 r3 = Null + 7645;
0x001EF1        E1F0024B                 call $message.register_handler;
0x001EF2        01302DF8                 r1 = Null + 11768;
0x001EF3        FD000000 0140801C        r2 = Null + 32796;
0x001EF5        01501B7E                 r3 = Null + 7038;
0x001EF6        E1F00246                 call $message.register_handler;

 <$M.enable_esco_subwoofer.done>
0x001EF7        DDF0F2F3                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.init_avcopy_struct>
0x001EF8        500000AF                 I0 = Null + r8;
0x001EF9        01C00007                 r10 = Null + 7;
0x001EFA        FD0000FF 511065F2        I1 = Null + -39438;
0x001EFC        E5F00003                 do $M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct;
0x001EFD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001EFE        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct>
0x001EFF        D12A0001                 r0 = M[r8 + 1];
0x001F00        01320003                 r1 = r0 + 3;
0x001F01        D33A0000                 r1 = M[r1 + r8];
0x001F02        D12A0002                 r0 = M[r8 + 2];
0x001F03        FD0000FF 19006730        M[$M.cbops.av_copy.right_channel] = Null + Null;
0x001F05        FD0000FF 019065F4        r7 = Null + -39436;
0x001F07        01402E35                 r2 = Null + 11829;
0x001F08        D5490000                 M[r7 + 0] = r2;
0x001F09        D14A0001                 r2 = M[r8 + 1];
0x001F0A        21040002                 Null = r2 - 2;
0x001F0B        DD100007                 if NE jump $M.cbops.av_copy.init_avcopy_struct.is_mono_struct;
0x001F0C        FD0000FF 014066D4        r2 = Null + -39212;
0x001F0E        D5490001                 M[r7 + 1] = r2;
0x001F0F        D14A0003                 r2 = M[r8 + 3];
0x001F10        FD0000FF 19406730        M[$M.cbops.av_copy.right_channel] = r2 + Null;

 <$M.cbops.av_copy.init_avcopy_struct.is_mono_struct>
0x001F12        DC0D000F                 rts;

 <$sbcdec.get1byte>
0x001F13        01200008                 r0 = Null + 8;
0x001F14        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x001F15        01200004                 r0 = Null + 4;
0x001F16        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x001F17        01200002                 r0 = Null + 2;
0x001F18        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x001F19        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x001F1A        D15B0031                 r3 = M[r9 + 49];
0x001F1B        D3520000                 r3 = M[r3 + r0];
0x001F1C        D14B003B                 r2 = M[r9 + 59];
0x001F1D        2042004F                 r2 = r0 - r2;
0x001F1E        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x001F1F        03003000                 Null = Null + Null, r1 = M[I0,0];
0x001F20        8F340000                 r1 = r1 LSHIFT r2;
0x001F21        83350000                 r1 = r1 AND r3;
0x001F22        2040004F                 r2 = Null - r2;
0x001F23        D54B003B                 M[r9 + 59] = r2;
0x001F24        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x001F25        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001F26        8F340000                 r1 = r1 LSHIFT r2;
0x001F27        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x001F28        21440010                 r2 = r2 - 16;
0x001F29        8F540000                 r3 = r3 LSHIFT r2;
0x001F2A        03350000                 r1 = r1 + r3;
0x001F2B        2040004F                 r2 = Null - r2;
0x001F2C        D54B003B                 M[r9 + 59] = r2;
0x001F2D        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x001F2E        D15B0014                 r3 = M[r9 + 20];
0x001F2F        5010005F                 I1 = Null + r3;
0x001F30        D1CB0021                 r10 = M[r9 + 33];
0x001F31        D15B001D                 r3 = M[r9 + 29];
0x001F32        508000CF                 M0 = Null + r10;
0x001F33        709000CF                 M1 = Null - r10;
0x001F34        59A90001                 M2 = M1 + 1;
0x001F35        51B00001                 M3 = Null + 1;
0x001F36        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x001F38        514B0026                 I4 = r9 + 38;
0x001F39        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x001F3A        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x001F3B        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x001F3C        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x001F3D        0042003F                 r2 = r0 + r1;
0x001F3E        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x001F3F        2032003F                 r1 = r0 - r1;
0x001F40        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x001F41        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x001F42        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x001F43        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x001F44        D1CB0021                 r10 = M[r9 + 33];
0x001F45        5B1C0000                 I1 = I1 + r10;
0x001F46        E455003F                 r3 = r3 - 1;
0x001F47        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x001F48        DC0D000F                 rts;

 <$av_insert_silence>
0x001F49        F3D00000                 push rLink;
0x001F4A        0026000F                 r0 = r4 + Null;
0x001F4B        E1F0F234                 call $cbuffer.calc_amount_space;
0x001F4C        D035000F                 r1 = M[r3 + Null];
0x001F4D        00C3000F                 r10 = r1 + Null;
0x001F4E        200200CF                 Null = r0 - r10;
0x001F4F        00C20004                 if NEG r10 = r0 + Null;
0x001F50        202300CF                 r0 = r1 - r10;
0x001F51        1852000F                 M[r3] = r0 + Null;
0x001F52        0026000F                 r0 = r4 + Null;
0x001F53        E1F0F267                 call $cbuffer.get_write_address_and_size;
0x001F54        5000002F                 I0 = Null + r0;
0x001F55        50C0003F                 L0 = Null + r1;
0x001F56        01200000                 r0 = Null + 0;
0x001F57        E5F00002                 do $M.av_insert_silence.audio_fill_loop;
0x001F58        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.av_insert_silence.audio_fill_loop>
0x001F59        0026000F                 r0 = r4 + Null;
0x001F5A        4430000F                 r1 = Null + I0;
0x001F5B        E1F0F26D                 call $cbuffer.set_write_address;
0x001F5C        51C00000                 L0 = Null + 0;
0x001F5D        DDF0F28D                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.main>
0x001F5E        F3D00000                 push rLink;
0x001F5F        00BC000F                 r9 = r10 + Null;
0x001F60        D17A0000                 r5 = M[r8 + 0];
0x001F61        D15A0001                 r3 = M[r8 + 1];
0x001F62        514A0002                 I4 = r8 + 2;
0x001F63        51E00000                 L4 = Null + 0;
0x001F64        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x001F65        00CB000F                 r10 = r9 + Null;
0x001F66        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001F67        D038002F                 r1 = M[r6 + r0];
0x001F68        5000003F                 I0 = Null + r1;
0x001F69        D039002F                 r1 = M[r7 + r0];
0x001F6A        50C0003F                 L0 = Null + r1;
0x001F6B        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x001F6C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001F6D        0002000F                 Null = r0 + Null;
0x001F6E        20200024                 if NEG r0 = Null - r0;
0x001F6F        2004002F                 Null = r2 - r0;
0x001F70        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x001F71        E455003F                 r3 = r3 - 1;
0x001F72        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x001F73        D5470002                 M[r5 + 2] = r2;
0x001F74        51C00000                 L0 = Null + 0;
0x001F75        DDF0F275                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetConfig.func>
0x001F76        F3D00000                 push rLink;
0x001F77        8144FFFF                 r2 = r2 AND 0xffff;
0x001F78        8D330010                 r1 = r1 LSHIFT 16;
0x001F79        87340000                 r1 = r1 OR r2;
0x001F7A        8166FFFF                 r4 = r4 AND 0xffff;
0x001F7B        8D550010                 r3 = r3 LSHIFT 16;
0x001F7C        87560000                 r3 = r3 OR r4;
0x001F7D        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x001F7E        83530000                 r3 = r3 AND r1;
0x001F7F        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x001F81        83230000                 r0 = r0 AND r1;
0x001F82        87250000                 r0 = r0 OR r3;
0x001F83        19200DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x001F84        0140100F                 r2 = Null + 4111;
0x001F85        8D520070                 r3 = r0 LSHIFT -16;
0x001F86        8162FFFF                 r4 = r0 AND 0xffff;
0x001F87        E1F0F05C                 call $message.send_short;
0x001F88        E430002F                 r1 = Null + 1;
0x001F89        FD0000FF 19306700        M[$music_example.reinit] = r1 + Null;
0x001F8B        DDF0F25F                 jump $pop_rLink_and_rts;

 <$conn_init_cbuffers>
0x001F8C        F3D00000                 push rLink;
0x001F8D        0120009D                 r0 = Null + 157;
0x001F8E        FD0000FF 01306000        r1 = Null + -40960;
0x001F90        0045000F                 r2 = r3 + Null;
0x001F91        E1F0F248                 call $cbuffer.buffer_configure;
0x001F92        FD0000FF 012066B3        r0 = Null + -39245;
0x001F94        01300800                 r1 = Null + 2048;
0x001F95        0045000F                 r2 = r3 + Null;
0x001F96        E1F0F243                 call $cbuffer.buffer_configure;
0x001F97        FD0000FF 012066B0        r0 = Null + -39248;
0x001F99        FD0000FF 01304000        r1 = Null + -49152;
0x001F9B        0046000F                 r2 = r4 + Null;
0x001F9C        E1F0F23D                 call $cbuffer.buffer_configure;
0x001F9D        DDF0F24D                 jump $pop_rLink_and_rts;

 <$calc_sub_sra_ratio>
0x001F9E        F3D00000                 push rLink;
0x001F9F        FD0000FF 012066CE        r0 = Null + -39218;
0x001FA1        E1F0F1EE                 call $cbuffer.calc_amount_data;
0x001FA2        21340168                 r1 = r2 - 360;
0x001FA3        214402D0                 r2 = r2 - 720;
0x001FA4        01500054                 r3 = Null + 84;
0x001FA5        0015000F                 rMAC = r3 + Null;
0x001FA6        2002003F                 Null = r0 - r1;
0x001FA7        20110055                 if POS rMAC = rMAC - r3;
0x001FA8        2002004F                 Null = r0 - r2;
0x001FA9        20110055                 if POS rMAC = rMAC - r3;
0x001FAA        09112C87                 rMAC = rMAC + M[0x2c87];
0x001FAB        09202E7B                 r0 = Null + M[$sub_sra_ratio];
0x001FAC        FD00000C CD11CCCD        rMAC = rMAC * 0.10000002384185791 (SS);
0x001FAE        FD000073 AD123333        rMAC = rMAC + r0 * 0.89999997615814209 (SS);
0x001FB0        19102E7B                 M[$sub_sra_ratio] = rMAC + Null;
0x001FB1        DDF0F239                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x001FB2        F3D00000                 push rLink;
0x001FB3        09402CF3                 r2 = Null + M[$flash.windowed_data16.address];
0x001FB4        D12B0015                 r0 = M[r9 + 21];
0x001FB5        5000002F                 I0 = Null + r0;
0x001FB6        012000C0                 r0 = Null + 192;
0x001FB7        01300050                 r1 = Null + 80;
0x001FB8        E1F0EBA7                 call $flash.copy_to_dm_24;
0x001FB9        D12B0016                 r0 = M[r9 + 22];
0x001FBA        5000002F                 I0 = Null + r0;
0x001FBB        01200138                 r0 = Null + 312;
0x001FBC        01300028                 r1 = Null + 40;
0x001FBD        E1F0EBA2                 call $flash.copy_to_dm_24;
0x001FBE        D12B0017                 r0 = M[r9 + 23];
0x001FBF        5000002F                 I0 = Null + r0;
0x001FC0        012001A4                 r0 = Null + 420;
0x001FC1        01300030                 r1 = Null + 48;
0x001FC2        E1F0F0EB                 call $flash.copy_to_dm;
0x001FC3        DDF0F227                 jump $pop_rLink_and_rts;

 <$wall_clock_timer_handler>
0x001FC4        F3D00000                 push rLink;
0x001FC5        8540801B                 r2 = Null OR 0x801b;
0x001FC6        FD0000FF 0950668C        r3 = Null + M[$bdaddr_struc];
0x001FC8        FD0000FF 0960668D        r4 = Null + M[0xff668d];
0x001FCA        FD0000FF 0970668E        r5 = Null + M[0xff668e];
0x001FCC        FD0000FF 0980668F        r6 = Null + M[0xff668f];
0x001FCE        E1F0F1FE                 call $message.send;
0x001FCF        01302DFC                 r1 = Null + 11772;
0x001FD0        FD000001 014086A0        r2 = Null + 100000;
0x001FD2        01501FC4                 r3 = Null + 8132;
0x001FD3        E1F0F20A                 call $timer.schedule_event_in_period;
0x001FD4        19502E7C                 M[$wall_clock_timer_id] = r3 + Null;
0x001FD5        DDF0F215                 jump $pop_rLink_and_rts;

 <$audio_prime_silence>
0x001FD6        F3D00000                 push rLink;
0x001FD7        0026000F                 r0 = r4 + Null;
0x001FD8        E1F0F05A                 call $cbuffer.empty_buffer;
0x001FD9        0026000F                 r0 = r4 + Null;
0x001FDA        E1F0F1E0                 call $cbuffer.get_write_address_and_size;
0x001FDB        5000002F                 I0 = Null + r0;
0x001FDC        50C0003F                 L0 = Null + r1;
0x001FDD        00C7000F                 r10 = r5 + Null;
0x001FDE        01200000                 r0 = Null + 0;
0x001FDF        E5F00002                 do $M.audio_prime_silence.audio_fill_loop;
0x001FE0        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_prime_silence.audio_fill_loop>
0x001FE1        0026000F                 r0 = r4 + Null;
0x001FE2        4430000F                 r1 = Null + I0;
0x001FE3        E1F0F1E5                 call $cbuffer.set_write_address;
0x001FE4        51C00000                 L0 = Null + 0;
0x001FE5        DDF0F205                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x001FE6        F3D00000                 push rLink;
0x001FE7        D17B0014                 r5 = M[r9 + 20];
0x001FE8        5010007F                 I1 = Null + r5;
0x001FE9        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x001FEA        D17B001F                 r5 = M[r9 + 31];
0x001FEB        D1CB001B                 r10 = M[r9 + 27];
0x001FEC        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x001FED        D1CB0021                 r10 = M[r9 + 33];
0x001FEE        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x001FEF        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x001FF0        0002000F                 Null = r0 + Null;
0x001FF1        E110FF29                 if NE call $sbcdec.getbits;
0x001FF2        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x001FF3        E477003F                 r5 = r5 - 1;
0x001FF4        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x001FF5        E466003F                 r4 = r4 - 1;
0x001FF6        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x001FF7        DDF0F1F3                 jump $pop_rLink_and_rts;

 <$config_usb>
0x001FF8        FD0000FF 01205F60        r0 = Null + -41120;
0x001FFA        5000002F                 I0 = Null + r0;
0x001FFB        51800002                 M0 = Null + 2;
0x001FFC        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];

 <$M.config_usb.rate_loop>
0x001FFD        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001FFE        0003000F                 Null = r1 + Null;
0x001FFF        DD000005                 if EQ jump $M.config_usb.error;
0x002000        2003002F                 Null = r1 - r0;
0x002001        DD000005                 if EQ jump $M.config_usb.done;
0x002002        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x002003        DDF0FFFA                 jump $M.config_usb.rate_loop;

 <$M.config_usb.error>
0x002004        FD0000FF 51005F61        I0 = Null + -41119;

 <$M.config_usb.done>
0x002006        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002007        D52A0003                 M[r8 + 3] = r0;
0x002008        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002009        D52A0006                 M[r8 + 6] = r0;
0x00200A        DC0D000F                 rts;

 <$sbc.calc_frame_length>
0x00200B        D12B0021                 r0 = M[r9 + 33];
0x00200C        D13B001F                 r1 = M[r9 + 31];
0x00200D        9862003F                 r4 = r0 * r1 (int);
0x00200E        8D66007F                 r4 = r4 LSHIFT -1;
0x00200F        01660005                 r4 = r4 + 5;
0x002010        D14B001D                 r2 = M[r9 + 29];
0x002011        D15B0022                 r3 = M[r9 + 34];
0x002012        9854005F                 r3 = r2 * r3 (int);
0x002013        D14B001E                 r2 = M[r9 + 30];
0x002014        21440002                 r2 = r2 - 2;
0x002015        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x002016        9B420000                 r2 = r2 * r0 (int);
0x002017        03540000                 r3 = r3 + r2;
0x002018        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x002019        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x00201A        E455003F                 r3 = r3 - 1;
0x00201B        8D55007D                 r3 = r3 LSHIFT -3;
0x00201C        0026005F                 r0 = r4 + r3;
0x00201D        DC0D000F                 rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x00201E        F3D00000                 push rLink;
0x00201F        5000005F                 I0 = Null + r3;
0x002020        03003100                 Null = Null + Null, r1 = M[I0,1];
0x002021        00C3000F                 r10 = r1 + Null;
0x002022        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x002023        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002024        E1F01044                 call $user_eq.calcParamAddrOffset;
0x002025        01220E31                 r0 = r0 + 3633;
0x002026        D3200000                 r0 = M[r0 + Null];
0x002027        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x002028        0075000F                 r5 = r3 + Null;
0x002029        0064000F                 r4 = r2 + Null;
0x00202A        0150329B                 r3 = Null + 12955;
0x00202B        E1F0EC43                 call $message.send_long;
0x00202C        DDF0F1BE                 jump $pop_rLink_and_rts;

 <$sbcdec.find_sync>
0x00202D        F3D00000                 push rLink;
0x00202E        E1F000C8                 call $sbcdec.byte_align;
0x00202F        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x002030        D18B003B                 r6 = M[r9 + 59];
0x002031        5820000F                 I2 = I0 + Null;
0x002032        E1F0FEE1                 call $sbcdec.get1byte;
0x002033        2103009C                 Null = r1 - 156;
0x002034        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x002035        01800063                 r6 = Null + 99;
0x002036        DDF0F1B4                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x002037        5802000F                 I0 = I2 + Null;
0x002038        D58B003B                 M[r9 + 59] = r6;
0x002039        DDF0F1B1                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x00203A        D12B0032                 r0 = M[r9 + 50];
0x00203B        D52B003C                 M[r9 + 60] = r0;
0x00203C        D12B0032                 r0 = M[r9 + 50];
0x00203D        5010002F                 I1 = Null + r0;
0x00203E        01C000A0                 r10 = Null + 160;
0x00203F        01200000                 r0 = Null + 0;
0x002040        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x002041        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x002042        D12B0033                 r0 = M[r9 + 51];
0x002043        D52B003D                 M[r9 + 61] = r0;
0x002044        D12B0033                 r0 = M[r9 + 51];
0x002045        5010002F                 I1 = Null + r0;
0x002046        01C000A0                 r10 = Null + 160;
0x002047        01200000                 r0 = Null + 0;
0x002048        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x002049        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x00204A        DC0D000F                 rts;

 <$M.music_example_message.SoftMute.func>
0x00204B        F3D00000                 push rLink;
0x00204C        0043000F                 r2 = r1 + Null;
0x00204D        81330001                 r1 = r1 AND 0x1;
0x00204E        01A02D43                 r8 = Null + 11587;
0x00204F        E1F00090                 call $M.cbops.soft_mute.message_handler.func;
0x002050        8D34007F                 r1 = r2 LSHIFT -1;
0x002051        81330001                 r1 = r1 AND 0x1;
0x002052        E420002F                 r0 = Null + 1;
0x002053        2030003F                 r1 = Null - r1;
0x002054        0003000F                 Null = r1 + Null;
0x002055        00320000                 if EQ r1 = r0 + Null;
0x002056        FD0000FF 19306718        M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x002058        DDF0F192                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x002059        F3D00000                 push rLink;
0x00205A        0023000F                 r0 = r1 + Null;
0x00205B        E1F0100D                 call $user_eq.calcParamAddrOffset;
0x00205C        01220E31                 r0 = r0 + 3633;
0x00205D        8144FFFF                 r2 = r2 AND 0xffff;
0x00205E        1824000F                 M[r0] = r2 + Null;
0x00205F        21050000                 Null = r3 - 0;
0x002060        DD00F18A                 if EQ jump $pop_rLink_and_rts;
0x002061        0023000F                 r0 = r1 + Null;
0x002062        019000FE                 r7 = Null + 254;
0x002063        E1F00FDB                 call $user_eq.calcBandCoefs;
0x002064        DDF0F186                 jump $pop_rLink_and_rts;

 <$audio_insert_silence>
0x002065        F3D00000                 push rLink;
0x002066        0025000F                 r0 = r3 + Null;
0x002067        E1F0F153                 call $cbuffer.get_write_address_and_size;
0x002068        5000002F                 I0 = Null + r0;
0x002069        50C0003F                 L0 = Null + r1;
0x00206A        01200000                 r0 = Null + 0;
0x00206B        E5F00002                 do $M.audio_insert_silence.audio_fill_loop;
0x00206C        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_insert_silence.audio_fill_loop>
0x00206D        0025000F                 r0 = r3 + Null;
0x00206E        4430000F                 r1 = Null + I0;
0x00206F        E1F0F159                 call $cbuffer.set_write_address;
0x002070        51C00000                 L0 = Null + 0;
0x002071        DDF0F179                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x002072        F3D00000                 push rLink;
0x002073        D18B001F                 r6 = M[r9 + 31];
0x002074        D19B0021                 r7 = M[r9 + 33];
0x002075        9B890000                 r6 = r6 * r7 (int);
0x002076        D12B0018                 r0 = M[r9 + 24];
0x002077        5010002F                 I1 = Null + r0;
0x002078        51900001                 M1 = Null + 1;
0x002079        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x00207A        E1F0FEA0                 call $sbcdec.getbits;
0x00207B        E1F0003C                 call $sbc.crc_calc;
0x00207C        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x00207D        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x00207E        DDF0F16C                 jump $pop_rLink_and_rts;

 <$sco_timer_handler>
0x00207F        F3D00000                 push rLink;
0x002080        FD0000FF 09206714        r0 = Null + M[$sub_app_esco_func];
0x002082        E0020001                 if NE call r0;
0x002083        01401D4C                 r2 = Null + 7500;
0x002084        FD0000FF 01306688        r1 = Null + -39288;
0x002086        0150207F                 r3 = Null + 8319;
0x002087        E1F0F156                 call $timer.schedule_event_in_period;
0x002088        19502E73                 M[$sco_timer_id] = r3 + Null;
0x002089        FD0000FF 19006739        M[$frame_sync.sync_flag] = Null + Null;
0x00208B        DDF0F15F                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x00208C        F3D00000                 push rLink;
0x00208D        0053000F                 r3 = r1 + Null;
0x00208E        0023000F                 r0 = r1 + Null;
0x00208F        E1F00FD9                 call $user_eq.calcParamAddrOffset;
0x002090        01220E31                 r0 = r0 + 3633;
0x002091        D062000F                 r4 = M[r0 + Null];
0x002092        01700000                 r5 = Null + 0;
0x002093        01800000                 r6 = Null + 0;
0x002094        0140329A                 r2 = Null + 12954;
0x002095        E1F0EF4E                 call $message.send_short;
0x002096        DDF0F154                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x002097        F3D00000                 push rLink;
0x002098        5000005F                 I0 = Null + r3;
0x002099        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00209A        00C3000F                 r10 = r1 + Null;
0x00209B        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x00209C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00209D        E1F00FCB                 call $user_eq.calcParamAddrOffset;
0x00209E        01220E31                 r0 = r0 + 3633;
0x00209F        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0020A0        8133FFFF                 r1 = r1 AND 0xffff;
0x0020A1        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x0020A2        DDF0F148                 jump $pop_rLink_and_rts;

 <$signal_detect_timer_handler>
0x0020A3        F3D00000                 push rLink;
0x0020A4        01A02D7D                 r8 = Null + 11645;
0x0020A5        E1F0FD83                 call $cbops.signal_detect_op.timer_handler;
0x0020A6        FD0000FF 01306650        r1 = Null + -39344;
0x0020A8        FD00000F 01404240        r2 = Null + 1000000;
0x0020AA        015020A3                 r3 = Null + 8355;
0x0020AB        E1F0F132                 call $timer.schedule_event_in_period;
0x0020AC        DDF0F13E                 jump $pop_rLink_and_rts;

 <$av_audio_out_silence_insert>
0x0020AD        F3D00000                 push rLink;
0x0020AE        FD0000FF 015066FE        r3 = Null + -39170;
0x0020B0        0160009D                 r4 = Null + 157;
0x0020B1        E1F0FE98                 call $av_insert_silence;
0x0020B2        01502E5F                 r3 = Null + 11871;
0x0020B3        FD0000FF 016066B3        r4 = Null + -39245;
0x0020B5        E1F0FE94                 call $av_insert_silence;
0x0020B6        DDF0F134                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x0020B7        D14B0024                 r2 = M[r9 + 36];
0x0020B8        0170001D                 r5 = Null + 29;
0x0020B9        65520008                 r3 = 8 - r0;
0x0020BA        00C2000F                 r10 = r0 + Null;
0x0020BB        8C53005F                 r3 = r1 LSHIFT r3;
0x0020BC        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x0020BD        8865004F                 r4 = r3 XOR r2;
0x0020BE        8D440001                 r2 = r2 LSHIFT 1;
0x0020BF        81660080                 r4 = r4 AND 0x80;
0x0020C0        88440071                 if NE r2 = r2 XOR r5;
0x0020C1        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x0020C2        D54B0024                 M[r9 + 36] = r2;
0x0020C3        DC0D000F                 rts;

 <$usb_sub_esco_process>
0x0020C4        F3D00000                 push rLink;
0x0020C5        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x0020C7        FD000091 2102A00E        Null = r0 - -7233522;
0x0020C9        DD100003                 if NE jump $M.usb_sub_esco_process.not_esco_sub;
0x0020CA        E1F0F7C3                 call $M.Subwoofer.esco_preprocess;
0x0020CB        E1F0F7C7                 call $M.Subwoofer.esco_post_process;

 <$M.usb_sub_esco_process.not_esco_sub>
0x0020CC        DDF0F11E                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.fill_silence_buffer_with_zeros>
0x0020CD        D1320000                 r1 = M[r0 + 0];
0x0020CE        50C0003F                 L0 = Null + r1;
0x0020CF        D1320001                 r1 = M[r0 + 1];
0x0020D0        5000003F                 I0 = Null + r1;
0x0020D1        01300000                 r1 = Null + 0;
0x0020D2        E5F00002                 do $M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero;
0x0020D3        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero>
0x0020D4        51C00000                 L0 = Null + 0;
0x0020D5        4430000F                 r1 = Null + I0;
0x0020D6        D5320002                 M[r0 + 2] = r1;
0x0020D7        DC0D000F                 rts;

 <$set_synchronized_warp_handler>
0x0020D8        F3D00000                 push rLink;
0x0020D9        FD0000FF 1900671E        M[$warp_timer_id] = Null + Null;
0x0020DB        09202E5B                 r0 = Null + M[$sra_rate_addr];
0x0020DC        D3200000                 r0 = M[r0 + Null];
0x0020DD        19202E7E                 M[$synchronized_rate] = r0 + Null;
0x0020DE        DDF0F10C                 jump $pop_rLink_and_rts;

 <$M.cbops.soft_mute.message_handler.func>
0x0020DF        F3D00000                 push rLink;
0x0020E0        E420002F                 r0 = Null + 1;
0x0020E1        2030003F                 r1 = Null - r1;
0x0020E2        0003000F                 Null = r1 + Null;
0x0020E3        00320000                 if EQ r1 = r0 + Null;
0x0020E4        D53A0000                 M[r8 + 0] = r1;
0x0020E5        DDF0F105                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x0020E6        F3D00000                 push rLink;
0x0020E7        01200010                 r0 = Null + 16;
0x0020E8        D1B70005                 r9 = M[r5 + 5];
0x0020E9        D52B003B                 M[r9 + 59] = r0;
0x0020EA        E1F0FF50                 call $sbcdec.silence_decoder;
0x0020EB        DDF0F0FF                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x0020EC        F3D00000                 push rLink;
0x0020ED        D1B70005                 r9 = M[r5 + 5];
0x0020EE        E1F0FDDF                 call $sbcdec.private.init_tables;
0x0020EF        E1F0FEC3                 call $sbc.private.init_tables_common;
0x0020F0        DDF0F0FA                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SignalDetect.func>
0x0020F1        F3D00000                 push rLink;
0x0020F2        8D330008                 r1 = r1 LSHIFT 8;
0x0020F3        01A02D7D                 r8 = Null + 11645;
0x0020F4        E1F0000D                 call $M.cbops.signal_detect_op.message_handler.func;
0x0020F5        DDF0F0F5                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x0020F6        F3D00000                 push rLink;
0x0020F7        D12B003B                 r0 = M[r9 + 59];
0x0020F8        81220007                 r0 = r0 AND 0x7;
0x0020F9        E1F0FE21                 call $sbcdec.getbits;
0x0020FA        DDF0F0F0                 jump $pop_rLink_and_rts;

 <$av_audio_out_silence_prime>
0x0020FB        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x0020FC        9122007D                 r0 = r0 ASHIFT -3;
0x0020FD        FD0000FF 192066FE        M[$M.av_audio_out_silence_insert.left_zero_samples] = r0 + Null;
0x0020FF        19202E5F                 M[$M.av_audio_out_silence_insert.right_zero_samples] = r0 + Null;
0x002100        DC0D000F                 rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x002101        F3D00000                 push rLink;
0x002102        D53A0000                 M[r8 + 0] = r1;
0x002103        D54A0001                 M[r8 + 1] = r2;
0x002104        DDF0F0E6                 jump $pop_rLink_and_rts;

 <$sbc.init_static_common>
0x002105        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x002106        FD000000 0120AAAA        r0 = Null + 43690;
0x002108        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x002109        DC0D0001                 if NE rts;
0x00210A        F3D00000                 push rLink;
0x00210B        01C00032                 r10 = Null + 50;
0x00210C        09302E9D                 r1 = Null + M[$M.spi_comm.last_addr];
0x00210D        09200045                 r0 = Null + M[$M.spi_block.command];
0x00210E        FD000000 0190AAAA        r7 = Null + 43690;
0x002110        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x002111        E403002F                 Null = r1 + 1;
0x002112        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x002113        D1430001                 r2 = M[r1 + 1];
0x002114        2002004F                 Null = r0 - r2;
0x002115        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x002116        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x002117        E1F000AE                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x002118        D1D30002                 rLink = M[r1 + 2];
0x002119        01300005                 r1 = Null + 5;
0x00211A        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x00211B        E00D000F                 call rLink;
0x00211C        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x00211D        01205555                 r0 = Null + 21845;
0x00211E        FD000000 0130AAAA        r1 = Null + 43690;
0x002120        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x002121        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x002122        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x002123        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x002124        DDF0F0C6                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x002125        D12A000A                 r0 = M[r8 + 10];
0x002126        D13A000B                 r1 = M[r8 + 11];
0x002127        D14A000C                 r2 = M[r8 + 12];
0x002128        D15A000E                 r3 = M[r8 + 14];
0x002129        D16A000F                 r4 = M[r8 + 15];
0x00212A        2073002F                 r5 = r1 - r0;
0x00212B        CC17005F                 rMAC = r5 * r3 (SS);
0x00212C        D51A0012                 M[r8 + 18] = rMAC;
0x00212D        2074003F                 r5 = r2 - r1;
0x00212E        CC17006F                 rMAC = r5 * r4 (SS);
0x00212F        D51A0013                 M[r8 + 19] = rMAC;
0x002130        D15A000D                 r3 = M[r8 + 13];
0x002131        D16A0010                 r4 = M[r8 + 16];
0x002132        2075004F                 r5 = r3 - r2;
0x002133        CC17006F                 rMAC = r5 * r4 (SS);
0x002134        D51A0014                 M[r8 + 20] = rMAC;
0x002135        01300000                 r1 = Null + 0;
0x002136        D16A0007                 r4 = M[r8 + 7];
0x002137        1863000F                 M[r4] = r1 + Null;
0x002138        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x002139        8966FFFF                 r4 = r4 XOR 0xffff;
0x00213A        D5630003                 M[r1 + 3] = r4;
0x00213B        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x00213C        8520FFFF                 r0 = Null OR 0xffff;
0x00213D        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x00213E        F3D00000                 push rLink;
0x00213F        E1F0F058                 call $block_interrupts;
0x002140        FD0000FF 09206728        r0 = Null + M[$message.last_addr];
0x002142        D5230000                 M[r1 + 0] = r0;
0x002143        FD0000FF 19306728        M[$message.last_addr] = r1 + Null;
0x002145        D5430001                 M[r1 + 1] = r2;
0x002146        D5530002                 M[r1 + 2] = r3;
0x002147        E1F0F024                 call $interrupt.unblock;
0x002148        DDF0F0A2                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x002149        F3D00000                 push rLink;
0x00214A        FD0000FF 0130669C        r1 = Null + -39268;
0x00214C        01407000                 r2 = Null + 28672;
0x00214D        01502150                 r3 = Null + 8528;
0x00214E        E1F0FFEE                 call $message.register_handler;
0x00214F        DDF00004                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x002150        E420002F                 r0 = Null + 1;
0x002151        19202E8B                 M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x002152        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x002153        85408000                 r2 = Null OR 0x8000;
0x002154        E1F0EE8F                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x002155        09002E8B                 Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x002156        DD00FFFF                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x002157        DDF0F093                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x002158        F3D00000                 push rLink;
0x002159        01302E10                 r1 = Null + 11792;
0x00215A        FD000000 01408007        r2 = Null + 32775;
0x00215C        01500ECD                 r3 = Null + 3789;
0x00215D        E1F0FFDF                 call $message.register_handler;
0x00215E        FD0000FF 013066A0        r1 = Null + -39264;
0x002160        85408008                 r2 = Null OR 0x8008;
0x002161        01500ECD                 r3 = Null + 3789;
0x002162        E1F0FFDA                 call $message.register_handler;
0x002163        DDF0F087                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x002164        F3D00000                 push rLink;
0x002165        FD0000FF 013066A4        r1 = Null + -39260;
0x002167        8540801C                 r2 = Null OR 0x801c;
0x002168        01500BEE                 r3 = Null + 3054;
0x002169        E1F0FFD3                 call $message.register_handler;
0x00216A        01302E18                 r1 = Null + 11800;
0x00216B        8540801D                 r2 = Null OR 0x801d;
0x00216C        015011EE                 r3 = Null + 4590;
0x00216D        E1F0FFCF                 call $message.register_handler;
0x00216E        DDF0F07C                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x00216F        01200015                 r0 = Null + 21;
0x002170        1920FE14                 M[0xfffe14] = r0 + Null;
0x002171        01200311                 r0 = Null + 785;
0x002172        1920FE15                 M[0xfffe15] = r0 + Null;
0x002173        E420002F                 r0 = Null + 1;
0x002174        1920FE11                 M[0xfffe11] = r0 + Null;
0x002175        1920FE12                 M[0xfffe12] = r0 + Null;
0x002176        1920FE13                 M[0xfffe13] = r0 + Null;
0x002177        1900FE4E                 M[0xfffe4e] = Null + Null;
0x002178        85EE0080                 rFlags = rFlags OR 0x80;
0x002179        DC0D000F                 rts;
0x00217A        DDF0DE86                 jump $reset;
0x00217B        DDF0DE87                 jump $interrupt.handler;

 <$audio_proc.peq.initialize>
0x00217C        D1A90003                 r8 = M[r7 + 3];
0x00217D        D12A0000                 r0 = M[r8 + 0];
0x00217E        812200FF                 r0 = r0 AND 0xff;
0x00217F        D5290006                 M[r7 + 6] = r0;
0x002180        E432002F                 r1 = r0 + 1;
0x002181        91C30001                 r10 = r1 ASHIFT 1;
0x002182        D5C90007                 M[r7 + 7] = r10;
0x002183        01390009                 r1 = r7 + 9;
0x002184        D5390004                 M[r7 + 4] = r1;
0x002185        99C20005                 r10 = r0 * 5 (int);
0x002186        D5C90008                 M[r7 + 8] = r10;
0x002187        012A0003                 r0 = r8 + 3;
0x002188        D5290005                 M[r7 + 5] = r0;
0x002189        DC0D000F                 rts;

 <$audio_proc.delay.initialize>
0x00218A        D12A0002                 r0 = M[r8 + 2];
0x00218B        F3D00000                 push rLink;
0x00218C        E1F0F029                 call $cbuffer.get_read_address_and_size;
0x00218D        5000002F                 I0 = Null + r0;
0x00218E        50C0003F                 L0 = Null + r1;
0x00218F        00C3000F                 r10 = r1 + Null;
0x002190        F3D40000                 pop rLink;
0x002191        01200000                 r0 = Null + 0;
0x002192        E5F00002                 do $M.audio_proc.delay.initialize.loop_delay_init;
0x002193        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.delay.initialize.loop_delay_init>
0x002194        51C00000                 L0 = Null + 0;
0x002195        DC0D000F                 rts;

 <$_stack_initialise>
0x002196        FD0000FF 01B0325F        r9 = Null + -52641;
0x002198        19B0FE67                 M[0xfffe67] = r9 + Null;
0x002199        FD0000FF 01B031A0        r9 = Null + -52832;
0x00219B        19B0FE66                 M[0xfffe66] = r9 + Null;
0x00219C        19B0FE68                 M[0xfffe68] = r9 + Null;
0x00219D        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x00219E        E420002F                 r0 = Null + 1;
0x00219F        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x0021A0        DC0D000F                 rts;

 <$frame_sync.1ms_delay>
0x0021A1        E430002F                 r1 = Null + 1;
0x0021A2        FD0000FF 19306739        M[$frame_sync.sync_flag] = r1 + Null;
0x0021A4        0930FE4D                 r1 = Null + M[0xfffe4d];
0x0021A5        0120003F                 r0 = Null + 63;
0x0021A6        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.1ms_delay.frame_operator_sync_loop>
0x0021A7        FD0000FF 09006739        Null = Null + M[$frame_sync.sync_flag];
0x0021A9        DD10FFFE                 if NE jump $M.frame_sync.1ms_delay.frame_operator_sync_loop;
0x0021AA        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x0021AB        DC0D000F                 rts;

 <$audio_proc.peq.zero_delay_data>
0x0021AC        F3C00000                 push r10;
0x0021AD        D1C90002                 r10 = M[r7 + 2];
0x0021AE        E4CC002F                 r10 = r10 + 1;
0x0021AF        91CC0001                 r10 = r10 ASHIFT 1;
0x0021B0        01390009                 r1 = r7 + 9;
0x0021B1        5000003F                 I0 = Null + r1;
0x0021B2        0030000F                 r1 = Null + Null;
0x0021B3        E5F00002                 do $M.audio_proc.peq.zero_delay_data.init_dly_ln_loop;
0x0021B4        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.peq.zero_delay_data.init_dly_ln_loop>
0x0021B5        F3C40000                 pop r10;
0x0021B6        DC0D000F                 rts;

 <$cbuffer.initialise>
0x0021B7        F3D00000                 push rLink;
0x0021B8        FD0000FF 01306698        r1 = Null + -39272;
0x0021BA        85408001                 r2 = Null OR 0x8001;
0x0021BB        015009ED                 r3 = Null + 2541;
0x0021BC        E1F0FF80                 call $message.register_handler;
0x0021BD        DDF0F02D                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x0021BE        F3D00000                 push rLink;
0x0021BF        09202E9D                 r0 = Null + M[$M.spi_comm.last_addr];
0x0021C0        D5230000                 M[r1 + 0] = r0;
0x0021C1        19302E9D                 M[$M.spi_comm.last_addr] = r1 + Null;
0x0021C2        D5430001                 M[r1 + 1] = r2;
0x0021C3        D5530002                 M[r1 + 2] = r3;
0x0021C4        DDF0F026                 jump $pop_rLink_and_rts;

 <$error>
0x0021C5        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x0021C6        FD0000FF 09B06726        r9 = Null + M[$error.handler];
0x0021C8        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x0021C9        E400001F                 break;
0x0021CA        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x0021CB        0920E000                 r0 = Null + M[0xffe000];
0x0021CC        19202E8A                 M[$message.last_seq_sent] = r0 + Null;
0x0021CD        DC0D000F                 rts;

 <$spi_comm.initialize>
0x0021CE        01205555                 r0 = Null + 21845;
0x0021CF        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x0021D0        DC0D000F                 rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.initialize>
0x003000        F3D00000                 push rLink;
0x003001        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003002        81220007                 r0 = r0 AND 0x7;
0x003003        D03A000F                 r1 = M[r8 + Null];
0x003004        E423005F                 r0 = MIN r1;
0x003005        E422002F                 r0 = r0 + 1;
0x003006        03A20000                 r8 = r8 + r0;
0x003007        D3A00000                 r8 = M[r8 + Null];
0x003008        E1F00002                 call $user_eq.calcBankCoefs;
0x003009        DDF0E1E1                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs>
0x00300A        F3D00000                 push rLink;
0x00300B        D029000F                 r0 = M[r7 + Null];
0x00300C        D1420003                 r2 = M[r0 + 3];
0x00300D        01202BCD                 r0 = Null + 11213;
0x00300E        FD0000FF 01305B0C        r1 = Null + -42228;
0x003010        2004002F                 Null = r2 - r0;
0x003011        00230000                 if EQ r0 = r1 + Null;
0x003012        F1000204                 pushm <r0, r7>;
0x003013        500000AF                 I0 = Null + r8;
0x003014        5010002F                 I1 = Null + r0;
0x003015        000A000F                 Null = r8 + Null;
0x003016        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x003017        01200000                 r0 = Null + 0;
0x003018        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003019        E420002F                 r0 = Null + 1;
0x00301A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301B        FD000040 01200000        r0 = Null + 4194304;
0x00301D        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301E        DDF00016                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x00301F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003020        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003021        F3200000                 push r0;
0x003022        E1F000A5                 call $user_eq.calcPreGain.call_entry;
0x003023        4420001F                 r0 = Null + I1;
0x003024        01220019                 r0 = r0 + 25;
0x003025        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003026        F1010007                 pushm <I0, I1, I2>;
0x003027        E1F0006F                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003028        F104001C                 popm <r0, r1, r2>;
0x003029        01220004                 r0 = r0 + 4;
0x00302A        5000002F                 I0 = Null + r0;
0x00302B        01330005                 r1 = r1 + 5;
0x00302C        5010003F                 I1 = Null + r1;
0x00302D        E444002F                 r2 = r2 + 1;
0x00302E        5020004F                 I2 = Null + r2;
0x00302F        F3240000                 pop r0;
0x003030        E422003F                 r0 = r0 - 1;
0x003031        F3200000                 push r0;
0x003032        DD10FFF4                 if NE jump $user_eq.calcBandLoop;
0x003033        F3240000                 pop r0;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x003034        F1040204                 popm <r0, r7>;
0x003035        F1000204                 pushm <r0, r7>;
0x003036        D3900000                 r7 = M[r7 + Null];
0x003037        D5290003                 M[r7 + 3] = r0;
0x003038        E1F0F144                 call $audio_proc.peq.initialize;
0x003039        F1040204                 popm <r0, r7>;
0x00303A        D1990001                 r7 = M[r7 + 1];
0x00303B        D5290003                 M[r7 + 3] = r0;
0x00303C        E1F0F140                 call $audio_proc.peq.initialize;
0x00303D        DDF0E1AD                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x00303E        F3D00000                 push rLink;
0x00303F        0062000F                 r4 = r0 + Null;
0x003040        8122FFF0                 r0 = r0 AND 0xfff0;
0x003041        E1F00027                 call $user_eq.calcParamAddrOffset;
0x003042        01A20E31                 r8 = r0 + 3633;
0x003043        D089000F                 r6 = M[r7 + Null];
0x003044        D1880003                 r6 = M[r6 + 3];
0x003045        21082BCD                 Null = r6 - 11213;
0x003046        DD000005                 if EQ jump $user_eq.calcBandCoefsB;
0x003047        01402BCD                 r2 = Null + 11213;
0x003048        FD0000FF 01505B0C        r3 = Null + -42228;
0x00304A        DDF00004                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x00304B        FD0000FF 01405B0C        r2 = Null + -42228;
0x00304D        01502BCD                 r3 = Null + 11213;

 <$user_eq.calcBandCoefsAorB>
0x00304E        5000005F                 I0 = Null + r3;
0x00304F        5010004F                 I1 = Null + r2;
0x003050        01C00021                 r10 = Null + 33;
0x003051        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x003052        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003053        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x003054        500000AF                 I0 = Null + r8;
0x003055        0026000F                 r0 = r4 + Null;
0x003056        E1F00027                 call $user_eq.calcCoefAddrOffset;
0x003057        00A2004F                 r8 = r0 + r2;
0x003058        501000AF                 I1 = Null + r8;
0x003059        00A3004F                 r8 = r1 + r2;
0x00305A        502000AF                 I2 = Null + r8;
0x00305B        F1000210                 pushm <r2, r7>;
0x00305C        0026000F                 r0 = r4 + Null;
0x00305D        E1F0002D                 call $user_eq.coefCalc;
0x00305E        F1040210                 popm <r2, r7>;
0x00305F        F1000210                 pushm <r2, r7>;
0x003060        D3900000                 r7 = M[r7 + Null];
0x003061        D5490003                 M[r7 + 3] = r2;
0x003062        E1F0F11A                 call $audio_proc.peq.initialize;
0x003063        F1040210                 popm <r2, r7>;
0x003064        D1990001                 r7 = M[r7 + 1];
0x003065        D5490003                 M[r7 + 3] = r2;
0x003066        E1F0F116                 call $audio_proc.peq.initialize;
0x003067        DDF0E183                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003068        F1000038                 pushm <r1, r2, r3>;
0x003069        81320F00                 r1 = r0 AND 0xf00;
0x00306A        91330078                 r1 = r1 ASHIFT -8;
0x00306B        814200F0                 r2 = r0 AND 0xf0;
0x00306C        9144007C                 r2 = r2 ASHIFT -4;
0x00306D        8152000F                 r3 = r0 AND 0xf;
0x00306E        0025000F                 r0 = r3 + Null;
0x00306F        21030000                 Null = r1 - 0;
0x003070        DD00000B                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003071        E433003F                 r1 = r1 - 1;
0x003072        99330016                 r1 = r1 * 22 (int);
0x003073        0023005F                 r0 = r1 + r3;
0x003074        E422002F                 r0 = r0 + 1;
0x003075        21040000                 Null = r2 - 0;
0x003076        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003077        E444003F                 r2 = r2 - 1;
0x003078        99440004                 r2 = r2 * 4 (int);
0x003079        03240000                 r0 = r0 + r2;
0x00307A        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x00307B        F1040038                 popm <r1, r2, r3>;
0x00307C        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x00307D        F1000030                 pushm <r2, r3>;
0x00307E        814200F0                 r2 = r0 AND 0xf0;
0x00307F        9144007C                 r2 = r2 ASHIFT -4;
0x003080        8152000F                 r3 = r0 AND 0xf;
0x003081        0025000F                 r0 = r3 + Null;
0x003082        21040000                 Null = r2 - 0;
0x003083        DD000005                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x003084        E444003F                 r2 = r2 - 1;
0x003085        0134001C                 r1 = r2 + 28;
0x003086        99240005                 r0 = r2 * 5 (int);
0x003087        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x003088        F1040030                 popm <r2, r3>;
0x003089        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x00308A        F3D00000                 push rLink;
0x00308B        814200F0                 r2 = r0 AND 0xf0;
0x00308C        9144007C                 r2 = r2 ASHIFT -4;
0x00308D        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x00308E        8122000F                 r0 = r0 AND 0xf;
0x00308F        21020000                 Null = r0 - 0;
0x003090        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x003091        03004100                 Null = Null + Null, r2 = M[I0,1];
0x003092        E402003F                 Null = r0 - 1;
0x003093        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x003094        F3D40000                 pop rLink;
0x003095        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x003096        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x003097        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003098        21020000                 Null = r0 - 0;
0x003099        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x00309A        01901272                 r7 = Null + 4722;
0x00309B        E402003F                 Null = r0 - 1;
0x00309C        DD000050                 if EQ jump $user_eq.calcXP1.jump_entry;
0x00309D        019012A7                 r7 = Null + 4775;
0x00309E        21020002                 Null = r0 - 2;
0x00309F        DD00004D                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A0        019012DB                 r7 = Null + 4827;
0x0030A1        21020003                 Null = r0 - 3;
0x0030A2        DD00004A                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A3        019013DA                 r7 = Null + 5082;
0x0030A4        21020007                 Null = r0 - 7;
0x0030A5        DD00005D                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A6        0190142B                 r7 = Null + 5163;
0x0030A7        21020008                 Null = r0 - 8;
0x0030A8        DD00005A                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A9        0190147B                 r7 = Null + 5243;
0x0030AA        21020009                 Null = r0 - 9;
0x0030AB        DD000057                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030AC        0190137B                 r7 = Null + 4987;
0x0030AD        21020004                 Null = r0 - 4;
0x0030AE        DD000073                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030AF        01901399                 r7 = Null + 5017;
0x0030B0        21020005                 Null = r0 - 5;
0x0030B1        DD000070                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B2        019013B9                 r7 = Null + 5049;
0x0030B3        21020006                 Null = r0 - 6;
0x0030B4        DD00006D                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B5        01901562                 r7 = Null + 5474;
0x0030B6        2102000A                 Null = r0 - 10;
0x0030B7        DD00008E                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030B8        01901583                 r7 = Null + 5507;
0x0030B9        2102000B                 Null = r0 - 11;
0x0030BA        DD00008B                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BB        019015A6                 r7 = Null + 5542;
0x0030BC        2102000C                 Null = r0 - 12;
0x0030BD        DD000088                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BE        2102000D                 Null = r0 - 13;
0x0030BF        DD0000B2                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030C0        F3D40000                 pop rLink;
0x0030C1        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030C2        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030C3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030C5        F3D40000                 pop rLink;
0x0030C6        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030C7        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030C8        0120003C                 r0 = Null + 60;
0x0030C9        E1F0E72A                 call $kal_float_lib.int_to_float;
0x0030CA        0042000F                 r2 = r0 + Null;
0x0030CB        0053000F                 r3 = r1 + Null;
0x0030CC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030CD        8D220008                 r0 = r0 LSHIFT 8;
0x0030CE        91220078                 r0 = r0 ASHIFT -8;
0x0030CF        0130F790                 r1 = Null + -2160;
0x0030D0        E423006F                 r0 = MAX r1;
0x0030D1        013002D0                 r1 = Null + 720;
0x0030D2        E423005F                 r0 = MIN r1;
0x0030D3        E1F0E720                 call $kal_float_lib.int_to_float;
0x0030D4        E1F0E776                 call $kal_float_lib.div;
0x0030D5        E1F0E13A                 call $kal_filter_coef_lib.__db2lin;
0x0030D6        812200FF                 r0 = r0 AND 0xff;
0x0030D7        2122007F                 r0 = r0 - 127;
0x0030D8        8D33007F                 r1 = r1 LSHIFT -1;
0x0030D9        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030DA        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0030DB        F3D40000                 pop rLink;
0x0030DC        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x0030DD        F1030006                 SP = SP + 6;
0x0030DE        E1F0E187                 call $kal_filter_coef_lib.calc_bypass;
0x0030DF        DDF000BF                 jump $user_eq.pop_biquad_coefs_and_rts;
0x0030E0        FD000040 01200000        r0 = Null + 4194304;
0x0030E2        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E3        01200000                 r0 = Null + 0;
0x0030E4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E6        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E8        E420002F                 r0 = Null + 1;
0x0030E9        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0030EA        F3D40000                 pop rLink;
0x0030EB        DC0D000F                 rts;

 <$user_eq.calcXP1.jump_entry>
0x0030EC        F1030006                 SP = SP + 6;
0x0030ED        01200003                 r0 = Null + 3;
0x0030EE        E1F0E705                 call $kal_float_lib.int_to_float;
0x0030EF        0042000F                 r2 = r0 + Null;
0x0030F0        0053000F                 r3 = r1 + Null;
0x0030F1        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F2        E430002F                 r1 = Null + 1;
0x0030F3        E423006F                 r0 = MAX r1;
0x0030F4        FD000000 0130EA60        r1 = Null + 60000;
0x0030F6        E423005F                 r0 = MIN r1;
0x0030F7        E1F0E6FC                 call $kal_float_lib.int_to_float;
0x0030F8        E1F0E752                 call $kal_float_lib.div;
0x0030F9        F100000C                 pushm <r0, r1>;
0x0030FA        FD000000 0130BB80        r1 = Null + 48000;
0x0030FC        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x0030FD        00230000                 if EQ r0 = r1 + Null;
0x0030FE        E1F0E6F5                 call $kal_float_lib.int_to_float;
0x0030FF        F100000C                 pushm <r0, r1>;
0x003100        E009000F                 call r7;
0x003101        DDF0009D                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003102        F1030006                 SP = SP + 6;
0x003103        01200003                 r0 = Null + 3;
0x003104        E1F0E6EF                 call $kal_float_lib.int_to_float;
0x003105        0042000F                 r2 = r0 + Null;
0x003106        0053000F                 r3 = r1 + Null;
0x003107        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003108        01300078                 r1 = Null + 120;
0x003109        E423006F                 r0 = MAX r1;
0x00310A        FD000000 0130EA60        r1 = Null + 60000;
0x00310C        E423005F                 r0 = MIN r1;
0x00310D        E1F0E6E6                 call $kal_float_lib.int_to_float;
0x00310E        E1F0E73C                 call $kal_float_lib.div;
0x00310F        F100000C                 pushm <r0, r1>;
0x003110        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003111        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003112        01300400                 r1 = Null + 1024;
0x003113        E423006F                 r0 = MAX r1;
0x003114        01302000                 r1 = Null + 8192;
0x003115        E423005F                 r0 = MIN r1;
0x003116        0130000C                 r1 = Null + 12;
0x003117        E1F0E6C1                 call $kal_float_lib.q_to_float;
0x003118        F100000C                 pushm <r0, r1>;
0x003119        FD000000 0130BB80        r1 = Null + 48000;
0x00311B        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x00311C        00230000                 if EQ r0 = r1 + Null;
0x00311D        E1F0E6D6                 call $kal_float_lib.int_to_float;
0x00311E        F100000C                 pushm <r0, r1>;
0x00311F        E009000F                 call r7;
0x003120        DDF0007E                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x003121        F1030006                 SP = SP + 6;
0x003122        01200003                 r0 = Null + 3;
0x003123        E1F0E6D0                 call $kal_float_lib.int_to_float;
0x003124        0042000F                 r2 = r0 + Null;
0x003125        0053000F                 r3 = r1 + Null;
0x003126        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003127        0130003C                 r1 = Null + 60;
0x003128        E423006F                 r0 = MAX r1;
0x003129        FD000000 0130EA60        r1 = Null + 60000;
0x00312B        E423005F                 r0 = MIN r1;
0x00312C        E1F0E6C7                 call $kal_float_lib.int_to_float;
0x00312D        E1F0E71D                 call $kal_float_lib.div;
0x00312E        F100000C                 pushm <r0, r1>;
0x00312F        0120003C                 r0 = Null + 60;
0x003130        E1F0E6C3                 call $kal_float_lib.int_to_float;
0x003131        0042000F                 r2 = r0 + Null;
0x003132        0053000F                 r3 = r1 + Null;
0x003133        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003134        8D220008                 r0 = r0 LSHIFT 8;
0x003135        91220078                 r0 = r0 ASHIFT -8;
0x003136        0130FD30                 r1 = Null + -720;
0x003137        E423006F                 r0 = MAX r1;
0x003138        013002D0                 r1 = Null + 720;
0x003139        E423005F                 r0 = MIN r1;
0x00313A        E1F0E6B9                 call $kal_float_lib.int_to_float;
0x00313B        E1F0E70F                 call $kal_float_lib.div;
0x00313C        F100000C                 pushm <r0, r1>;
0x00313D        FD000000 0130BB80        r1 = Null + 48000;
0x00313F        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003140        00230000                 if EQ r0 = r1 + Null;
0x003141        E1F0E6B2                 call $kal_float_lib.int_to_float;
0x003142        F100000C                 pushm <r0, r1>;
0x003143        E009000F                 call r7;
0x003144        DDF0005A                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003145        F1030006                 SP = SP + 6;
0x003146        01200003                 r0 = Null + 3;
0x003147        E1F0E6AC                 call $kal_float_lib.int_to_float;
0x003148        0042000F                 r2 = r0 + Null;
0x003149        0053000F                 r3 = r1 + Null;
0x00314A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314B        01300078                 r1 = Null + 120;
0x00314C        E423006F                 r0 = MAX r1;
0x00314D        FD000000 0130EA60        r1 = Null + 60000;
0x00314F        E423005F                 r0 = MIN r1;
0x003150        E1F0E6A3                 call $kal_float_lib.int_to_float;
0x003151        E1F0E6F9                 call $kal_float_lib.div;
0x003152        F100000C                 pushm <r0, r1>;
0x003153        0120003C                 r0 = Null + 60;
0x003154        E1F0E69F                 call $kal_float_lib.int_to_float;
0x003155        0042000F                 r2 = r0 + Null;
0x003156        0053000F                 r3 = r1 + Null;
0x003157        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003158        8D220008                 r0 = r0 LSHIFT 8;
0x003159        91220078                 r0 = r0 ASHIFT -8;
0x00315A        0130FD30                 r1 = Null + -720;
0x00315B        E423006F                 r0 = MAX r1;
0x00315C        013002D0                 r1 = Null + 720;
0x00315D        E423005F                 r0 = MIN r1;
0x00315E        E1F0E695                 call $kal_float_lib.int_to_float;
0x00315F        E1F0E6EB                 call $kal_float_lib.div;
0x003160        F100000C                 pushm <r0, r1>;
0x003161        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003162        01300400                 r1 = Null + 1024;
0x003163        E423006F                 r0 = MAX r1;
0x003164        01302000                 r1 = Null + 8192;
0x003165        E423005F                 r0 = MIN r1;
0x003166        0130000C                 r1 = Null + 12;
0x003167        E1F0E671                 call $kal_float_lib.q_to_float;
0x003168        F100000C                 pushm <r0, r1>;
0x003169        FD000000 0130BB80        r1 = Null + 48000;
0x00316B        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x00316C        00230000                 if EQ r0 = r1 + Null;
0x00316D        E1F0E686                 call $kal_float_lib.int_to_float;
0x00316E        F100000C                 pushm <r0, r1>;
0x00316F        E009000F                 call r7;
0x003170        DDF0002E                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x003171        F1030006                 SP = SP + 6;
0x003172        01200003                 r0 = Null + 3;
0x003173        E1F0E680                 call $kal_float_lib.int_to_float;
0x003174        0042000F                 r2 = r0 + Null;
0x003175        0053000F                 r3 = r1 + Null;
0x003176        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003177        0130003C                 r1 = Null + 60;
0x003178        E423006F                 r0 = MAX r1;
0x003179        FD000000 0130EA60        r1 = Null + 60000;
0x00317B        E423005F                 r0 = MIN r1;
0x00317C        E1F0E677                 call $kal_float_lib.int_to_float;
0x00317D        E1F0E6CD                 call $kal_float_lib.div;
0x00317E        F100000C                 pushm <r0, r1>;
0x00317F        0120003C                 r0 = Null + 60;
0x003180        E1F0E673                 call $kal_float_lib.int_to_float;
0x003181        0042000F                 r2 = r0 + Null;
0x003182        0053000F                 r3 = r1 + Null;
0x003183        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003184        8D220008                 r0 = r0 LSHIFT 8;
0x003185        91220078                 r0 = r0 ASHIFT -8;
0x003186        0130F790                 r1 = Null + -2160;
0x003187        E423006F                 r0 = MAX r1;
0x003188        013002D0                 r1 = Null + 720;
0x003189        E423005F                 r0 = MIN r1;
0x00318A        E1F0E669                 call $kal_float_lib.int_to_float;
0x00318B        E1F0E6BF                 call $kal_float_lib.div;
0x00318C        F100000C                 pushm <r0, r1>;
0x00318D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00318E        01300400                 r1 = Null + 1024;
0x00318F        E423006F                 r0 = MAX r1;
0x003190        FD000000 01308000        r1 = Null + 32768;
0x003192        E423005F                 r0 = MIN r1;
0x003193        0130000C                 r1 = Null + 12;
0x003194        E1F0E644                 call $kal_float_lib.q_to_float;
0x003195        F100000C                 pushm <r0, r1>;
0x003196        FD000000 0130BB80        r1 = Null + 48000;
0x003198        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003199        00230000                 if EQ r0 = r1 + Null;
0x00319A        E1F0E659                 call $kal_float_lib.int_to_float;
0x00319B        F100000C                 pushm <r0, r1>;
0x00319C        E1F0E42E                 call $kal_filter_coef_lib.calc_peq;
0x00319D        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x00319E        F3240000                 pop r0;
0x00319F        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A0        F3240000                 pop r0;
0x0031A1        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A2        F3240000                 pop r0;
0x0031A3        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A4        F3240000                 pop r0;
0x0031A5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A6        F3240000                 pop r0;
0x0031A7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A8        F3240000                 pop r0;
0x0031A9        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0031AA        F3D40000                 pop rLink;
0x0031AB        DC0D000F                 rts;

 <$main>
0x0031AC        E1F0EFEA                 call $_stack_initialise;
0x0031AD        E1F0EFC2                 call $interrupt.initialise;
0x0031AE        E1F0F01D                 call $message.initialise;
0x0031AF        E1F0F008                 call $cbuffer.initialise;
0x0031B0        E1F0EFA8                 call $pskey.initialise;
0x0031B1        E1F0EFB3                 call $wall_clock.initialise;
0x0031B2        E1F0CE89                 call $flash.init_dmconst;
0x0031B3        FD0000FF 01306644        r1 = Null + -39356;
0x0031B5        01401070                 r2 = Null + 4208;
0x0031B6        015033FF                 r3 = Null + 13311;
0x0031B7        E1F0EF85                 call $message.register_handler;
0x0031B8        013005BC                 r1 = Null + 1468;
0x0031B9        01401071                 r2 = Null + 4209;
0x0031BA        0150347F                 r3 = Null + 13439;
0x0031BB        E1F0EF81                 call $message.register_handler;
0x0031BC        FD0000FF 01306648        r1 = Null + -39352;
0x0031BE        01401072                 r2 = Null + 4210;
0x0031BF        01500CC2                 r3 = Null + 3266;
0x0031C0        E1F0EF7C                 call $message.register_handler;
0x0031C1        E1F0F00D                 call $spi_comm.initialize;
0x0031C2        E1F002D0                 call $music_example.power_up_reset;
0x0031C3        01401000                 r2 = Null + 4096;
0x0031C4        FD000000 0150E008        r3 = Null + 57352;
0x0031C6        FD0000FF 096066FF        r4 = Null + M[$music_example.Version];
0x0031C8        8D660078                 r4 = r4 LSHIFT -8;
0x0031C9        E1F0DE1A                 call $message.send_short;
0x0031CA        E1F0E76E                 call $M.Subwoofer.subwoofer_init;
0x0031CB        FD0000FF 019035F2        r7 = Null + -51726;
0x0031CD        E1F0DE99                 call $latency.reset_encoded_latency;
0x0031CE        E1F0EF7B                 call $message.send_ready_wait_for_go;
0x0031CF        E1F0E8DF                 call $conn_init;
0x0031D0        E1F0017A                 call $config_resampler;
0x0031D1        E1F000B8                 call $config_rate_matching;
0x0031D2        01A004C5                 r8 = Null + 1221;
0x0031D3        E1F0EE25                 call $config_usb;
0x0031D4        FD0000FF 0130664C        r1 = Null + -39348;
0x0031D6        014005DC                 r2 = Null + 1500;
0x0031D7        01500C47                 r3 = Null + 3143;
0x0031D8        E1F0E008                 call $timer.schedule_event_in;
0x0031D9        01302DBC                 r1 = Null + 11708;
0x0031DA        FD0000FF 094066F9        r2 = Null + M[$tmr_period_con_copy];
0x0031DC        01500CED                 r3 = Null + 3309;
0x0031DD        E1F0E003                 call $timer.schedule_event_in;
0x0031DE        01302DC0                 r1 = Null + 11712;
0x0031DF        09402E5A                 r2 = Null + M[$tmr_period_tone_copy];
0x0031E0        01500B09                 r3 = Null + 2825;
0x0031E1        E1F0DFFF                 call $timer.schedule_event_in;
0x0031E2        FD0000FF 01306650        r1 = Null + -39344;
0x0031E4        FD00000F 01404240        r2 = Null + 1000000;
0x0031E6        015020A3                 r3 = Null + 8355;
0x0031E7        E1F0DFF9                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x0031E8        E1F0EF1E                 call $spi_comm.polled_service_routine;
0x0031E9        092007FF                 r0 = Null + M[$app_config.io];
0x0031EA        21020005                 Null = r0 - 5;
0x0031EB        DD00001A                 if EQ jump $M.main.skip_a2dp_decode;
0x0031EC        21020008                 Null = r0 - 8;
0x0031ED        DD000018                 if EQ jump $M.main.skip_a2dp_decode;

 <$M.main.start_profiler>
0x0031EE        01A02D2D                 r8 = Null + 11565;
0x0031EF        E1F0D9CD                 call $M.mips_profile.mainstart;
0x0031F0        01700471                 r5 = Null + 1137;
0x0031F1        E1F0E929                 call $codec.av_decode;
0x0031F2        09200482                 r0 = Null + M[0x482];
0x0031F3        E110EF08                 if NE call $av_audio_out_silence_prime;
0x0031F4        09200482                 r0 = Null + M[0x482];
0x0031F5        E100EEB8                 if EQ call $av_audio_out_silence_insert;
0x0031F6        E1F0D2DC                 call $sra_calcrate;
0x0031F7        09002E82                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x0031F8        DD000004                 if EQ jump $M.main.skip_latency_measurement;
0x0031F9        FD0000FF 019035F2        r7 = Null + -51726;
0x0031FB        E1F0D570                 call $latency.calc_encoded_latency;

 <$M.main.skip_latency_measurement>
0x0031FC        01A02D2D                 r8 = Null + 11565;
0x0031FD        E1F0D9CC                 call $M.mips_profile.mainend;
0x0031FE        D12A0006                 r0 = M[r8 + 6];
0x0031FF        19202DCA                 M[$music_example.PeakMipsDecoder] = r0 + Null;
0x003200        01700471                 r5 = Null + 1137;
0x003201        D1270006                 r0 = M[r5 + 6];
0x003202        21020000                 Null = r0 - 0;
0x003203        E110EF9E                 if NE call $frame_sync.1ms_delay;
0x003204        DDF00002                 jump $M.main.done_decode;

 <$M.main.skip_a2dp_decode>
0x003205        E1F0D2CD                 call $sra_calcrate;

 <$M.main.done_decode>
0x003206        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x003208        FD000091 2102A00E        Null = r0 - -7233522;
0x00320A        DD10000A                 if NE jump $M.main.not_esco_sub;
0x00320B        092007FF                 r0 = Null + M[$app_config.io];
0x00320C        21020005                 Null = r0 - 5;
0x00320D        DD000004                 if EQ jump $M.main.usb_input;
0x00320E        E1F0EF93                 call $frame_sync.1ms_delay;
0x00320F        E1F0E67E                 call $M.Subwoofer.esco_preprocess;
0x003210        DDF00004                 jump $M.main.not_esco_sub;

 <$M.main.usb_input>
0x003211        012020C4                 r0 = Null + 8388;
0x003212        FD0000FF 19206714        M[$sub_app_esco_func] = r0 + Null;

 <$M.main.not_esco_sub>
0x003214        09502E62                 r3 = Null + M[$music_example.frame_processing_size];
0x003215        0120009D                 r0 = Null + 157;
0x003216        E1F0DF79                 call $cbuffer.calc_amount_data;
0x003217        2002005F                 Null = r0 - r3;
0x003218        DD40FFD0                 if NEG jump $M.main.frame_loop;
0x003219        012000A5                 r0 = Null + 165;
0x00321A        E1F0DF65                 call $cbuffer.calc_amount_space;
0x00321B        2002005F                 Null = r0 - r3;
0x00321C        DD40FFCC                 if NEG jump $M.main.frame_loop;
0x00321D        FD0000FF 012066B3        r0 = Null + -39245;
0x00321F        E1F0DF70                 call $cbuffer.calc_amount_data;
0x003220        2002005F                 Null = r0 - r3;
0x003221        DD40FFC7                 if NEG jump $M.main.frame_loop;
0x003222        09002E61                 Null = Null + M[$music_example.stereo_processing];
0x003223        DD000006                 if EQ jump $M.main.mono_process;
0x003224        FD0000FF 012066B6        r0 = Null + -39242;
0x003226        E1F0DF59                 call $cbuffer.calc_amount_space;
0x003227        2002005F                 Null = r0 - r3;
0x003228        DD40FFC0                 if NEG jump $M.main.frame_loop;

 <$M.main.mono_process>
0x003229        E1F0E718                 call $M.Subwoofer.synchronise;

 <$M.main.process>
0x00322A        E1F0EB8B                 call $jitter_buffering;
0x00322B        09002E5E                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x00322C        DD10FFBC                 if NE jump $M.main.frame_loop;
0x00322D        E1F0009F                 call $music_example_process;
0x00322E        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x003230        FD000091 2102A00E        Null = r0 - -7233522;
0x003232        DD100004                 if NE jump $M.main.check_l2cap_sub;
0x003233        FD0000FF 09006714        Null = Null + M[$sub_app_esco_func];
0x003235        E100E65D                 if EQ call $M.Subwoofer.esco_post_process;

 <$M.main.check_l2cap_sub>
0x003236        FD0000FF 0920670B        r0 = Null + M[$sub_link_port];
0x003238        FD000094 2102600F        Null = r0 - -7053297;
0x00323A        DD10FFAE                 if NE jump $M.main.frame_loop;
0x00323B        E1F0E9A0                 call $downsample_sub_to_1k2;
0x00323C        01202E32                 r0 = Null + 11826;
0x00323D        E1F0DF52                 call $cbuffer.calc_amount_data;
0x00323E        21020012                 Null = r0 - 18;
0x00323F        DD40FFA9                 if NEG jump $M.main.frame_loop;
0x003240        E1F0E643                 call $M.Subwoofer.l2cap_handler;
0x003241        01202E32                 r0 = Null + 11826;
0x003242        E1F0DF4D                 call $cbuffer.calc_amount_data;
0x003243        21020012                 Null = r0 - 18;
0x003244        DD40FFA4                 if NEG jump $M.main.frame_loop;
0x003245        E1F0E63E                 call $M.Subwoofer.l2cap_handler;
0x003246        DDF0FFA2                 jump $M.main.frame_loop;

 <$M.music_example.PsKeyReadHandler.func>
0x003247        F3D00000                 push rLink;
0x003248        E404002F                 Null = r2 + 1;
0x003249        DD10000A                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x00324A        09202E66                 r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x00324B        DD000005                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x00324C        19002E66                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x00324D        FD0000FF 09406706        r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x00324F        DDF001A3                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x003250        E420002F                 r0 = Null + 1;
0x003251        19202E66                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x003252        DDF001A6                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x003253        51050001                 I0 = r3 + 1;
0x003254        E4C4003F                 r10 = r2 - 1;
0x003255        5820000F                 I2 = I0 + Null;
0x003256        FD000000 0150FFFF        r3 = Null + 65535;
0x003258        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x003259        03002800                 Null = Null + Null, r0 = M[I2,0];
0x00325A        83250000                 r0 = r0 AND r3;
0x00325B        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x00325C        01C00100                 r10 = Null + 256;
0x00325D        79220001                 I2 = I2 - 1;
0x00325E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00325F        2003002F                 Null = r1 - r0;
0x003260        DD100198                 if NE jump $M.music_example.LoadParams.done;
0x003261        03007100                 Null = Null + Null, r5 = M[I0,1];
0x003262        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003263        816200FF                 r4 = r0 AND 0xff;
0x003264        006C0000                 if EQ r4 = r10 + Null;
0x003265        8D220078                 r0 = r0 LSHIFT -8;
0x003266        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x003267        8DAA007F                 r8 = r8 LSHIFT -1;
0x003268        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x003269        6C02000F                 Null = I2 - I0;
0x00326A        DD400017                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x00326B        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00326C        FD000000 01A08000        r8 = Null + 32768;
0x00326E        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x00326F        800500AF                 Null = r3 AND r8;
0x003270        DD00000E                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x003271        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x003273        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x003274        03004100                 Null = Null + Null, r2 = M[I0,1];
0x003275        8D840078                 r6 = r2 LSHIFT -8;
0x003276        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x003277        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x003278        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003279        8D880010                 r6 = r6 LSHIFT 16;
0x00327A        87380000                 r1 = r1 OR r6;
0x00327B        FD0000FF 09826705        r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x00327D        D5380DDC                 M[r6 + 3548] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x00327E        E422002F                 r0 = r0 + 1;
0x00327F        2002006F                 Null = r0 - r4;
0x003280        DD40FFE7                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x003281        FD0000FF 09406705        r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x003283        200600CF                 Null = r4 - r10;
0x003284        004400C0                 if EQ r2 = r2 + r10;
0x003285        FD0000FF 19406705        M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x003287        0047000F                 r2 = r5 + Null;
0x003288        DDF0016A                 jump $M.music_example.LoadParams.TestPsKey;

 <$config_rate_matching>
0x003289        F3D00000                 push rLink;
0x00328A        09301FFF                 r1 = Null + M[$current_codec_sampling_rate];
0x00328B        99330002                 r1 = r1 * 2 (int);
0x00328C        FD0000FF 19305A61        M[0xff5a61] = r1 + Null;
0x00328E        09402E55                 r2 = Null + M[$max_clock_mismatch];
0x00328F        8D240079                 r0 = r2 LSHIFT -7;
0x003290        81220001                 r0 = r0 AND 0x1;
0x003291        FD0000FF 192066FA        M[$rate_match_disable] = r0 + Null;
0x003293        FD0000FF 096066F3        r4 = Null + M[$local_encoded_play_back];
0x003295        DD000007                 if EQ jump $M.config_rate_matching.is_remote_stream;
0x003296        012001F4                 r0 = Null + 500;
0x003297        FD0000FF 192066F9        M[$tmr_period_con_copy] = r0 + Null;
0x003299        E420002F                 r0 = Null + 1;
0x00329A        FD0000FF 192066FA        M[$rate_match_disable] = r0 + Null;

 <$M.config_rate_matching.is_remote_stream>
0x00329C        FD0000FF 090066FA        Null = Null + M[$rate_match_disable];
0x00329E        DD10002D                 if NE jump $M.config_rate_matching.end;
0x00329F        8144007F                 r2 = r2 AND 0x7f;
0x0032A0        21340004                 r1 = r2 - 4;
0x0032A1        20440034                 if NEG r2 = r2 - r1;
0x0032A2        994420C5                 r2 = r2 * 8389 (int);
0x0032A3        95342000                 r1 = r2 * 0.25 (frac);
0x0032A4        03430000                 r2 = r2 + r1;
0x0032A5        FD000003 2134D70A        r1 = r2 - 251658;
0x0032A7        20440035                 if POS r2 = r2 - r1;
0x0032A8        FD0000FF 19405A60        M[0xff5a60] = r2 + Null;
0x0032AA        FD000040 01400000        r2 = Null + 4194304;
0x0032AC        FD0000FF 19405A75        M[0xff5a75] = r2 + Null;
0x0032AE        FD0000FF 095066F5        r3 = Null + M[$long_term_mismatch];
0x0032B0        81250001                 r0 = r3 AND 0x1;
0x0032B1        DD00001A                 if EQ jump $M.config_rate_matching.end;
0x0032B2        9155007F                 r3 = r3 ASHIFT -1;
0x0032B3        91550006                 r3 = r3 ASHIFT 6;
0x0032B4        FD0000FF 29055A60        Null = r3 - M[0xff5a60];
0x0032B6        DD500015                 if POS jump $M.config_rate_matching.end;
0x0032B7        FD0000FF 09055A60        Null = r3 + M[0xff5a60];
0x0032B9        DD400012                 if NEG jump $M.config_rate_matching.end;
0x0032BA        FD0000FF 19505A74        M[0xff5a74] = r3 + Null;
0x0032BC        FD0000FF 19505A6D        M[0xff5a6d] = r3 + Null;
0x0032BE        FD0000FF 09205A61        r0 = Null + M[0xff5a61];
0x0032C0        97250000                 r0 = r0 * r3 (frac);
0x0032C1        FD0000FF 19205A7C        M[0xff5a7c] = r0 + Null;
0x0032C3        FD0000FF 19205A7D        M[0xff5a7d] = r0 + Null;
0x0032C5        01200002                 r0 = Null + 2;
0x0032C6        FD0000FF 19205A6F        M[0xff5a6f] = r0 + Null;
0x0032C8        E420002F                 r0 = Null + 1;
0x0032C9        FD0000FF 19205A76        M[0xff5a76] = r0 + Null;

 <$M.config_rate_matching.end>
0x0032CB        DDF0DF1F                 jump $pop_rLink_and_rts;

 <$music_example_process>
0x0032CC        F3D00000                 push rLink;
0x0032CD        1900FE93                 M[0xfffe93] = Null + Null;
0x0032CE        01A02D37                 r8 = Null + 11575;
0x0032CF        E1F0D8ED                 call $M.mips_profile.mainstart;
0x0032D0        FD0000FF 09006700        Null = Null + M[$music_example.reinit];
0x0032D2        E1100149                 if NE call $music_example_reinitialize;
0x0032D3        09302E60                 r1 = Null + M[$music_example.sys_mode];
0x0032D4        09202DAD                 r0 = Null + M[$music_example.SpiSysControl];
0x0032D5        09602DB0                 r4 = Null + M[$music_example.OvrMode];
0x0032D6        81022000                 Null = r0 AND 0x2000;
0x0032D7        00360001                 if NE r1 = r4 + Null;
0x0032D8        8D530001                 r3 = r1 LSHIFT 1;
0x0032D9        FD0000FF D1455F73        r2 = M[r3 + -41101];
0x0032DB        FD000080 0120000D        r0 = Null + -8388595;
0x0032DD        E1F0DED2                 call $cbuffer.is_it_enabled;
0x0032DE        00340000                 if EQ r1 = r2 + Null;
0x0032DF        E440002F                 r2 = Null + 1;
0x0032E0        01600004                 r4 = Null + 4;
0x0032E1        8D530001                 r3 = r1 LSHIFT 1;
0x0032E2        FD0000FF D1055F74        Null = M[r3 + -41100];
0x0032E4        00460000                 if EQ r2 = r4 + Null;
0x0032E5        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x0032E6        09602E6B                 r4 = Null + M[$M.system_config.data.dithertype];
0x0032E7        FD000000 2102AC44        Null = r0 - 44100;
0x0032E9        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0032EA        FD000000 2102BB80        Null = r0 - 48000;
0x0032EC        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0032ED        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x0032EE        19302DC8                 M[$music_example.CurMode] = r1 + Null;
0x0032EF        01400000                 r2 = Null + 0;
0x0032F0        E403003F                 Null = r1 - 1;
0x0032F1        00640000                 if EQ r4 = r2 + Null;
0x0032F2        21030004                 Null = r1 - 4;
0x0032F3        00640000                 if EQ r4 = r2 + Null;
0x0032F4        FD0000FF 092066F1        r0 = Null + M[$current_dac_sampling_rate];
0x0032F6        FD000000 2102AC44        Null = r0 - 44100;
0x0032F8        00640004                 if NEG r4 = r2 + Null;
0x0032F9        19602C84                 M[0x2c84] = r4 + Null;
0x0032FA        FD0000FF 19605BE6        M[0xff5be6] = r4 + Null;
0x0032FC        8D530001                 r3 = r1 LSHIFT 1;
0x0032FD        FD0000FF D1255F74        r0 = M[r3 + -41100];
0x0032FF        19202E61                 M[$music_example.stereo_processing] = r0 + Null;
0x003300        FD0000FF D1635FEF        r4 = M[r1 + -40977];
0x003302        E1F0DE73                 call $frame_sync.run_function_table;
0x003303        01A02D37                 r8 = Null + 11575;
0x003304        E1F0D8C5                 call $M.mips_profile.mainend;
0x003305        D12A0006                 r0 = M[r8 + 6];
0x003306        19202DC9                 M[$music_example.PeakMipsFunc] = r0 + Null;
0x003307        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003308        19202DCB                 M[$music_example.SamplingRate] = r0 + Null;
0x003309        DDF0DEE1                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.vmdB2vol>
0x00330A        FD000035 0130F5E3        r1 = Null + 3536355;
0x00330C        991200B5                 rMAC = r0 * 181 (int);
0x00330D        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00330E        FD000004 21210000        r0 = rMAC - 262144;
0x003310        00200005                 if POS r0 = Null + Null;
0x003311        DDF0DD8A                 jump $math.pow2_taylor;

 <$M.music_example_message.Volume.update_volumes>
0x003312        F3D00000                 push rLink;
0x003313        8133000F                 r1 = r1 AND 0xf;
0x003314        FD0000FF 19306702        M[$music_example.SystemVolume] = r1 + Null;
0x003316        0004000F                 Null = r2 + Null;
0x003317        00400005                 if POS r2 = Null + Null;
0x003318        19402E63                 M[$music_example.MasterVolume] = r2 + Null;
0x003319        0005000F                 Null = r3 + Null;
0x00331A        00500005                 if POS r3 = Null + Null;
0x00331B        FD0000FF 19506703        M[$music_example.ToneVolume] = r3 + Null;
0x00331D        212602D2                 r0 = r4 - 722;
0x00331E        20660025                 if POS r4 = r4 - r0;
0x00331F        2126FD2E                 r0 = r4 - -722;
0x003320        20660024                 if NEG r4 = r4 - r0;
0x003321        19602E64                 M[$music_example.LeftTrimVolume] = r4 + Null;
0x003322        212702D2                 r0 = r5 - 722;
0x003323        20770025                 if POS r5 = r5 - r0;
0x003324        2126FD2E                 r0 = r4 - -722;
0x003325        20770024                 if NEG r5 = r5 - r0;
0x003326        FD0000FF 19706704        M[$music_example.RightTrimVolume] = r5 + Null;
0x003328        0024000F                 r0 = r2 + Null;
0x003329        E1F0FFE1                 call $M.music_example_message.Volume.vmdB2vol;
0x00332A        91220002                 r0 = r0 ASHIFT 2;
0x00332B        19202CA5                 M[0x2ca5] = r0 + Null;
0x00332C        FD0000FF 19205FA7        M[0xff5fa7] = r0 + Null;
0x00332E        FD0000FF 09206703        r0 = Null + M[$music_example.ToneVolume];
0x003330        E1F0FFDA                 call $M.music_example_message.Volume.vmdB2vol;
0x003331        91520003                 r3 = r0 ASHIFT 3;
0x003332        19501FF4                 M[0x1ff4] = r3 + Null;
0x003333        FD0000FF 19505BD0        M[0xff5bd0] = r3 + Null;
0x003335        09202E64                 r0 = Null + M[$music_example.LeftTrimVolume];
0x003336        E1F0FFD4                 call $M.music_example_message.Volume.vmdB2vol;
0x003337        19202CAD                 M[0x2cad] = r0 + Null;
0x003338        FD0000FF 09206704        r0 = Null + M[$music_example.RightTrimVolume];
0x00333A        E1F0FFD0                 call $M.music_example_message.Volume.vmdB2vol;
0x00333B        19202CB2                 M[0x2cb2] = r0 + Null;
0x00333C        FD0000FF 09606702        r4 = Null + M[$music_example.SystemVolume];
0x00333E        0056000F                 r3 = r4 + Null;
0x00333F        01401006                 r2 = Null + 4102;
0x003340        E1F0DCA3                 call $message.send_short;
0x003341        DDF0DEA9                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.func>
0x003342        F3D00000                 push rLink;
0x003343        D1350000                 r1 = M[r3 + 0];
0x003344        D1450001                 r2 = M[r3 + 1];
0x003345        D1650003                 r4 = M[r3 + 3];
0x003346        D1750004                 r5 = M[r3 + 4];
0x003347        D1550002                 r3 = M[r3 + 2];
0x003348        E1F0FFCA                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example_message.Volume.volume_msg_done>
0x003349        DDF0DEA1                 jump $pop_rLink_and_rts;

 <$config_resampler>
0x00334A        F3D00000                 push rLink;
0x00334B        FD0000FF 01305AC4        r1 = Null + -42300;

 <$M.config_resampler.lookup_loop>
0x00334D        D023000F                 r0 = M[r1 + Null];
0x00334E        DD000009                 if EQ jump $M.config_resampler.rates_not_supported;
0x00334F        29021FFF                 Null = r0 - M[$current_codec_sampling_rate];
0x003350        DD100005                 if NE jump $M.config_resampler.skip;
0x003351        D1230001                 r0 = M[r1 + 1];
0x003352        FD0000FF 290266F1        Null = r0 - M[$current_dac_sampling_rate];
0x003354        DD000017                 if EQ jump $M.config_resampler.done;

 <$M.config_resampler.skip>
0x003355        01330003                 r1 = r1 + 3;
0x003356        DDF0FFF7                 jump $M.config_resampler.lookup_loop;

 <$M.config_resampler.rates_not_supported>
0x003357        09501FFF                 r3 = Null + M[$current_codec_sampling_rate];
0x003358        FD0000FF 096066F1        r4 = Null + M[$current_dac_sampling_rate];
0x00335A        0120000A                 r0 = Null + 10;
0x00335B        0015000F                 rMAC = r3 + Null;
0x00335C        D9020000                 Div = rMAC / r0;
0x00335D        D9500001                 r3 = DivResult;
0x00335E        0016000F                 rMAC = r4 + Null;
0x00335F        D9020000                 Div = rMAC / r0;
0x003360        D9600001                 r4 = DivResult;
0x003361        01401090                 r2 = Null + 4240;
0x003362        E1F0DC81                 call $message.send_short;
0x003363        E1F0EE62                 call $error;
0x003364        FD0000FF 01305AC4        r1 = Null + -42300;
0x003366        D023000F                 r0 = M[r1 + Null];
0x003367        19201FFF                 M[$current_codec_sampling_rate] = r0 + Null;
0x003368        D1230001                 r0 = M[r1 + 1];
0x003369        FD0000FF 192066F1        M[$current_dac_sampling_rate] = r0 + Null;

 <$M.config_resampler.done>
0x00336B        E1F0DE2C                 call $block_interrupts;
0x00336C        E440002F                 r2 = Null + 1;
0x00336D        19000FB5                 M[0xfb5] = Null + Null;
0x00336E        19000F69                 M[0xf69] = Null + Null;
0x00336F        FD0000FF 19005993        M[0xff5993] = Null + Null;
0x003371        D1230002                 r0 = M[r1 + 2];
0x003372        19200FA8                 M[0xfa8] = r0 + Null;
0x003373        19200F5C                 M[0xf5c] = r0 + Null;
0x003374        FD0000FF 19205986        M[0xff5986] = r0 + Null;
0x003376        00400000                 if EQ r2 = Null + Null;
0x003377        FD0000FF 194030FF        M[$dac_resampler.resampler_active] = r2 + Null;
0x003379        E1F0DDF2                 call $interrupt.unblock;
0x00337A        DDF0DE70                 jump $pop_rLink_and_rts;

 <$master_app_reset>
0x00337B        F3D00000                 push rLink;
0x00337C        FD0000FF 090066F3        Null = Null + M[$local_encoded_play_back];
0x00337E        DD000009                 if EQ jump $M.master_app_reset.pause_happened;
0x00337F        01401080                 r2 = Null + 4224;
0x003380        01500000                 r3 = Null + 0;
0x003381        01600000                 r4 = Null + 0;
0x003382        01700000                 r5 = Null + 0;
0x003383        01800000                 r6 = Null + 0;
0x003384        E1F0DC5F                 call $message.send_short;
0x003385        FD0000FF 190066F3        M[$local_encoded_play_back] = Null + Null;

 <$M.master_app_reset.pause_happened>
0x003387        E1F0DE10                 call $block_interrupts;
0x003388        092000A7                 r0 = Null + M[0xa7];
0x003389        192000A6                 M[0xa6] = r0 + Null;
0x00338A        FD0000FF 092066B8        r0 = Null + M[0xff66b8];
0x00338C        FD0000FF 192066B7        M[0xff66b7] = r0 + Null;
0x00338E        0920007F                 r0 = Null + M[0x7f];
0x00338F        1920007E                 M[0x7e] = r0 + Null;
0x003390        09200097                 r0 = Null + M[0x97];
0x003391        19200096                 M[0x96] = r0 + Null;
0x003392        FD0000FF 01605A9C        r4 = Null + -42340;
0x003394        E1F0DDE1                 call $frame_sync.run_function_table;
0x003395        FD0000FF 01605B9C        r4 = Null + -42084;
0x003397        E1F0DDDE                 call $frame_sync.run_function_table;
0x003398        FD0000FF 019035F2        r7 = Null + -51726;
0x00339A        E1F0DCCC                 call $latency.reset_encoded_latency;
0x00339B        FD0000FF 19006720        M[$first_packet_received] = Null + Null;
0x00339D        FD0000FF 19005A78        M[0xff5a78] = Null + Null;
0x00339F        E1F0DDCC                 call $interrupt.unblock;
0x0033A0        DDF0DE4A                 jump $pop_rLink_and_rts;

 <$M.music_example.GetControl.func>
0x0033A1        F3D00000                 push rLink;
0x0033A2        51402DAD                 I4 = Null + 11693;
0x0033A3        5000003F                 I0 = Null + r1;
0x0033A4        01C00005                 r10 = Null + 5;
0x0033A5        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x0033A6        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0033A7        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x0033A8        E460002F                 r4 = Null + 1;
0x0033A9        19601FEE                 M[0x1fee] = r4 + Null;
0x0033AA        09202DB0                 r0 = Null + M[$music_example.OvrMode];
0x0033AB        03220000                 r0 = r0 + r0;
0x0033AC        FD0000FF D1025F74        Null = M[r0 + -41100];
0x0033AE        DD100008                 if NE jump $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033AF        39061FEE                 M[0x1fee] = Null - r4;
0x0033B0        0050000F                 r3 = Null + Null;
0x0033B1        19502DA7                 M[0x2da7] = r3 + Null;
0x0033B2        01C00360                 r10 = Null + 864;
0x0033B3        51001C00                 I0 = Null + 7168;
0x0033B4        E5F00002                 do $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033B5        0300D100                 Null = Null + Null, M[I0,1] = r3;

 <$M.music_example.GetControl.clear_right_cbuffer_output>
0x0033B6        09202DAD                 r0 = Null + M[$music_example.SpiSysControl];
0x0033B7        81028000                 Null = r0 AND 0x8000;
0x0033B8        DD00000B                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x0033B9        09302DAE                 r1 = Null + M[$music_example.OvrMasterSystemVolume];
0x0033BA        9143007C                 r2 = r1 ASHIFT -4;
0x0033BB        8133000F                 r1 = r1 AND 0xf;
0x0033BC        FD0000FF 09506703        r3 = Null + M[$music_example.ToneVolume];
0x0033BE        09602DB1                 r4 = Null + M[$music_example.OvrTrimVolumes];
0x0033BF        91760074                 r5 = r4 ASHIFT -12;
0x0033C0        8D66000C                 r4 = r4 LSHIFT 12;
0x0033C1        91660074                 r4 = r4 ASHIFT -12;
0x0033C2        E1F0FF50                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC>
0x0033C3        01A00000                 r8 = Null + 0;
0x0033C4        DDF0DE26                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x0033C5        0004000F                 Null = r2 + Null;
0x0033C6        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x0033C7        01600007                 r4 = Null + 7;
0x0033C8        09700E31                 r5 = Null + M[0xe31];
0x0033C9        83760000                 r5 = r5 AND r4;
0x0033CA        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033CB        8082006F                 r6 = r0 AND r4;
0x0033CC        E488002F                 r6 = r6 + 1;
0x0033CD        21040002                 Null = r2 - 2;
0x0033CE        00850000                 if EQ r6 = r3 + Null;
0x0033CF        01A00200                 r8 = Null + 512;
0x0033D0        01500000                 r3 = Null + 0;
0x0033D1        E490002F                 r7 = Null + 1;
0x0033D2        800200AF                 Null = r0 AND r8;
0x0033D3        00590000                 if EQ r3 = r7 + Null;
0x0033D4        2007008F                 Null = r5 - r6;
0x0033D5        0085000B                 if LT r6 = r3 + Null;
0x0033D6        21080000                 Null = r6 - 0;
0x0033D7        00850000                 if EQ r6 = r3 + Null;
0x0033D8        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x0033DA        8092009F                 r7 = r0 AND r7;
0x0033DB        8489008F                 r6 = r7 OR r6;
0x0033DC        19800DDC                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x0033DD        01500008                 r3 = Null + 8;
0x0033DE        2005003F                 Null = r3 - r1;
0x0033DF        00350004                 if NEG r1 = r3 + Null;
0x0033E0        01500000                 r3 = Null + 0;
0x0033E1        2005003F                 Null = r3 - r1;
0x0033E2        00350005                 if POS r1 = r3 + Null;
0x0033E3        19302E60                 M[$music_example.sys_mode] = r1 + Null;
0x0033E4        E430002F                 r1 = Null + 1;
0x0033E5        FD0000FF 19306700        M[$music_example.reinit] = r1 + Null;
0x0033E7        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x0033E8        F3D00000                 push rLink;
0x0033E9        01A00000                 r8 = Null + 0;
0x0033EA        19A02E60                 M[$music_example.sys_mode] = r8 + Null;
0x0033EB        F3300000                 push r1;
0x0033EC        E1F00071                 call $M.music_example.load_default_params.func;
0x0033ED        FD0000FF 19006705        M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x0033EF        F3440000                 pop r2;
0x0033F0        FD0000FF 19406706        M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x0033F2        DD000006                 if EQ jump $M.music_example.LoadParams.done;
0x0033F3        FD0000FF 013066C2        r1 = Null + -39230;
0x0033F5        01503247                 r3 = Null + 12871;
0x0033F6        E1F0DC60                 call $pskey.read_key;
0x0033F7        DDF0DDF3                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x0033F8        09202E59                 r0 = Null + M[$codec_config];
0x0033F9        D1220DDC                 r0 = M[r0 + 3548];
0x0033FA        19200DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x0033FB        E1F000AD                 call $M.music_example.ReInit.func;
0x0033FC        01401015                 r2 = Null + 4117;
0x0033FD        E1F0DBE6                 call $message.send_short;
0x0033FE        DDF0DDEC                 jump $pop_rLink_and_rts;

 <$set_dac_rate_from_vm>
0x0033FF        8133FFFF                 r1 = r1 AND 0xffff;
0x003400        9933000A                 r1 = r1 * 10 (int);
0x003401        FD0000FF 193066F1        M[$current_dac_sampling_rate] = r1 + Null;
0x003403        19402E55                 M[$max_clock_mismatch] = r2 + Null;
0x003404        FD0000FF 195066F5        M[$long_term_mismatch] = r3 + Null;
0x003406        81360200                 r1 = r4 AND 0x200;
0x003407        89430200                 r2 = r1 XOR 0x200;
0x003408        81260100                 r0 = r4 AND 0x100;
0x003409        9F420000                 r2 = r2 * r0 (int) (sat);
0x00340A        FD0000FF 194066F3        M[$local_encoded_play_back] = r2 + Null;
0x00340C        E450002F                 r3 = Null + 1;
0x00340D        9F320000                 r1 = r1 * r0 (int) (sat);
0x00340E        00350001                 if NE r1 = r3 + Null;
0x00340F        19302E54                 M[$aux_input_stream_available] = r1 + Null;
0x003410        812600FF                 r0 = r4 AND 0xff;
0x003411        FD0000FF 192066F4        M[$audio_if_mode] = r0 + Null;
0x003413        F3D00000                 push rLink;
0x003414        FD0000FF 092066F1        r0 = Null + M[$current_dac_sampling_rate];
0x003416        E1F0DDBE                 call $latency.calc_inv_fs;
0x003417        FD0000FF 192066F6        M[$inv_dac_fs] = r0 + Null;
0x003419        F3D40000                 pop rLink;
0x00341A        DC0D000F                 rts;

 <$music_example_reinitialize>
0x00341B        F3D00000                 push rLink;
0x00341C        51900001                 M1 = Null + 1;
0x00341D        FD0000FF 5100335E        I0 = Null + -52386;
0x00341F        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x003420        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x003421        D3200000                 r0 = M[r0 + Null];
0x003422        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x003423        0002000F                 Null = r0 + Null;
0x003424        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x003425        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003426        09402E59                 r2 = Null + M[$codec_config];
0x003427        D5240DDC                 M[r2 + 3548] = r0;
0x003428        01401014                 r2 = Null + 4116;
0x003429        81520007                 r3 = r0 AND 0x7;
0x00342A        E1F0DBB9                 call $message.send_short;
0x00342B        FD0000FF 01605A9C        r4 = Null + -42340;
0x00342D        E1F0DD48                 call $frame_sync.run_function_table;
0x00342E        FD0000FF 19006700        M[$music_example.reinit] = Null + Null;
0x003430        DDF0DDBA                 jump $pop_rLink_and_rts;

 <$M.music_example.GetStatus.func>
0x003431        5010003F                 I1 = Null + r1;
0x003432        01C00023                 r10 = Null + 35;
0x003433        00AC000F                 r8 = r10 + Null;
0x003434        FD0000FF 51405AE9        I4 = Null + -42263;
0x003436        03000031                 Null = Null + Null, r1 = M[I4,1];
0x003437        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x003438        D3300000                 r1 = M[r1 + Null];
0x003439        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x00343A        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x00343B        01C00004                 r10 = Null + 4;
0x00343C        51402DC8                 I4 = Null + 11720;
0x00343D        8B440000                 r2 = r2 XOR r2;
0x00343E        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x00343F        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x003440        FD0000FF 190066EC        M[0xff66ec] = Null + Null;
0x003442        19002E4E                 M[0x2e4e] = Null + Null;
0x003443        FD0000FF 190066EE        M[0xff66ee] = Null + Null;
0x003445        19002E50                 M[0x2e50] = Null + Null;
0x003446        FD0000FF 190066F0        M[0xff66f0] = Null + Null;
0x003448        DC0D000F                 rts;

 <$music_example.peq.initialize>
0x003449        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x00344A        D07A000F                 r5 = M[r8 + Null];
0x00344B        81520007                 r3 = r0 AND 0x7;
0x00344C        E407003F                 Null = r5 - 1;
0x00344D        00500000                 if EQ r3 = Null + Null;
0x00344E        09301FFF                 r1 = Null + M[$current_codec_sampling_rate];
0x00344F        FD000000 2103BB80        Null = r1 - 48000;
0x003451        00550070                 if EQ r3 = r3 + r5;
0x003452        E4AA002F                 r8 = r8 + 1;
0x003453        D02A005F                 r0 = M[r8 + r3];
0x003454        D5290003                 M[r7 + 3] = r0;
0x003455        DC0D0000                 if EQ rts;
0x003456        DDF0ED26                 jump $audio_proc.peq.initialize;

 <$music_example.peq.process>
0x003457        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003458        800200AF                 Null = r0 AND r8;
0x003459        DC0D0001                 if NE rts;
0x00345A        D1090003                 Null = M[r7 + 3];
0x00345B        DC0D0000                 if EQ rts;
0x00345C        DDF0D60E                 jump $audio_proc.peq.process;

 <$M.music_example.load_default_params.func>
0x00345D        51C00005                 L0 = Null + 5;
0x00345E        510000A0                 I0 = Null + 160;
0x00345F        FD0000D0 51400000        I4 = Null + -3145728;
0x003461        51100DDC                 I1 = Null + 3548;
0x003462        01C00124                 r10 = Null + 292;
0x003463        91CC007F                 r10 = r10 ASHIFT -1;
0x003464        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x003465        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x003466        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x003467        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x003468        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x003469        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x00346A        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x00346B        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x00346C        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x00346D        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x00346E        51C00000                 L0 = Null + 0;
0x00346F        DC0D000F                 rts;

 <$music_example.cmpd100.initialize>
0x003470        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003471        FD000000 2102BB80        Null = r0 - 48000;
0x003473        00A90001                 if NE r8 = r7 + Null;
0x003474        DDF0ECB1                 jump $cmpd100.initialize;

 <$music_example.cmpd100.analysis>
0x003475        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003476        FD000000 2102BB80        Null = r0 - 48000;
0x003478        00A90001                 if NE r8 = r7 + Null;
0x003479        DDF0D36F                 jump $cmpd100.analysis;

 <$music_example.cmpd100.applygain>
0x00347A        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x00347B        FD000000 2102BB80        Null = r0 - 48000;
0x00347D        00A90001                 if NE r8 = r7 + Null;
0x00347E        DDF0D65C                 jump $cmpd100.applygain;

 <$set_codec_rate_from_vm>
0x00347F        8133FFFF                 r1 = r1 AND 0xffff;
0x003480        9933000A                 r1 = r1 * 10 (int);
0x003481        19301FFF                 M[$current_codec_sampling_rate] = r1 + Null;
0x003482        F3D00000                 push rLink;
0x003483        09201FFF                 r0 = Null + M[$current_codec_sampling_rate];
0x003484        E1F0DD50                 call $latency.calc_inv_fs;
0x003485        19202E56                 M[$inv_codec_fs] = r0 + Null;
0x003486        F3D40000                 pop rLink;
0x003487        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x003488        FD000000 0150E008        r3 = Null + 57352;
0x00348A        FD0000FF 097066FF        r5 = Null + M[$music_example.Version];
0x00348C        09801FFF                 r6 = Null + M[$current_codec_sampling_rate];
0x00348D        1835000F                 M[r1] = r3 + Null;
0x00348E        D5730001                 M[r1 + 1] = r5;
0x00348F        D5830002                 M[r1 + 2] = r6;
0x003490        01A00003                 r8 = Null + 3;
0x003491        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x003492        F3D00000                 push rLink;
0x003493        E1F0FFCA                 call $M.music_example.load_default_params.func;
0x003494        FD0000FF 01605A17        r4 = Null + -42473;
0x003496        E1F0DCB2                 call $frame_sync.register_handlers;
0x003497        DDF0DD53                 jump $pop_rLink_and_rts;

 <$M.music_example.GetParams.func>
0x003498        01500DDC                 r3 = Null + 3548;
0x003499        01600124                 r4 = Null + 292;
0x00349A        FD0000D0 01700000        r5 = Null + -3145728;
0x00349C        1835000F                 M[r1] = r3 + Null;
0x00349D        D5630001                 M[r1 + 1] = r4;
0x00349E        D5730002                 M[r1 + 2] = r5;
0x00349F        01A00003                 r8 = Null + 3;
0x0034A0        DC0D000F                 rts;

 <$copy_codec_stats_pointers>
0x0034A1        01C00011                 r10 = Null + 17;
0x0034A2        FD0000FF 51405AFB        I4 = Null + -42245;
0x0034A4        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x0034A5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0034A6        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x0034A7        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x0034A8        E4A0002F                 r8 = Null + 1;
0x0034A9        FD0000FF 19A06700        M[$music_example.reinit] = r8 + Null;
0x0034AB        01A00000                 r8 = Null + 0;
0x0034AC        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.SPI_BLOCK
0x000000	$M.spi_block.signature
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$us_per_sample_sbc
        000000 000000 5AB3F4 535555 

0x00004E	$interrupt.start_time
        000000 

0x00004F	$sbcdec.codec_struc
        000000 

0x000050	$tone_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00005C	$M.system_config.data.mute_cntrl_l_dm1
        002D13 002E69 000000 000000 

0x000060	$tone_right_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00006C	$M.system_config.data.mute_cntrl_r_dm1
        FF5FCC 002E69 000000 000000 

0x000070	$sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00007D	$dac_out_temp_left_cbuffer_struc
        000091 FF3500 FF3500 

0x000080	$sr_hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00008C	$dac_resampler.mono_copy_op
0x00008C	$dac_resampler.mono_copy_op.next
        FFFFFF 

0x00008D	$dac_resampler.mono_copy_op.func
        002E38 

0x00008E	$dac_resampler.mono_copy_op.param
        000000 000001 

0x000090	$dither_hist_left
        000000 000000 000000 000000 
        000000 

0x000095	$dac_out_temp_right_cbuffer_struc
        000091 FF3600 FF3600 

0x000098	$dither_hist_right
        000000 000000 000000 000000 
        000000 

0x00009D	$audio_out_left_cbuffer_struc
        0005DC FF6000 FF6000 

0x0000A0	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000A5	$dac_out_left_cbuffer_struc
        000360 FF5C00 FF5C00 

0x0000A8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0000AD	$tone_in_cbuffer_struc
        000100 000100 000100 

0x0000B0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0000B5	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000DD	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x0000FE	$M.system_config.data.UserEqInitTable
        FF33F1 FF3406 

0x000100	$tone_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000200	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000300	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000400	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000450	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x000471	$decoder_codec_stream_struc
        000000 000000 000000 FF66B0 
        00009D FF66B3 000000 000000 
        000000 000000 000000 533333 
        000000 000001 00337B 000000 
        000000 000000 000000 000000 

0x000485	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000495	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004A5	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004B5	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004C5	$usb_audio_in_copy_struc
        800000 00009D FF66B3 0000C0 
        000008 000000 000000 000000 
        000000 000000 

0x0004CF	$stereo_3d_enhancement.coeff_buf
        CF5C29 5EB852 C7AE14 27AE14 
        D47AE1 570A3D C7AE14 27AE14 

0x0004D7	$analogue_audio_in_copy_struc
        002D94 000002 800000 800001 
        000002 00009D FF66B3 

0x0004DE	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0004E5	$cbuffer.read_port_buffer_size
0x0004E5	$cbuffer.port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004F1	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004FD	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0x000500	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x000579	$audio_mute_op_mono.next
0x000579	$audio_mute_op_mono
        FF6631 

0x00057A	$audio_mute_op_mono.func
        002E47 

0x00057B	$audio_mute_op_mono.param
        000001 000000 000001 000000 
        000000 

0x000580	$sub_out_1k2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0005BC	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x0005C0	$codec_packets_info
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0005F2	$M.system_config.data.bass_manager_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00075A	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0007C8	$M.system_config.data.full_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010DD 002E4D 
        000000 000AA4 FF6670 000000 
        000AA4 002DE4 000000 000702 
        000000 FF3446 003457 FF33C7 
        000400 003457 FF33DC 000400 
        003457 FF342C 000080 003457 
        FF3439 000080 003457 FF33F1 
        000100 003457 FF3406 000100 
        003475 FF5B4D 002C2D 00347A 
        FF5B4D 002C2D 0005A0 002CA1 
        000000 0010DD FF66ED 000000 
        0010DD 002E4F 000000 000F9F 
        FF6617 000000 000000 

0x0007FF	$app_config.io
        FFFFFF 

0x000800	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000DDC	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F00	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F58	$dac_resampler.stereo_left_resampler_op
0x000F58	$dac_resampler.stereo_left_resampler_op.next
        FF5982 

0x000F59	$dac_resampler.stereo_left_resampler_op.func
        FF66E0 

0x000F5A	$dac_resampler.stereo_left_resampler_op.param
        000000 000002 000000 FFFFF8 
        000008 FF58A0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FA4	$dac_resampler.mono_resampler_op
0x000FA4	$dac_resampler.mono_resampler_op.next
        FFFFFF 

0x000FA5	$dac_resampler.mono_resampler_op.func
        FF66E0 

0x000FA6	$dac_resampler.mono_resampler_op.param
        000000 000001 000000 FFFFF8 
        000008 FF58A0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FF0	$M.system_config.data.mono_StandBy_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010BC 00005C 
        000000 0010DD FF66ED 000000 
        000F9F FF6617 000000 000000 

0x001000	$M.system_config.data.delay_buf_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x001BCD	$M.system_config.data.mono_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 000E92 FF6611 
        000000 000AA4 FF6674 000000 
        003457 FF33C7 000400 003457 
        FF342C 000080 003457 FF33F1 
        000100 003475 FF5B4D 002C2D 
        00347A FF5B4D 002C2D 0005A0 
        FF5FA3 000000 0010DD FF66ED 
        000000 000F9F FF6617 000000 
        000000 

0x001BF2	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0x001C00	$dac_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001F60	$M.system_config.data.soundbar_2_1_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010DD 002E4D 
        000000 000AA4 FF6670 000000 
        000AA4 002DE4 000000 000702 
        000000 FF3446 003457 FF33C7 
        000400 003457 FF33DC 000400 
        003457 FF342C 000080 003457 
        FF3439 000080 003457 FF33F1 
        000100 003457 FF3406 000100 
        0001F1 FF5FD9 000000 003475 
        FF5B4D 002C2D 00347A FF5B4D 
        002C2D 000D38 000000 FF6678 
        000D38 000000 002DE8 0005A0 
        002CA1 000000 0005A0 002CF7 
        000000 0010DD FF66ED 000000 
        0010DD 002E4F 000000 0010DD 
        FF66EF 000000 000F9F FF6617 
        000000 000000 

0x001FA6	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000300 000400 0000B5 FF30A0 
        000485 000495 0004A5 0004B5 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x001FEB	$audio_out_tone_upsample_stereo_mix
0x001FEB	$audio_out_tone_upsample_stereo_mix.next
        FF3FEC 

0x001FEC	$audio_out_tone_upsample_stereo_mix.func
        002E44 

0x001FED	$audio_out_tone_upsample_stereo_mix.param
        000000 000001 0000AD FF32E0 
        FF66F1 000050 FF66F2 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001FFF	$current_codec_sampling_rate
        000000 

0x002000	$M.system_config.data.delay_buf_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002BCD	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x002BEE	$M.system_config.data.bass_manager_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002C0E	$M.system_config.data.pass_thru_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010DD 002E4D 
        000000 000AA4 FF6670 000000 
        000AA4 002DE4 000000 000E30 
        002DE0 000000 0005A0 002CA1 
        000000 0010DD FF66ED 000000 
        0010DD 002E4F 000000 000F9F 
        FF6617 000000 000000 

0x002C2D	$M.system_config.data.cmpd100_obj_48kHz
        000040 000020 002D13 FF5FCC 
        002D13 FF5FCC 080000 002E6A 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 3E4859 02D026 3E4859 
        00D9BA 5E4273 009150 7B6F09 
        006D0B 020000 

0x002C4B	$cbuffer.port_limit_addr
0x002C4B	$cbuffer.read_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002C57	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002C63	$M.system_config.data.mono_pass_thru_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 000E92 FF6611 
        000000 000AA4 FF6674 000000 
        0005A0 FF5FA3 000000 0010DD 
        FF66ED 000000 000F9F FF6617 
        000000 000000 

0x002C79	$audio_out_rate_adjustment_and_shift_op_stereo.next
0x002C79	$audio_out_rate_adjustment_and_shift_op_stereo
        FFFFFF 

0x002C7A	$audio_out_rate_adjustment_and_shift_op_stereo.func
        FF66DD 

0x002C7B	$audio_out_rate_adjustment_and_shift_op_stereo.param
        000000 000002 000001 000003 
        FFFFF8 FF32E0 000070 000080 
        FF5A6D 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002C8D	$audio_out_tone_right_upsample_mono_mix
0x002C8D	$audio_out_tone_right_upsample_mono_mix.next
        002DA8 

0x002C8E	$audio_out_tone_right_upsample_mono_mix.func
        002E44 

0x002C8F	$audio_out_tone_right_upsample_mono_mix.param
        000000 FFFFFF FF66B9 FF32E0 
        FF66F1 000060 FF66F2 200000 
        7FFFFF 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002CA1	$M.system_config.data.stereo_volume_and_limit_block
0x002CA1	$M.system_config.data.stereo_volume_and_limit_obj
        000000 001000 000002 001FFF 
        000000 FBD57B 072148 79999A 
        000000 000000 

0x002CAB	$M.system_config.data.left_channel_vol_struc
        002D13 002D13 080000 000000 
        000000 

0x002CB0	$M.system_config.data.right_channel_vol_struc
        FF5FCC FF5FCC 080000 000000 
        000000 

0x002CB5	$sbc_stats
        001FC2 001FC4 001FC8 001FC3 
        001FC5 001FC7 001FC6 002E69 
        002E69 002E69 002E69 002E69 
        002E69 FF66F4 002DCB FF66F1 
        001FFF 

0x002CC6	$analogue_stats
        002DCB 002E69 002E69 002E69 
        002E69 002E69 002E69 002E69 
        002E69 002E69 002E69 002E69 
        002E69 FF66F4 002DCB FF66F1 
        001FFF 

0x002CD7	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002CE7	$flash.code.address
	-------- [0x000C octets]

0x002CEB	$flash.data16.address
	-------- [0x000C octets]

0x002CEF	$flash.data24.address
	-------- [0x000C octets]

0x002CF3	$flash.windowed_data16.address
	-------- [0x000C octets]

0x002CF7	$M.system_config.data.sub_volume_and_limit_block
0x002CF7	$M.system_config.data.sub_volume_and_limit_obj
        000000 001000 000001 001FFF 
        200000 FBD57B 072148 79999A 
        000000 000000 

0x002D01	$M.system_config.data.sub_channel_vol_struc
        002D20 002D20 080000 000000 
        000000 

0x002D06	$M.system_config.data.stream_map_left_in
        00009D 000000 000000 000168 
        000BB8 001188 00112F 000000 
        000000 000000 000000 000000 
        000000 

0x002D13	$M.system_config.data.stream_map_left_out
        0000A5 000000 000000 000168 
        000BB8 001153 00100A 000000 
        000000 000000 000000 000000 
        000000 

0x002D20	$M.system_config.data.stream_map_sub_out
        FF66CE 000000 000000 000168 
        000BB8 001153 00100A 000000 
        000000 000000 000000 000000 
        000000 

0x002D2D	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D37	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D41	$audio_mute_op_stereo.next
0x002D41	$audio_mute_op_stereo
        FF6627 

0x002D42	$audio_mute_op_stereo.func
        002E47 

0x002D43	$audio_mute_op_stereo.param
        000001 000000 000002 000000 
        000000 000001 000001 

0x002D4A	$interrupt.isr_call_table
        000FB5 0021C5 000961 0021C5 
        0021C5 0021C5 0021C5 0021C5 
        0021C5 

0x002D53	$audio_out_dither_and_shift_op_right
0x002D53	$audio_out_dither_and_shift_op_right.next
        FFFFFF 

0x002D54	$audio_out_dither_and_shift_op_right.func
        002E3B 

0x002D55	$audio_out_dither_and_shift_op_right.param
        000001 000003 FFFFF8 000000 
        000098 000000 

0x002D5B	$M.downsample_sub_to_1k2.sub_mute_coefs
        000000 F9A97A E7E742 CE3DC9 
        B1C238 9818BF 865687 800000 

0x002D63	$output_port_and_delay_size
        FF670C 002E6D 00004C 000BCC 
        00004C 002E6C 000000 

0x002D6A	$M.cbops.rate_adjustment_and_shift.main.right_channel_info
        000000 000000 000000 000000 
        000000 000000 000000 

0x002D71	$dac_resampler.mono_copy_switch_op
0x002D71	$dac_resampler.mono_copy_switch_op.next
        00008C 

0x002D72	$dac_resampler.mono_copy_switch_op.func
        FF66E6 

0x002D73	$dac_resampler.mono_copy_switch_op.param
        FF30FF 000FA4 000000 000001 

0x002D77	$stereo_tone_in_copy_op
0x002D77	$stereo_tone_in_copy_op.next
        FFFFFF 

0x002D78	$stereo_tone_in_copy_op.func
        002E4A 

0x002D79	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0x002D7D	$signal_detect_op_coefs
        000A5B 000258 000000 000000 
        000001 001019 

0x002D83	$M.main.rm_mono_switch_op
0x002D83	$M.main.rm_mono_switch_op.next
        FF5BDB 

0x002D84	$M.main.rm_mono_switch_op.func
        FF66E6 

0x002D85	$M.main.rm_mono_switch_op.param
        FF66FA FF65DC 000000 000001 

0x002D89	$M.system_config.data.sub_mix_dm1
        002D13 FF5FCC 002D13 FF6709 
        FF6709 002E69 

0x002D8F	$dac_out_resampler_mono_copy_struc
        002D71 000001 0000A5 000001 
        00007D 

0x002D94	$analogue_in_left_copy_op.next
0x002D94	$analogue_in_left_copy_op
        FF661D 

0x002D95	$analogue_in_left_copy_op.func
        002E41 

0x002D96	$analogue_in_left_copy_op.param
        000000 000002 000008 

0x002D99	$codec_in_copy_struc
        002DC4 000001 800000 000001 
        FF66B0 

0x002D9E	$tone_in_copy_op.next
0x002D9E	$tone_in_copy_op
        FFFFFF 

0x002D9F	$tone_in_copy_op.func
        002E41 

0x002DA0	$tone_in_copy_op.param
        000000 000001 00000B 

0x002DA3	$M.main.audio_out_dc_remove_op_right.next
0x002DA3	$audio_out_dc_remove_op_right
        FF660B 

0x002DA4	$M.main.audio_out_dc_remove_op_right.func
        FF66D7 

0x002DA5	$M.main.audio_out_dc_remove_op_right.param
        000001 000001 000000 

0x002DA8	$signal_detect_op_mono
0x002DA8	$signal_detect_op_mono.next
        000579 

0x002DA9	$signal_detect_op_mono.func
        FF66E3 

0x002DAA	$signal_detect_op_mono.param
        002D7D 000001 000000 

0x002DAD	$music_example.SysControl
0x002DAD	$music_example.SpiSysControl
        000000 

0x002DAE	$music_example.OvrMasterSystemVolume
        000009 

0x002DAF	$music_example.OvrCallState
        000000 

0x002DB0	$music_example.OvrMode
        000000 

0x002DB1	$music_example.OvrTrimVolumes
        000000 

0x002DB2	$sub_l2cap_out_copy_struc
        FF667C 000001 002E2F 000001 
        94600F 

0x002DB7	$output_buffers
        0000A5 00004C 00007D 00004C 
        000000 

0x002DBC	$con_in_timer_struc
        000000 000000 000000 000000 

0x002DC0	$tone_copy_timer_struc
        000000 000000 000000 000000 

0x002DC4	$codec_in_copy_op.next
0x002DC4	$codec_in_copy_op
        FFFFFF 

0x002DC5	$codec_in_copy_op.func
        002E38 

0x002DC6	$codec_in_copy_op.param
        000000 000001 

0x002DC8	$music_example.Statistics
0x002DC8	$music_example.CurMode
        000000 

0x002DC9	$music_example.PeakMipsFunc
        000000 

0x002DCA	$music_example.PeakMipsDecoder
        000000 

0x002DCB	$music_example.SamplingRate
        000000 

0x002DCC	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0x002DD0	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0x002DD4	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0x002DD8	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0x002DDC	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x002DE0	$M.system_config.data.pass_thru_obj
        002D06 FF5FBF 002D13 FF5FCC 

0x002DE4	$M.system_config.data.right_headroom_obj
        FF5FBF FF5FBF FF670A 002E69 

0x002DE8	$M.system_config.data.delay_right
        FF5FCC FF5FCC 002E2C 000BCC 

0x002DEC	$set_synchronized_warp_message_struc
        000000 000000 000000 000000 

0x002DF0	$sub_l2cap_header_limit_op.next
0x002DF0	$sub_l2cap_header_limit_op
        FF6680 

0x002DF1	$sub_l2cap_header_limit_op.func
        002E3E 

0x002DF2	$sub_l2cap_header_limit_op.mono
        FFFFFF 000007 

0x002DF4	$bdaddr_message_struc
        000000 000000 000000 000000 

0x002DF8	$wall_clock_message_struc
        000000 000000 000000 000000 

0x002DFC	$wall_clock_timer_struc
        000000 000000 000000 000000 

0x002E00	$M.Subwoofer.write_port_function_table
        0018E6 0018E6 0018E7 0018FA 

0x002E04	$bass_timer_struc
        000000 000000 000000 000000 

0x002E08	$M.configure_latency_reporting.message_struct
        000000 000000 000000 000000 

0x002E0C	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0x002E10	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x002E14	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x002E18	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x002E1C	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0x002E20	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0x002E23	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0x002E26	$M.sra_calcrate.mode_funtion_table
        0004DE 0004E4 0004F6 

0x002E29	$stereo_3d_enhancement_delay1_cbuffer_struc
        0008A0 FF5000 FF526A 

0x002E2C	$M.system_config.data.delay_buf_right_cbuffer_struc
        000BCD 001000 001000 

0x002E2F	$sub_codec_out_cbuffer_struc
        000032 FF35C0 FF35C0 

0x002E32	$sub_out_1k2_cbuffer_struc
        00003C 000580 000580 

0x002E35	$M.cbops.av_copy.left_silence_cbuffer_struc
        000079 000500 000500 

0x002E38	$cbops.copy_op
        000000 000000 000EB0 

0x002E3B	$cbops.dither_and_shift
        000000 000000 0008BD 

0x002E3E	$cbops.limited_copy
        000000 001105 000000 

0x002E41	$cbops.shift
        000000 000000 000E50 

0x002E44	$cbops.auto_upsample_and_mix
        000000 000000 0002EA 

0x002E47	$cbops.soft_mute
        000000 000000 001E4C 

0x002E4A	$cbops.deinterleave
        000000 0011CF 000F22 

0x002E4D	$M.system_config.data.pcmin_r_pk_dtct
        FF5FBF 000000 

0x002E4F	$M.system_config.data.dac_r_pk_dtct
        FF5FCC 000000 

0x002E51	$cbuffer.tmp
        000000 000000 

0x002E53	$stereo_tone
        000000 

0x002E54	$aux_input_stream_available
        000000 

0x002E55	$max_clock_mismatch
        000000 

0x002E56	$inv_codec_fs
        14D555 

0x002E57	$M.main.zero
        000000 

0x002E58	$latency_calc_port_warp
        002E57 

0x002E59	$codec_config
        FFFFFF 

0x002E5A	$tmr_period_tone_copy
        003E80 

0x002E5B	$sra_rate_addr
        FF5A6D 

0x002E5C	$stereo_copy_struc_ptr
        FF65E4 

0x002E5D	$no_tone_timer
        000000 

0x002E5E	$M.jitter_buffering.is_buffering
        000001 

0x002E5F	$M.av_audio_out_silence_insert.right_zero_samples
        000000 

0x002E60	$music_example.sys_mode
        000002 

0x002E61	$music_example.stereo_processing
        000000 

0x002E62	$music_example.frame_processing_size
        000168 

0x002E63	$music_example.MasterVolume
        000000 

0x002E64	$music_example.LeftTrimVolume
        000000 

0x002E65	$M.mips_profile.evalinterval_us
        0186A0 

0x002E66	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0x002E67	$usb_state
        000000 

0x002E68	$usb_pause_period_thresh
        000003 

0x002E69	$M.system_config.data.ZeroValue
        000000 

0x002E6A	$cmpd_gain
        000000 

0x002E6B	$M.system_config.data.dithertype
        000000 

0x002E6C	$warp_amount
        000000 

0x002E6D	$right_port
        80000D 

0x002E6E	$wall_clock_msw
        000000 

0x002E6F	$wall_clock_time
        000000 

0x002E70	$sco_param_clock_msw
        000000 

0x002E71	$sco_param_to_air_size
        000000 

0x002E72	$sco_param_to_air_time
        000000 

0x002E73	$sco_timer_id
        000000 

0x002E74	$subwoofer_temp
        000000 

0x002E75	$queue_another_bass_packet
        000000 

0x002E76	$late_write_counter
        000000 

0x002E77	$early_write_counter
        000000 

0x002E78	$max_early_write
        000000 

0x002E79	$M.downsample_sub_to_1k2.residual
        000000 

0x002E7A	$wall_clock_adjustment
        000000 

0x002E7B	$sub_sra_ratio
        000000 

0x002E7C	$wall_clock_timer_id
        000000 

0x002E7D	$subwoofer.running
        000000 

0x002E7E	$synchronized_rate
        000000 

0x002E7F	$codec_packets_info_last_write_address
        FF4000 

0x002E80	$codec_packets_info_timer_gap
        001388 

0x002E81	$alpha
        066666 

0x002E82	$M.configure_latency_reporting.enabled
        000000 

0x002E83	$M.configure_latency_reporting.min_change
        000000 

0x002E84	$cbuffer.write_port_connect_address
        000000 

0x002E85	$cbuffer.read_port_connect_address
        000000 

0x002E86	$cbuffer.auto_mcu_message
        000001 000000 

0x002E88	$interrupt.total_time
        000000 

0x002E89	$message.queue_read_ptr
        000000 

0x002E8A	$message.last_seq_sent
        000000 

0x002E8B	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0x002E8C	$pskey.last_addr
        FFFFFF 

0x002E8D	$timer.last_addr
        FFFFFF 

0x002E8E	$cbops.struc_ptr
        000000 

0x002E8F	$cbops.amount_written
        000000 

0x002E90	$M.cbops.av_copy.control_cbuffer
        000000 

0x002E91	$M.cbops.dac_av_copy.port_mnt_data_avg
        0016A8 

0x002E92	$M.cbops.dac_av_copy.prev_buffer_read_addr
        000000 

0x002E93	$M.cbops.dac_av_copy.buffer_level
        000000 

0x002E94	$M.cbops.dither_and_shift.main.rand_num
        005555 

0x002E95	$M.cbops.rate_adjustment_and_shift.main.n_samples
        000000 

0x002E96	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0x002E97	$M.cbops.rate_adjustment_and_shift.main.temp_r4
        000000 

0x002E98	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0x002E99	$master_reset_needed
        000001 

0x002E9A	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0x002E9B	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0x002E9C	$M.cmpd100.analysis.inst_gain
        000000 

0x002E9D	$M.spi_comm.last_addr
        FFFFFF 

0x003000	$stereo_3d_enhancement.delay2
	-------- [0x19E0 octets]


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m4_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30F0	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF30FF	$dac_resampler.resampler_active
        000000 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3260	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF32E0	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF335E	$M.system_config.data.ParameterMap
        000DDC FF344F 000EC5 FF344D 
        000EC6 FF344E 000EB9 FF5BB2 
        000EC4 FF5BB8 000EBA FF5BB3 
        000EBB FF5BB4 000EBC FF5BB5 
        000EBD FF5BB6 000EBE FF5BB7 
        000DDC FF5B4D 000DDC 002C2D 
        000EC7 FF5B57 000EC8 FF5B58 
        000EC9 FF5B59 000ECA FF5B5A 
        000ECB FF5B5B 000ECC FF5B5C 
        000ECD FF5B5D 000ECE FF5B5E 
        000ECF FF5B62 000ED0 FF5B63 
        000ED1 FF5B64 000ED2 FF5B65 
        000ED3 FF5B66 000ED4 FF5B67 
        000ED5 FF5B68 000ED6 FF5B69 
        000ED7 FF5B53 000ED8 002C37 
        000ED9 002C38 000EDA 002C39 
        000EDB 002C3A 000EDC 002C3B 
        000EDD 002C3C 000EDE 002C3D 
        000EDF 002C3E 000EE0 002C42 
        000EE1 002C43 000EE2 002C44 
        000EE3 002C45 000EE4 002C46 
        000EE5 002C47 000EE6 002C48 
        000EE7 002C49 000EE8 002C33 
        000EE9 002D7D 000EEA 002D7E 
        000EEB 002E6B 000DDC 002CA1 
        000DDC FF5FA3 000DDC 002CF7 
        000000 

0xFF33C7	$M.system_config.data.spkr_eq_left_dm2
        002D13 002D13 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF33DC	$M.system_config.data.spkr_eq_right_dm2
        FF5FCC FF5FCC 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF33F1	$M.system_config.data.user_eq_left_dm2
        002D13 002D13 000005 002BCD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3406	$M.system_config.data.user_eq_right_dm2
        FF5FCC FF5FCC 000005 002BCD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF341B	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF342C	$M.system_config.data.boost_eq_left_dm2
        002D13 002D13 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3439	$M.system_config.data.boost_eq_right_dm2
        FF5FCC FF5FCC 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3446	$M.system_config.data.stereo_3d_obj
        002D06 FF5FBF 002D13 FF5FCC 
        002E29 FF66C8 0004CF 00026A 
        000000 000000 000040 

0xFF3451	$M.system_config.data.user_eq_bank_select
        000007 000000 000E32 000E48 
        000E5E 000E74 000E8A 000EA0 

0xFF3459	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3460	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3467	$M.system_config.data.spkr_eq_bank_select
        000001 000DDD 000DFE 

0xFF346A	$M.system_config.data.boost_eq_bank_select
        000001 000E1F 000E28 

0xFF346D	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF347C	$dac_resampler.stereo_left_copy_op.next
0xFF347C	$dac_resampler.stereo_left_copy_op
        FF6640 

0xFF347D	$dac_resampler.stereo_left_copy_op.func
        002E38 

0xFF347E	$dac_resampler.stereo_left_copy_op.param
        000000 000002 

0xFF3480	$M.cbops.av_copy.right_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF34F9	$dac_out_resampler_stereo_copy_struc
        FF65F9 000002 0000A5 FF66B6 
        000002 00007D 000095 

0xFF3500	$dac_resampler.dac_out_temp_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3591	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF35A0	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF35BE	$pcm_latency_input_struct
        FF5FB2 FF6654 

0xFF35C0	$sub_codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF35F2	$encoded_latency_struct
        FF35BE FF66D1 FF66B0 00009D 
        002E56 FF66F7 000003 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3600	$dac_resampler.dac_out_temp_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3691	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF3709	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF3772	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF37B1	$M.iir_resamplev2.Up_160_Down_147.int_ratio
0xFF37B1	$M.iir_resamplev2.Up_160_Down_147.filter
        000000 

0xFF37B2	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF37B3	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF37B4	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF37B5	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000C96 

0xFF37B6	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF37B7	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF37B8	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF37B9	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF37BA	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF3691 

0xFF37BB	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF37BC	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        000914 

0xFF37BD	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF37BE	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF37BF	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF37C0	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF37C1	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF37C2	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF3FD8 

0xFF37C3	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF37C4	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF37C5	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        000F57 

0xFF37C6	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF37D1	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF37D2	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF37DC	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF37DD	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF3800	$sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F08	$M.iir_resamplev2.Up_147_Down_160.filter
0xFF3F08	$M.iir_resamplev2.Up_147_Down_160.int_ratio
        000001 

0xFF3F09	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF3F0A	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF3F0B	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3F0C	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000C96 

0xFF3F0D	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF3F0E	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF3F0F	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF3F10	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF3F11	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF3772 

0xFF3F12	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF3F13	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        000914 

0xFF3F14	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF3F15	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF3F16	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF3F17	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF3F18	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF3F19	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF37DD 

0xFF3F1A	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF3F1B	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF3F1C	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        000F57 

0xFF3F1D	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF3F28	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF3F29	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF3F33	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF3F34	$M.iir_resamplev2.Up_441_Down_320.filter
0xFF3F34	$M.iir_resamplev2.Up_441_Down_320.int_ratio
        000000 

0xFF3F35	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF3F36	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF3F37	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF3F38	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000C96 

0xFF3F39	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF3F3A	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF3F3B	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF3F3C	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF3F3D	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF3772 

0xFF3F3E	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF3F3F	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        000914 

0xFF3F40	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF3F41	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF3F42	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF3F43	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF3F44	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF3F45	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF3709 

0xFF3F46	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF3F47	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF3F48	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        000F57 

0xFF3F49	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF3F54	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF3F55	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF3F5F	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF3F60	$M.iir_resamplev2.Up_441_Down_160.filter
0xFF3F60	$M.iir_resamplev2.Up_441_Down_160.int_ratio
        000000 

0xFF3F61	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF3F62	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF3F63	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3F64	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000C96 

0xFF3F65	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF3F66	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF3F67	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF3F68	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF3F69	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF3772 

0xFF3F6A	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF3F6B	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000A2D 

0xFF3F6C	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF3F6D	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF3F6E	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF3F6F	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF3F70	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF3F71	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF3709 

0xFF3F72	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF3F73	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF3F74	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        000F88 

0xFF3F75	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF3F7C	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF3F7D	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF3F83	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF3F84	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF3F89	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF3F8A	$M.iir_resamplev2.Up_3_Down_1.filter
0xFF3F8A	$M.iir_resamplev2.Up_3_Down_1.int_ratio
        000000 

0xFF3F8B	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF3F8C	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF3F8D	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF3F8E	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF3F8F	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000A2D 

0xFF3F90	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF3F91	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF3F92	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF3F93	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF3F94	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF3F95	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF346D 

0xFF3F96	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF3F97	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF3F98	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        000F07 

0xFF3F99	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF3FA1	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF3FA2	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF3FA9	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF3FAA	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF3FB1	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF3FB2	$M.iir_resamplev2.Up_3_Down_2.filter
0xFF3FB2	$M.iir_resamplev2.Up_3_Down_2.int_ratio
        000000 

0xFF3FB3	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF3FB4	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF3FB5	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF3FB6	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s1
        000000 

0xFF3FB7	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000A2D 

0xFF3FB8	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF3FB9	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF3FBA	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF3FBB	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF3FBC	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF3FBD	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF3591 

0xFF3FBE	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF3FBF	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF3FC0	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        000F57 

0xFF3FC1	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF3FCC	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF3FCD	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF3FD7	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF3FD8	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF3FEC	$audio_out_tone_right_upsample_stereo_mix.next
0xFF3FEC	$audio_out_tone_right_upsample_stereo_mix
        FF6605 

0xFF3FED	$audio_out_tone_right_upsample_stereo_mix.func
        002E44 

0xFF3FEE	$audio_out_tone_right_upsample_stereo_mix.param
        000001 FFFFFF FF66B9 FF32E0 
        FF66F1 000060 FF66F2 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5000	$stereo_3d_enhancement.delay1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF58A0	$dac_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5982	$dac_resampler.stereo_right_resampler_op.next
0xFF5982	$dac_resampler.stereo_right_resampler_op
        FFFFFF 

0xFF5983	$dac_resampler.stereo_right_resampler_op.func
        FF66E0 

0xFF5984	$dac_resampler.stereo_right_resampler_op.param
        000001 000003 000000 FFFFF8 
        000008 FF58A0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF59CE	$M.system_config.data.soundbar_2_1_mono_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010DD 002E4D 
        000000 000AA4 FF6670 000000 
        000AA4 002DE4 000000 000E30 
        002DE0 000000 003457 FF33C7 
        000400 003457 FF33DC 000400 
        003457 FF342C 000080 003457 
        FF3439 000080 003457 FF33F1 
        000100 003457 FF3406 000100 
        0001F1 FF5FD9 000000 003475 
        FF5B4D 002C2D 00347A FF5B4D 
        002C2D 000D38 000000 FF6678 
        000D38 000000 002DE8 000E92 
        002D89 000000 0010BC 00006C 
        000000 0005A0 FF5FA3 000000 
        0005A0 002CF7 000000 0010DD 
        FF66ED 000000 0010DD FF66EF 
        000000 000F9F FF6617 000000 
        000000 

0xFF5A17	$M.music_example.power_up_reset.message_handlers
        FF6658 001020 001EB0 00213C 
        002DCC 001001 0033C5 00213C 
        002DD0 00100E 001F76 00213C 
        FF665C 001002 003342 00213C 
        FF6660 001012 0033E8 00213C 
        002DD4 001018 0020F1 00213C 
        FF6664 00101A 00204B 00213C 
        002E08 001027 000F70 00213C 
        002DD8 00121A 002059 00213C 
        FF6668 00129A 00208C 00213C 
        002DDC 00121B 002097 00213C 
        FF666C 00129B 00201E 00213C 
        0004FD 001007 003431 0021BE 
        FF66BC 00100A 003488 0021BE 
        002E23 00100B 0033A1 0021BE 
        002E20 001009 0034A8 0021BE 
        FF66BF 001008 003498 0021BE 
        000000 

0xFF5A5C	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5A9C	$M.system_config.data.reinitialize_table
        003449 FF33C7 FF3467 003449 
        FF33DC FF3467 003449 FF342C 
        FF346A 003449 FF3439 FF346A 
        003000 0000FE FF3451 0006E2 
        000000 FF3446 003470 FF5B4D 
        002C2D 00115F 002CA1 002CA1 
        00115F FF5FA3 FF5FA3 00115F 
        002CF7 002CF7 0001C7 FF5FD9 
        FF66CE 00218A 000000 FF6678 
        00218A 000000 002DE8 000000 

0xFF5AC4	$dac_resampler.filter_spec_lookup_table
        00BB80 00BB80 000000 00AC44 
        00AC44 000000 007D00 007D00 
        000000 005622 005622 000000 
        003E80 003E80 000000 001F40 
        001F40 000000 003E80 00BB80 
        FF3F8A 007D00 00BB80 FF3FB2 
        00AC44 00BB80 FF37B1 003E80 
        00AC44 FF3F60 007D00 00AC44 
        FF3F34 00BB80 00AC44 FF3F08 
        000000 

0xFF5AE9	$M.system_config.data.StatisticsPtrs
        002DC8 002DAD 002DC9 002DCA 
        FF66EC 002E4E 002E69 FF66EE 
        002E50 FF66F0 FF6702 002E63 
        002E64 FF6704 000DDC FF65EE 
        FF6723 FF66F8 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF5B0C	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0xFF5B2D	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0xFF5B4D	$M.system_config.data.cmpd100_obj_44kHz
        000040 000020 002D13 FF5FCC 
        002D13 FF5FCC 080000 002E6A 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF5B6B	$M.system_config.data.StandBy_proc_funcs
        000FF6 FF6617 000000 0010DD 
        FF66EB 000000 0010DD 002E4D 
        000000 0010BC 00005C 000000 
        0010BC 00006C 000000 0010DD 
        FF66ED 000000 0010DD 002E4F 
        000000 000F9F FF6617 000000 
        000000 

0xFF5B84	$cbuffer.port_offset_addr
0xFF5B84	$cbuffer.read_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5B90	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5B9C	$M.system_config.data.filter_reset_table
        0021AC FF33C7 000000 0021AC 
        FF33DC 000000 0021AC FF342C 
        000000 0021AC FF3439 000000 
        0021AC FF33F1 000000 0021AC 
        FF3406 000000 0001E4 FF5FD9 
        000000 000000 

0xFF5BB2	$M.system_config.data.bass_manager_coefs
        000003 100000 200000 000000 
        000000 200000 000050 015725 
        000005 000006 7BA375 5A827A 
        2120FC 7BA375 2120FC 7BA375 
        5A827A 2120FC 7BA375 5A827A 
        2120FC 

0xFF5BC7	$audio_out_tone_upsample_mono_mix.next
0xFF5BC7	$audio_out_tone_upsample_mono_mix
        002C8D 

0xFF5BC8	$audio_out_tone_upsample_mono_mix.func
        002E44 

0xFF5BC9	$audio_out_tone_upsample_mono_mix.param
        000000 FFFFFF 0000AD FF32E0 
        FF66F1 000050 FF66F2 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5BDB	$audio_out_rate_adjustment_and_shift_op_mono
0xFF5BDB	$audio_out_rate_adjustment_and_shift_op_mono.next
        FFFFFF 

0xFF5BDC	$audio_out_rate_adjustment_and_shift_op_mono.func
        FF66DD 

0xFF5BDD	$audio_out_rate_adjustment_and_shift_op_mono.param
        000000 000001 FFFFFF FFFFFF 
        FFFFF8 FF32E0 000070 000000 
        FF5A6D 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5BEF	$usb_stats
        002DCB 002E69 002E69 002E69 
        002E69 002E69 002E69 002E69 
        002E69 002E69 002E69 002E69 
        002E69 FF66F4 002DCB FF66F1 
        001FFF 

0xFF5C00	$dac_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5F60	$usb_rate_candidates
        00BB80 0000C0 000000 001F40 
        000020 000000 003E80 000040 
        000000 005622 00005C 000014 
        007D00 000080 000000 00AC44 
        0000B4 00000A 000000 

0xFF5F73	$M.music_example_process.mono_mode_conversion_table
        000005 000001 000004 000001 
        000003 000001 000003 000000 
        000004 000000 000005 000000 
        000007 000001 000007 000000 

0xFF5F83	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5F93	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5FA3	$M.system_config.data.mono_volume_and_limit_block
0xFF5FA3	$M.system_config.data.mono_volume_and_limit_obj
        000000 001000 000001 001FFF 
        000000 FBD57B 072148 79999A 
        000000 000000 

0xFF5FAD	$M.system_config.data.mono_channel_vol_struc
        002D13 002D13 080000 000000 
        000000 

0xFF5FB2	$M.main.cbuffers_latency_measure
        00009D 002E56 FF66F7 0000A5 
        002E56 FF66F7 00007D FF66F6 
        FF66F7 80000C FF66F6 002E58 
        000000 

0xFF5FBF	$M.system_config.data.stream_map_right_in
        FF66B3 000000 000000 000168 
        000BB8 001188 00112F 000000 
        000000 000000 000000 000000 
        000000 

0xFF5FCC	$M.system_config.data.stream_map_right_out
        FF66B6 000000 000000 000168 
        000BB8 001153 00100A 000000 
        000000 000000 000000 000000 
        000000 

0xFF5FD9	$M.system_config.data.bass_manager_struct
        002D13 FF5FCC 002D13 FF5FCC 
        000000 002D20 0005F2 FF5BB2 
        002BEE 000DDC 000800 001FFF 

0xFF5FE5	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0xFF5FEF	$M.system_config.data.mode_table
        FF5B6B 002C0E 0007C8 001BCD 
        002C63 000FF0 001F60 FF59CE 
        000000 

0xFF5FF8	$audio_out_dither_and_shift_op_left.next
0xFF5FF8	$audio_out_dither_and_shift_op_left
        002D53 

0xFF5FF9	$audio_out_dither_and_shift_op_left.func
        002E3B 

0xFF5FFA	$audio_out_dither_and_shift_op_left.param
        000000 000002 FFFFF8 000000 
        000090 000000 

0xFF6000	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF65DC	$audio_out_dither_and_shift_op_mono.next
0xFF65DC	$audio_out_dither_and_shift_op_mono
        FFFFFF 

0xFF65DD	$audio_out_dither_and_shift_op_mono.func
        002E3B 

0xFF65DE	$audio_out_dither_and_shift_op_mono.param
        000000 000001 FFFFF8 000000 
        000090 000000 

0xFF65E4	$stereo_out_copy_struc
        001FEB 000002 00007D 000095 
        000002 80000C 80000D 

0xFF65EB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
0xFF65EB	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
        00FEEB 

0xFF65EC	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0xFF65ED	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0xFF65EE	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BF00 

0xFF65EF	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0xFF65F0	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0xFF65F1	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0xFF65F2	$M.cbops.av_copy.silence_buffer_struc
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF65F9	$dac_resampler.stereo_copy_switch_op
0xFF65F9	$dac_resampler.stereo_copy_switch_op.next
        FF347C 

0xFF65FA	$dac_resampler.stereo_copy_switch_op.func
        FF66E6 

0xFF65FB	$dac_resampler.stereo_copy_switch_op.param
        FF30FF 000F58 000000 000001 

0xFF65FF	$stereo_tone_in_copy_struc
        002D77 000001 946003 000002 
        0000AD FF66B9 

0xFF6605	$signal_detect_op_stereo
0xFF6605	$signal_detect_op_stereo.next
        002D41 

0xFF6606	$signal_detect_op_stereo.func
        FF66E3 

0xFF6607	$signal_detect_op_stereo.param
        002D7D 000002 000000 000001 

0xFF660B	$M.main.rm_stereo_switch_op
0xFF660B	$M.main.rm_stereo_switch_op.next
        002C79 

0xFF660C	$M.main.rm_stereo_switch_op.func
        FF66E6 

0xFF660D	$M.main.rm_stereo_switch_op.param
        FF66FA FF5FF8 000000 000001 

0xFF6611	$M.system_config.data.mix_dm1
        002D06 FF5FBF 002D13 FF6709 
        FF6709 002E69 

0xFF6617	$M.system_config.data.rcv_process_streams
        002D06 FF5FBF 002D13 FF5FCC 
        002D20 000000 

0xFF661D	$analogue_in_right_copy_op.next
0xFF661D	$analogue_in_right_copy_op
        FFFFFF 

0xFF661E	$analogue_in_right_copy_op.func
        002E41 

0xFF661F	$analogue_in_right_copy_op.param
        000001 000003 000008 

0xFF6622	$tone_in_copy_struc
        002D9E 000001 946003 000001 
        0000AD 

0xFF6627	$audio_out_dc_remove_op_left
0xFF6627	$M.main.audio_out_dc_remove_op_left.next
        002DA3 

0xFF6628	$M.main.audio_out_dc_remove_op_left.func
        FF66D7 

0xFF6629	$M.main.audio_out_dc_remove_op_left.param
        000000 000000 000000 

0xFF662C	$mono_out_copy_struc
        FF5BC7 000001 00007D 000001 
        80000C 

0xFF6631	$audio_out_dc_remove_op_mono
0xFF6631	$M.main.audio_out_dc_remove_op_mono.next
        002D83 

0xFF6632	$M.main.audio_out_dc_remove_op_mono.func
        FF66D7 

0xFF6633	$M.main.audio_out_dc_remove_op_mono.param
        000000 000000 000000 

0xFF6636	$sub_esco_out_copy_struc
        FF667C 000001 002E2F 000001 
        91A00E 

0xFF663B	$sub_l2cap_header_out_copy_struc
        002DF0 000001 002E2F 000001 
        9D800F 

0xFF6640	$dac_resampler.stereo_right_copy_op
0xFF6640	$dac_resampler.stereo_right_copy_op.next
        FFFFFF 

0xFF6641	$dac_resampler.stereo_right_copy_op.func
        002E38 

0xFF6642	$dac_resampler.stereo_right_copy_op.param
        000001 000003 

0xFF6644	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF6648	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF664C	$audio_out_timer_struc
        000000 000000 000000 000000 

0xFF6650	$signal_detect_timer_struc
        000000 000000 000000 000000 

0xFF6654	$M.main.samples_latency_measure
        000000 002E56 FF66F7 000000 

0xFF6658	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0xFF665C	$M.music_example_message.volume_message_struc
        000000 000000 000000 000000 

0xFF6660	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0xFF6664	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0xFF6668	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF666C	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF6670	$M.system_config.data.left_headroom_obj
        002D06 002D06 FF670A 002E69 

0xFF6674	$M.system_config.data.mono_headroom_obj
        002D13 002D13 FF670A 002E69 

0xFF6678	$M.system_config.data.delay_left
        002D13 002D13 FF66CB 000BCC 

0xFF667C	$codec_out_copy_op
0xFF667C	$codec_out_copy_op.next
        FFFFFF 

0xFF667D	$codec_out_copy_op.func
        002E38 

0xFF667E	$codec_out_copy_op.param
        000000 000001 

0xFF6680	$sub_l2cap_header_out_copy_op
0xFF6680	$sub_l2cap_header_out_copy_op.next
        FFFFFF 

0xFF6681	$sub_l2cap_header_out_copy_op.func
        002E38 

0xFF6682	$sub_l2cap_header_out_copy_op.param
        000000 000001 

0xFF6684	$sco_params_message_struc
        000000 000000 000000 000000 

0xFF6688	$sco_timer_struc
        000000 000000 000000 000000 

0xFF668C	$bdaddr_struc
        000000 000000 000000 000000 

0xFF6690	$M.Subwoofer.write_port_disconnected_function_table
        00192B 00192B 00192C 001931 

0xFF6694	$M.report_latency_to_vm.timer_struc
        000000 000000 000000 000000 

0xFF6698	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0xFF669C	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0xFF66A0	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF66A4	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF66A8	$M.cbops.rate_adjustment_and_shift.main.temp_vars
        000000 000000 000000 000000 

0xFF66AC	$M.frame_sync.usb_in_stereo_audio_copy.usb_in_state_fn
        00065B 00066E 00066E 000698 

0xFF66B0	$codec_in_cbuffer_struc
        001000 FF4000 FF4000 

0xFF66B3	$audio_out_right_cbuffer_struc
        0005DC 000800 000800 

0xFF66B6	$dac_out_right_cbuffer_struc
        000360 001C00 001C00 

0xFF66B9	$tone_in_right_cbuffer_struc
        000100 000200 000200 

0xFF66BC	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0xFF66BF	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0xFF66C2	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0xFF66C5	$usb_fn_table
        001D5E 001D67 001D78 

0xFF66C8	$stereo_3d_enhancement_delay2_cbuffer_struc
        0008A0 003000 00326A 

0xFF66CB	$M.system_config.data.delay_buf_left_cbuffer_struc
        000BCD 002000 002000 

0xFF66CE	$sub_out_cbuffer_struc
        000708 FF3800 FF3800 

0xFF66D1	$codec_packets_info_cbuffer_struc
        000032 0005C0 0005C0 

0xFF66D4	$M.cbops.av_copy.right_silence_cbuffer_struc
        000079 FF3480 FF3480 

0xFF66D7	$cbops.dc_remove
        0011EC 000000 000EE8 

0xFF66DA	$M.cbops.dither_and_shift.main.dither_func
        0008D4 0008E1 0008F0 

0xFF66DD	$cbops.rate_adjustment_and_shift
        000000 00113C 000045 

0xFF66E0	$cbops_iir_resamplev2
        000000 000DA8 0009A6 

0xFF66E3	$cbops.signal_detect_op
        000000 000000 001F5E 

0xFF66E6	$cbops.switch_op
        0011E2 0011E4 0011E6 

0xFF66E9	$M.sra_tagtimes.mode_funtion_table
        0004A4 0004B3 

0xFF66EB	$M.system_config.data.pcmin_l_pk_dtct
        002D06 000000 

0xFF66ED	$M.system_config.data.dac_l_pk_dtct
        002D13 000000 

0xFF66EF	$M.system_config.data.sub_pk_dtct
        002D20 000000 

0xFF66F1	$current_dac_sampling_rate
        000000 

0xFF66F2	$current_tone_sampling_rate
        001F40 

0xFF66F3	$local_encoded_play_back
        000000 

0xFF66F4	$audio_if_mode
        000000 

0xFF66F5	$long_term_mismatch
        000000 

0xFF66F6	$inv_dac_fs
        14D555 

0xFF66F7	$latency_calc_current_warp
        002C87 

0xFF66F8	$codec_type
        FFFFFF 

0xFF66F9	$tmr_period_con_copy
        000000 

0xFF66FA	$rate_match_disable
        000000 

0xFF66FB	$mono_copy_struc_ptr
        FF662C 

0xFF66FC	$mono_stereo_mode
        000000 

0xFF66FD	$codec_level
        000000 

0xFF66FE	$M.av_audio_out_silence_insert.left_zero_samples
        000000 

0xFF66FF	$music_example.Version
        000001 

0xFF6700	$music_example.reinit
        000001 

0xFF6701	$music_example.sync_flag_ptr
        FF6739 

0xFF6702	$music_example.SystemVolume
        00000B 

0xFF6703	$music_example.ToneVolume
        000000 

0xFF6704	$music_example.RightTrimVolume
        000000 

0xFF6705	$M.music_example.LoadParams.paramoffset
        000000 

0xFF6706	$M.music_example.LoadParams.Last_PsKey
        000000 

0xFF6707	$usb_pause_period_count
        000000 

0xFF6708	$usb_pause_silence_insertion_time
        00C49C 

0xFF6709	$M.system_config.data.HalfValue
        400000 

0xFF670A	$M.system_config.data.headroom_mant
        200000 

0xFF670B	$sub_link_port
        000000 

0xFF670C	$left_port
        80000C 

0xFF670D	$M.Subwoofer.playback_time
        000000 

0xFF670E	$wall_clock_lsw
        000000 

0xFF670F	$sco_param_tesco
        000000 

0xFF6710	$sco_param_clock_lsw
        000000 

0xFF6711	$sco_param_from_air_size
        000000 

0xFF6712	$sco_param_from_air_time
        000000 

0xFF6713	$bass_timer_id
        000000 

0xFF6714	$sub_app_esco_func
        000000 

0xFF6715	$min_port_space
        0003E8 

0xFF6716	$max_late_write
        000000 

0xFF6717	$min_early_write
        FFEC78 

0xFF6718	$M.downsample_sub_to_1k2.mute_direction
        000001 

0xFF6719	$M.downsample_sub_to_1k2.mute_index
        000000 

0xFF671A	$esco_write_deadline
        000000 

0xFF671B	$time_before_fp
        000000 

0xFF671C	$M.create_sub_packet.packet_counter
        000001 

0xFF671D	$subwoofer.sco_offset
        000000 

0xFF671E	$warp_timer_id
        000000 

0xFF671F	$codec_packets_info_last_timer_time
        000000 

0xFF6720	$first_packet_received
        000000 

0xFF6721	$M.report_latency_to_vm.reported_latency
        000000 

0xFF6722	$M.configure_latency_reporting.report_period
        000000 

0xFF6723	$M.configure_latency_reporting.average_latency
        FFFFFF 

0xFF6724	$cbuffer.write_port_disconnect_address
        000000 

0xFF6725	$cbuffer.read_port_disconnect_address
        000000 

0xFF6726	$error.handler
        000000 

0xFF6727	$interrupt.block_count
        000000 

0xFF6728	$message.last_addr
        FFFFFF 

0xFF6729	$message.queue_write_ptr
        000000 

0xFF672A	$message.long_message_size
        000000 

0xFF672B	$pskey.request_in_progress
        000000 

0xFF672C	$timer.id
        000001 

0xFF672D	$wall_clock.last_addr
        FFFFFF 

0xFF672E	$cbops.amount_to_use
        000000 

0xFF672F	$M.cbops.av_copy.control_port
        000000 

0xFF6730	$M.cbops.av_copy.right_channel
        000000 

0xFF6731	$M.cbops.dac_av_copy.prev_port_mnt_space
        000000 

0xFF6732	$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter
        000000 

0xFF6733	$M.cbops.dac_av_copy.port_amount_written
        000000 

0xFF6734	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0xFF6735	$M.cbops.rate_adjustment_and_shift.main.chn_no
        000000 

0xFF6736	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0xFF6737	$M.cbops.iir_resamplev2.amount_used
        000000 

0xFF6738	$M.codec_av_decode.data_ptr
        000000 

0xFF6739	$frame_sync.sync_flag
        000000 

0xFF673A	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0xFF673B	$M.cmpd100.analysis.region
        000000 

0xFF673C	$M.cmpd100.applygain.lin_gain
        000000 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000003 00E000 000000 000000 
        000140 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000001 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000001 004000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000100 000000 
        000000 000000 000000 000000 
        000000 000401 000000 000140 
        000000 003B0B 001B85 002809 
        004000 00003B 000B1B 008528 
        000900 000001 000004 000100 
        000001 004000 00003B 006E6E 
        0084BC 00E040 000000 003B6E 
        006E84 00BCE0 000000 000100 
        000006 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000500 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000500 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 00000F 000000 000F00 
        000003 001000 000020 000000 
        000000 000000 000000 002000 
        000010 000000 002000 000065 
        003161 000000 000020 000000 
        000000 005000 00026A 007FFF 
        00FFF9 00B037 00FA05 0042FE 
        0056CC 00FF80 007110 000000 
        000800 000001 005555 0000CC 
        00CC42 000B8B 00030F 001042 
        000B8B 0000EC 00E962 00032E 
        00009E 00217C 00997B 000076 
        00AB08 000000 00F9B0 0037FA 
        000542 00FE56 00CCFF 008071 
        001000 000008 000000 000155 
        005500 00CCCC 003E48 005902 
        00D025 003E48 005900 00D9BA 
        005E42 007200 00914F 007B6F 
        000800 006D0B 000800 000000 
        000A5D 000002 005800 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x000138	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000174	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x0001A4	$sbc.loudness_offset_m4
0x0001A4	$sbc.loudness_offset
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x0001B4	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x0001D4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0001EE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 14496 of 32768 words used, 18272 words available in 1 blocks
  DM2_REGION: 14141 of 32768 words used, 18627 words available in 1 blocks
  flash.data16: 438 of 1048576 words used, 1048138 words available in 1 blocks
  flash.windowed_data16: 517 of 16777216 words used, 16776699 words available in 1 blocks
TOTAL: 29592 of 17891328 words used, 17861736 words available in 4 blocks

CODE:
  PM_REGION: 8657 of 11264 words used, 2607 words available in 1 blocks
  flash.code: 1197 of 16764928 words used, 16763731 words available in 1 blocks
TOTAL: 9854 of 16776192 words used, 16766338 words available in 2 blocks

