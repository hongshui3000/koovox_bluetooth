
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00046                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920006F                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        FD0000FF D15466D1        r3 = M[r2 + -39215];
0x00001F        01E00080                 rFlags = Null + 128;
0x000020        E420002F                 r0 = Null + 1;
0x000021        FD0000FF 0900685B        Null = Null + M[$interrupt.block_count];
0x000023        00200001                 if NE r0 = Null + Null;
0x000024        1920FE12                 M[0xfffe12] = r0 + Null;
0x000025        E005000F                 call r3;
0x000026        01E00000                 rFlags = Null + 0;
0x000027        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000028        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000029        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x00002A        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002B        85334000                 r1 = r1 OR 0x4000;
0x00002C        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002D        09302FBC                 r1 = Null + M[$interrupt.total_time];
0x00002E        2933006F                 r1 = r1 - M[$interrupt.start_time];
0x00002F        0933FE71                 r1 = r1 + M[0xfffe71];
0x000030        19302FBC                 M[$interrupt.total_time] = r1 + Null;
0x000031        F104000C                 popm <r0, r1>;
0x000032        1930FE93                 M[0xfffe93] = r1 + Null;
0x000033        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000034        F104001C                 popm <r0, r1, r2>;
0x000035        DC0E000F                 rti;

 <$flash.init_pm>
0x000036        FD0000FF 0920666A        r0 = Null + M[$flash.code.address];
0x000038        1920FE83                 M[0xfffe83] = r0 + Null;
0x000039        FD000004 85200000        r0 = Null OR 0x40000;
0x00003B        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003C        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003D        FD0000FF 09206672        r0 = Null + M[$flash.data24.address];
0x00003F        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x000040        01200002                 r0 = Null + 2;
0x000041        1920FE62                 M[0xfffe62] = r0 + Null;
0x000042        FD0000FF 0920666E        r0 = Null + M[$flash.data16.address];
0x000044        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000045        1900FE61                 M[0xfffe61] = Null + Null;
0x000046        DC0D000F                 rts;

 <$pre_main>
0x000047        E1F0FFEF                 call $flash.init_pm;
0x000048        DDF03169                 jump $main;

 <$cbops.rate_adjustment_and_shift.main>
0x000049        F3D00000                 push rLink;
0x00004A        D14A0000                 r2 = M[r8 + 0];
0x00004B        D058004F                 r3 = M[r6 + r2];
0x00004C        5040005F                 I4 = Null + r3;
0x00004D        D069004F                 r4 = M[r7 + r2];
0x00004E        50E0006F                 L4 = Null + r4;
0x00004F        D14A0001                 r2 = M[r8 + 1];
0x000050        D058004F                 r3 = M[r6 + r2];
0x000051        5050005F                 I5 = Null + r3;
0x000052        D069004F                 r4 = M[r7 + r2];
0x000053        50F0006F                 L5 = Null + r4;
0x000054        D14A0002                 r2 = M[r8 + 2];
0x000055        19402E54                 M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info] = r2 + Null;
0x000056        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x000057        D058004F                 r3 = M[r6 + r2];
0x000058        19502E55                 M[0x2e55] = r3 + Null;
0x000059        D069004F                 r4 = M[r7 + r2];
0x00005A        19602E56                 M[0x2e56] = r4 + Null;
0x00005B        D14A0003                 r2 = M[r8 + 3];
0x00005C        D058004F                 r3 = M[r6 + r2];
0x00005D        19502E58                 M[0x2e58] = r3 + Null;
0x00005E        D069004F                 r4 = M[r7 + r2];
0x00005F        19602E59                 M[0x2e59] = r4 + Null;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x000060        D19A0004                 r7 = M[r8 + 4];
0x000061        FD0000FF 199067BE        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = r7 + Null;
0x000063        D12A0006                 r0 = M[r8 + 6];
0x000064        5000002F                 I0 = Null + r0;
0x000065        0120000C                 r0 = Null + 12;
0x000066        D13A000B                 r1 = M[r8 + 11];
0x000067        00320000                 if EQ r1 = r0 + Null;
0x000068        50C0003F                 L0 = Null + r1;
0x000069        50D0003F                 L1 = Null + r1;
0x00006A        D12A0005                 r0 = M[r8 + 5];
0x00006B        99330015                 r1 = r1 * 21 (int);
0x00006C        8D33007F                 r1 = r1 LSHIFT -1;
0x00006D        5032003F                 I3 = r0 + r1;
0x00006E        D12A0008                 r0 = M[r8 + 8];
0x00006F        D062000F                 r4 = M[r0 + Null];
0x000070        D17A000C                 r5 = M[r8 + 12];
0x000071        E430002F                 r1 = Null + 1;
0x000072        2027006F                 r0 = r5 - r4;
0x000073        20200024                 if NEG r0 = Null - r0;
0x000074        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000076        21023127                 Null = r0 - 12583;
0x000077        00430004                 if NEG r2 = r1 + Null;
0x000078        21340026                 r1 = r2 - 38;
0x000079        20440035                 if POS r2 = r2 - r1;
0x00007A        2037006F                 r1 = r5 - r4;
0x00007B        2023004F                 r0 = r1 - r2;
0x00007C        20330025                 if POS r1 = r1 - r0;
0x00007D        0023004F                 r0 = r1 + r2;
0x00007E        20330024                 if NEG r1 = r1 - r0;
0x00007F        23730000                 r5 = r5 - r1;
0x000080        D57A000C                 M[r8 + 12] = r5;
0x000081        01300187                 r1 = Null + 391;
0x000082        01400199                 r2 = Null + 409;
0x000083        01500000                 r3 = Null + 0;
0x000084        D12A0009                 r0 = M[r8 + 9];
0x000085        E402003F                 Null = r0 - 1;
0x000086        00530000                 if EQ r3 = r1 + Null;
0x000087        21020002                 Null = r0 - 2;
0x000088        00540000                 if EQ r3 = r2 + Null;
0x000089        4420004F                 r0 = Null + I4;
0x00008A        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x00008C        21020580                 Null = r0 - 1408;
0x00008D        00500000                 if EQ r3 = Null + Null;
0x00008E        19502FCA                 M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x00008F        19C02FC9                 M[$M.cbops.rate_adjustment_and_shift.main.n_samples] = r10 + Null;
0x000090        FD0000FF 19C06868        M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x000092        FD0000FF 19006869        M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = Null + Null;
0x000094        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x000095        09202FCA                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x000096        E11000D5                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x000097        E1F0002D                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000098        509000CF                 M1 = Null + r10;
0x000099        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x00009A        FD0000FF 095A6869        r3 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x00009C        4430000F                 r1 = Null + I0;
0x00009D        D5350006                 M[r3 + 6] = r1;
0x00009E        09202FCA                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x00009F        E11000D7                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x0000A0        FD0000FF 09306869        r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0000A2        DD100011                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A3        09302E54                 r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info];
0x0000A4        DD40000F                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A5        D13A0007                 r1 = M[r8 + 7];
0x0000A6        5000003F                 I0 = Null + r1;
0x0000A7        09302E55                 r1 = Null + M[0x2e55];
0x0000A8        5040003F                 I4 = Null + r1;
0x0000A9        09302E56                 r1 = Null + M[0x2e56];
0x0000AA        50E0003F                 L4 = Null + r1;
0x0000AB        09302E58                 r1 = Null + M[0x2e58];
0x0000AC        5050003F                 I5 = Null + r1;
0x0000AD        09302E59                 r1 = Null + M[0x2e59];
0x0000AE        50F0003F                 L5 = Null + r1;
0x0000AF        E430002F                 r1 = Null + 1;
0x0000B0        FD0000FF 19306869        M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = r1 + Null;
0x0000B2        DDF0FFE3                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0000B3        D56A000D                 M[r8 + 13] = r4;
0x0000B4        6420009F                 r0 = Null - M1;
0x0000B5        D52A000E                 M[r8 + 14] = r0;
0x0000B6        51F00000                 L5 = Null + 0;
0x0000B7        51E00000                 L4 = Null + 0;
0x0000B8        51C00000                 L0 = Null + 0;
0x0000B9        51D00000                 L1 = Null + 0;
0x0000BA        4420007F                 r0 = Null + I7;
0x0000BB        19202FC3                 M[$cbops.amount_written] = r0 + Null;
0x0000BC        FD0000FF 09406862        r2 = Null + M[$cbops.amount_to_use];
0x0000BE        D13AFFFE                 r1 = M[r8 + -2];
0x0000BF        E403002F                 Null = r1 + 1;
0x0000C0        00420001                 if NE r2 = r0 + Null;
0x0000C1        FD0000FF 19406862        M[$cbops.amount_to_use] = r2 + Null;
0x0000C3        DDF01181                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x0000C4        D17A000C                 r5 = M[r8 + 12];
0x0000C5        FD0000FF 512067BF        I2 = Null + -38977;
0x0000C7        D16A000D                 r4 = M[r8 + 13];
0x0000C8        01800015                 r6 = Null + 21;
0x0000C9        70A0008F                 M2 = Null - r6;
0x0000CA        5080008F                 M0 = Null + r6;
0x0000CB        09C02FC9                 r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x0000CC        CC16008F                 rMAC = r4 * r6 (SS);
0x0000CD        09C02FC9                 r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x0000CE        51700000                 I7 = Null + 0;
0x0000CF        D12A000E                 r0 = M[r8 + 14];
0x0000D0        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x0000D1        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0000D2        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x0000D3        690C0024                 Null = L0 - 36;
0x0000D4        DD00003E                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x0000D5        E5F0003A                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x0000D6        8D510018                 r3 = rMAC LSHIFT 24;
0x0000D7        8D55007F                 r3 = r3 LSHIFT -1;
0x0000D8        8D410000                 r2 = rMAC LSHIFT 0;
0x0000D9        5863004F                 I6 = I3 + r2;
0x0000DA        6524FFEA                 r0 = -22 - r2;
0x0000DB        7092004F                 M1 = r0 - r2;
0x0000DC        5810000F                 I1 = I0 + Null;
0x0000DD        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DE        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DF        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000E0        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000E1        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000E2        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000E3        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E5        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E6        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E7        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E8        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E9        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x0000EA        79990002                 M1 = M1 - 2;
0x0000EB        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x0000EC        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x0000ED        71980001                 M1 = r6 - 1;
0x0000EE        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x0000EF        5863004F                 I6 = I3 + r2;
0x0000F0        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F1        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F2        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F3        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F4        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F5        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000F6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000FA        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000FB        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000FC        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x0000FD        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x0000FE        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x000100        01400000                 r2 = Null + 0;
0x000101        20312B4F                 r1 = rMAC - r2, r0 = M[I2,M3];
0x000102        93320000                 r1 = r1 ASHIFT r0;
0x000103        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x000104        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x000105        FD000080 01660000        r4 = r4 + -8388608;
0x000107        0007000F                 Null = r5 + Null;
0x000108        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x000109        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x00010A        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x00010B        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x00010C        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x00010D        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x00010E        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x00010F        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x000110        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x000111        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x000112        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x000113        8D510018                 r3 = rMAC LSHIFT 24;
0x000114        8D55007F                 r3 = r3 LSHIFT -1;
0x000115        8D410000                 r2 = rMAC LSHIFT 0;
0x000116        5863004F                 I6 = I3 + r2;
0x000117        6524FFEA                 r0 = -22 - r2;
0x000118        7092004F                 M1 = r0 - r2;
0x000119        5810000F                 I1 = I0 + Null;
0x00011A        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x00011B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000120        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000121        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000122        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000123        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000124        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000125        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000126        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000127        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000128        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000129        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00012A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00012B        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x00012C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000130        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000131        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000132        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000133        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000134        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000135        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000136        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000137        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000138        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000139        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013E        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x00013F        79990002                 M1 = M1 - 2;
0x000140        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x000141        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x000142        71980001                 M1 = r6 - 1;
0x000143        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x000144        5863004F                 I6 = I3 + r2;
0x000145        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x000146        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000147        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000148        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000149        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000150        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000151        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000152        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000153        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000154        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000155        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000156        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000157        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000158        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000159        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000160        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000161        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000162        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000163        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000164        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000165        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000166        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000167        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000168        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000169        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x00016A        DDF0FF93                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x00016B        4420005F                 r0 = Null + I5;
0x00016C        FD0000FF 192067C0        M[0xff67c0] = r0 + Null;
0x00016E        442000FF                 r0 = Null + L5;
0x00016F        FD0000FF 192067C1        M[0xff67c1] = r0 + Null;
0x000171        51F00000                 L5 = Null + 0;
0x000172        51500580                 I5 = Null + 1408;
0x000173        FD0000FF 190067BE        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = Null + Null;
0x000175        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x000176        FD0000FF 0940686A        r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x000178        51200580                 I2 = Null + 1408;
0x000179        44C0007F                 r10 = Null + I7;
0x00017A        FD0000FF 093067C0        r1 = Null + M[0xff67c0];
0x00017C        5050003F                 I5 = Null + r1;
0x00017D        FD0000FF 093067C1        r1 = Null + M[0xff67c1];
0x00017F        50F0003F                 L5 = Null + r1;
0x000180        D19A0004                 r7 = M[r8 + 4];
0x000181        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000183        6589FFE8                 r6 = -24 - r7;
0x000184        9087008F                 r6 = r5 ASHIFT r6;
0x000185        51A00011                 M2 = Null + 17;
0x000186        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x000187        01503555                 r3 = Null + 13653;
0x000188        FD0000FF 5160345F        I6 = Null + -52129;
0x00018A        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x00018B        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018C        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x00018D        9B450000                 r2 = r2 * r3 (int);
0x00018E        474A0000                 r2 = r2 + M2;
0x00018F        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000190        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000191        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x000192        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x000193        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x000194        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x000195        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000196        FD0000FF 1940686A        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x000198        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x000199        19602FCB                 M[$M.cbops.rate_adjustment_and_shift.main.temp_r4] = r4 + Null;
0x00019A        FD0000FF 092A6869        r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x00019C        FD0000FF 19803466        M[0xff3466] = r6 + Null;
0x00019E        D1220010                 r0 = M[r0 + 16];
0x00019F        511200A8                 I1 = r0 + 168;
0x0001A0        013200B0                 r1 = r0 + 176;
0x0001A1        FD0000FF 09006869        Null = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0001A3        50100031                 if NE I1 = Null + r1;
0x0001A4        51D00005                 L1 = Null + 5;
0x0001A5        FD0000FF 51603460        I6 = Null + -52128;
0x0001A7        5180FFFA                 M0 = Null + -6;
0x0001A8        01603555                 r4 = Null + 13653;
0x0001A9        FD0000FF 1980345F        M[0xff345f] = r6 + Null;
0x0001AB        95886000                 r6 = r6 * 0.75 (frac);
0x0001AC        E450003F                 r3 = Null - 1;
0x0001AD        2020009F                 r0 = Null - r7;
0x0001AE        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0001AF        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0001B0        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0001B1        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0001B2        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B3        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B4        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B5        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0001B6        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0001B7        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0001B8        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0001B9        474A0000                 r2 = r2 + M2;
0x0001BA        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0001BB        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0001BC        8031005F                 r1 = rMAC AND r3;
0x0001BD        90E3009F                 rMAC = r1 ASHIFT r7;
0x0001BE        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x0001BF        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x0001C0        FD0000FF 1940686A        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0001C2        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x0001C3        FD0000FF 092A6869        r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0001C5        4430001F                 r1 = Null + I1;
0x0001C6        81330007                 r1 = r1 AND 0x7;
0x0001C7        D5320010                 M[r0 + 16] = r1;
0x0001C8        58DC000F                 L1 = L0 + Null;
0x0001C9        09602FCB                 r4 = Null + M[$M.cbops.rate_adjustment_and_shift.main.temp_r4];
0x0001CA        DC0D000F                 rts;

 <$bass_management.initialize>
0x0001CB        23A00000                 r8 = r8 - Null;
0x0001CC        DD000008                 if EQ jump $M.bass_management.clear_buffer;
0x0001CD        D12A0001                 r0 = M[r8 + 1];
0x0001CE        5000002F                 I0 = Null + r0;
0x0001CF        D1CA0000                 r10 = M[r8 + 0];
0x0001D0        50C000CF                 L0 = Null + r10;
0x0001D1        01200000                 r0 = Null + 0;
0x0001D2        E5F00002                 do $M.bass_management.clear_buffer;
0x0001D3        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_buffer>
0x0001D4        D1A90007                 r8 = M[r7 + 7];
0x0001D5        FD000011 01402844        r2 = Null + 1124420;
0x0001D7        D129000B                 r0 = M[r7 + 11];
0x0001D8        D3200000                 r0 = M[r0 + Null];
0x0001D9        FD000019 0130BC66        r1 = Null + 1686630;
0x0001DB        21027D00                 Null = r0 - 32000;
0x0001DC        00430000                 if EQ r2 = r1 + Null;
0x0001DD        FD000012 0130ACB2        r1 = Null + 1223858;
0x0001DF        FD000000 2102AC44        Null = r0 - 44100;
0x0001E1        00430000                 if EQ r2 = r1 + Null;
0x0001E2        D16A0006                 r4 = M[r8 + 6];
0x0001E3        9166000D                 r4 = r4 ASHIFT 13;
0x0001E4        CC16004F                 rMAC = r4 * r2 (SS);
0x0001E5        D51A0007                 M[r8 + 7] = rMAC;
0x0001E6        51C00000                 L0 = Null + 0;
0x0001E7        DC0D000F                 rts;

 <$bass_management.zero_data>
0x0001E8        D1A90007                 r8 = M[r7 + 7];
0x0001E9        D12A0009                 r0 = M[r8 + 9];
0x0001EA        D13A0008                 r1 = M[r8 + 8];
0x0001EB        03330000                 r1 = r1 + r1;
0x0001EC        03230000                 r0 = r0 + r1;
0x0001ED        00C2002F                 r10 = r0 + r0;
0x0001EE        D1290008                 r0 = M[r7 + 8];
0x0001EF        5000002F                 I0 = Null + r0;
0x0001F0        51C00000                 L0 = Null + 0;
0x0001F1        01200000                 r0 = Null + 0;
0x0001F2        E5F00002                 do $M.bass_management.clear_data_memory;
0x0001F3        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_data_memory>
0x0001F4        DC0D000F                 rts;

 <$bass_management>
0x0001F5        F3D00000                 push rLink;
0x0001F6        D1290009                 r0 = M[r7 + 9];
0x0001F7        D3200000                 r0 = M[r0 + Null];
0x0001F8        D139000A                 r1 = M[r7 + 10];
0x0001F9        8002003F                 Null = r0 AND r1;
0x0001FA        DD1000D9                 if NE jump $M.bass_management.bypass;
0x0001FB        D1A90007                 r8 = M[r7 + 7];
0x0001FC        D1290000                 r0 = M[r7 + 0];
0x0001FD        E1F000EE                 call $M.bass_management.get_ptrs;
0x0001FE        00C5000F                 r10 = r3 + Null;
0x0001FF        D1290006                 r0 = M[r7 + 6];
0x000200        5020002F                 I2 = Null + r0;
0x000201        D1290004                 r0 = M[r7 + 4];
0x000202        DD000008                 if EQ jump $M.bass_management.clearBassBuffer;
0x000203        E1F000E8                 call $M.bass_management.get_ptrs;
0x000204        5000002F                 I0 = Null + r0;
0x000205        50C0003F                 L0 = Null + r1;
0x000206        E5F00003                 do $M.bass_management.inputLFEcopyLoop;
0x000207        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000208        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.inputLFEcopyLoop>
0x000209        DDF00004                 jump $M.bass_management.bassChannelReadyForMixingLR;

 <$M.bass_management.clearBassBuffer>
0x00020A        01200000                 r0 = Null + 0;
0x00020B        E5F00002                 do $M.bass_management.bassChannelReadyForMixingLR;
0x00020C        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.bassChannelReadyForMixingLR>
0x00020D        D1290000                 r0 = M[r7 + 0];
0x00020E        E1F000DD                 call $M.bass_management.get_ptrs;
0x00020F        5000002F                 I0 = Null + r0;
0x000210        50C0003F                 L0 = Null + r1;
0x000211        00C5000F                 r10 = r3 + Null;
0x000212        D1290001                 r0 = M[r7 + 1];
0x000213        E1F000D8                 call $M.bass_management.get_ptrs;
0x000214        5040002F                 I4 = Null + r0;
0x000215        50E0003F                 L4 = Null + r1;
0x000216        D1290006                 r0 = M[r7 + 6];
0x000217        5020002F                 I2 = Null + r0;
0x000218        D16A0001                 r4 = M[r8 + 1];
0x000219        D17A0003                 r5 = M[r8 + 3];
0x00021A        E5F00008                 do $M.bass_management.mixToBassBufferLoop;
0x00021B        03003141                 Null = Null + Null, r1 = M[I0,1], r2 = M[I4,1];
0x00021C        23112800                 rMAC = rMAC - rMAC, r0 = M[I2,0];
0x00021D        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00021E        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x00021F        AC14006F                 rMAC = rMAC + r2 * r4 (SS);
0x000220        91210002                 r0 = rMAC ASHIFT 2;
0x000221        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.mixToBassBufferLoop>
0x000222        E1F00094                 call $M.bass_management.copyLRinToLRout;
0x000223        D12A0000                 r0 = M[r8 + 0];
0x000224        81020001                 Null = r0 AND 0x1;
0x000225        DD000017                 if EQ jump $M.bass_management.dontFilterLeftRight;
0x000226        D1290002                 r0 = M[r7 + 2];
0x000227        E1F000C4                 call $M.bass_management.get_ptrs;
0x000228        D1690008                 r4 = M[r7 + 8];
0x000229        5040006F                 I4 = Null + r4;
0x00022A        51E00000                 L4 = Null + 0;
0x00022B        D16A0007                 r4 = M[r8 + 7];
0x00022C        018A000A                 r6 = r8 + 10;
0x00022D        5020008F                 I2 = Null + r6;
0x00022E        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.leftHPFloop>
0x00022F        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000230        E1F00051                 call $M.bass_management.HighPassFilter;
0x000231        E488003F                 r6 = r6 - 1;
0x000232        DD10FFFD                 if NE jump $M.bass_management.leftHPFloop;
0x000233        D1290003                 r0 = M[r7 + 3];
0x000234        E1F000B7                 call $M.bass_management.get_ptrs;
0x000235        018A000A                 r6 = r8 + 10;
0x000236        5020008F                 I2 = Null + r6;
0x000237        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.rightHPFloop>
0x000238        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000239        E1F00048                 call $M.bass_management.HighPassFilter;
0x00023A        E488003F                 r6 = r6 - 1;
0x00023B        DD10FFFD                 if NE jump $M.bass_management.rightHPFloop;

 <$M.bass_management.dontFilterLeftRight>
0x00023C        D12A0000                 r0 = M[r8 + 0];
0x00023D        81020002                 Null = r0 AND 0x2;
0x00023E        DD000015                 if EQ jump $M.bass_management.dontFilterBassChannel;
0x00023F        D1290000                 r0 = M[r7 + 0];
0x000240        E1F000AB                 call $M.bass_management.get_ptrs;
0x000241        D1290006                 r0 = M[r7 + 6];
0x000242        01300000                 r1 = Null + 0;
0x000243        D1690008                 r4 = M[r7 + 8];
0x000244        D17A0008                 r5 = M[r8 + 8];
0x000245        99770004                 r5 = r5 * 4 (int);
0x000246        03670000                 r4 = r4 + r5;
0x000247        5040006F                 I4 = Null + r4;
0x000248        51E00000                 L4 = Null + 0;
0x000249        D16A0007                 r4 = M[r8 + 7];
0x00024A        018A000A                 r6 = r8 + 10;
0x00024B        D17A0008                 r5 = M[r8 + 8];
0x00024C        0087008F                 r6 = r5 + r6;
0x00024D        5020008F                 I2 = Null + r6;
0x00024E        D18A0009                 r6 = M[r8 + 9];

 <$M.bass_management.subLPFloop>
0x00024F        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000250        E1F00050                 call $M.bass_management.LowPassFilter;
0x000251        E488003F                 r6 = r6 - 1;
0x000252        DD10FFFD                 if NE jump $M.bass_management.subLPFloop;

 <$M.bass_management.dontFilterBassChannel>
0x000253        D1290002                 r0 = M[r7 + 2];
0x000254        E1F00097                 call $M.bass_management.get_ptrs;
0x000255        5000002F                 I0 = Null + r0;
0x000256        50C0003F                 L0 = Null + r1;
0x000257        00C5000F                 r10 = r3 + Null;
0x000258        D1290003                 r0 = M[r7 + 3];
0x000259        E1F00092                 call $M.bass_management.get_ptrs;
0x00025A        5040002F                 I4 = Null + r0;
0x00025B        50E0003F                 L4 = Null + r1;
0x00025C        D1290006                 r0 = M[r7 + 6];
0x00025D        5020002F                 I2 = Null + r0;
0x00025E        D16A0002                 r4 = M[r8 + 2];
0x00025F        D17A0004                 r5 = M[r8 + 4];
0x000260        E5F0000B                 do $M.bass_management.mixBassBufferToLeftRightLoop;
0x000261        03004900                 Null = Null + Null, r2 = M[I2,1];
0x000262        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x000263        AC12006F                 rMAC = rMAC + r0 * r4 (SS);
0x000264        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x000265        91210002                 r0 = rMAC ASHIFT 2;
0x000266        23110030                 rMAC = rMAC - rMAC, r1 = M[I4,0];
0x000267        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000268        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x000269        91310002                 r1 = rMAC ASHIFT 2;
0x00026A        0300A1B1                 Null = Null + Null, M[I0,1] = r0, M[I4,1] = r1;

 <$M.bass_management.mixBassBufferToLeftRightLoop>
0x00026B        D1290006                 r0 = M[r7 + 6];
0x00026C        5020002F                 I2 = Null + r0;
0x00026D        D1290005                 r0 = M[r7 + 5];
0x00026E        E1F0007D                 call $M.bass_management.get_ptrs;
0x00026F        5010002F                 I1 = Null + r0;
0x000270        50D0003F                 L1 = Null + r1;
0x000271        47010000                 Null = Null + I1;
0x000272        DD00000A                 if EQ jump $M.bass_management.dontCopyBassToSub;
0x000273        D1290000                 r0 = M[r7 + 0];
0x000274        E1F00077                 call $M.bass_management.get_ptrs;
0x000275        00C5000F                 r10 = r3 + Null;
0x000276        D17A0005                 r5 = M[r8 + 5];
0x000277        E5F00005                 do $M.bass_management.dontCopyBassToSub;
0x000278        23112900                 rMAC = rMAC - rMAC, r0 = M[I2,1];
0x000279        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00027A        91210002                 r0 = rMAC ASHIFT 2;
0x00027B        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.dontCopyBassToSub>
0x00027C        51C00000                 L0 = Null + 0;
0x00027D        51D00000                 L1 = Null + 0;
0x00027E        51E00000                 L4 = Null + 0;
0x00027F        51F00000                 L5 = Null + 0;
0x000280        DDF00FC4                 jump $pop_rLink_and_rts;

 <$M.bass_management.HighPassFilter>
0x000281        F100102C                 pushm <r0, r1, r3, r10>;
0x000282        5000002F                 I0 = Null + r0;
0x000283        50C0003F                 L0 = Null + r1;
0x000284        00C5000F                 r10 = r3 + Null;
0x000285        CC16006F                 rMAC = r4 * r4 (SS);
0x000286        0031000F                 r1 = rMAC + Null;
0x000287        FD000020 01500000        r3 = Null + 2097152;
0x000289        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x00028B        BC13005F                 rMAC = rMAC - r1 * r3 (SS);
0x00028C        BC16007F                 rMAC = rMAC - r4 * r5 (SS);
0x00028D        0051000F                 r3 = rMAC + Null;
0x00028E        03000031                 Null = Null + Null, r1 = M[I4,1];
0x00028F        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x000290        E5F0000C                 do $M.bass_management.highPassFilterLoop;
0x000291        0014000F                 rMAC = r2 + Null;
0x000292        AF362000                 rMAC = rMAC + r1 * r4 (SS), r0 = M[I0,0];
0x000293        0041000F                 r2 = rMAC + Null;
0x000294        CC12005F                 rMAC = r0 * r3 (SS);
0x000295        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x000296        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x000297        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x000298        0021000F                 r0 = rMAC + Null;
0x000299        0013000F                 rMAC = r1 + Null;
0x00029A        AF26A100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r0;
0x00029B        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.highPassFilterLoop>
0x00029C        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x00029D        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x00029E        F104102C                 popm <r0, r1, r3, r10>;
0x00029F        DC0D000F                 rts;

 <$M.bass_management.LowPassFilter>
0x0002A0        F100102C                 pushm <r0, r1, r3, r10>;
0x0002A1        5000002F                 I0 = Null + r0;
0x0002A2        50C0003F                 L0 = Null + r1;
0x0002A3        00C5000F                 r10 = r3 + Null;
0x0002A4        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0002A5        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x0002A6        E5F0000C                 do $M.bass_management.lowPassFilterLoop;
0x0002A7        0014000F                 rMAC = r2 + Null;
0x0002A8        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x0002A9        0041000F                 r2 = rMAC + Null;
0x0002AA        03001000                 Null = Null + Null, rMAC = M[I0,0];
0x0002AB        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x0002AC        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0002AD        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0002AE        0021000F                 r0 = rMAC + Null;
0x0002AF        0013000F                 rMAC = r1 + Null;
0x0002B0        AF26C100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r2;
0x0002B1        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.lowPassFilterLoop>
0x0002B2        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0002B3        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x0002B4        F104102C                 popm <r0, r1, r3, r10>;
0x0002B5        DC0D000F                 rts;

 <$M.bass_management.copyLRinToLRout>
0x0002B6        F3D00000                 push rLink;
0x0002B7        D1290000                 r0 = M[r7 + 0];
0x0002B8        E1F00033                 call $M.bass_management.get_ptrs;
0x0002B9        5000002F                 I0 = Null + r0;
0x0002BA        50C0003F                 L0 = Null + r1;
0x0002BB        00C5000F                 r10 = r3 + Null;
0x0002BC        D1290001                 r0 = M[r7 + 1];
0x0002BD        E1F0002E                 call $M.bass_management.get_ptrs;
0x0002BE        5040002F                 I4 = Null + r0;
0x0002BF        50E0003F                 L4 = Null + r1;
0x0002C0        D1290002                 r0 = M[r7 + 2];
0x0002C1        005C000F                 r3 = r10 + Null;
0x0002C2        E1F00F80                 call $frmbuffer.set_frame_size;
0x0002C3        E1F00028                 call $M.bass_management.get_ptrs;
0x0002C4        5010002F                 I1 = Null + r0;
0x0002C5        50D0003F                 L1 = Null + r1;
0x0002C6        D1290003                 r0 = M[r7 + 3];
0x0002C7        005C000F                 r3 = r10 + Null;
0x0002C8        E1F00F7A                 call $frmbuffer.set_frame_size;
0x0002C9        E1F00022                 call $M.bass_management.get_ptrs;
0x0002CA        5050002F                 I5 = Null + r0;
0x0002CB        50F0003F                 L5 = Null + r1;
0x0002CC        D1290005                 r0 = M[r7 + 5];
0x0002CD        005C000F                 r3 = r10 + Null;
0x0002CE        E1F00F74                 call $frmbuffer.set_frame_size;
0x0002CF        E5F00003                 do $M.bass_management.copyLRinToLRoutLoop;
0x0002D0        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002D1        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.bass_management.copyLRinToLRoutLoop>
0x0002D2        DDF00F72                 jump $pop_rLink_and_rts;

 <$M.bass_management.bypass>
0x0002D3        E1F0FFE3                 call $M.bass_management.copyLRinToLRout;
0x0002D4        D1290005                 r0 = M[r7 + 5];
0x0002D5        DD000011                 if EQ jump $M.bass_management.bypassClearSubOutputLoop;
0x0002D6        E1F00015                 call $M.bass_management.get_ptrs;
0x0002D7        00C5000F                 r10 = r3 + Null;
0x0002D8        5010002F                 I1 = Null + r0;
0x0002D9        50D0003F                 L1 = Null + r1;
0x0002DA        D1290004                 r0 = M[r7 + 4];
0x0002DB        DD000008                 if EQ jump $M.bass_management.bypassClearSubOutput;
0x0002DC        E1F0000F                 call $M.bass_management.get_ptrs;
0x0002DD        5000002F                 I0 = Null + r0;
0x0002DE        50C0003F                 L0 = Null + r1;
0x0002DF        E5F00003                 do $M.bass_management.bypassLFEcopyLoop;
0x0002E0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0002E1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassLFEcopyLoop>
0x0002E2        DDF00004                 jump $M.bass_management.bypassClearSubOutputLoop;

 <$M.bass_management.bypassClearSubOutput>
0x0002E3        01200000                 r0 = Null + 0;
0x0002E4        E5F00002                 do $M.bass_management.bypassClearSubOutputLoop;
0x0002E5        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassClearSubOutputLoop>
0x0002E6        51C00000                 L0 = Null + 0;
0x0002E7        51D00000                 L1 = Null + 0;
0x0002E8        51E00000                 L4 = Null + 0;
0x0002E9        51F00000                 L5 = Null + 0;
0x0002EA        DDF00F5A                 jump $pop_rLink_and_rts;

 <$M.bass_management.get_ptrs>
0x0002EB        F3D00000                 push rLink;
0x0002EC        E1F00F2D                 call $frmbuffer.get_buffer;
0x0002ED        DDF00F57                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x0002EE        F3D00000                 push rLink;
0x0002EF        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x0002F1        21020005                 Null = r0 - 5;
0x0002F2        DD000003                 if EQ jump $M.sra_tagtimes.usb_fix;
0x0002F3        21020008                 Null = r0 - 8;
0x0002F4        DD100025                 if NE jump $M.sra_tagtimes.calc_a2dp_fix_rate;

 <$M.sra_tagtimes.usb_fix>
0x0002F5        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x0002F7        E1F00EF2                 call $cbuffer.calc_amount_data;
0x0002F8        0062000F                 r4 = r0 + Null;
0x0002F9        0074000F                 r5 = r2 + Null;
0x0002FA        FD0000FF 09305B54        r1 = Null + M[0xff5b54];
0x0002FC        8D660008                 r4 = r4 LSHIFT 8;
0x0002FD        FD000001 CD1647AE        rMAC = r4 * 0.0099999904632568359 (SS);
0x0002FF        FD00007E AD13B852        rMAC = rMAC + r1 * 0.99000000953674316 (SS);
0x000301        FD0000FF 19105B54        M[0xff5b54] = rMAC + Null;
0x000303        8D770009                 r5 = r5 LSHIFT 9;
0x000304        D9070000                 Div = rMAC / r5;
0x000305        D9600001                 r4 = DivResult;
0x000306        FD000059 6566999A        r4 = 5872026 - r4;
0x000308        FD000019 2126999A        r0 = r4 - 1677722;
0x00030A        20660025                 if POS r4 = r4 - r0;
0x00030B        FD000019 0126999A        r0 = r4 + 1677722;
0x00030D        20660024                 if NEG r4 = r4 - r0;
0x00030E        FD000000 9526A3D7        r0 = r4 * 0.004999995231628418 (frac);
0x000310        FD0000FF 09305B50        r1 = Null + M[0xff5b50];
0x000312        2062003F                 r4 = r0 - r1;
0x000313        95660400                 r4 = r4 * 0.03125 (frac);
0x000314        03360000                 r1 = r1 + r4;
0x000315        FD0000FF 19305B50        M[0xff5b50] = r1 + Null;
0x000317        019020C5                 r7 = Null + 8389;
0x000318        DDF00069                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.calc_a2dp_fix_rate>
0x000319        FD0000FF 09205B3A        r0 = Null + M[0xff5b3a];
0x00031B        E1F00ECE                 call $cbuffer.calc_amount_data;
0x00031C        0072000F                 r5 = r0 + Null;

 <$M.sra_tagtimes.skip_port_data>
0x00031D        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x00031F        E1F00ECA                 call $cbuffer.calc_amount_data;
0x000320        03720000                 r5 = r5 + r0;
0x000321        FD0000FF 09775B4F        r5 = r5 + M[0xff5b4f];
0x000323        FD0000FF 19705B4F        M[0xff5b4f] = r5 + Null;
0x000325        FD0000FF 09605B4E        r4 = Null + M[0xff5b4e];
0x000327        E466002F                 r4 = r4 + 1;
0x000328        FD0000FF 19605B4E        M[0xff5b4e] = r4 + Null;
0x00032A        FD0000FF 09305B39        r1 = Null + M[$sra_struct];
0x00032C        95332000                 r1 = r1 * 0.25 (frac);
0x00032D        2006003F                 Null = r4 - r1;
0x00032E        DD40006A                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x00032F        019051EC                 r7 = Null + 20972;
0x000330        FD0000FF 09005B53        Null = Null + M[0xff5b53];
0x000332        DD000002                 if EQ jump $M.sra_tagtimes.no_long_term;
0x000333        019020C5                 r7 = Null + 8389;

 <$M.sra_tagtimes.no_long_term>
0x000334        FD0000FF 19005B4E        M[0xff5b4e] = Null + Null;
0x000336        FD0000FF 19005B4F        M[0xff5b4f] = Null + Null;
0x000338        FD0000FF 09805B50        r6 = Null + M[0xff5b50];
0x00033A        9128007E                 r0 = r6 ASHIFT -2;
0x00033B        FD0000FF 39825B50        M[0xff5b50] = r6 - r0;
0x00033D        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x00033F        D3200000                 r0 = M[r0 + Null];
0x000340        9B260000                 r0 = r0 * r4 (int);
0x000341        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000342        D9020000                 Div = rMAC / r0;
0x000343        D9300001                 r1 = DivResult;
0x000344        FD0000FF 09605B54        r4 = Null + M[0xff5b54];
0x000346        FD0000FF 19305B54        M[0xff5b54] = r1 + Null;
0x000348        2063006F                 r4 = r1 - r4;
0x000349        FD00007D 210370A4        Null = r1 - 8220836;
0x00034B        DD40000B                 if NEG jump $M.sra_tagtimes.not_full;
0x00034C        21281062                 r0 = r6 - 4194;
0x00034D        FD0000FF 09325B3D        r1 = r0 + M[0xff5b3d];
0x00034F        20220034                 if NEG r0 = r0 - r1;
0x000350        FD000001 0132EB85        r1 = r0 + 125829;
0x000352        20220034                 if NEG r0 = r0 - r1;
0x000353        FD0000FF 19205B50        M[0xff5b50] = r0 + Null;
0x000355        DDF0002C                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.not_full>
0x000356        FD00006C 2123CCCD        r0 = r1 - 7130317;
0x000358        DD400007                 if NEG jump $M.sra_tagtimes.check_for_empty;
0x000359        FD0000FE 9522147B        r0 = r0 * -0.014999985694885254 (frac);
0x00035B        FD000001 010647AE        Null = r4 + 83886;
0x00035D        00280004                 if NEG r0 = r6 + Null;
0x00035E        DDF0001B                 jump $M.sra_tagtimes.fix_rate;

 <$M.sra_tagtimes.check_for_empty>
0x00035F        FD00004C 2123CCCD        r0 = r1 - 5033165;
0x000361        DD500020                 if POS jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.handle_empty>
0x000362        FD000019 0142999A        r2 = r0 + 1677722;
0x000364        20220044                 if NEG r0 = r0 - r2;
0x000365        FD0000FB 9522851F        r0 = r0 * -0.034999966621398926 (frac);
0x000367        FD000006 21066666        Null = r4 - 419430;
0x000369        00280005                 if POS r0 = r6 + Null;
0x00036A        FD000002 01468F5C        r2 = r4 + 167772;
0x00036C        DD50000A                 if POS jump $M.sra_tagtimes.no_extra;
0x00036D        FD000006 01546666        r3 = r2 + 419430;
0x00036F        20440055                 if POS r2 = r2 - r3;
0x000370        FD0000FF 9544BE77        r2 = r2 * -0.001999974250793457 (frac);
0x000372        03480000                 r2 = r2 + r6;
0x000373        2004002F                 Null = r2 - r0;
0x000374        00240005                 if POS r0 = r2 + Null;
0x000375        03240000                 r0 = r0 + r2;

 <$M.sra_tagtimes.no_extra>
0x000376        FD000019 2103999A        Null = r1 - 1677722;
0x000378        00280004                 if NEG r0 = r6 + Null;

 <$M.sra_tagtimes.fix_rate>
0x000379        0038009F                 r1 = r6 + r7;
0x00037A        2002003F                 Null = r0 - r1;
0x00037B        00230005                 if POS r0 = r1 + Null;
0x00037C        2038009F                 r1 = r6 - r7;
0x00037D        2002003F                 Null = r0 - r1;
0x00037E        00230004                 if NEG r0 = r1 + Null;
0x00037F        FD0000FF 19205B50        M[0xff5b50] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x000381        FD0000FF 09205B51        r0 = Null + M[0xff5b51];
0x000383        FD0000FF 09225B50        r0 = r0 + M[0xff5b50];
0x000385        FD0000FF 29325B3D        r1 = r0 - M[0xff5b3d];
0x000387        20220035                 if POS r0 = r0 - r1;
0x000388        FD0000FF 09325B3D        r1 = r0 + M[0xff5b3d];
0x00038A        20220034                 if NEG r0 = r0 - r1;
0x00038B        FD000001 0132EB85        r1 = r0 + 125829;
0x00038D        20220034                 if NEG r0 = r0 - r1;
0x00038E        FD0000FF 09805B4A        r6 = Null + M[0xff5b4a];
0x000390        0038009F                 r1 = r6 + r7;
0x000391        2002003F                 Null = r0 - r1;
0x000392        00230005                 if POS r0 = r1 + Null;
0x000393        2038009F                 r1 = r6 - r7;
0x000394        2002003F                 Null = r0 - r1;
0x000395        00230004                 if NEG r0 = r1 + Null;
0x000396        FD0000FF 19205B4A        M[0xff5b4a] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x000398        FD0000FF 09205B3A        r0 = Null + M[0xff5b3a];
0x00039A        E1F00E4F                 call $cbuffer.calc_amount_data;
0x00039B        0052000F                 r3 = r0 + Null;
0x00039C        FD0000FF 09205B40        r0 = Null + M[0xff5b40];
0x00039E        E422002F                 r0 = r0 + 1;
0x00039F        0005000F                 Null = r3 + Null;
0x0003A0        00200001                 if NE r0 = Null + Null;
0x0003A1        FD0000FF 19205B40        M[0xff5b40] = r0 + Null;
0x0003A3        21020190                 Null = r0 - 400;
0x0003A4        DD400004                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x0003A5        FD0000FF 19005B50        M[0xff5b50] = Null + Null;
0x0003A7        DDF00031                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x0003A8        FD0000FF 09205B41        r0 = Null + M[0xff5b41];
0x0003AA        0130064A                 r1 = Null + 1610;
0x0003AB        E422002F                 r0 = r0 + 1;
0x0003AC        2002003F                 Null = r0 - r1;
0x0003AD        00230005                 if POS r0 = r1 + Null;
0x0003AE        FD0000FF 19205B41        M[0xff5b41] = r0 + Null;
0x0003B0        FD0000FF 09205B42        r0 = Null + M[0xff5b42];
0x0003B2        FD0000FF D12235BE        r0 = M[r0 + -51778];
0x0003B4        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x0003B5        FD0000FF 09205B41        r0 = Null + M[0xff5b41];
0x0003B7        21020640                 Null = r0 - 1600;
0x0003B8        DD500002                 if POS jump $M.sra_tagtimes.start;
0x0003B9        DDF0001E                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x0003BA        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x0003BC        E1F00E58                 call $cbuffer.get_write_address_and_size;
0x0003BD        FD0000FF 19205B43        M[0xff5b43] = r0 + Null;
0x0003BF        E420002F                 r0 = Null + 1;
0x0003C0        FD0000FF 19205B42        M[0xff5b42] = r0 + Null;
0x0003C2        FD0000FF 19005B45        M[0xff5b45] = Null + Null;

 <$M.sra_tagtimes.counting>
0x0003C4        FD0000FF 09205B45        r0 = Null + M[0xff5b45];
0x0003C6        E422002F                 r0 = r0 + 1;
0x0003C7        FD0000FF 19205B45        M[0xff5b45] = r0 + Null;
0x0003C9        E422003F                 r0 = r0 - 1;
0x0003CA        FD0000FF 29025B39        Null = r0 - M[$sra_struct];
0x0003CC        DD40000B                 if NEG jump $M.sra_tagtimes.end;
0x0003CD        FD0000FF 09205B46        r0 = Null + M[0xff5b46];
0x0003CF        21020002                 Null = r0 - 2;
0x0003D0        DD100008                 if NE jump $reset_sra;
0x0003D1        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x0003D3        E1F00E41                 call $cbuffer.get_write_address_and_size;
0x0003D4        FD0000FF 19205B44        M[0xff5b44] = r0 + Null;
0x0003D6        DDF0FFDF                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x0003D7        DDF00E6D                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x0003D8        FD0000FF 19005B41        M[0xff5b41] = Null + Null;
0x0003DA        FD0000FF 19005B46        M[0xff5b46] = Null + Null;
0x0003DC        FD0000FF 19005B44        M[0xff5b44] = Null + Null;
0x0003DE        FD0000FF 19005B43        M[0xff5b43] = Null + Null;
0x0003E0        FD0000FF 19005B42        M[0xff5b42] = Null + Null;
0x0003E2        DDF00E62                 jump $pop_rLink_and_rts;

 <$cbops.auto_upsample_and_mix.main>
0x0003E3        F3D00000                 push rLink;
0x0003E4        FD000000 0150BB80        r3 = Null + 48000;
0x0003E6        01601F40                 r4 = Null + 8000;
0x0003E7        D13A0006                 r1 = M[r8 + 6];
0x0003E8        D0330001                 if NE r1 = M[r1 + Null];
0x0003E9        00360000                 if EQ r1 = r4 + Null;
0x0003EA        D14A0004                 r2 = M[r8 + 4];
0x0003EB        D0440001                 if NE r2 = M[r2 + Null];
0x0003EC        00450000                 if EQ r2 = r3 + Null;
0x0003ED        D12A000B                 r0 = M[r8 + 11];
0x0003EE        2002003F                 Null = r0 - r1;
0x0003EF        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x0003F0        D12A000A                 r0 = M[r8 + 10];
0x0003F1        2002004F                 Null = r0 - r2;
0x0003F2        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x0003F3        D53A000B                 M[r8 + 11] = r1;
0x0003F4        D54A000A                 M[r8 + 10] = r2;
0x0003F5        D50A000C                 M[r8 + 12] = Null;
0x0003F6        FD00007F 0120FFFF        r0 = Null + 8388607;
0x0003F8        D52A0009                 M[r8 + 9] = r0;
0x0003F9        E460002F                 r4 = Null + 1;
0x0003FA        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x0003FC        2004002F                 Null = r2 - r0;
0x0003FD        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x0003FE        01600002                 r4 = Null + 2;
0x0003FF        E450002F                 r3 = Null + 1;
0x000400        2003004F                 Null = r1 - r2;
0x000401        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000402        00500004                 if NEG r3 = Null + Null;
0x000403        2033004C                 if GT r1 = r1 - r2;
0x000404        D55A000C                 M[r8 + 12] = r3;
0x000405        0013000F                 rMAC = r1 + Null;
0x000406        91340001                 r1 = r2 ASHIFT 1;
0x000407        D9030000                 Div = rMAC / r1;
0x000408        D9200001                 r0 = DivResult;
0x000409        D9300002                 r1 = DivRemainder;
0x00040A        E450002F                 r3 = Null + 1;
0x00040B        2003004F                 Null = r1 - r2;
0x00040C        00220055                 if POS r0 = r0 + r3;
0x00040D        D52A0009                 M[r8 + 9] = r0;
0x00040E        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x00040F        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x000410        D12A0002                 r0 = M[r8 + 2];
0x000411        E1F00DD8                 call $cbuffer.calc_amount_data;
0x000412        D13A0009                 r1 = M[r8 + 9];
0x000413        D15A000C                 r3 = M[r8 + 12];
0x000414        9B5C0000                 r3 = r3 * r10 (int);
0x000415        973C0000                 r1 = r1 * r10 (frac);
0x000416        E433002F                 r1 = r1 + 1;
0x000417        03350000                 r1 = r1 + r3;
0x000418        D14A0010                 r2 = M[r8 + 16];
0x000419        E444002F                 r2 = r2 + 1;
0x00041A        D16A000F                 r4 = M[r8 + 15];
0x00041B        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x00041C        0002000F                 Null = r0 + Null;
0x00041D        00400001                 if NE r2 = Null + Null;
0x00041E        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x00041F        2002003F                 Null = r0 - r1;
0x000420        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x000421        0026000F                 r0 = r4 + Null;
0x000422        E450002F                 r3 = Null + 1;
0x000423        21040003                 Null = r2 - 3;
0x000424        88660055                 if POS r4 = r4 XOR r3;
0x000425        FD00007F 0130FFFF        r1 = Null + 8388607;
0x000427        D15A000E                 r3 = M[r8 + 14];
0x000428        2006002F                 Null = r4 - r0;
0x000429        00530001                 if NE r3 = r1 + Null;
0x00042A        D54A0010                 M[r8 + 16] = r2;
0x00042B        D55A000E                 M[r8 + 14] = r3;
0x00042C        D56A000F                 M[r8 + 15] = r4;
0x00042D        8406005F                 Null = r4 OR r3;
0x00042E        DD000E16                 if EQ jump $pop_rLink_and_rts;
0x00042F        D12A0002                 r0 = M[r8 + 2];
0x000430        E1F00DDF                 call $cbuffer.get_read_address_and_size;
0x000431        5000002F                 I0 = Null + r0;
0x000432        50C0003F                 L0 = Null + r1;
0x000433        51D0000C                 L1 = Null + 12;
0x000434        D12A0005                 r0 = M[r8 + 5];
0x000435        5010002F                 I1 = Null + r0;
0x000436        D12A0000                 r0 = M[r8 + 0];
0x000437        D038002F                 r1 = M[r6 + r0];
0x000438        5040003F                 I4 = Null + r1;
0x000439        D039002F                 r1 = M[r7 + r0];
0x00043A        50E0003F                 L4 = Null + r1;
0x00043B        51502FCC                 I5 = Null + 12236;
0x00043C        51F00001                 L5 = Null + 1;
0x00043D        D12A0001                 r0 = M[r8 + 1];
0x00043E        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_cahnnel;
0x00043F        D038002F                 r1 = M[r6 + r0];
0x000440        5050003F                 I5 = Null + r1;
0x000441        D039002F                 r1 = M[r7 + r0];
0x000442        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_cahnnel>
0x000443        D16A0008                 r4 = M[r8 + 8];
0x000444        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000446        D14A000E                 r2 = M[r8 + 14];
0x000447        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x000448        D10A000F                 Null = M[r8 + 15];
0x000449        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x00044A        FD00007F 0160FFFF        r4 = Null + 8388607;
0x00044C        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x00044D        23560000                 r3 = r3 - r4;
0x00044E        FD00007F 0180FFFF        r6 = Null + 8388607;
0x000450        FD000002 0170AAAB        r5 = Null + 174763;
0x000452        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x000453        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x000454        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x000455        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x000456        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x000457        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x000458        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x000459        D54A000E                 M[r8 + 14] = r2;
0x00045A        DDF00DEA                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x00045B        01400000                 r2 = Null + 0;
0x00045C        D54A000E                 M[r8 + 14] = r2;
0x00045D        DDF00DE7                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x00045E        D12A0011                 r0 = M[r8 + 17];
0x00045F        21020000                 Null = r0 - 0;
0x000460        DD000013                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x000461        21020002                 Null = r0 - 2;
0x000462        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x000463        009C000F                 r7 = r10 + Null;
0x000464        DDF00061                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x000465        D16A0007                 r4 = M[r8 + 7];
0x000466        D17A0008                 r5 = M[r8 + 8];
0x000467        009C000F                 r7 = r10 + Null;
0x000468        23442000                 r2 = r2 - r2, r0 = M[I0,0];
0x000469        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00046B        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x00046C        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x00046D        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x00046E        AF28C100                 rMAC = rMAC + r0 * r6 (SS), M[I0,1] = r2;
0x00046F        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x000470        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x000471        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x000472        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x000473        D17A0003                 r5 = M[r8 + 3];
0x000474        5137007E                 I3 = r5 + 126;
0x000475        D17A0009                 r5 = M[r8 + 9];
0x000476        D16A000D                 r4 = M[r8 + 13];
0x000477        51B00001                 M3 = Null + 1;
0x000478        01800015                 r6 = Null + 21;
0x000479        70A0008F                 M2 = Null - r6;
0x00047A        5080008F                 M0 = Null + r6;
0x00047B        01900000                 r7 = Null + 0;
0x00047C        D10A000C                 Null = M[r8 + 12];
0x00047D        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x00047E        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x00047F        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x000480        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x000481        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x000482        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x000483        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x000484        03670000                 r4 = r4 + r5;
0x000485        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x000486        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x000487        FD000080 21660000        r4 = r4 - -8388608;
0x000489        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x00048A        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x00048B        CC16008F                 rMAC = r4 * r6 (SS);
0x00048C        8D510018                 r3 = rMAC LSHIFT 24;
0x00048D        8D55007F                 r3 = r3 LSHIFT -1;
0x00048E        8D410000                 r2 = rMAC LSHIFT 0;
0x00048F        5863004F                 I6 = I3 + r2;
0x000490        6524FFEA                 r0 = -22 - r2;
0x000491        7092004F                 M1 = r0 - r2;
0x000492        5871000F                 I7 = I1 + Null;
0x000493        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000494        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000495        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000496        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000497        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000498        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000499        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00049F        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0004A0        79990002                 M1 = M1 - 2;
0x0004A1        474B0000                 r2 = r2 + M3;
0x0004A2        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0004A3        71980001                 M1 = r6 - 1;
0x0004A4        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0004A5        5863004F                 I6 = I3 + r2;
0x0004A6        0041000F                 r2 = rMAC + Null;
0x0004A7        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0004A8        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0004A9        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0004AA        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0004AB        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0004AC        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0004AD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004AE        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004AF        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004B0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004B1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004B2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0004B3        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0004B4        5817000F                 I1 = I7 + Null;
0x0004B5        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x0004B6        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0004B8        D14A0007                 r2 = M[r8 + 7];
0x0004B9        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x0004BA        D12A0008                 r0 = M[r8 + 8];
0x0004BB        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x0004BC        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0004BE        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x0004BF        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0004C1        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x0004C2        4420001F                 r0 = Null + I1;
0x0004C3        D52A0005                 M[r8 + 5] = r0;
0x0004C4        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x0004C5        D12A0002                 r0 = M[r8 + 2];
0x0004C6        E1F00D23                 call $cbuffer.calc_amount_data;
0x0004C7        2039002F                 r1 = r7 - r0;
0x0004C8        20990035                 if POS r7 = r7 - r1;
0x0004C9        D12A0002                 r0 = M[r8 + 2];
0x0004CA        E1F00D45                 call $cbuffer.get_read_address_and_size;
0x0004CB        5000002F                 I0 = Null + r0;
0x0004CC        50C0003F                 L0 = Null + r1;
0x0004CD        5080009F                 M0 = Null + r7;
0x0004CE        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0004CF        4430000F                 r1 = Null + I0;
0x0004D0        D12A0002                 r0 = M[r8 + 2];
0x0004D1        E1F00D4D                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x0004D2        51E00000                 L4 = Null + 0;
0x0004D3        51D00000                 L1 = Null + 0;
0x0004D4        51C00000                 L0 = Null + 0;
0x0004D5        51F00000                 L5 = Null + 0;
0x0004D6        DDF00D6E                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x0004D7        F3D00000                 push rLink;
0x0004D8        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x0004DA        21020005                 Null = r0 - 5;
0x0004DB        DD000005                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0004DC        21020008                 Null = r0 - 8;
0x0004DD        DD000003                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0004DE        09200482                 r0 = Null + M[0x482];
0x0004DF        DD00FEF9                 if EQ jump $reset_sra;

 <$M.sra_calcrate.skip_a2dp_sra_reset>
0x0004E0        FD0000FF 09205B46        r0 = Null + M[0xff5b46];
0x0004E2        D1222F3E                 r0 = M[r0 + 12094];
0x0004E3        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x0004E4        FD0000FF 09205B43        r0 = Null + M[0xff5b43];
0x0004E6        DD0000A8                 if EQ jump $M.sra_calcrate.end;
0x0004E7        E420002F                 r0 = Null + 1;
0x0004E8        FD0000FF 19205B46        M[0xff5b46] = r0 + Null;

 <$M.sra_calcrate.start>
0x0004EA        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x0004EC        E1F00D23                 call $cbuffer.get_read_address_and_size;
0x0004ED        FD0000FF 09305B47        r1 = Null + M[0xff5b47];
0x0004EF        FD0000FF 09405B43        r2 = Null + M[0xff5b43];
0x0004F1        E1F000A8                 call $M.sra_calcrate.is_it_within_range;
0x0004F2        0005000F                 Null = r3 + Null;
0x0004F3        DD00009B                 if EQ jump $M.sra_calcrate.end;
0x0004F4        FD0000FF 19005B43        M[0xff5b43] = Null + Null;
0x0004F6        FD0000FF 19005B49        M[0xff5b49] = Null + Null;
0x0004F8        01200002                 r0 = Null + 2;
0x0004F9        FD0000FF 19205B46        M[0xff5b46] = r0 + Null;
0x0004FB        DDF00093                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x0004FC        FD0000FF 09205B3C        r0 = Null + M[0xff5b3c];
0x0004FE        E1F00D16                 call $cbuffer.get_write_address_and_size;
0x0004FF        FD0000FF 29425B48        r2 = r0 - M[0xff5b48];
0x000501        00440034                 if NEG r2 = r2 + r1;
0x000502        FD0000FF 09345B49        r1 = r2 + M[0xff5b49];
0x000504        FD0000FF 19305B49        M[0xff5b49] = r1 + Null;
0x000506        FD0000FF 09405B44        r2 = Null + M[0xff5b44];
0x000508        DD000086                 if EQ jump $M.sra_calcrate.end;
0x000509        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x00050B        E1F00D04                 call $cbuffer.get_read_address_and_size;
0x00050C        FD0000FF 09305B47        r1 = Null + M[0xff5b47];
0x00050E        FD0000FF 09405B44        r2 = Null + M[0xff5b44];
0x000510        E1F00089                 call $M.sra_calcrate.is_it_within_range;
0x000511        0005000F                 Null = r3 + Null;
0x000512        DD00007C                 if EQ jump $M.sra_calcrate.end;
0x000513        FD0000FF 19005B44        M[0xff5b44] = Null + Null;
0x000515        01200000                 r0 = Null + 0;
0x000516        FD0000FF 19205B46        M[0xff5b46] = r0 + Null;
0x000518        FD0000FF 09405B3E        r2 = Null + M[0xff5b3e];
0x00051A        E450002F                 r3 = Null + 1;
0x00051B        FD0000FF 29345B49        r1 = r2 - M[0xff5b49];
0x00051D        20500054                 if NEG r3 = Null - r3;
0x00051E        9B350000                 r1 = r1 * r3 (int);
0x00051F        FD0000FF 09905B3D        r7 = Null + M[0xff5b3d];
0x000521        99990006                 r7 = r7 * 6 (int);
0x000522        97490000                 r2 = r2 * r7 (frac);
0x000523        2043004F                 r2 = r1 - r2;
0x000524        DD50FFC0                 if POS jump $M.sra_calcrate.idle;
0x000525        9B350000                 r1 = r1 * r3 (int);
0x000526        FD0000FF 09205B4C        r0 = Null + M[0xff5b4c];
0x000528        FD0000FF D5325B59        M[r0 + -42151] = r1;
0x00052A        E422002F                 r0 = r0 + 1;
0x00052B        8122001F                 r0 = r0 AND 0x1f;
0x00052C        FD0000FF 19205B4C        M[0xff5b4c] = r0 + Null;
0x00052E        DD100004                 if NE jump $M.sra_calcrate.init_phase_passed;
0x00052F        E440002F                 r2 = Null + 1;
0x000530        FD0000FF 19405B4D        M[0xff5b4d] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x000532        01300020                 r1 = Null + 32;
0x000533        FD0000FF 09005B4D        Null = Null + M[0xff5b4d];
0x000535        00230001                 if NE r0 = r1 + Null;
0x000536        FD0000FF 09005B53        Null = Null + M[0xff5b53];
0x000538        DD000003                 if EQ jump $M.sra_calcrate.calc_final_rate;
0x000539        81020001                 Null = r0 AND 0x1;
0x00053A        DD10FFAA                 if NE jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.calc_final_rate>
0x00053B        E4C2003F                 r10 = r0 - 1;
0x00053C        FD00007F 0150FFFF        r3 = Null + 8388607;
0x00053E        FD0000FF 51005B59        I0 = Null + -42151;
0x000540        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x000541        E5F00002                 do $M.sra_calcrate.acc_loop;
0x000542        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x000543        03340000                 r1 = r1 + r2;
0x000544        20500054                 if NEG r3 = Null - r3;
0x000545        97350000                 r1 = r1 * r3 (frac);
0x000546        01100000                 rMAC = Null + 0;
0x000547        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x000548        D9020000                 Div = rMAC / r0;
0x000549        D9300001                 r1 = DivResult;
0x00054A        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x00054B        FD0000FF 09405B3E        r2 = Null + M[0xff5b3e];
0x00054D        D9040000                 Div = rMAC / r2;
0x00054E        D9300001                 r1 = DivResult;
0x00054F        FD0000FF 29435B3D        r2 = r1 - M[0xff5b3d];
0x000551        20330045                 if POS r1 = r1 - r2;
0x000552        97350000                 r1 = r1 * r3 (frac);
0x000553        FD0000FF 19305B51        M[0xff5b51] = r1 + Null;
0x000555        8D82007F                 r6 = r0 LSHIFT -1;
0x000556        81920001                 r7 = r0 AND 0x1;
0x000557        21080006                 Null = r6 - 6;
0x000558        DD40FF8C                 if NEG jump $M.sra_calcrate.idle;
0x000559        FD0000FF 09605B4C        r4 = Null + M[0xff5b4c];
0x00055B        FD0000FF 29025B4C        Null = r0 - M[0xff5b4c];
0x00055D        00600000                 if EQ r4 = Null + Null;
0x00055E        03690000                 r4 = r4 + r7;
0x00055F        00C8000F                 r10 = r6 + Null;
0x000560        01300000                 r1 = Null + 0;
0x000561        E5F00006                 do $M.sra_calcrate.read_first_half_ents;
0x000562        FD0000FF D1565B59        r3 = M[r4 + -42151];
0x000564        03350000                 r1 = r1 + r3;
0x000565        E466002F                 r4 = r4 + 1;
0x000566        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_first_half_ents>
0x000567        00C8000F                 r10 = r6 + Null;
0x000568        01400000                 r2 = Null + 0;
0x000569        E5F00006                 do $M.sra_calcrate.read_second_half_ents;
0x00056A        FD0000FF D1565B59        r3 = M[r4 + -42151];
0x00056C        03450000                 r2 = r2 + r3;
0x00056D        E466002F                 r4 = r4 + 1;
0x00056E        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_second_half_ents>
0x00056F        2053004F                 r3 = r1 - r2;
0x000570        20500054                 if NEG r3 = Null - r3;
0x000571        91E5007F                 rMAC = r3 ASHIFT -1 (MI);
0x000572        FD0000FF 09205B3E        r0 = Null + M[0xff5b3e];
0x000574        D9020000                 Div = rMAC / r0;
0x000575        D9300001                 r1 = DivResult;
0x000576        99481A37                 r2 = r6 * 6711 (int);
0x000577        2003004F                 Null = r1 - r2;
0x000578        DD50FF6C                 if POS jump $M.sra_calcrate.idle;
0x000579        E420002F                 r0 = Null + 1;
0x00057A        FD0000FF 19205B53        M[0xff5b53] = r0 + Null;
0x00057C        FD0000FF 09205B51        r0 = Null + M[0xff5b51];
0x00057E        FD0000FF 29325B52        r1 = r0 - M[0xff5b52];
0x000580        20300034                 if NEG r1 = Null - r1;
0x000581        2103068E                 Null = r1 - 1678;
0x000582        DD40FF62                 if NEG jump $M.sra_calcrate.idle;
0x000583        FD0000FF 19205B52        M[0xff5b52] = r0 + Null;
0x000585        9122007A                 r0 = r0 ASHIFT -6;
0x000586        91220001                 r0 = r0 ASHIFT 1;
0x000587        85520001                 r3 = r0 OR 0x1;
0x000588        01600000                 r4 = Null + 0;
0x000589        01700000                 r5 = Null + 0;
0x00058A        01800000                 r6 = Null + 0;
0x00058B        01407070                 r2 = Null + 28784;
0x00058C        E1F00AA2                 call $message.send_short;
0x00058D        DDF0FF57                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x00058E        FD0000FF 09205B3B        r0 = Null + M[0xff5b3b];
0x000590        E1F00C7F                 call $cbuffer.get_read_address_and_size;
0x000591        FD0000FF 19205B47        M[0xff5b47] = r0 + Null;
0x000593        FD0000FF 09205B3C        r0 = Null + M[0xff5b3c];
0x000595        E1F00C7F                 call $cbuffer.get_write_address_and_size;
0x000596        FD0000FF 19205B48        M[0xff5b48] = r0 + Null;

 <$M.sra_calcrate.exit>
0x000598        DDF00CAC                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x000599        E450002F                 r3 = Null + 1;
0x00059A        2002003F                 Null = r0 - r1;
0x00059B        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x00059C        2004002F                 Null = r2 - r0;
0x00059D        00500005                 if POS r3 = Null + Null;
0x00059E        2004003F                 Null = r2 - r1;
0x00059F        00500004                 if NEG r3 = Null + Null;
0x0005A0        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x0005A1        2004003F                 Null = r2 - r1;
0x0005A2        DC0D0005                 if POS rts;
0x0005A3        2004002F                 Null = r2 - r0;
0x0005A4        00500005                 if POS r3 = Null + Null;
0x0005A5        DC0D000F                 rts;

 <$volume_and_limit.apply_volume>
0x0005A6        F3D00000                 push rLink;
0x0005A7        00A9000F                 r8 = r7 + Null;
0x0005A8        D12A0003                 r0 = M[r8 + 3];
0x0005A9        D3200000                 r0 = M[r0 + Null];
0x0005AA        01100200                 rMAC = Null + 512;
0x0005AB        D9020000                 Div = rMAC / r0;
0x0005AC        D1CA0002                 r10 = M[r8 + 2];
0x0005AD        DDD00C97                 if LE jump $pop_rLink_and_rts;
0x0005AE        018A000A                 r6 = r8 + 10;
0x0005AF        FD00007F 0140FFFF        r2 = Null + 8388607;
0x0005B1        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x0005B2        D1280000                 r0 = M[r6 + 0];
0x0005B3        D1520002                 r3 = M[r0 + 2];
0x0005B4        2004005F                 Null = r2 - r3;
0x0005B5        00450005                 if POS r2 = r3 + Null;
0x0005B6        D1280001                 r0 = M[r6 + 1];
0x0005B7        D1520002                 r3 = M[r0 + 2];
0x0005B8        2004005F                 Null = r2 - r3;
0x0005B9        00450005                 if POS r2 = r3 + Null;
0x0005BA        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x0005BB        00C4000F                 r10 = r2 + Null;
0x0005BC        DDD00C88                 if LE jump $pop_rLink_and_rts;
0x0005BD        0920FE93                 r0 = Null + M[0xfffe93];
0x0005BE        F3200000                 push r0;
0x0005BF        D9200001                 r0 = DivResult;
0x0005C0        CC12004F                 rMAC = r0 * r2 (SS);
0x0005C1        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x0005C2        F3C00000                 push r10;
0x0005C3        F3100000                 push rMAC;
0x0005C4        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x0005C5        9D710017                 r5 = rMAC * 23 (int) (sat);
0x0005C6        E420002F                 r0 = Null + 1;
0x0005C7        1920FE93                 M[0xfffe93] = r0 + Null;
0x0005C8        D1CA0002                 r10 = M[r8 + 2];
0x0005C9        018A000A                 r6 = r8 + 10;
0x0005CA        51A00034                 M2 = Null + 52;
0x0005CB        D15A0004                 r3 = M[r8 + 4];
0x0005CC        01600000                 r4 = Null + 0;
0x0005CD        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x0005CE        D1280002                 r0 = M[r6 + 2];
0x0005CF        CC15002F                 rMAC = r3 * r0 (SS);
0x0005D0        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0005D1        D1380003                 r1 = M[r6 + 3];
0x0005D2        2021003F                 r0 = rMAC - r1;
0x0005D3        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x0005D4        20200024                 if NEG r0 = Null - r0;
0x0005D5        9443007F                 r2 = r1 * r5 (frac);
0x0005D6        474A0000                 r2 = r2 + M2;
0x0005D7        E442005F                 r2 = MIN r0;
0x0005D8        2001003F                 Null = rMAC - r1;
0x0005D9        20400044                 if NEG r2 = Null - r2;
0x0005DA        03340000                 r1 = r1 + r2;
0x0005DB        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x0005DC        E463006F                 r4 = MAX r1;
0x0005DD        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x0005DE        1900FE93                 M[0xfffe93] = Null + Null;
0x0005DF        01500000                 r3 = Null + 0;
0x0005E0        D12A0000                 r0 = M[r8 + 0];
0x0005E1        D13A0001                 r1 = M[r8 + 1];
0x0005E2        8002003F                 Null = r0 AND r1;
0x0005E3        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x0005E4        FD000008 21060000        Null = r4 - 524288;
0x0005E6        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x0005E7        018A000A                 r6 = r8 + 10;
0x0005E8        D12A0002                 r0 = M[r8 + 2];
0x0005E9        5090002F                 M1 = Null + r0;
0x0005EA        01600000                 r4 = Null + 0;
0x0005EB        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x0005EC        D1380003                 r1 = M[r6 + 3];
0x0005ED        FD000008 21030000        Null = r1 - 524288;
0x0005EF        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x0005F0        F1C8FFFE                 r10 = M[SP + -0x2];
0x0005F1        D1280000                 r0 = M[r6 + 0];
0x0005F2        E1F00C27                 call $frmbuffer.get_buffer;
0x0005F3        5000002F                 I0 = Null + r0;
0x0005F4        50C0003F                 L0 = Null + r1;
0x0005F5        E4CC003F                 r10 = r10 - 1;
0x0005F6        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x0005F7        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x0005F8        E444004F                 r2 = ABS r2;
0x0005F9        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x0005FA        E444004F                 r2 = ABS r2;
0x0005FB        E474006F                 r5 = MAX r2;
0x0005FC        D1380003                 r1 = M[r6 + 3];
0x0005FD        97730000                 r5 = r5 * r1 (frac);
0x0005FE        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x0005FF        01880005                 r6 = r6 + 5;
0x000600        79990001                 M1 = M1 - 1;
0x000601        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x000602        51C00000                 L0 = Null + 0;
0x000603        01500000                 r3 = Null + 0;
0x000604        D14A0006                 r2 = M[r8 + 6];
0x000605        2006004F                 Null = r4 - r2;
0x000606        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000607        0016000F                 rMAC = r4 + Null;
0x000608        E1F00AD0                 call $math.log2_table;
0x000609        D15A0005                 r3 = M[r8 + 5];
0x00060A        D13A0007                 r1 = M[r8 + 7];
0x00060B        2025002F                 r0 = r3 - r0;
0x00060C        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x00060D        F128FFFF                 r0 = M[SP + -0x1];
0x00060E        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x000610        E1F00B0C                 call $math.pow2_table;
0x000611        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x000613        9432002F                 r1 = r0 * r0 (frac);
0x000614        97330000                 r1 = r1 * r1 (frac);
0x000615        9432003F                 r1 = r0 * r1 (frac);
0x000616        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x000618        D12A0008                 r0 = M[r8 + 8];
0x000619        2075002F                 r5 = r3 - r0;
0x00061A        00460005                 if POS r2 = r4 + Null;
0x00061B        97740000                 r5 = r5 * r2 (frac);
0x00061C        03270000                 r0 = r0 + r5;
0x00061D        00200005                 if POS r0 = Null + Null;
0x00061E        2042005F                 r2 = r0 - r3;
0x00061F        20400044                 if NEG r2 = Null - r2;
0x000620        21040054                 Null = r2 - 84;
0x000621        00250004                 if NEG r0 = r3 + Null;
0x000622        D52A0008                 M[r8 + 8] = r0;
0x000623        E1F00AF9                 call $math.pow2_table;
0x000624        D16A0009                 r4 = M[r8 + 9];
0x000625        D52A0009                 M[r8 + 9] = r0;
0x000626        018A000A                 r6 = r8 + 10;
0x000627        D12A0002                 r0 = M[r8 + 2];
0x000628        5090002F                 M1 = Null + r0;
0x000629        E420002F                 r0 = Null + 1;
0x00062A        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x00062B        D1280000                 r0 = M[r6 + 0];
0x00062C        E1F00BED                 call $frmbuffer.get_buffer;
0x00062D        5000002F                 I0 = Null + r0;
0x00062E        50C0003F                 L0 = Null + r1;
0x00062F        D1280001                 r0 = M[r6 + 1];
0x000630        E1F00BE9                 call $frmbuffer.get_buffer;
0x000631        5040002F                 I4 = Null + r0;
0x000632        50E0003F                 L4 = Null + r1;
0x000633        D1380003                 r1 = M[r6 + 3];
0x000634        D12A0009                 r0 = M[r8 + 9];
0x000635        9443002F                 r2 = r1 * r0 (frac);
0x000636        D1380004                 r1 = M[r6 + 4];
0x000637        23430000                 r2 = r2 - r1;
0x000638        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x000639        F1C8FFFE                 r10 = M[SP + -0x2];
0x00063A        D90C0000                 Div = rMAC / r10;
0x00063B        E4CC003F                 r10 = r10 - 1;
0x00063C        01500004                 r3 = Null + 4;
0x00063D        D9700001                 r5 = DivResult;
0x00063E        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x00063F        CC14003F                 rMAC = r2 * r1 (SS);
0x000640        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x000641        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x000642        03370000                 r1 = r1 + r5;
0x000643        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x000644        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x000645        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x000646        D5380004                 M[r6 + 4] = r1;
0x000647        01880005                 r6 = r6 + 5;
0x000648        79990001                 M1 = M1 - 1;
0x000649        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x00064A        51C00000                 L0 = Null + 0;
0x00064B        51E00000                 L4 = Null + 0;
0x00064C        F3240000                 pop r0;
0x00064D        F3240000                 pop r0;
0x00064E        F3240000                 pop r0;
0x00064F        1920FE93                 M[0xfffe93] = r0 + Null;
0x000650        DDF00BF4                 jump $pop_rLink_and_rts;

 <$frame_sync.usb_in_stereo_audio_copy>
0x000651        F3D00000                 push rLink;
0x000652        D50A0009                 M[r8 + 9] = Null;

 <$frame_sync.usb_in_stereo_audio_copy_retry>
0x000653        D12A0000                 r0 = M[r8 + 0];
0x000654        8182000F                 r6 = r0 AND 0xf;
0x000655        0068000F                 r4 = r6 + Null;
0x000656        01400062                 r2 = Null + 98;
0x000657        01500005                 r3 = Null + 5;
0x000658        65080007                 Null = 7 - r6;
0x000659        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.lower_port;
0x00065A        0068004F                 r4 = r6 + r2;
0x00065B        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_stereo_audio_copy.lower_port>
0x00065C        5148FE2B                 I4 = r6 + -469;
0x00065D        D13A0007                 r1 = M[r8 + 7];
0x00065E        FD0000FF D12367C2        r0 = M[r1 + -38974];
0x000660        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_stereo_audio_copy.idle>
0x000661        D50A0008                 M[r8 + 8] = Null;
0x000662        E420002F                 r0 = Null + 1;
0x000663        D13A0006                 r1 = M[r8 + 6];
0x000664        00230001                 if NE r0 = r1 + Null;
0x000665        D52A0006                 M[r8 + 6] = r0;
0x000666        D506FE7B                 M[r4 + -389] = Null;
0x000667        D12A0000                 r0 = M[r8 + 0];
0x000668        E1F00B81                 call $cbuffer.calc_amount_data;
0x000669        00C3000F                 r10 = r1 + Null;
0x00066A        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.empty_loop;
0x00066B        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.empty_loop>
0x00066C        0900FE33                 Null = Null + M[0xfffe33];
0x00066D        D12A0000                 r0 = M[r8 + 0];
0x00066E        E1F00B7B                 call $cbuffer.calc_amount_data;
0x00066F        0003000F                 Null = r1 + Null;
0x000670        DD10004E                 if NE jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000671        E420002F                 r0 = Null + 1;
0x000672        D52A0007                 M[r8 + 7] = r0;
0x000673        DDF0004B                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.syncing_a>
0x000674        D12A0000                 r0 = M[r8 + 0];
0x000675        E1F00B74                 call $cbuffer.calc_amount_data;
0x000676        D12A0003                 r0 = M[r8 + 3];
0x000677        21C20004                 r10 = r0 - 4;
0x000678        E422002F                 r0 = r0 + 1;
0x000679        2003002F                 Null = r1 - r0;
0x00067A        DD400044                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x00067B        D13A0005                 r1 = M[r8 + 5];
0x00067C        E433002F                 r1 = r1 + 1;
0x00067D        8133007F                 r1 = r1 AND 0x7f;
0x00067E        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00067F        D14A0007                 r2 = M[r8 + 7];
0x000680        01500002                 r3 = Null + 2;
0x000681        D55A0007                 M[r8 + 7] = r3;
0x000682        E404003F                 Null = r2 - 1;
0x000683        DD000014                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000684        2003002F                 Null = r1 - r0;
0x000685        DD000012                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000686        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000687        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000688        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000689        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00068A        2003002F                 Null = r1 - r0;
0x00068B        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.large_packet;
0x00068C        01200000                 r0 = Null + 0;
0x00068D        D52A0007                 M[r8 + 7] = r0;
0x00068E        DDF00030                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.large_packet>
0x00068F        D13A0006                 r1 = M[r8 + 6];
0x000690        21330002                 r1 = r1 - 2;
0x000691        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.skip_all_large;
0x000692        01300000                 r1 = Null + 0;
0x000693        01CC0004                 r10 = r10 + 4;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_all_large>
0x000694        D53A0008                 M[r8 + 8] = r1;
0x000695        01300003                 r1 = Null + 3;
0x000696        D53A0007                 M[r8 + 7] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_and_update>
0x000697        D52A0005                 M[r8 + 5] = r0;
0x000698        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.skip_loop;
0x000699        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_loop>
0x00069A        D12A0000                 r0 = M[r8 + 0];
0x00069B        4430004F                 r1 = Null + I4;
0x00069C        E1F00B82                 call $cbuffer.set_read_address;
0x00069D        DDF00021                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.synced>
0x00069E        D12A0001                 r0 = M[r8 + 1];
0x00069F        E1F00B3A                 call $cbuffer.calc_amount_space;
0x0006A0        0052000F                 r3 = r0 + Null;
0x0006A1        D12A0002                 r0 = M[r8 + 2];
0x0006A2        E1F00B37                 call $cbuffer.calc_amount_space;
0x0006A3        2005002F                 Null = r3 - r0;
0x0006A4        00520005                 if POS r3 = r0 + Null;
0x0006A5        D19A0003                 r7 = M[r8 + 3];
0x0006A6        9199007E                 r7 = r7 ASHIFT -2;
0x0006A7        2005009F                 Null = r3 - r7;
0x0006A8        DD400016                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0006A9        0900FE33                 Null = Null + M[0xfffe33];
0x0006AA        D12A0000                 r0 = M[r8 + 0];
0x0006AB        E1F00B3E                 call $cbuffer.calc_amount_data;
0x0006AC        01C0FFFC                 r10 = Null + -4;
0x0006AD        D15A0008                 r3 = M[r8 + 8];
0x0006AE        20CC00C0                 if EQ r10 = r10 - r10;
0x0006AF        D12A0003                 r0 = M[r8 + 3];
0x0006B0        032C0000                 r0 = r0 + r10;
0x0006B1        8DC2007E                 r10 = r0 LSHIFT -2;
0x0006B2        E422002F                 r0 = r0 + 1;
0x0006B3        2003002F                 Null = r1 - r0;
0x0006B4        DD40000A                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0006B5        D13A0006                 r1 = M[r8 + 6];
0x0006B6        E433003F                 r1 = r1 - 1;
0x0006B7        E425003F                 r0 = r3 - 1;
0x0006B8        00230004                 if NEG r0 = r1 + Null;
0x0006B9        D52A0008                 M[r8 + 8] = r0;
0x0006BA        E1F00007                 call $M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper;
0x0006BB        E420002F                 r0 = Null + 1;
0x0006BC        D52A0009                 M[r8 + 9] = r0;
0x0006BD        DDF0FF96                 jump $frame_sync.usb_in_stereo_audio_copy_retry;

 <$M.frame_sync.usb_in_stereo_audio_copy.exit>
0x0006BE        51C00000                 L0 = Null + 0;
0x0006BF        51F00000                 L5 = Null + 0;
0x0006C0        DDF00B84                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper>
0x0006C1        F3D00000                 push rLink;
0x0006C2        D13A0005                 r1 = M[r8 + 5];
0x0006C3        E433002F                 r1 = r1 + 1;
0x0006C4        8133007F                 r1 = r1 AND 0x7f;
0x0006C5        D506FE7B                 M[r4 + -389] = Null;
0x0006C6        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0006C7        D52A0005                 M[r8 + 5] = r0;
0x0006C8        2003002F                 Null = r1 - r0;
0x0006C9        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.copy_data;
0x0006CA        01200000                 r0 = Null + 0;
0x0006CB        D52A0007                 M[r8 + 7] = r0;
0x0006CC        DDF0001B                 jump $M.frame_sync.usb_in_stereo_audio_copy.lexit;

 <$M.frame_sync.usb_in_stereo_audio_copy.copy_data>
0x0006CD        E420002F                 r0 = Null + 1;
0x0006CE        D526FE7B                 M[r4 + -389] = r0;
0x0006CF        D12A0001                 r0 = M[r8 + 1];
0x0006D0        E1F00B44                 call $cbuffer.get_write_address_and_size;
0x0006D1        5000002F                 I0 = Null + r0;
0x0006D2        50C0003F                 L0 = Null + r1;
0x0006D3        D12A0002                 r0 = M[r8 + 2];
0x0006D4        E1F00B40                 call $cbuffer.get_write_address_and_size;
0x0006D5        5050002F                 I5 = Null + r0;
0x0006D6        50F0003F                 L5 = Null + r1;
0x0006D7        D15A0004                 r3 = M[r8 + 4];
0x0006D8        E5F00006                 do $M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop;
0x0006D9        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0006DA        93250000                 r0 = r0 ASHIFT r3;
0x0006DB        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0006DC        93350000                 r1 = r1 ASHIFT r3;
0x0006DD        0300A1B5                 Null = Null + Null, M[I0,1] = r0, M[I5,1] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop>
0x0006DE        D12A0000                 r0 = M[r8 + 0];
0x0006DF        4430004F                 r1 = Null + I4;
0x0006E0        E1F00B3E                 call $cbuffer.set_read_address;
0x0006E1        D12A0001                 r0 = M[r8 + 1];
0x0006E2        4430000F                 r1 = Null + I0;
0x0006E3        E1F00B3F                 call $cbuffer.set_write_address;
0x0006E4        D12A0002                 r0 = M[r8 + 2];
0x0006E5        4430005F                 r1 = Null + I5;
0x0006E6        E1F00B3C                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_stereo_audio_copy.lexit>
0x0006E7        DDF00B5D                 jump $pop_rLink_and_rts;

 <$stereo_3d_enhancement.initialize>
0x0006E8        F3D00000                 push rLink;
0x0006E9        D12A0004                 r0 = M[r8 + 4];
0x0006EA        E1F00B25                 call $cbuffer.get_read_address_and_size;
0x0006EB        5010002F                 I1 = Null + r0;
0x0006EC        50D0003F                 L1 = Null + r1;
0x0006ED        5000002F                 I0 = Null + r0;
0x0006EE        50C0003F                 L0 = Null + r1;
0x0006EF        D12A0005                 r0 = M[r8 + 5];
0x0006F0        E1F00B1F                 call $cbuffer.get_read_address_and_size;
0x0006F1        5040002F                 I4 = Null + r0;
0x0006F2        50E0003F                 L4 = Null + r1;
0x0006F3        5050002F                 I5 = Null + r0;
0x0006F4        50F0003F                 L5 = Null + r1;
0x0006F5        01C008A0                 r10 = Null + 2208;
0x0006F6        0020000F                 r0 = Null + Null;
0x0006F7        E5F00002                 do $M.stereo_3d_enhancement.loop_clear_buffers;
0x0006F8        0300A5A5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r0;

 <$M.stereo_3d_enhancement.loop_clear_buffers>
0x0006F9        D14A0007                 r2 = M[r8 + 7];
0x0006FA        5080004F                 M0 = Null + r2;
0x0006FB        02002030                 Null = Null + Null, r0 = M[I0,M0], r1 = M[I4,M0];
0x0006FC        D12A0004                 r0 = M[r8 + 4];
0x0006FD        4430000F                 r1 = Null + I0;
0x0006FE        E1F00B24                 call $cbuffer.set_write_address;
0x0006FF        D12A0005                 r0 = M[r8 + 5];
0x000700        4430004F                 r1 = Null + I4;
0x000701        E1F00B21                 call $cbuffer.set_write_address;
0x000702        51C00000                 L0 = Null + 0;
0x000703        51D00000                 L1 = Null + 0;
0x000704        51E00000                 L4 = Null + 0;
0x000705        51F00000                 L5 = Null + 0;
0x000706        DDF00B3E                 jump $pop_rLink_and_rts;
0x000707        DC0D000F                 rts;

 <$stereo_3d_enhancement>
0x000708        D12A0009                 r0 = M[r8 + 9];
0x000709        D13A000A                 r1 = M[r8 + 10];
0x00070A        009A000F                 r7 = r8 + Null;
0x00070B        83320000                 r1 = r1 AND r0;
0x00070C        DD100771                 if NE jump $M.audio_proc.stereo_copy.Process.func;
0x00070D        F3D00000                 push rLink;
0x00070E        D12A0000                 r0 = M[r8 + 0];
0x00070F        E1F00B0A                 call $frmbuffer.get_buffer;
0x000710        5000002F                 I0 = Null + r0;
0x000711        50C0003F                 L0 = Null + r1;
0x000712        D12A0001                 r0 = M[r8 + 1];
0x000713        E1F00B06                 call $frmbuffer.get_buffer;
0x000714        5040002F                 I4 = Null + r0;
0x000715        50E0003F                 L4 = Null + r1;
0x000716        00C5000F                 r10 = r3 + Null;
0x000717        D12A0004                 r0 = M[r8 + 4];
0x000718        E1F00AFC                 call $cbuffer.get_write_address_and_size;
0x000719        5010002F                 I1 = Null + r0;
0x00071A        50D0003F                 L1 = Null + r1;
0x00071B        D12A0005                 r0 = M[r8 + 5];
0x00071C        E1F00AF8                 call $cbuffer.get_write_address_and_size;
0x00071D        5050002F                 I5 = Null + r0;
0x00071E        50F0003F                 L5 = Null + r1;
0x00071F        007C000F                 r5 = r10 + Null;
0x000720        E5F00003                 do $M.stereo_3d_enhancement.loop_copy;
0x000721        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000722        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.stereo_3d_enhancement.loop_copy>
0x000723        D12A0004                 r0 = M[r8 + 4];
0x000724        4430001F                 r1 = Null + I1;
0x000725        E1F00AFD                 call $cbuffer.set_write_address;
0x000726        D12A0005                 r0 = M[r8 + 5];
0x000727        4430005F                 r1 = Null + I5;
0x000728        E1F00AFA                 call $cbuffer.set_write_address;
0x000729        51C00000                 L0 = Null + 0;
0x00072A        51E00000                 L4 = Null + 0;
0x00072B        51D00000                 L1 = Null + 0;
0x00072C        51F00000                 L5 = Null + 0;
0x00072D        E4C7003F                 r10 = r5 - 1;
0x00072E        D12A0007                 r0 = M[r8 + 7];
0x00072F        E430002F                 r1 = Null + 1;
0x000730        7083002F                 M0 = r1 - r0;
0x000731        5090002F                 M1 = Null + r0;
0x000732        50A0003F                 M2 = Null + r1;
0x000733        51B0FFF9                 M3 = Null + -7;
0x000734        D12A0006                 r0 = M[r8 + 6];
0x000735        5020002F                 I2 = Null + r0;
0x000736        D12A0004                 r0 = M[r8 + 4];
0x000737        E1F00AD8                 call $cbuffer.get_read_address_and_size;
0x000738        5010002F                 I1 = Null + r0;
0x000739        50D0003F                 L1 = Null + r1;
0x00073A        D12A0005                 r0 = M[r8 + 5];
0x00073B        E1F00AD4                 call $cbuffer.get_read_address_and_size;
0x00073C        5050002F                 I5 = Null + r0;
0x00073D        50F0003F                 L5 = Null + r1;
0x00073E        D12A0002                 r0 = M[r8 + 2];
0x00073F        0057000F                 r3 = r5 + Null;
0x000740        E1F00B02                 call $frmbuffer.set_frame_size;
0x000741        E1F00AD8                 call $frmbuffer.get_buffer;
0x000742        5000002F                 I0 = Null + r0;
0x000743        50C0003F                 L0 = Null + r1;
0x000744        D12A0003                 r0 = M[r8 + 3];
0x000745        0057000F                 r3 = r5 + Null;
0x000746        E1F00AFC                 call $frmbuffer.set_frame_size;
0x000747        E1F00AD2                 call $frmbuffer.get_buffer;
0x000748        50407A2F                 I4 = Null + r0, r5 = M[I2,M2];
0x000749        50E0553F                 L4 = Null + r1, r3 = M[I1,M1];
0x00074A        FD000080 01800000        r6 = Null + -8388608;
0x00074C        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x00074D        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x00074E        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x00074F        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x000750        AC127A7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M2];
0x000751        0062001F                 r4 = r0 + rMAC;
0x000752        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x000753        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x000754        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x000755        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x000756        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x000757        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x000758        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];
0x000759        E5F0000D                 do $M.stereo_3d_enhancement.loop_dsp;
0x00075A        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x00075B        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x00075C        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x00075D        AC12E27F                 rMAC = rMAC + r0 * r5 (SS), M[I0,M2] = r4;
0x00075E        00627A1F                 r4 = r0 + rMAC, r5 = M[I2,M2];
0x00075F        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x000760        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x000761        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x000762        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x000763        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x000764        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x000765        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];

 <$M.stereo_3d_enhancement.loop_dsp>
0x000766        50E0E20F                 L4 = Null + Null, M[I0,M2] = r4;
0x000767        7FCC3700                 L0 = L0 - L0, r1 = M[I1,-1];
0x000768        D12A0005                 r0 = M[r8 + 5];
0x000769        4430005F                 r1 = Null + I5;
0x00076A        E1F00AB4                 call $cbuffer.set_read_address;
0x00076B        D12A0004                 r0 = M[r8 + 4];
0x00076C        4430001F                 r1 = Null + I1;
0x00076D        E1F00AB1                 call $cbuffer.set_read_address;
0x00076E        51F00000                 L5 = Null + 0;
0x00076F        51D00000                 L1 = Null + 0;
0x000770        DDF00AD4                 jump $pop_rLink_and_rts;

 <$latency.calc_encoded_latency>
0x000771        F3D00000                 push rLink;
0x000772        D1290001                 r0 = M[r7 + 1];
0x000773        DD000AD1                 if EQ jump $pop_rLink_and_rts;
0x000774        D1290001                 r0 = M[r7 + 1];
0x000775        E1F00A64                 call $cbuffer.calc_amount_space;
0x000776        21020002                 Null = r0 - 2;
0x000777        DD50000D                 if POS jump $M.latency_measure.calc_encoded_latency.buffer_full_check_done;
0x000778        E1F00A79                 call $block_interrupts;
0x000779        D1290001                 r0 = M[r7 + 1];
0x00077A        E1F00A9A                 call $cbuffer.get_write_address_and_size;
0x00077B        50F0003F                 L5 = Null + r1;
0x00077C        5050002F                 I5 = Null + r0;
0x00077D        5180FFFC                 M0 = Null + -4;
0x00077E        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x00077F        4430005F                 r1 = Null + I5;
0x000780        D1290001                 r0 = M[r7 + 1];
0x000781        E1F00AA1                 call $cbuffer.set_write_address;
0x000782        51F00000                 L5 = Null + 0;
0x000783        E1F00A42                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.buffer_full_check_done>
0x000784        D1290003                 r0 = M[r7 + 3];
0x000785        D1490008                 r2 = M[r7 + 8];
0x000786        D1320002                 r1 = M[r0 + 2];
0x000787        2043004F                 r2 = r1 - r2;
0x000788        DD000ABC                 if EQ jump $pop_rLink_and_rts;
0x000789        D1290002                 r0 = M[r7 + 2];
0x00078A        D1520001                 r3 = M[r0 + 1];
0x00078B        D1290007                 r0 = M[r7 + 7];
0x00078C        2002005F                 Null = r0 - r3;
0x00078D        DD000AB7                 if EQ jump $pop_rLink_and_rts;
0x00078E        D1290001                 r0 = M[r7 + 1];
0x00078F        E1F00A5A                 call $cbuffer.calc_amount_data;
0x000790        91C2007F                 r10 = r0 ASHIFT -1;
0x000791        DD000049                 if EQ jump $M.latency_measure.calc_encoded_latency.end;
0x000792        212C0003                 r0 = r10 - 3;
0x000793        20CC0025                 if POS r10 = r10 - r0;
0x000794        D1290001                 r0 = M[r7 + 1];
0x000795        E1F00A7A                 call $cbuffer.get_read_address_and_size;
0x000796        5050002F                 I5 = Null + r0;
0x000797        50F0003F                 L5 = Null + r1;
0x000798        D1290002                 r0 = M[r7 + 2];
0x000799        D1220001                 r0 = M[r0 + 1];
0x00079A        D1390007                 r1 = M[r7 + 7];
0x00079B        E5F00006                 do $M.latency_measure.calc_encoded_latency.search_loop;
0x00079C        03000045                 Null = Null + Null, r2 = M[I5,1];
0x00079D        03000065                 Null = Null + Null, r4 = M[I5,1];
0x00079E        E1F00043                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x00079F        0005000F                 Null = r3 + Null;
0x0007A0        DD100003                 if NE jump $M.latency_measure.calc_encoded_latency.entry_found;

 <$M.latency_measure.calc_encoded_latency.search_loop>
0x0007A1        51F00000                 L5 = Null + 0;
0x0007A2        DDF00038                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.entry_found>
0x0007A3        4430005F                 r1 = Null + I5;
0x0007A4        D1290001                 r0 = M[r7 + 1];
0x0007A5        E1F00A79                 call $cbuffer.set_read_address;
0x0007A6        51F00000                 L5 = Null + 0;
0x0007A7        E1F00A4A                 call $block_interrupts;
0x0007A8        F3600000                 push r4;
0x0007A9        F3900000                 push r7;
0x0007AA        D1990000                 r7 = M[r7 + 0];
0x0007AB        E1F00460                 call $latency.calc_pcm_latency;
0x0007AC        F3940000                 pop r7;
0x0007AD        F3640000                 pop r4;
0x0007AE        0950FE71                 r3 = Null + M[0xfffe71];
0x0007AF        2065006F                 r4 = r3 - r4;
0x0007B0        20600064                 if NEG r4 = Null - r4;
0x0007B1        03680000                 r4 = r4 + r6;
0x0007B2        DD400027                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0007B3        D1290003                 r0 = M[r7 + 3];
0x0007B4        E1F00A60                 call $cbuffer.get_write_address_and_size;
0x0007B5        D1490008                 r2 = M[r7 + 8];
0x0007B6        23240000                 r0 = r0 - r2;
0x0007B7        00220034                 if NEG r0 = r0 + r1;
0x0007B8        D1390004                 r1 = M[r7 + 4];
0x0007B9        D3300000                 r1 = M[r1 + Null];
0x0007BA        D1490005                 r2 = M[r7 + 5];
0x0007BB        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0007BC        D3400000                 r2 = M[r2 + Null];
0x0007BD        DD000002                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0007BE        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_encoded_latency.no_warp>
0x0007BF        9453004F                 r3 = r1 * r2 (frac);
0x0007C0        9445004F                 r2 = r3 * r2 (frac);
0x0007C1        0053005F                 r3 = r1 + r3;
0x0007C2        0035004F                 r1 = r3 + r2;
0x0007C3        CC12003F                 rMAC = r0 * r1 (SS);
0x0007C4        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0007C5        8D310000                 r1 = rMAC LSHIFT 0;
0x0007C6        23630000                 r4 = r4 - r1;
0x0007C7        DD400012                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0007C8        D1C90006                 r10 = M[r7 + 6];
0x0007C9        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.min_done;
0x0007CA        212C0004                 r0 = r10 - 4;
0x0007CB        20CC0025                 if POS r10 = r10 - r0;
0x0007CC        E4CC003F                 r10 = r10 - 1;
0x0007CD        5159000A                 I5 = r7 + 10;
0x0007CE        03000035                 Null = Null + Null, r1 = M[I5,1];
0x0007CF        E5F00005                 do $M.latency_measure.calc_encoded_latency.loop_min;
0x0007D0        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0007D1        2002003F                 Null = r0 - r1;
0x0007D2        00320004                 if NEG r1 = r0 + Null;
0x0007D3        030000A6                 Null = Null + Null, M[I5,2] = r0;

 <$M.latency_measure.calc_encoded_latency.loop_min>
0x0007D4        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0007D5        030000E4                 Null = Null + Null, M[I5,0] = r4;
0x0007D6        2006003F                 Null = r4 - r1;
0x0007D7        00630005                 if POS r4 = r1 + Null;

 <$M.latency_measure.calc_encoded_latency.min_done>
0x0007D8        D5690009                 M[r7 + 9] = r4;

 <$M.latency_measure.calc_encoded_latency.end_calc>
0x0007D9        E1F009EC                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.end>
0x0007DA        D1290002                 r0 = M[r7 + 2];
0x0007DB        D1220001                 r0 = M[r0 + 1];
0x0007DC        D5290007                 M[r7 + 7] = r0;
0x0007DD        D1290003                 r0 = M[r7 + 3];
0x0007DE        D1220002                 r0 = M[r0 + 2];
0x0007DF        D5290008                 M[r7 + 8] = r0;
0x0007E0        DDF00A64                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_encoded_latency.is_address_within_range>
0x0007E1        E450002F                 r3 = Null + 1;
0x0007E2        2002003F                 Null = r0 - r1;
0x0007E3        DD400006                 if NEG jump $M.latency_measure.calc_encoded_latency.neg_part;

 <$M.latency_measure.calc_encoded_latency.pos_part>
0x0007E4        2004002F                 Null = r2 - r0;
0x0007E5        00500005                 if POS r3 = Null + Null;
0x0007E6        2004003F                 Null = r2 - r1;
0x0007E7        00500004                 if NEG r3 = Null + Null;
0x0007E8        DC0D000F                 rts;

 <$M.latency_measure.calc_encoded_latency.neg_part>
0x0007E9        2004003F                 Null = r2 - r1;
0x0007EA        DC0D0005                 if POS rts;
0x0007EB        2004002F                 Null = r2 - r0;
0x0007EC        00500005                 if POS r3 = Null + Null;
0x0007ED        DC0D000F                 rts;

 <$cmpd100.analysis>
0x0007EE        D12A0000                 r0 = M[r8 + 0];
0x0007EF        D13A0001                 r1 = M[r8 + 1];
0x0007F0        83320000                 r1 = r1 AND r0;
0x0007F1        DC0D0001                 if NE rts;
0x0007F2        F3D00000                 push rLink;
0x0007F3        D12A0002                 r0 = M[r8 + 2];
0x0007F4        E1F00A25                 call $frmbuffer.get_buffer;
0x0007F5        5000002F                 I0 = Null + r0;
0x0007F6        50C0003F                 L0 = Null + r1;
0x0007F7        D12A0003                 r0 = M[r8 + 3];
0x0007F8        E1F00A21                 call $frmbuffer.get_buffer;
0x0007F9        5040002F                 I4 = Null + r0;
0x0007FA        50E0003F                 L4 = Null + r1;
0x0007FB        00C5000F                 r10 = r3 + Null;
0x0007FC        01400000                 r2 = Null + 0;
0x0007FD        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x0007FE        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0007FF        2002000F                 Null = r0 - Null;
0x000800        20200024                 if NEG r0 = Null - r0;
0x000801        2003000F                 Null = r1 - Null;
0x000802        20300034                 if NEG r1 = Null - r1;
0x000803        2002003F                 Null = r0 - r1;
0x000804        00230004                 if NEG r0 = r1 + Null;
0x000805        2004002F                 Null = r2 - r0;
0x000806        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x000807        FD0000FF 1940686E        M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x000809        0014000F                 rMAC = r2 + Null;
0x00080A        E1F008CE                 call $math.log2_table;
0x00080B        19202FCF                 M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x00080C        D14A001D                 r2 = M[r8 + 29];
0x00080D        0042004F                 r2 = r0 + r2;
0x00080E        51C00000                 L0 = Null + 0;
0x00080F        51E00000                 L4 = Null + 0;
0x000810        513A0008                 I3 = r8 + 8;
0x000811        514A0012                 I4 = r8 + 18;
0x000812        51900001                 M1 = Null + 1;
0x000813        D15A000D                 r3 = M[r8 + 13];
0x000814        D16A000C                 r4 = M[r8 + 12];
0x000815        D17A000B                 r5 = M[r8 + 11];
0x000816        D18A000A                 r6 = M[r8 + 10];
0x000817        2024005F                 r0 = r2 - r3;
0x000818        DD40000E                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x000819        D13A0011                 r1 = M[r8 + 17];
0x00081A        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x00081B        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x00081C        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x00081D        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x00081E        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x00081F        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000820        510A001B                 I0 = r8 + 27;
0x000821        19102FD0                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000822        01300005                 r1 = Null + 5;
0x000823        FD0000FF 1930686F        M[$M.cmpd100.analysis.region] = r1 + Null;
0x000825        DDF0002F                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x000826        2024006F                 r0 = r2 - r4;
0x000827        DD40000D                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x000828        D13A0010                 r1 = M[r8 + 16];
0x000829        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x00082A        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x00082B        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x00082C        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x00082D        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x00082E        510A0019                 I0 = r8 + 25;
0x00082F        19102FD0                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000830        01300004                 r1 = Null + 4;
0x000831        FD0000FF 1930686F        M[$M.cmpd100.analysis.region] = r1 + Null;
0x000833        DDF00021                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x000834        2024007F                 r0 = r2 - r5;
0x000835        DD40000C                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x000836        D13A000F                 r1 = M[r8 + 15];
0x000837        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000838        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000839        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x00083A        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x00083B        510A0017                 I0 = r8 + 23;
0x00083C        19102FD0                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00083D        01300003                 r1 = Null + 3;
0x00083E        FD0000FF 1930686F        M[$M.cmpd100.analysis.region] = r1 + Null;
0x000840        DDF00014                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x000841        2024008F                 r0 = r2 - r6;
0x000842        DD40000C                 if NEG jump $M.cmpd100.analysis.gain_one;
0x000843        D13A000E                 r1 = M[r8 + 14];
0x000844        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x000845        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x000846        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000847        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000848        510A0015                 I0 = r8 + 21;
0x000849        19102FD0                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00084A        01300002                 r1 = Null + 2;
0x00084B        FD0000FF 1930686F        M[$M.cmpd100.analysis.region] = r1 + Null;
0x00084D        DDF00007                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x00084E        510A0017                 I0 = r8 + 23;
0x00084F        01100000                 rMAC = Null + 0;
0x000850        19102FD0                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000851        E430002F                 r1 = Null + 1;
0x000852        FD0000FF 1930686F        M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x000854        D16A0007                 r4 = M[r8 + 7];
0x000855        5040006F                 I4 = Null + r4;
0x000856        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x000857        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x000858        00540004                 if NEG r3 = r2 + Null;
0x000859        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x00085A        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x00085B        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x00085C        DDF009E8                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x00085D        F3D00000                 push rLink;
0x00085E        51900001                 M1 = Null + 1;
0x00085F        510A0001                 I0 = r8 + 1;
0x000860        01807FFF                 r6 = Null + 32767;
0x000861        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x000862        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000863        51102DB1                 I1 = Null + 11697;
0x000864        19A02FC2                 M[$cbops.struc_ptr] = r8 + Null;
0x000865        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x000866        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000867        E1F00982                 call $cbuffer.calc_amount_data;
0x000868        2002008F                 Null = r0 - r6;
0x000869        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x00086A        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x00086B        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x00086C        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x00086D        E1F0096C                 call $cbuffer.calc_amount_space;
0x00086E        2002009F                 Null = r0 - r7;
0x00086F        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x000870        0078000F                 r5 = r6 + Null;
0x000871        2007009F                 Null = r5 - r7;
0x000872        00790005                 if POS r5 = r7 + Null;
0x000873        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x000874        D12A0001                 r0 = M[r8 + 1];
0x000875        01AA0002                 r8 = r8 + 2;
0x000876        D1220001                 r0 = M[r0 + 1];
0x000877        E0020001                 if NE call r0;
0x000878        D1AAFFFE                 r8 = M[r8 + -2];
0x000879        E40A002F                 Null = r8 + 1;
0x00087A        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x00087B        21270200                 r0 = r5 - 512;
0x00087C        20770025                 if POS r5 = r5 - r0;
0x00087D        09A02FC2                 r8 = Null + M[$cbops.struc_ptr];
0x00087E        FD0000FF 19706862        M[$cbops.amount_to_use] = r5 + Null;
0x000880        DD000041                 if EQ jump $M.cbops.copy.done;
0x000881        19702FC3                 M[$cbops.amount_written] = r5 + Null;
0x000882        510A0001                 I0 = r8 + 1;
0x000883        FD0000FF 5140665A        I4 = Null + -39334;
0x000885        51102DA1                 I1 = Null + 11681;
0x000886        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000887        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000888        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x000889        E1F00986                 call $cbuffer.get_read_address_and_size;
0x00088A        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x00088B        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x00088C        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x00088D        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x00088E        E1F00986                 call $cbuffer.get_write_address_and_size;
0x00088F        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000890        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x000891        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x000892        FD0000FF 0180665A        r6 = Null + -39334;
0x000894        01902DA1                 r7 = Null + 11681;
0x000895        FD0000FF 09C06862        r10 = Null + M[$cbops.amount_to_use];
0x000897        D12A0001                 r0 = M[r8 + 1];
0x000898        01AA0002                 r8 = r8 + 2;
0x000899        D1220002                 r0 = M[r0 + 2];
0x00089A        E0020001                 if NE call r0;
0x00089B        D1AAFFFE                 r8 = M[r8 + -2];
0x00089C        E40A002F                 Null = r8 + 1;
0x00089D        DD10FFF5                 if NE jump $M.cbops.copy.operator_functions_loop;
0x00089E        09A02FC2                 r8 = Null + M[$cbops.struc_ptr];
0x00089F        511A0001                 I1 = r8 + 1;
0x0008A0        FD0000FF 5120665A        I2 = Null + -39334;
0x0008A2        51302DA1                 I3 = Null + 11681;
0x0008A3        51900001                 M1 = Null + 1;
0x0008A4        FD0000FF 09206862        r0 = Null + M[$cbops.amount_to_use];
0x0008A6        50A0002F                 M2 = Null + r0;
0x0008A7        09202FC3                 r0 = Null + M[$cbops.amount_written];
0x0008A8        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x0008A9        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x0008AA        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0008AB        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0008AC        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x0008AD        5000003F                 I0 = Null + r1;
0x0008AE        50C0004F                 L0 = Null + r2;
0x0008AF        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x0008B0        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x0008B1        E1F0096D                 call $cbuffer.set_read_address;
0x0008B2        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0008B3        79770001                 I7 = I7 - 1;
0x0008B4        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x0008B5        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x0008B6        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0008B7        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0008B8        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x0008B9        5000003F                 I0 = Null + r1;
0x0008BA        50C0004F                 L0 = Null + r2;
0x0008BB        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x0008BC        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x0008BD        E1F00965                 call $cbuffer.set_write_address;
0x0008BE        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0008BF        79770001                 I7 = I7 - 1;
0x0008C0        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x0008C1        DDF00983                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x0008C2        F3D00000                 push rLink;
0x0008C3        D12A0000                 r0 = M[r8 + 0];
0x0008C4        D038002F                 r1 = M[r6 + r0];
0x0008C5        5000003F                 I0 = Null + r1;
0x0008C6        D039002F                 r1 = M[r7 + r0];
0x0008C7        50C0003F                 L0 = Null + r1;
0x0008C8        D12A0001                 r0 = M[r8 + 1];
0x0008C9        D038002F                 r1 = M[r6 + r0];
0x0008CA        5040003F                 I4 = Null + r1;
0x0008CB        D039002F                 r1 = M[r7 + r0];
0x0008CC        50E0003F                 L4 = Null + r1;
0x0008CD        09402FC8                 r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x0008CE        D15A0003                 r3 = M[r8 + 3];
0x0008CF        FD00007F 0170FFFF        r5 = Null + 8388607;
0x0008D1        D1252F59                 r0 = M[r3 + 12121];
0x0008D2        D19A0002                 r7 = M[r8 + 2];
0x0008D3        6589FFE8                 r6 = -24 - r7;
0x0008D4        9087008F                 r6 = r5 ASHIFT r6;
0x0008D5        51900011                 M1 = Null + 17;
0x0008D6        01603555                 r4 = Null + 13653;
0x0008D7        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x0008D8        FD00007F 0150FFFF        r3 = Null + 8388607;
0x0008DA        9065009F                 r4 = r3 ASHIFT r7;
0x0008DB        E4CC003F                 r10 = r10 - 1;
0x0008DC        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008DD        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008DE        E416005F                 rMAC = MIN r4;
0x0008DF        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x0008E0        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x0008E1        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008E2        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x0008E3        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0008E4        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x0008E5        FD0000FF 5150345F        I5 = Null + -52129;
0x0008E7        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008E8        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008E9        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x0008EA        9B460000                 r2 = r2 * r4 (int);
0x0008EB        47490000                 r2 = r2 + M1;
0x0008EC        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008ED        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x0008EE        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x0008EF        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x0008F0        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x0008F1        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x0008F2        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x0008F3        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x0008F4        51D00005                 L1 = Null + 5;
0x0008F5        D12A0004                 r0 = M[r8 + 4];
0x0008F6        5010002F                 I1 = Null + r0;
0x0008F7        FD0000FF 51503459        I5 = Null + -52135;
0x0008F9        5180FFFA                 M0 = Null + -6;
0x0008FA        FD0000FF 1980345F        M[0xff345f] = r6 + Null;
0x0008FC        95886000                 r6 = r6 * 0.75 (frac);
0x0008FD        E450003F                 r3 = Null - 1;
0x0008FE        2020009F                 r0 = Null - r7;
0x0008FF        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x000900        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x000901        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x000902        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x000903        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000904        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000905        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000906        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x000907        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x000908        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x000909        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x00090A        47490000                 r2 = r2 + M1;
0x00090B        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x00090C        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x00090D        8031005F                 r1 = rMAC AND r3;
0x00090E        90E3009F                 rMAC = r1 ASHIFT r7;
0x00090F        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x000910        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x000911        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x000912        4420001F                 r0 = Null + I1;
0x000913        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000914        51C00000                 L0 = Null + 0;
0x000915        51E00000                 L4 = Null + 0;
0x000916        19402FC8                 M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000917        DDF0092D                 jump $pop_rLink_and_rts;

 <$message.received_service_routine>
0x000918        F3D00000                 push rLink;
0x000919        51800000                 M0 = Null + 0;
0x00091A        0920FE1D                 r0 = Null + M[0xfffe1d];
0x00091B        8132FFF0                 r1 = r0 AND 0xfff0;
0x00091C        8903FFF0                 Null = r1 XOR 0xfff0;
0x00091D        DD100023                 if NE jump $M.message.received_service_routine.non_long_message;
0x00091E        81020001                 Null = r0 AND 0x1;
0x00091F        DD000003                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000920        FD0000FF 1900685E        M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x000922        FD0000FF 0930685E        r1 = Null + M[$message.long_message_size];
0x000924        21030052                 Null = r1 - 82;
0x000925        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x000926        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000927        0940E006                 r2 = Null + M[0xffe006];
0x000928        FD0000FF D5435A07        M[r1 + -42489] = r2;
0x00092A        0940E007                 r2 = Null + M[0xffe007];
0x00092B        FD0000FF D5435A08        M[r1 + -42488] = r2;
0x00092D        0940E008                 r2 = Null + M[0xffe008];
0x00092E        FD0000FF D5435A09        M[r1 + -42487] = r2;
0x000930        0940E009                 r2 = Null + M[0xffe009];
0x000931        FD0000FF D5435A0A        M[r1 + -42486] = r2;
0x000933        01330004                 r1 = r1 + 4;
0x000934        FD0000FF 1930685E        M[$message.long_message_size] = r1 + Null;
0x000936        81020002                 Null = r0 AND 0x2;
0x000937        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x000938        0970E001                 r5 = Null + M[0xffe001];
0x000939        E477002F                 r5 = r5 + 1;
0x00093A        1970E001                 M[0xffe001] = r5 + Null;
0x00093B        DDF00909                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x00093C        FD0000FF 09205A07        r0 = Null + M[$message.long_message_data];
0x00093E        8122FFFF                 r0 = r0 AND 0xffff;
0x00093F        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000940        01C00032                 r10 = Null + 50;
0x000941        FD0000FF 0930685C        r1 = Null + M[$message.last_addr];
0x000943        E5F00009                 do $M.message.received_service_routine.loop;
0x000944        E403002F                 Null = r1 + 1;
0x000945        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000946        D1430003                 r2 = M[r1 + 3];
0x000947        8052004F                 r3 = r0 AND r2;
0x000948        D1430001                 r2 = M[r1 + 1];
0x000949        2005004F                 Null = r3 - r2;
0x00094A        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x00094B        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x00094C        E1F02BB2                 call $error;

 <$M.message.received_service_routine.no_handler>
0x00094D        0970E001                 r5 = Null + M[0xffe001];
0x00094E        E477002F                 r5 = r5 + 1;
0x00094F        1970E001                 M[0xffe001] = r5 + Null;
0x000950        DDF008F4                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000951        D1D30002                 rLink = M[r1 + 2];
0x000952        47080000                 Null = Null + M0;
0x000953        DD000008                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000954        0032000F                 r1 = r0 + Null;
0x000955        FD0000FF 09405A08        r2 = Null + M[0xff5a08];
0x000957        FD0000FF 01505A09        r3 = Null + -42487;
0x000959        0120FFFE                 r0 = Null + -2;
0x00095A        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x00095B        0930E006                 r1 = Null + M[0xffe006];
0x00095C        0940E007                 r2 = Null + M[0xffe007];
0x00095D        0950E008                 r3 = Null + M[0xffe008];
0x00095E        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x00095F        0970E001                 r5 = Null + M[0xffe001];
0x000960        E477002F                 r5 = r5 + 1;
0x000961        1970E001                 M[0xffe001] = r5 + Null;
0x000962        E00D000F                 call rLink;
0x000963        DDF008E1                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x000964        F3D00000                 push rLink;
0x000965        5F380000                 I3 = I3 + M0;
0x000966        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000967        F3E20000                 push FP;
0x000968        F3A60000                 pop B0;
0x000969        F107000A                 FP = FP + 10;
0x00096A        F3E20000                 push FP;
0x00096B        F3C60000                 pop B4;
0x00096C        F007003F                 FP = FP + r1;
0x00096D        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x00096E        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x00096F        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000970        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000971        5060003F                 I6 = Null + r1;
0x000972        F3210000                 push I2;
0x000973        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x000974        9946000A                 r2 = r4 * 10 (int);
0x000975        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000976        5FB60000                 M3 = M3 + I6;
0x000977        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000978        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000979        5040002F                 I4 = Null + r0;
0x00097A        51C0000A                 L0 = Null + 10;
0x00097B        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x00097C        2055005A                 if GE r3 = r3 - r3;
0x00097D        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x00097E        004400B4                 if NEG r2 = r2 + r9;
0x00097F        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000980        4422008C                 if GT r0 = r0 + M0;
0x000981        0003000F                 Null = r1 + Null;
0x000982        00230001                 if NE r0 = r1 + Null;
0x000983        23C20000                 r10 = r10 - r0;
0x000984        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x000985        9434006F                 r1 = r2 * r4 (frac);
0x000986        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x000987        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000988        E007000F                 call r5;
0x000989        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x00098A        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x00098B        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x00098C        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00098D        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00098E        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00098F        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000990        7C7B007F                 I7 = M3 - I7;
0x000991        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000992        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000993        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000994        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000995        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000996        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000997        903100AF                 r1 = rMAC ASHIFT r8;
0x000998        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000999        79330003                 I3 = I3 - 3;
0x00099A        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x00099B        2055005A                 if GE r3 = r3 - r3;
0x00099C        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x00099D        004400B4                 if NEG r2 = r2 + r9;
0x00099E        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x00099F        4422008C                 if GT r0 = r0 + M0;
0x0009A0        23C20000                 r10 = r10 - r0;
0x0009A1        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x0009A2        006200CF                 r4 = r0 + r10;
0x0009A3        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x0009A4        0026000F                 r0 = r4 + Null;
0x0009A5        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x0009A6        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x0009A7        E007000F                 call r5;
0x0009A8        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x0009A9        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x0009AA        5832000F                 I3 = I2 + Null;
0x0009AB        F3250000                 pop I2;
0x0009AC        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x0009AD        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x0009AE        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x0009AF        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x0009B0        DDF00894                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x0009B1        F3D00000                 push rLink;
0x0009B2        F3E20000                 push FP;
0x0009B3        51800001                 M0 = Null + 1;
0x0009B4        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x0009B6        500000AF                 I0 = Null + r8;
0x0009B7        F2A02000                 push r8, r0 = M[I0,M0];
0x0009B8        D038002F                 r1 = M[r6 + r0];
0x0009B9        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x0009BA        D039002F                 r1 = M[r7 + r0];
0x0009BB        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x0009BC        D038006F                 r1 = M[r6 + r4];
0x0009BD        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x0009BE        D039006F                 r1 = M[r7 + r4];
0x0009BF        50F0003F                 L5 = Null + r1;
0x0009C0        FD0000FF 0930686B        r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0009C2        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x0009C3        FD0000FF 19C0686B        M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x0009C5        0005000F                 Null = r3 + Null;
0x0009C6        DD00002B                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x0009C7        016A0010                 r4 = r8 + 16;
0x0009C8        F3600000                 push r4;
0x0009C9        F3E60000                 pop FP;
0x0009CA        512A000B                 I2 = r8 + 11;
0x0009CB        51350005                 I3 = r3 + 5;
0x0009CC        D1950004                 r7 = M[r3 + 4];
0x0009CD        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x0009CE        D12A0005                 r0 = M[r8 + 5];
0x0009CF        F1000084                 pushm <r0, r5>;
0x0009D0        F1018020                 pushm <I5, L5>;
0x0009D1        5050002F                 I5 = Null + r0;
0x0009D2        50F0000F                 L5 = Null + Null;
0x0009D3        0070000F                 r5 = Null + Null;
0x0009D4        512A0007                 I2 = r8 + 7;
0x0009D5        E009000F                 call r7;
0x0009D6        50D0000F                 L1 = Null + Null;
0x0009D7        00C9000F                 r10 = r7 + Null;
0x0009D8        0040000F                 r2 = Null + Null;
0x0009D9        F1058020                 popm <I5, L5>;
0x0009DA        F1040084                 popm <r0, r5>;
0x0009DB        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x0009DC        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x0009DD        03000000                 Null = Null + Null;
0x0009DE        E002000F                 call r0;
0x0009DF        19902FC3                 M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x0009E0        F3A40000                 pop r8;
0x0009E1        50D0000F                 L1 = Null + Null;
0x0009E2        50F0000F                 L5 = Null + Null;
0x0009E3        F3000000                 push Null;
0x0009E4        F1AAFFFF                 B0 = M[SP + -0x1];
0x0009E5        F1BAFFFF                 B1 = M[SP + -0x1];
0x0009E6        F1CAFFFF                 B4 = M[SP + -0x1];
0x0009E7        F3D60000                 pop B5;
0x0009E8        FD0000FF 0930686B        r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0009EA        D12AFFFE                 r0 = M[r8 + -2];
0x0009EB        E402002F                 Null = r0 + 1;
0x0009EC        00930000                 if EQ r7 = r1 + Null;
0x0009ED        FD0000FF 19906862        M[$cbops.amount_to_use] = r7 + Null;
0x0009EF        F3E60000                 pop FP;
0x0009F0        DDF00854                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x0009F1        009C000F                 r7 = r10 + Null;
0x0009F2        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x0009F3        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x0009F4        93E40000                 rMAC = rMAC ASHIFT r2;
0x0009F5        93E70000                 rMAC = rMAC ASHIFT r5;
0x0009F6        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x0009F7        DDF0FFE9                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x0009F8        F3D00000                 push rLink;
0x0009F9        2103000C                 Null = r1 - 12;
0x0009FA        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x0009FB        D5532CEF                 M[r1 + 11503] = r3;
0x0009FC        FD0000FF D5435BE4        M[r1 + -42012] = r2;
0x0009FE        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x0009FF        FD0000FF 09206859        r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x000A01        E0020001                 if NE call r0;
0x000A02        DDF00842                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000A03        0023000F                 r0 = r1 + Null;
0x000A04        D144FFFF                 r2 = M[r2 + -1];
0x000A05        01300040                 r1 = Null + 64;
0x000A06        8D440078                 r2 = r2 LSHIFT -8;
0x000A07        8C43004F                 r2 = r1 LSHIFT r2;
0x000A08        D5420FE6                 M[r0 + 4070] = r2;
0x000A09        E430002F                 r1 = Null + 1;
0x000A0A        0140000D                 r2 = Null + 13;
0x000A0B        2105F000                 Null = r3 - -4096;
0x000A0C        00340004                 if NEG r1 = r2 + Null;
0x000A0D        F3200000                 push r0;
0x000A0E        F3400000                 push r2;
0x000A0F        01400062                 r2 = Null + 98;
0x000A10        65020007                 Null = 7 - r0;
0x000A11        00220044                 if NEG r0 = r0 + r2;
0x000A12        D532FE7B                 M[r0 + -389] = r1;
0x000A13        F3440000                 pop r2;
0x000A14        F3240000                 pop r0;
0x000A15        0032000F                 r1 = r0 + Null;
0x000A16        09202FB9                 r0 = Null + M[$cbuffer.read_port_connect_address];
0x000A17        E0020001                 if NE call r0;
0x000A18        DDF0082C                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000A19        D5532CEF                 M[r1 + 11503] = r3;
0x000A1A        FD0000FF D5435BE4        M[r1 + -42012] = r2;
0x000A1C        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000A1D        FD0000FF 09206858        r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000A1F        E0020001                 if NE call r0;
0x000A20        DDF00824                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000A21        0023000F                 r0 = r1 + Null;
0x000A22        D144FFFF                 r2 = M[r2 + -1];
0x000A23        01300040                 r1 = Null + 64;
0x000A24        8D440078                 r2 = r2 LSHIFT -8;
0x000A25        8C43004F                 r2 = r1 LSHIFT r2;
0x000A26        D5420FE6                 M[r0 + 4070] = r2;
0x000A27        01300009                 r1 = Null + 9;
0x000A28        01400005                 r2 = Null + 5;
0x000A29        2105F000                 Null = r3 - -4096;
0x000A2A        00340004                 if NEG r1 = r2 + Null;
0x000A2B        F3200000                 push r0;
0x000A2C        F3400000                 push r2;
0x000A2D        2122000C                 r0 = r0 - 12;
0x000A2E        01400066                 r2 = Null + 102;
0x000A2F        65020007                 Null = 7 - r0;
0x000A30        00220044                 if NEG r0 = r0 + r2;
0x000A31        D532FE73                 M[r0 + -397] = r1;
0x000A32        F3440000                 pop r2;
0x000A33        F3240000                 pop r0;
0x000A34        0032000F                 r1 = r0 + Null;
0x000A35        09202FB8                 r0 = Null + M[$cbuffer.write_port_connect_address];
0x000A36        E0020001                 if NE call r0;
0x000A37        DDF0080D                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000A38        F3D00000                 push rLink;
0x000A39        5F380000                 I3 = I3 + M0;
0x000A3A        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000A3B        F3E20000                 push FP;
0x000A3C        F3A60000                 pop B0;
0x000A3D        F107000A                 FP = FP + 10;
0x000A3E        F3E20000                 push FP;
0x000A3F        F3C60000                 pop B4;
0x000A40        F007003F                 FP = FP + r1;
0x000A41        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000A42        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000A43        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000A44        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000A45        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000A46        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000A47        9946000A                 r2 = r4 * 10 (int);
0x000A48        F3210000                 push I2;
0x000A49        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000A4A        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000A4B        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000A4C        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000A4D        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000A4E        51C0000A                 L0 = Null + 10;
0x000A4F        9845007F                 r2 = r3 * r5 (int);
0x000A50        004400B4                 if NEG r2 = r2 + r9;
0x000A51        9434006F                 r1 = r2 * r4 (frac);
0x000A52        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x000A53        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000A54        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000A55        5876003F                 I7 = I6 + r1;
0x000A56        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000A57        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A58        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A59        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A5A        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000A5B        7C7B007F                 I7 = M3 - I7;
0x000A5C        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A5D        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A5E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A5F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A60        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000A61        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000A62        5823000F                 I2 = I3 + Null;
0x000A63        E002000F                 call r0;
0x000A64        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000A65        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000A66        2005006F                 Null = r3 - r4;
0x000A67        2055005A                 if GE r3 = r3 - r3;
0x000A68        9845007F                 r2 = r3 * r5 (int);
0x000A69        004400B4                 if NEG r2 = r2 + r9;
0x000A6A        9434006F                 r1 = r2 * r4 (frac);
0x000A6B        2007004F                 Null = r5 - r2;
0x000A6C        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000A6D        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000A6E        5832000F                 I3 = I2 + Null;
0x000A6F        F3250000                 pop I2;
0x000A70        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000A71        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000A72        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000A73        50E0000F                 L4 = Null + Null;
0x000A74        DDF007D0                 jump $pop_rLink_and_rts;

 <$audio_proc.peq.process>
0x000A75        F3D00000                 push rLink;
0x000A76        D1290000                 r0 = M[r7 + 0];
0x000A77        E1F007A2                 call $frmbuffer.get_buffer;
0x000A78        5040002F                 I4 = Null + r0;
0x000A79        50E0003F                 L4 = Null + r1;
0x000A7A        0065000F                 r4 = r3 + Null;
0x000A7B        D1290001                 r0 = M[r7 + 1];
0x000A7C        E1F007C6                 call $frmbuffer.set_frame_size;
0x000A7D        E1F0079C                 call $frmbuffer.get_buffer;
0x000A7E        5000002F                 I0 = Null + r0;
0x000A7F        50C0003F                 L0 = Null + r1;
0x000A80        F3D40000                 pop rLink;

 <$audio_proc.peq.process_op>
0x000A81        51900001                 M1 = Null + 1;
0x000A82        51390003                 I3 = r7 + 3;
0x000A83        5180FFFF                 M0 = Null + -1;
0x000A84        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000A85        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000A86        F3200000                 push r0;
0x000A87        F3D60000                 pop B5;
0x000A88        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000A89        F3200000                 push r0;
0x000A8A        F3B60000                 pop B1;
0x000A8B        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000A8C        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000A8D        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000A8E        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x000A8F        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x000A90        21830002                 r6 = r1 - 2;
0x000A91        D1490002                 r2 = M[r7 + 2];
0x000A92        99440005                 r2 = r2 * 5 (int);
0x000A93        5B240000                 I2 = I2 + r2;
0x000A94        5F2A0000                 I2 = I2 + M2;
0x000A95        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.peq.process.peq_block_loop>
0x000A96        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000A97        CE272A55                 rMAC = r0 * r5 (SS), r0 = M[I2,M2], r3 = M[I5,M1];
0x000A98        9021458F                 r0 = rMAC ASHIFT r6, r2 = M[I1,M1];
0x000A99        E5F00009                 do $M.audio_proc.peq.process.biquad_loop;
0x000A9A        CE544534                 rMAC = r3 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000A9B        AE3445B5                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I1,M1], M[I5,M1] = r1;
0x000A9C        AE2400A5                 rMAC = rMAC + r0 * r2 (SS), M[I5,M1] = r0;
0x000A9D        02004535                 Null = Null + Null, r2 = M[I1,M1], r1 = M[I5,M1];
0x000A9E        BE344534                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000A9F        BE344955                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I2,M1], r3 = M[I5,M1];
0x000AA0        0021000F                 r0 = rMAC + Null;
0x000AA1        92244500                 r0 = r0 ASHIFT r2, r2 = M[I1,M1];

 <$M.audio_proc.peq.process.biquad_loop>
0x000AA2        02000054                 Null = Null + Null, r3 = M[I5,M0];
0x000AA3        020044B5                 Null = Null + Null, r2 = M[I1,M0], M[I5,M1] = r1;
0x000AA4        91520002                 r3 = r0 ASHIFT 2;
0x000AA5        6669D1A5                 r4 = r4 - M1, M[I0,M1] = r3, M[I5,M1] = r0;
0x000AA6        DD10FFF0                 if NE jump $M.audio_proc.peq.process.peq_block_loop;
0x000AA7        50C0000F                 L0 = Null + Null;
0x000AA8        50E0000F                 L4 = Null + Null;
0x000AA9        50D0000F                 L1 = Null + Null;
0x000AAA        50F0000F                 L5 = Null + Null;
0x000AAB        F3000000                 push Null;
0x000AAC        F1BAFFFF                 B1 = M[SP + -0x1];
0x000AAD        F3D60000                 pop B5;
0x000AAE        DC0D000F                 rts;

 <$atan>
0x000AAF        FD000080 01400000        r2 = Null + -8388608;
0x000AB1        FD000080 01500000        r3 = Null + -8388608;
0x000AB3        FD000021 0190DE6A        r7 = Null + 2219626;
0x000AB5        FD000008 01A0BC6A        r8 = Null + 572522;
0x000AB7        FD00007F 0160FFFF        r4 = Null + 8388607;
0x000AB9        0027000F                 r0 = r5 + Null;
0x000ABA        DD500004                 if POS jump $M.math.atan.endAbsReal0;
0x000ABB        FD00007F 0140FFFF        r2 = Null + 8388607;
0x000ABD        95228000                 r0 = r0 * -1 (frac);

 <$M.math.atan.endAbsReal0>
0x000ABE        0038000F                 r1 = r6 + Null;
0x000ABF        DD500004                 if POS jump $M.math.atan.endAbsImag0;
0x000AC0        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000AC2        95338000                 r1 = r1 * -1 (frac);

 <$M.math.atan.endAbsImag0>
0x000AC3        2003002F                 Null = r1 - r0;
0x000AC4        DDB00006                 if LT jump $M.math.atan.IdivQ;

 <$M.math.atan.QdivI>
0x000AC5        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000AC6        D9080000                 Div = rMAC / r6;
0x000AC7        2090009F                 r7 = Null - r7;
0x000AC8        0064000F                 r4 = r2 + Null;
0x000AC9        DDF00004                 jump $M.math.atan.endDivIQ;

 <$M.math.atan.IdivQ>
0x000ACA        91E8007F                 rMAC = r6 ASHIFT -1 (MI);
0x000ACB        D9070000                 Div = rMAC / r5;
0x000ACC        0065000F                 r4 = r3 + Null;

 <$M.math.atan.endDivIQ>
0x000ACD        FD00009B 01507813        r3 = Null + -6588397;
0x000ACF        2007008F                 Null = r5 - r6;
0x000AD0        20A000AB                 if LT r8 = Null - r8;
0x000AD1        2003007F                 Null = r1 - r5;
0x000AD2        DDB00009                 if LT jump $M.math.atan.Q18;

 <$M.math.atan.Q45>
0x000AD3        0003007F                 Null = r1 + r5;
0x000AD4        DDC00003                 if GT jump $M.math.atan.Q23;
0x000AD5        97560000                 r3 = r3 * r4 (frac);
0x000AD6        DDF00006                 jump $M.math.atan.endQuadrants;

 <$M.math.atan.Q23>
0x000AD7        9155007F                 r3 = r3 ASHIFT -1;
0x000AD8        2002008F                 Null = r0 - r6;
0x000AD9        2050005B                 if LT r3 = Null - r3;
0x000ADA        DDF00002                 jump $M.math.atan.endQuadrants;

 <$M.math.atan.Q18>
0x000ADB        01500000                 r3 = Null + 0;

 <$M.math.atan.endQuadrants>
0x000ADC        0015000F                 rMAC = r3 + Null;
0x000ADD        97A60000                 r8 = r8 * r4 (frac);
0x000ADE        D9200001                 r0 = DivResult;
0x000ADF        9432002F                 r1 = r0 * r0 (frac);
0x000AE0        AC1300AF                 rMAC = rMAC + r1 * r8 (SS);
0x000AE1        AC19002F                 rMAC = rMAC + r7 * r0 (SS);
0x000AE2        8D310000                 r1 = rMAC LSHIFT 0;
0x000AE3        8D210018                 r0 = rMAC LSHIFT 24;
0x000AE4        FD000051 01407CC1        r2 = Null + 5340353;
0x000AE6        97240000                 r0 = r0 * r2 (frac);
0x000AE7        CC13004F                 rMAC = r1 * r2 (SS);
0x000AE8        FD000000 AD120001        rMAC = rMAC + r0 * 1.1920928955078125e-007 (SS);
0x000AEA        91710001                 r5 = rMAC ASHIFT 1;
0x000AEB        DC0D000F                 rts;

 <$M.audio_proc.stream_gain.Process.func>
0x000AEC        F3D00000                 push rLink;
0x000AED        D1290000                 r0 = M[r7 + 0];
0x000AEE        E1F0072B                 call $frmbuffer.get_buffer;
0x000AEF        5000002F                 I0 = Null + r0;
0x000AF0        50C0003F                 L0 = Null + r1;
0x000AF1        00C5000F                 r10 = r3 + Null;
0x000AF2        D1290001                 r0 = M[r7 + 1];
0x000AF3        E1F0074F                 call $frmbuffer.set_frame_size;
0x000AF4        E1F00725                 call $frmbuffer.get_buffer;
0x000AF5        5040002F                 I4 = Null + r0;
0x000AF6        50E0003F                 L4 = Null + r1;
0x000AF7        F3D40000                 pop rLink;
0x000AF8        D1390002                 r1 = M[r7 + 2];
0x000AF9        D1490003                 r2 = M[r7 + 3];
0x000AFA        D3300000                 r1 = M[r1 + Null];
0x000AFB        D3400000                 r2 = M[r2 + Null];
0x000AFC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000AFD        210A0000                 Null = r8 - 0;
0x000AFE        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000AFF        D15A0002                 r3 = M[r8 + 2];
0x000B00        D16A0003                 r4 = M[r8 + 3];
0x000B01        2003005F                 Null = r1 - r3;
0x000B02        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000B03        2004006F                 Null = r2 - r4;
0x000B04        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000B05        D17A0001                 r5 = M[r8 + 1];
0x000B06        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000B07        D18A0000                 r6 = M[r8 + 0];
0x000B08        03780000                 r5 = r5 + r6;
0x000B09        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000B0B        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000B0C        CC12003F                 rMAC = r0 * r1 (SS);
0x000B0D        9081004F                 r6 = rMAC ASHIFT r2;
0x000B0E        97870000                 r6 = r6 * r5 (frac);
0x000B0F        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000B11        CC12005F                 rMAC = r0 * r3 (SS);
0x000B12        9021006F                 r0 = rMAC ASHIFT r4;
0x000B13        97290000                 r0 = r0 * r7 (frac);
0x000B14        03280000                 r0 = r0 + r6;
0x000B15        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000B16        D57A0001                 M[r8 + 1] = r5;
0x000B17        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000B18        D53A0002                 M[r8 + 2] = r1;
0x000B19        D54A0003                 M[r8 + 3] = r2;
0x000B1A        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000B1B        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000B1C        CC12003F                 rMAC = r0 * r1 (SS);
0x000B1D        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000B1E        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000B1F        50C0000F                 L0 = Null + Null;
0x000B20        50E0000F                 L4 = Null + Null;
0x000B21        DC0D000F                 rts;

 <$cmpd100.applygain>
0x000B22        D12A0000                 r0 = M[r8 + 0];
0x000B23        D13A0001                 r1 = M[r8 + 1];
0x000B24        83320000                 r1 = r1 AND r0;
0x000B25        DC0D0001                 if NE rts;
0x000B26        F3D00000                 push rLink;
0x000B27        D12A0002                 r0 = M[r8 + 2];
0x000B28        E1F006F1                 call $frmbuffer.get_buffer;
0x000B29        5000002F                 I0 = Null + r0;
0x000B2A        50C0003F                 L0 = Null + r1;
0x000B2B        D12A0003                 r0 = M[r8 + 3];
0x000B2C        E1F006ED                 call $frmbuffer.get_buffer;
0x000B2D        5040002F                 I4 = Null + r0;
0x000B2E        50E0003F                 L4 = Null + r1;
0x000B2F        00C5000F                 r10 = r3 + Null;
0x000B30        D12A0004                 r0 = M[r8 + 4];
0x000B31        E1F00711                 call $frmbuffer.set_frame_size;
0x000B32        E1F006E7                 call $frmbuffer.get_buffer;
0x000B33        5010002F                 I1 = Null + r0;
0x000B34        50D0003F                 L1 = Null + r1;
0x000B35        D12A0005                 r0 = M[r8 + 5];
0x000B36        005C000F                 r3 = r10 + Null;
0x000B37        E1F0070B                 call $frmbuffer.set_frame_size;
0x000B38        E1F006E1                 call $frmbuffer.get_buffer;
0x000B39        5050002F                 I5 = Null + r0;
0x000B3A        50F0003F                 L5 = Null + r1;
0x000B3B        D14A0006                 r2 = M[r8 + 6];
0x000B3C        D15A0007                 r3 = M[r8 + 7];
0x000B3D        D025000F                 r0 = M[r3 + Null];
0x000B3E        91220004                 r0 = r0 ASHIFT 4;
0x000B3F        FD000003 21220000        r0 = r0 - 196608;
0x000B41        E1F005DB                 call $math.pow2_table;
0x000B42        FD0000FF 19206870        M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000B44        9462004F                 r4 = r0 * r2 (frac);
0x000B45        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000B46        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000B47        CC12006F                 rMAC = r0 * r4 (SS);
0x000B48        91210007                 r0 = rMAC ASHIFT 7;
0x000B49        9413006F                 rMAC = r1 * r4 (frac);
0x000B4A        91310007                 r1 = rMAC ASHIFT 7;
0x000B4B        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000B4C        51C00000                 L0 = Null + 0;
0x000B4D        51D00000                 L1 = Null + 0;
0x000B4E        51E00000                 L4 = Null + 0;
0x000B4F        51F00000                 L5 = Null + 0;
0x000B50        DDF006F4                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x000B51        F3D00000                 push rLink;
0x000B52        FD0000FF 01A06720        r8 = Null + -39136;
0x000B54        FD0000FF 019066F7        r7 = Null + -39177;
0x000B56        FD0000FF 0900680B        Null = Null + M[$stereo_tone];
0x000B58        00A90001                 if NE r8 = r7 + Null;
0x000B59        E1F0FD04                 call $cbops.copy;
0x000B5A        E1F0013C                 call $detect_end_of_aux_stream;
0x000B5B        FD0000FF 01306746        r1 = Null + -39098;
0x000B5D        FD0000FF 09406812        r2 = Null + M[$tmr_period_tone_copy];
0x000B5F        01500B51                 r3 = Null + 2897;
0x000B60        E1F006D7                 call $timer.schedule_event_in_period;
0x000B61        DDF006E3                 jump $pop_rLink_and_rts;

 <$tone_copy_extra>
0x000B62        F3D00000                 push rLink;
0x000B63        09202D2E                 r0 = Null + M[0x2d2e];
0x000B64        FD0000FF 093065ED        r1 = Null + M[0xff65ed];
0x000B66        09002F75                 Null = Null + M[$mono_stereo_mode];
0x000B67        00230000                 if EQ r0 = r1 + Null;
0x000B68        0002000F                 Null = r0 + Null;
0x000B69        DD0006DB                 if EQ jump $pop_rLink_and_rts;
0x000B6A        012007FD                 r0 = Null + 2045;
0x000B6B        E1F0067E                 call $cbuffer.calc_amount_data;
0x000B6C        09401BFF                 r2 = Null + M[$current_tone_sampling_rate];
0x000B6D        FD000000 CD1405DC        rMAC = r2 * 0.00017881393432617188 (SS);
0x000B6F        9141000D                 r2 = rMAC ASHIFT 13;
0x000B70        FD000000 95443255        r2 = r2 * 0.0015360116958618164 (frac);
0x000B72        2002004F                 Null = r0 - r2;
0x000B73        DD5006D1                 if POS jump $pop_rLink_and_rts;
0x000B74        FD0000FF 01A06720        r8 = Null + -39136;
0x000B76        FD0000FF 019066F7        r7 = Null + -39177;
0x000B78        FD0000FF 0900680B        Null = Null + M[$stereo_tone];
0x000B7A        00A90001                 if NE r8 = r7 + Null;
0x000B7B        E1F0FCE2                 call $cbops.copy;
0x000B7C        DDF006C8                 jump $pop_rLink_and_rts;

 <$M.mips_profile.mainstart>
0x000B7D        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000B7E        D52A0001                 M[r8 + 1] = r0;
0x000B7F        D50A0005                 M[r8 + 5] = Null;
0x000B80        D12A0000                 r0 = M[r8 + 0];
0x000B81        DD000002                 if EQ jump $M.mips_profile.init;
0x000B82        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000B83        0920FE71                 r0 = Null + M[0xfffe71];
0x000B84        D52A0009                 M[r8 + 9] = r0;
0x000B85        E420002F                 r0 = Null + 1;
0x000B86        D52A0000                 M[r8 + 0] = r0;
0x000B87        D50A0002                 M[r8 + 2] = Null;
0x000B88        D50A0004                 M[r8 + 4] = Null;
0x000B89        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x000B8A        D12A0000                 r0 = M[r8 + 0];
0x000B8B        DC0D0000                 if EQ rts;
0x000B8C        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000B8D        D13A0001                 r1 = M[r8 + 1];
0x000B8E        23230000                 r0 = r0 - r1;
0x000B8F        D13A0005                 r1 = M[r8 + 5];
0x000B90        23230000                 r0 = r0 - r1;
0x000B91        D13A0002                 r1 = M[r8 + 2];
0x000B92        03230000                 r0 = r0 + r1;
0x000B93        D52A0002                 M[r8 + 2] = r0;
0x000B94        0920FE71                 r0 = Null + M[0xfffe71];
0x000B95        D13A0009                 r1 = M[r8 + 9];
0x000B96        23230000                 r0 = r0 - r1;
0x000B97        FD0000FF 0930681D        r1 = Null + M[$M.mips_profile.evalinterval_us];
0x000B99        2002003F                 Null = r0 - r1;
0x000B9A        DC0D0004                 if NEG rts;
0x000B9B        D12A0002                 r0 = M[r8 + 2];
0x000B9C        D52A0006                 M[r8 + 6] = r0;
0x000B9D        D13A0004                 r1 = M[r8 + 4];
0x000B9E        D53A0007                 M[r8 + 7] = r1;
0x000B9F        03230000                 r0 = r0 + r1;
0x000BA0        D52A0008                 M[r8 + 8] = r0;
0x000BA1        D50A0000                 M[r8 + 0] = Null;
0x000BA2        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000BA3        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BA4        D52A0003                 M[r8 + 3] = r0;
0x000BA5        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x000BA6        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BA7        D13A0003                 r1 = M[r8 + 3];
0x000BA8        23230000                 r0 = r0 - r1;
0x000BA9        D13A0004                 r1 = M[r8 + 4];
0x000BAA        0032003F                 r1 = r0 + r1;
0x000BAB        D53A0004                 M[r8 + 4] = r1;
0x000BAC        D13A0005                 r1 = M[r8 + 5];
0x000BAD        0032003F                 r1 = r0 + r1;
0x000BAE        D53A0005                 M[r8 + 5] = r1;
0x000BAF        DC0D000F                 rts;

 <$media_packet_boundary_detection>
0x000BB0        F3D00000                 push rLink;
0x000BB1        FD0000FF 012067E7        r0 = Null + -38937;
0x000BB3        E1F00636                 call $cbuffer.calc_amount_data;
0x000BB4        21020030                 Null = r0 - 48;
0x000BB5        DD000026                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000BB6        FD0000FF 012067C6        r0 = Null + -38970;
0x000BB8        E1F00621                 call $cbuffer.calc_amount_space;
0x000BB9        0002000F                 Null = r0 + Null;
0x000BBA        DD000021                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000BBB        FD0000FF 012067C6        r0 = Null + -38970;
0x000BBD        E1F00657                 call $cbuffer.get_write_address_and_size;
0x000BBE        FD0000FF 09606837        r4 = Null + M[$codec_packets_info_last_write_address];
0x000BC0        2002006F                 Null = r0 - r4;
0x000BC1        DD00001A                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000BC2        0940FE71                 r2 = Null + M[0xfffe71];
0x000BC3        29542F98                 r3 = r2 - M[$codec_packets_info_last_timer_time];
0x000BC4        FD0000FF 29056838        Null = r3 - M[$codec_packets_info_timer_gap];
0x000BC6        DD900015                 if LS jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000BC7        19402F98                 M[$codec_packets_info_last_timer_time] = r2 + Null;
0x000BC8        FD0000FF 012067C6        r0 = Null + -38970;
0x000BCA        E1F0064A                 call $cbuffer.get_write_address_and_size;
0x000BCB        5000006F                 I0 = Null + r4;
0x000BCC        50C0003F                 L0 = Null + r1;
0x000BCD        03006100                 Null = Null + Null, r4 = M[I0,1];
0x000BCE        4460000F                 r4 = Null + I0;
0x000BCF        FD0000FF 012067E7        r0 = Null + -38937;
0x000BD1        E1F00643                 call $cbuffer.get_write_address_and_size;
0x000BD2        5000002F                 I0 = Null + r0;
0x000BD3        50C0003F                 L0 = Null + r1;
0x000BD4        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x000BD5        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x000BD6        51C00000                 L0 = Null + 0;
0x000BD7        FD0000FF 012067E7        r0 = Null + -38937;
0x000BD9        4430000F                 r1 = Null + I0;
0x000BDA        E1F00648                 call $cbuffer.set_write_address;

 <$M.media_packet_boundary_detection.done_with_latency_reporting>
0x000BDB        DDF00669                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm_24>
0x000BDC        F3D00000                 push rLink;
0x000BDD        0082000F                 r6 = r0 + Null;
0x000BDE        81730001                 r5 = r1 AND 0x1;
0x000BDF        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000BE0        0028000F                 r0 = r6 + Null;
0x000BE1        99360003                 r1 = r4 * 3 (int);
0x000BE2        F3300000                 push r1;
0x000BE3        E1F00617                 call $flash.map_page_into_dm;
0x000BE4        5010002F                 I1 = Null + r0;
0x000BE5        00C6000F                 r10 = r4 + Null;
0x000BE6        F3240000                 pop r0;
0x000BE7        2002003F                 Null = r0 - r1;
0x000BE8        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000BE9        99330002                 r1 = r1 * 2 (int);
0x000BEA        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000BEC        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000BED        236C0000                 r4 = r4 - r10;
0x000BEE        992C0003                 r0 = r10 * 3 (int);
0x000BEF        03820000                 r6 = r6 + r0;
0x000BF0        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x000BF1        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000BF2        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000BF3        8D220008                 r0 = r0 LSHIFT 8;
0x000BF4        8D530078                 r3 = r1 LSHIFT -8;
0x000BF5        815500FF                 r3 = r3 AND 0xff;
0x000BF6        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000BF7        8122FFFF                 r0 = r0 AND 0xffff;
0x000BF8        8D330010                 r1 = r1 LSHIFT 16;
0x000BF9        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000BFA        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000BFB        0006000F                 Null = r4 + Null;
0x000BFC        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000BFD        0007000F                 Null = r5 + Null;
0x000BFE        DD000646                 if EQ jump $pop_rLink_and_rts;
0x000BFF        0028000F                 r0 = r6 + Null;
0x000C00        01300002                 r1 = Null + 2;
0x000C01        E1F005F9                 call $flash.map_page_into_dm;
0x000C02        5010002F                 I1 = Null + r0;
0x000C03        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000C04        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000C05        8D220008                 r0 = r0 LSHIFT 8;
0x000C06        8D330078                 r1 = r1 LSHIFT -8;
0x000C07        813300FF                 r1 = r1 AND 0xff;
0x000C08        8423002F                 r0 = r1 OR r0;
0x000C09        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x000C0A        DDF0063A                 jump $pop_rLink_and_rts;

 <$latency.calc_pcm_latency>
0x000C0B        F3D00000                 push rLink;
0x000C0C        E1F005E5                 call $block_interrupts;
0x000C0D        D1A90000                 r8 = M[r7 + 0];
0x000C0E        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000C0F        D02A000F                 r0 = M[r8 + Null];
0x000C10        DD000010                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000C11        D802000F                 Null = SIGNDET r0;
0x000C12        DD10000A                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000C13        0900FE33                 Null = Null + M[0xfffe33];
0x000C14        8132001F                 r1 = r0 AND 0x1f;
0x000C15        2103000C                 Null = r1 - 12;
0x000C16        DD400006                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000C17        E1F005C2                 call $cbuffer.calc_amount_space;
0x000C18        E422002F                 r0 = r0 + 1;
0x000C19        9144007F                 r2 = r2 ASHIFT -1;
0x000C1A        2024002F                 r0 = r2 - r0;
0x000C1B        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000C1C        E1F005CD                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000C1D        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000C1E        01AA0003                 r8 = r8 + 3;
0x000C1F        DDF0FFF0                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000C20        D1A90001                 r8 = M[r7 + 1];
0x000C21        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000C22        D02A000F                 r0 = M[r8 + Null];
0x000C23        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000C24        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000C25        01AA0003                 r8 = r8 + 3;
0x000C26        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000C27        E1F0059E                 call $interrupt.unblock;
0x000C28        DDF0061C                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000C29        D13A0001                 r1 = M[r8 + 1];
0x000C2A        D3300000                 r1 = M[r1 + Null];
0x000C2B        D14A0002                 r2 = M[r8 + 2];
0x000C2C        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000C2D        D3400000                 r2 = M[r2 + Null];
0x000C2E        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000C2F        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000C30        9453004F                 r3 = r1 * r2 (frac);
0x000C31        9445004F                 r2 = r3 * r2 (frac);
0x000C32        0053005F                 r3 = r1 + r3;
0x000C33        0035004F                 r1 = r3 + r2;
0x000C34        CC12003F                 rMAC = r0 * r1 (SS);
0x000C35        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000C36        8D310000                 r1 = rMAC LSHIFT 0;
0x000C37        03830000                 r6 = r6 + r1;
0x000C38        DC0D000F                 rts;

 <$wall_clock.message_handler>
0x000C39        F3D00000                 push rLink;
0x000C3A        E455002F                 r3 = r3 + 1;
0x000C3B        01C00007                 r10 = Null + 7;
0x000C3C        FD0000FF 09806861        r6 = Null + M[$wall_clock.last_addr];
0x000C3E        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000C3F        E408002F                 Null = r6 + 1;
0x000C40        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000C41        D1280001                 r0 = M[r6 + 1];
0x000C42        D135FFFF                 r1 = M[r3 + -1];
0x000C43        813300FF                 r1 = r1 AND 0xff;
0x000C44        2002003F                 Null = r0 - r1;
0x000C45        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C46        D1280002                 r0 = M[r6 + 2];
0x000C47        2802005F                 Null = r0 - M[r3];
0x000C48        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C49        D1280003                 r0 = M[r6 + 3];
0x000C4A        D1350001                 r1 = M[r3 + 1];
0x000C4B        2002003F                 Null = r0 - r1;
0x000C4C        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C4D        D1280004                 r0 = M[r6 + 4];
0x000C4E        D1350002                 r1 = M[r3 + 2];
0x000C4F        2002003F                 Null = r0 - r1;
0x000C50        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000C51        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000C52        E1F028AC                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000C53        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000C54        D1350003                 r1 = M[r3 + 3];
0x000C55        D1450004                 r2 = M[r3 + 4];
0x000C56        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000C57        811100FF                 rMAC = rMAC AND 0xff;
0x000C58        991104E2                 rMAC = rMAC * 1250 (int);
0x000C59        8D330010                 r1 = r1 LSHIFT 16;
0x000C5A        8144FFFF                 r2 = r2 AND 0xffff;
0x000C5B        03430000                 r2 = r2 + r1;
0x000C5C        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000C5E        8D410016                 r2 = rMAC LSHIFT 22;
0x000C5F        D1650006                 r4 = M[r3 + 6];
0x000C60        D1550005                 r3 = M[r3 + 5];
0x000C61        8D550010                 r3 = r3 LSHIFT 16;
0x000C62        8166FFFF                 r4 = r4 AND 0xffff;
0x000C63        03650000                 r4 = r4 + r3;
0x000C64        23460000                 r2 = r2 - r4;
0x000C65        D5480005                 M[r6 + 5] = r2;
0x000C66        D1280006                 r0 = M[r6 + 6];
0x000C67        E0020001                 if NE call r0;
0x000C68        DDF005DC                 jump $pop_rLink_and_rts;

 <$set_tone_rate_from_vm>
0x000C69        8133FFFF                 r1 = r1 AND 0xffff;
0x000C6A        01100FA0                 rMAC = Null + 4000;
0x000C6B        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x000C6D        D9030000                 Div = rMAC / r1;
0x000C6E        19301BFF                 M[$current_tone_sampling_rate] = r1 + Null;
0x000C6F        01200003                 r0 = Null + 3;
0x000C70        81040002                 Null = r2 AND 0x2;
0x000C71        00200001                 if NE r0 = Null + Null;
0x000C72        01220008                 r0 = r0 + 8;
0x000C73        19202E93                 M[0x2e93] = r0 + Null;
0x000C74        19202E66                 M[0x2e66] = r0 + Null;
0x000C75        D9500001                 r3 = DivResult;
0x000C76        81240001                 r0 = r2 AND 0x1;
0x000C77        00550050                 if EQ r3 = r3 + r3;
0x000C78        FD0000FF 19506812        M[$tmr_period_tone_copy] = r3 + Null;
0x000C7A        FD0000FF 1920680B        M[$stereo_tone] = r0 + Null;
0x000C7C        DD000006                 if EQ jump $M.set_tone_rate_from_vm.mono_tone;

 <$M.set_tone_rate_from_vm.stereo_tone>
0x000C7D        E420003F                 r0 = Null - 1;
0x000C7E        09302D26                 r1 = Null + M[0x2d26];
0x000C7F        9143007F                 r2 = r1 ASHIFT -1;
0x000C80        0054000F                 r3 = r2 + Null;
0x000C81        DDF00005                 jump $M.set_tone_rate_from_vm.set_op;

 <$M.set_tone_rate_from_vm.mono_tone>
0x000C82        E420002F                 r0 = Null + 1;
0x000C83        01300000                 r1 = Null + 0;
0x000C84        09402D26                 r2 = Null + M[0x2d26];
0x000C85        01500000                 r3 = Null + 0;

 <$M.set_tone_rate_from_vm.set_op>
0x000C86        19202D20                 M[0x2d20] = r0 + Null;
0x000C87        FD0000FF 19305FF0        M[0xff5ff0] = r1 + Null;
0x000C89        FD0000FF 194065E5        M[0xff65e5] = r2 + Null;
0x000C8B        19502D4E                 M[0x2d4e] = r3 + Null;
0x000C8C        092007FF                 r0 = Null + M[0x7ff];
0x000C8D        192007FE                 M[0x7fe] = r0 + Null;
0x000C8E        FD0000FF 092067D1        r0 = Null + M[0xff67d1];
0x000C90        FD0000FF 192067D0        M[0xff67d0] = r0 + Null;
0x000C92        E420002F                 r0 = Null + 1;
0x000C93        FD0000FF 1920680C        M[$aux_input_stream_available] = r0 + Null;
0x000C95        DC0D000F                 rts;

 <$detect_end_of_aux_stream>
0x000C96        F3D00000                 push rLink;
0x000C97        FD0000FF 0950680C        r3 = Null + M[$aux_input_stream_available];
0x000C99        DD0005AB                 if EQ jump $pop_rLink_and_rts;
0x000C9A        012007FD                 r0 = Null + 2045;
0x000C9B        E1F0054E                 call $cbuffer.calc_amount_data;
0x000C9C        81050002                 Null = r3 AND 0x2;
0x000C9D        DD100009                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x000C9E        0002000F                 Null = r0 + Null;
0x000C9F        DD0005A5                 if EQ jump $pop_rLink_and_rts;
0x000CA0        85550002                 r3 = r3 OR 0x2;
0x000CA1        FD0000FF 1950680C        M[$aux_input_stream_available] = r3 + Null;
0x000CA3        FD0000FF 19006815        M[$no_tone_timer] = Null + Null;
0x000CA5        DDF0059F                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x000CA6        FD0000FF 09306815        r1 = Null + M[$no_tone_timer];
0x000CA8        FD0000FF 09336812        r1 = r1 + M[$tmr_period_tone_copy];
0x000CAA        0002000F                 Null = r0 + Null;
0x000CAB        00300001                 if NE r1 = Null + Null;
0x000CAC        FD0000FF 19306815        M[$no_tone_timer] = r1 + Null;
0x000CAE        21037530                 Null = r1 - 30000;
0x000CAF        DD400595                 if NEG jump $pop_rLink_and_rts;
0x000CB0        01401080                 r2 = Null + 4224;
0x000CB1        01500000                 r3 = Null + 0;
0x000CB2        01600000                 r4 = Null + 0;
0x000CB3        01700000                 r5 = Null + 0;
0x000CB4        01800000                 r6 = Null + 0;
0x000CB5        E1F00379                 call $message.send_short;
0x000CB6        FD0000FF 1900680C        M[$aux_input_stream_available] = Null + Null;
0x000CB8        FD0000FF 19006815        M[$no_tone_timer] = Null + Null;
0x000CBA        DDF0058A                 jump $pop_rLink_and_rts;

 <$con_in_copy_handler>
0x000CBB        F3D00000                 push rLink;
0x000CBC        FD0000FF 092067C8        r0 = Null + M[0xff67c8];
0x000CBE        FD0000FF 19206837        M[$codec_packets_info_last_write_address] = r0 + Null;
0x000CC0        E1F0F62E                 call $sra_tagtimes;
0x000CC1        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x000CC3        21020005                 Null = r0 - 5;
0x000CC4        DD100005                 if NE jump $M.con_in_copy_handler.skip_usb_copy;
0x000CC5        01A004C5                 r8 = Null + 1221;
0x000CC6        01900651                 r7 = Null + 1617;
0x000CC7        E1F016B4                 call $run_usb_state_mc;
0x000CC8        DDF0000C                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_usb_copy>
0x000CC9        21020008                 Null = r0 - 8;
0x000CCA        DD100004                 if NE jump $M.con_in_copy_handler.skip_analogue_copy;
0x000CCB        01A004D7                 r8 = Null + 1239;
0x000CCC        E1F0FB91                 call $cbops.copy;
0x000CCD        DDF00007                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_analogue_copy>
0x000CCE        01A02E8A                 r8 = Null + 11914;
0x000CCF        E1F0FB8E                 call $cbops.copy;

 <$M.con_in_copy_handler.input_read_done>
0x000CD0        FD0000FF 012067C6        r0 = Null + -38970;
0x000CD2        E1F00517                 call $cbuffer.calc_amount_data;
0x000CD3        19202F76                 M[$codec_level] = r0 + Null;

 <$M.con_in_copy_handler.copy_done>
0x000CD4        FD0000FF 0900683A        Null = Null + M[$M.configure_latency_reporting.enabled];
0x000CD6        DD000002                 if EQ jump $M.con_in_copy_handler.skip_packet_detection;
0x000CD7        E1F0FED9                 call $media_packet_boundary_detection;

 <$M.con_in_copy_handler.skip_packet_detection>
0x000CD8        FD0000FF 01306742        r1 = Null + -39102;
0x000CDA        09402F72                 r2 = Null + M[$tmr_period_con_copy];
0x000CDB        01500CBB                 r3 = Null + 3259;
0x000CDC        E1F0055B                 call $timer.schedule_event_in_period;
0x000CDD        DDF00567                 jump $pop_rLink_and_rts;

 <$message.send_long>
0x000CDE        F3D00000                 push rLink;
0x000CDF        E1F00512                 call $block_interrupts;
0x000CE0        0140FFFE                 r2 = Null + -2;
0x000CE1        01C60005                 r10 = r4 + 5;
0x000CE2        8DCC007E                 r10 = r10 LSHIFT -2;
0x000CE3        FD0000FF 0930685D        r1 = Null + M[$message.queue_write_ptr];
0x000CE5        8580FFF1                 r6 = Null OR 0xfff1;
0x000CE6        E5F0001B                 do $M.message.send_long.long_message_loop;
0x000CE7        01230005                 r0 = r1 + 5;
0x000CE8        2102006E                 Null = r0 - 110;
0x000CE9        00200000                 if EQ r0 = Null + Null;
0x000CEA        29022FBD                 Null = r0 - M[$message.queue_read_ptr];
0x000CEB        DD000019                 if EQ jump $M.message.send_long.all_done;
0x000CEC        E40C003F                 Null = r10 - 1;
0x000CED        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x000CEE        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x000CEF        D5830F78                 M[r1 + 3960] = r6;
0x000CF0        81080001                 Null = r6 AND 0x1;
0x000CF1        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x000CF2        E488003F                 r6 = r6 - 1;
0x000CF3        D5530F79                 M[r1 + 3961] = r3;
0x000CF4        D5630F7A                 M[r1 + 3962] = r4;
0x000CF5        21770002                 r5 = r5 - 2;
0x000CF6        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x000CF7        D047000F                 r2 = M[r5 + Null];
0x000CF8        D5430F79                 M[r1 + 3961] = r2;
0x000CF9        D1470001                 r2 = M[r5 + 1];
0x000CFA        D5430F7A                 M[r1 + 3962] = r2;

 <$M.message.send_long.last_two_words>
0x000CFB        D1470002                 r2 = M[r5 + 2];
0x000CFC        D5430F7B                 M[r1 + 3963] = r2;
0x000CFD        D1470003                 r2 = M[r5 + 3];
0x000CFE        D5430F7C                 M[r1 + 3964] = r2;
0x000CFF        01770004                 r5 = r5 + 4;
0x000D00        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x000D01        FD0000FF 1920685D        M[$message.queue_write_ptr] = r0 + Null;
0x000D03        E1F000EC                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x000D04        E1F004C1                 call $interrupt.unblock;
0x000D05        DDF0053F                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x000D06        59330002                 I3 = I3 + 2;
0x000D07        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x000D08        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000D09        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x000D0A        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000D0B        70A0006F                 M2 = Null - r4;
0x000D0C        99460006                 r2 = r4 * 6 (int);
0x000D0D        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000D0E        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000D0F        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000D10        5000002F                 I0 = Null + r0;
0x000D11        51C00006                 L0 = Null + 6;
0x000D12        F3E20000                 push FP;
0x000D13        F3A60000                 pop B0;
0x000D14        F1070006                 FP = FP + 6;
0x000D15        9845007F                 r2 = r3 * r5 (int);
0x000D16        004400B4                 if NEG r2 = r2 + r9;
0x000D17        9434006F                 r1 = r2 * r4 (frac);
0x000D18        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x000D19        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000D1A        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x000D1B        5876003F                 I7 = I6 + r1;
0x000D1C        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000D1D        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D1E        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D1F        7C7B007F                 I7 = M3 - I7;
0x000D20        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D21        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D22        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D23        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000D24        903100AF                 r1 = rMAC ASHIFT r8;
0x000D25        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000D26        2005006F                 Null = r3 - r4;
0x000D27        2055005A                 if GE r3 = r3 - r3;
0x000D28        9845007F                 r2 = r3 * r5 (int);
0x000D29        004400B4                 if NEG r2 = r2 + r9;
0x000D2A        9434006F                 r1 = r2 * r4 (frac);
0x000D2B        2007004F                 Null = r5 - r2;
0x000D2C        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000D2D        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000D2E        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000D2F        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000D30        5F280000                 I2 = I2 + M0;
0x000D31        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000D32        8132001F                 r1 = r0 AND 0x1f;
0x000D33        2133000C                 r1 = r1 - 12;
0x000D34        19402F6A                 M[$cbuffer.tmp] = r2 + Null;
0x000D35        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000D37        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000D38        19502F6B                 M[0x2f6b] = r3 + Null;
0x000D39        01400066                 r2 = Null + 102;
0x000D3A        65030007                 Null = 7 - r1;
0x000D3B        00330044                 if NEG r1 = r1 + r2;
0x000D3C        D153FE73                 r3 = M[r1 + -397];
0x000D3D        FD000030 81420000        r2 = r0 AND 0x300000;
0x000D3F        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000D40        8155FFFB                 r3 = r3 AND 0xfffb;
0x000D41        8D44006B                 r2 = r2 LSHIFT -21;
0x000D42        8D440002                 r2 = r2 LSHIFT 2;
0x000D43        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000D44        FD000003 81428000        r2 = r0 AND 0x38000;
0x000D46        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000D47        8155FFFC                 r3 = r3 AND 0xfffc;
0x000D48        8D440070                 r2 = r2 LSHIFT -16;
0x000D49        8D440000                 r2 = r2 LSHIFT 0;
0x000D4A        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000D4B        81426000                 r2 = r0 AND 0x6000;
0x000D4C        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000D4D        8155FFF7                 r3 = r3 AND 0xfff7;
0x000D4E        8D440072                 r2 = r2 LSHIFT -14;
0x000D4F        8D440003                 r2 = r2 LSHIFT 3;
0x000D50        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000D51        D553FE73                 M[r1 + -397] = r3;
0x000D52        09502F6B                 r3 = Null + M[0x2f6b];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000D53        8132001F                 r1 = r0 AND 0x1f;
0x000D54        2133000C                 r1 = r1 - 12;
0x000D55        01400009                 r2 = Null + 9;
0x000D56        65030007                 Null = 7 - r1;
0x000D57        00330044                 if NEG r1 = r1 + r2;
0x000D58        09402F6A                 r2 = Null + M[$cbuffer.tmp];
0x000D59        0123FE23                 r0 = r1 + -477;
0x000D5A        E430002F                 r1 = Null + 1;
0x000D5B        DC0D000F                 rts;

 <$audio_proc.delay.process>
0x000D5C        F3D00000                 push rLink;
0x000D5D        D12A0000                 r0 = M[r8 + 0];
0x000D5E        E1F004BB                 call $frmbuffer.get_buffer;
0x000D5F        5040002F                 I4 = Null + r0;
0x000D60        50E0003F                 L4 = Null + r1;
0x000D61        00C5000F                 r10 = r3 + Null;
0x000D62        D12A0001                 r0 = M[r8 + 1];
0x000D63        E1F004DF                 call $frmbuffer.set_frame_size;
0x000D64        E1F004B5                 call $frmbuffer.get_buffer;
0x000D65        5050002F                 I5 = Null + r0;
0x000D66        50F0003F                 L5 = Null + r1;
0x000D67        D12A0003                 r0 = M[r8 + 3];
0x000D68        70A0002F                 M2 = Null - r0;
0x000D69        DD000013                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000D6A        D12A0002                 r0 = M[r8 + 2];
0x000D6B        E1F004A9                 call $cbuffer.get_write_address_and_size;
0x000D6C        5010002F                 I1 = Null + r0;
0x000D6D        50D0003F                 L1 = Null + r1;
0x000D6E        5000002F                 I0 = Null + r0;
0x000D6F        50C0003F                 L0 = Null + r1;
0x000D70        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000D71        E5F00003                 do $M.audio_proc.delay.process.loop_delay;
0x000D72        03003121                 Null = Null + Null, r1 = M[I0,1], r0 = M[I4,1];
0x000D73        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_delay>
0x000D74        D12A0002                 r0 = M[r8 + 2];
0x000D75        4430001F                 r1 = Null + I1;
0x000D76        E1F004AC                 call $cbuffer.set_write_address;

 <$M.audio_proc.delay.process.jp_done>
0x000D77        51C00000                 L0 = Null + 0;
0x000D78        51D00000                 L1 = Null + 0;
0x000D79        51E00000                 L4 = Null + 0;
0x000D7A        51F00000                 L5 = Null + 0;
0x000D7B        DDF004C9                 jump $pop_rLink_and_rts;

 <$M.audio_proc.delay.process.jp_no_delay>
0x000D7C        E5F00003                 do $M.audio_proc.delay.process.loop_copy;
0x000D7D        03000031                 Null = Null + Null, r1 = M[I4,1];
0x000D7E        030000B5                 Null = Null + Null, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_copy>
0x000D7F        DDF0FFF8                 jump $M.audio_proc.delay.process.jp_done;

 <$M.report_latency_to_vm.init>
0x000D80        F3D00000                 push rLink;
0x000D81        09402F9B                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000D82        01500D85                 r3 = Null + 3461;
0x000D83        E1F004B7                 call $timer.schedule_event_in;
0x000D84        DDF004C0                 jump $pop_rLink_and_rts;

 <$report_latency_to_vm>
0x000D85        F3D00000                 push rLink;
0x000D86        01401023                 r2 = Null + 4131;
0x000D87        FD0000FF 012035F2        r0 = Null + -51726;
0x000D89        D1520009                 r3 = M[r0 + 9];
0x000D8A        09202F9C                 r0 = Null + M[$M.configure_latency_reporting.average_latency];
0x000D8B        FD0000FF 09A06839        r8 = Null + M[$alpha];
0x000D8D        FD00007F 653AFFFF        r1 = 8388607 - r8;
0x000D8F        CC1A005F                 rMAC = r8 * r3 (SS);
0x000D90        AC13002F                 rMAC = rMAC + r1 * r0 (SS);
0x000D91        0051000F                 r3 = rMAC + Null;
0x000D92        19502F9C                 M[$M.configure_latency_reporting.average_latency] = r3 + Null;
0x000D93        09602F9A                 r4 = Null + M[$M.report_latency_to_vm.reported_latency];
0x000D94        2065006F                 r4 = r3 - r4;
0x000D95        20600064                 if NEG r4 = Null - r4;
0x000D96        FD0000FF 2906683B        Null = r4 - M[$M.configure_latency_reporting.min_change];
0x000D98        DD400007                 if NEG jump $M.report_latency_to_vm.do_not_send_msg;
0x000D99        19502F9A                 M[$M.report_latency_to_vm.reported_latency] = r3 + Null;
0x000D9A        FD000001 955547AE        r3 = r3 * 0.0099999904632568359 (frac);
0x000D9C        21257FFF                 r0 = r3 - 32767;
0x000D9D        20550025                 if POS r3 = r3 - r0;
0x000D9E        E1F00290                 call $message.send_short;

 <$M.report_latency_to_vm.do_not_send_msg>
0x000D9F        01302EFD                 r1 = Null + 12029;
0x000DA0        09402F9B                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000DA1        01500D85                 r3 = Null + 3461;
0x000DA2        E1F00495                 call $timer.schedule_event_in_period;
0x000DA3        DDF004A1                 jump $pop_rLink_and_rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000DA4        8132001F                 r1 = r0 AND 0x1f;
0x000DA5        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000DA7        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x000DA8        19402F6A                 M[$cbuffer.tmp] = r2 + Null;
0x000DA9        19502F6B                 M[0x2f6b] = r3 + Null;
0x000DAA        01400062                 r2 = Null + 98;
0x000DAB        65030007                 Null = 7 - r1;
0x000DAC        00330044                 if NEG r1 = r1 + r2;
0x000DAD        D153FE7B                 r3 = M[r1 + -389];
0x000DAE        FD000030 81420000        r2 = r0 AND 0x300000;
0x000DB0        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000DB1        8155FFFB                 r3 = r3 AND 0xfffb;
0x000DB2        8D44006B                 r2 = r2 LSHIFT -21;
0x000DB3        8D440002                 r2 = r2 LSHIFT 2;
0x000DB4        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000DB5        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000DB7        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000DB8        8155FFF7                 r3 = r3 AND 0xfff7;
0x000DB9        8D44006D                 r2 = r2 LSHIFT -19;
0x000DBA        8D440003                 r2 = r2 LSHIFT 3;
0x000DBB        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x000DBC        FD000003 81428000        r2 = r0 AND 0x38000;
0x000DBE        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000DBF        8155FFFC                 r3 = r3 AND 0xfffc;
0x000DC0        8D440070                 r2 = r2 LSHIFT -16;
0x000DC1        8D440000                 r2 = r2 LSHIFT 0;
0x000DC2        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000DC3        D553FE7B                 M[r1 + -389] = r3;
0x000DC4        09402F6A                 r2 = Null + M[$cbuffer.tmp];
0x000DC5        09502F6B                 r3 = Null + M[0x2f6b];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000DC6        8122001F                 r0 = r0 AND 0x1f;
0x000DC7        01300005                 r1 = Null + 5;
0x000DC8        65020007                 Null = 7 - r0;
0x000DC9        00220034                 if NEG r0 = r0 + r1;
0x000DCA        0122FE2B                 r0 = r0 + -469;
0x000DCB        E430002F                 r1 = Null + 1;
0x000DCC        DC0D000F                 rts;

 <$audio_out_copy_handler>
0x000DCD        F3D00000                 push rLink;
0x000DCE        09202F7A                 r0 = Null + M[$music_example.sync_flag_ptr];
0x000DCF        1820000F                 M[r0] = Null + Null;
0x000DD0        FD000080 0120000D        r0 = Null + -8388595;
0x000DD2        E440002F                 r2 = Null + 1;
0x000DD3        E1F00436                 call $cbuffer.is_it_enabled;
0x000DD4        00400000                 if EQ r2 = Null + Null;
0x000DD5        19402F75                 M[$mono_stereo_mode] = r2 + Null;
0x000DD6        01A02D3F                 r8 = Null + 11583;
0x000DD7        FD0000FF 019065FE        r7 = Null + -39426;
0x000DD9        0004000F                 Null = r2 + Null;
0x000DDA        00A90000                 if EQ r8 = r7 + Null;
0x000DDB        19A02F70                 M[$latency_calc_current_warp] = r8 + Null;
0x000DDC        FD0000FF 01A034F9        r8 = Null + -51975;
0x000DDE        FD0000FF 01905FFB        r7 = Null + -40965;
0x000DE0        09002F75                 Null = Null + M[$mono_stereo_mode];
0x000DE1        00A90000                 if EQ r8 = r7 + Null;
0x000DE2        E1F0FA7B                 call $cbops.copy;
0x000DE3        E1F0FD7F                 call $tone_copy_extra;
0x000DE4        FD0000FF 09A06814        r8 = Null + M[$stereo_copy_struc_ptr];
0x000DE6        09902F74                 r7 = Null + M[$mono_copy_struc_ptr];
0x000DE7        09002F75                 Null = Null + M[$mono_stereo_mode];
0x000DE8        00A90000                 if EQ r8 = r7 + Null;
0x000DE9        E1F011C4                 call $cbops.dac_av_copy;
0x000DEA        01302EB5                 r1 = Null + 11957;
0x000DEB        014005DC                 r2 = Null + 1500;
0x000DEC        01500DCD                 r3 = Null + 3533;
0x000DED        E1F0044A                 call $timer.schedule_event_in_period;
0x000DEE        DDF00456                 jump $pop_rLink_and_rts;

 <$message.private.try_to_send_message>
0x000DEF        F3D00000                 push rLink;
0x000DF0        E1F00401                 call $block_interrupts;
0x000DF1        0920E000                 r0 = Null + M[0xffe000];
0x000DF2        29222FBE                 r0 = r0 - M[$message.last_seq_sent];
0x000DF3        8102FFFF                 Null = r0 AND 0xffff;
0x000DF4        DD100016                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x000DF5        09302FBD                 r1 = Null + M[$message.queue_read_ptr];
0x000DF6        D1230F79                 r0 = M[r1 + 3961];
0x000DF7        1920E002                 M[0xffe002] = r0 + Null;
0x000DF8        D1230F7A                 r0 = M[r1 + 3962];
0x000DF9        1920E003                 M[0xffe003] = r0 + Null;
0x000DFA        D1230F7B                 r0 = M[r1 + 3963];
0x000DFB        1920E004                 M[0xffe004] = r0 + Null;
0x000DFC        D1230F7C                 r0 = M[r1 + 3964];
0x000DFD        1920E005                 M[0xffe005] = r0 + Null;
0x000DFE        09202FBE                 r0 = Null + M[$message.last_seq_sent];
0x000DFF        E422002F                 r0 = r0 + 1;
0x000E00        19202FBE                 M[$message.last_seq_sent] = r0 + Null;
0x000E01        D1230F78                 r0 = M[r1 + 3960];
0x000E02        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x000E03        01330005                 r1 = r1 + 5;
0x000E04        2103006E                 Null = r1 - 110;
0x000E05        00300000                 if EQ r1 = Null + Null;
0x000E06        19302FBD                 M[$message.queue_read_ptr] = r1 + Null;
0x000E07        FD0000FF 2903685D        Null = r1 - M[$message.queue_write_ptr];
0x000E09        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x000E0A        09402F24                 r2 = Null + M[0x2f24];
0x000E0B        E1F0025F                 call $timer.cancel_event;
0x000E0C        01302F21                 r1 = Null + 12065;
0x000E0D        014003E8                 r2 = Null + 1000;
0x000E0E        01500DEF                 r3 = Null + 3567;
0x000E0F        E1F0042B                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x000E10        E1F003B5                 call $interrupt.unblock;
0x000E11        DDF00433                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x000E12        FD0000FF 1900686B        M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x000E14        D14A0002                 r2 = M[r8 + 2];
0x000E15        DC0D0000                 if EQ rts;
0x000E16        51800001                 M0 = Null + 1;
0x000E17        5020004F                 I2 = Null + r2;
0x000E18        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x000E19        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x000E1A        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x000E1B        67180000                 rMAC = rMAC - M0;
0x000E1C        00100004                 if NEG rMAC = Null + Null;
0x000E1D        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x000E1E        00710005                 if POS r5 = rMAC + Null;
0x000E1F        D16A0006                 r4 = M[r8 + 6];
0x000E20        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x000E21        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000E22        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x000E23        67180000                 rMAC = rMAC - M0;
0x000E24        00100004                 if NEG rMAC = Null + Null;
0x000E25        2007001F                 Null = r5 - rMAC;
0x000E26        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x000E27        D10A000F                 Null = M[r8 + 15];
0x000E28        DC0D0001                 if NE rts;
0x000E29        F3D00000                 push rLink;
0x000E2A        D15A0002                 r3 = M[r8 + 2];
0x000E2B        D55A000F                 M[r8 + 15] = r3;
0x000E2C        016A0010                 r4 = r8 + 16;
0x000E2D        512A000B                 I2 = r8 + 11;
0x000E2E        51350005                 I3 = r3 + 5;
0x000E2F        D1050004                 Null = M[r3 + 4];
0x000E30        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x000E31        512A0007                 I2 = r8 + 7;
0x000E32        E1F0025B                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x000E33        5F380000                 I3 = I3 + M0;
0x000E34        E1F00259                 call $reset_iir_resampler;
0x000E35        50C0000F                 L0 = Null + Null;
0x000E36        DDF0040E                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x000E37        F3D00000                 push rLink;
0x000E38        E1F003B9                 call $block_interrupts;
0x000E39        01C00032                 r10 = Null + 50;
0x000E3A        01602FC1                 r4 = Null + 12225;
0x000E3B        09202FC1                 r0 = Null + M[$timer.last_addr];
0x000E3C        E5F00008                 do $M.timer.schedule_event_at.loop;
0x000E3D        E402002F                 Null = r0 + 1;
0x000E3E        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x000E3F        D1720001                 r5 = M[r0 + 1];
0x000E40        2004007F                 Null = r2 - r5;
0x000E41        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000E42        0062000F                 r4 = r0 + Null;
0x000E43        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x000E44        E1F026BA                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x000E45        D5360000                 M[r4 + 0] = r1;
0x000E46        D5230000                 M[r1 + 0] = r0;
0x000E47        D5430001                 M[r1 + 1] = r2;
0x000E48        D5530002                 M[r1 + 2] = r3;
0x000E49        FD0000FF 09506860        r3 = Null + M[$timer.id];
0x000E4B        D5530003                 M[r1 + 3] = r3;
0x000E4C        E425002F                 r0 = r3 + 1;
0x000E4D        20200050                 if EQ r0 = Null - r3;
0x000E4E        FD0000FF 19206860        M[$timer.id] = r0 + Null;
0x000E50        0900FE1F                 Null = Null + M[0xfffe1f];
0x000E51        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x000E52        2904FE21                 Null = r2 - M[0xfffe21];
0x000E53        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x000E54        1940FE21                 M[0xfffe21] = r2 + Null;
0x000E55        E420002F                 r0 = Null + 1;
0x000E56        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x000E57        E1F0036E                 call $interrupt.unblock;
0x000E58        DDF003EC                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x000E59        8132001F                 r1 = r0 AND 0x1f;
0x000E5A        2133000C                 r1 = r1 - 12;
0x000E5B        D1432CFB                 r2 = M[r1 + 11515];
0x000E5C        00200000                 if EQ r0 = Null + Null;
0x000E5D        DC0D0000                 if EQ rts;
0x000E5E        19502F6A                 M[$cbuffer.tmp] = r3 + Null;
0x000E5F        D054000F                 r3 = M[r2 + Null];
0x000E60        FD0000FF D1435BF0        r2 = M[r1 + -42000];
0x000E62        D3400000                 r2 = M[r2 + Null];
0x000E63        23540000                 r3 = r3 - r2;
0x000E64        D1430FF2                 r2 = M[r1 + 4082];
0x000E65        E434003F                 r1 = r2 - 1;
0x000E66        8035003F                 r1 = r3 AND r1;
0x000E67        00340000                 if EQ r1 = r2 + Null;
0x000E68        E433003F                 r1 = r1 - 1;
0x000E69        09502F6A                 r3 = Null + M[$cbuffer.tmp];
0x000E6A        FD000003 81228000        r0 = r0 AND 0x38000;
0x000E6C        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E6D        FD000001 21028000        Null = r0 - 98304;
0x000E6F        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E70        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x000E71        FD000002 21028000        Null = r0 - 163840;
0x000E73        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x000E74        9123007E                 r0 = r1 ASHIFT -2;
0x000E75        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x000E76        E423003F                 r0 = r1 - 1;
0x000E77        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000E78        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x000E79        0023000F                 r0 = r1 + Null;
0x000E7A        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x000E7B        9123007F                 r0 = r1 ASHIFT -1;
0x000E7C        DC0D000F                 rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x000E7D        F3D00000                 push rLink;
0x000E7E        D1290000                 r0 = M[r7 + 0];
0x000E7F        E1F0039A                 call $frmbuffer.get_buffer;
0x000E80        5000002F                 I0 = Null + r0;
0x000E81        50C0003F                 L0 = Null + r1;
0x000E82        D1290001                 r0 = M[r7 + 1];
0x000E83        E1F00396                 call $frmbuffer.get_buffer;
0x000E84        5040002F                 I4 = Null + r0;
0x000E85        50E0003F                 L4 = Null + r1;
0x000E86        00C5000F                 r10 = r3 + Null;
0x000E87        D1290002                 r0 = M[r7 + 2];
0x000E88        E1F003BA                 call $frmbuffer.set_frame_size;
0x000E89        E1F00390                 call $frmbuffer.get_buffer;
0x000E8A        5010002F                 I1 = Null + r0;
0x000E8B        50D0003F                 L1 = Null + r1;
0x000E8C        005C000F                 r3 = r10 + Null;
0x000E8D        D1290003                 r0 = M[r7 + 3];
0x000E8E        E1F003B4                 call $frmbuffer.set_frame_size;
0x000E8F        E1F0038A                 call $frmbuffer.get_buffer;
0x000E90        5050002F                 I5 = Null + r0;
0x000E91        50F0003F                 L5 = Null + r1;
0x000E92        F3D40000                 pop rLink;
0x000E93        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x000E94        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x000E95        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x000E96        50C0000F                 L0 = Null + Null;
0x000E97        50D0000F                 L1 = Null + Null;
0x000E98        50E0000F                 L4 = Null + Null;
0x000E99        50F0000F                 L5 = Null + Null;
0x000E9A        DC0D000F                 rts;

 <$cbops.shift_24bit.main>
0x000E9B        51800001                 M0 = Null + 1;
0x000E9C        DDF00002                 jump $M.cbops.shift.main.ready;

 <$cbops.shift.main>
0x000E9D        51800000                 M0 = Null + 0;

 <$M.cbops.shift.main.ready>
0x000E9E        D12A0000                 r0 = M[r8 + 0];
0x000E9F        D038002F                 r1 = M[r6 + r0];
0x000EA0        5000003F                 I0 = Null + r1;
0x000EA1        D039002F                 r1 = M[r7 + r0];
0x000EA2        50C0003F                 L0 = Null + r1;
0x000EA3        D12A0001                 r0 = M[r8 + 1];
0x000EA4        D038002F                 r1 = M[r6 + r0];
0x000EA5        5040003F                 I4 = Null + r1;
0x000EA6        D039002F                 r1 = M[r7 + r0];
0x000EA7        50E0003F                 L4 = Null + r1;
0x000EA8        D14A0002                 r2 = M[r8 + 2];
0x000EA9        E4CC003F                 r10 = r10 - 1;
0x000EAA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000EAB        93240000                 r0 = r0 ASHIFT r2;
0x000EAC        47080000                 Null = Null + M0;
0x000EAD        DD100005                 if NE jump $M.cbops.shift.main.do_double_write;
0x000EAE        E5F00003                 do $M.cbops.shift.main.loop;
0x000EAF        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000EB0        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x000EB1        DDF0000A                 jump $M.cbops.shift.main.done;

 <$M.cbops.shift.main.do_double_write>
0x000EB2        8D320008                 r1 = r0 LSHIFT 8;
0x000EB3        8D220078                 r0 = r0 LSHIFT -8;
0x000EB4        E5F00006                 do $M.cbops.shift.main.two_write_loop;
0x000EB5        030051B1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r1;
0x000EB6        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000EB7        93540000                 r3 = r3 ASHIFT r2;
0x000EB8        8D350008                 r1 = r3 LSHIFT 8;
0x000EB9        8D250078                 r0 = r3 LSHIFT -8;

 <$M.cbops.shift.main.two_write_loop>
0x000EBA        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.shift.main.done>
0x000EBB        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000EBC        51E00000                 L4 = Null + 0;
0x000EBD        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x000EBE        8132001F                 r1 = r0 AND 0x1f;
0x000EBF        D1432CEF                 r2 = M[r1 + 11503];
0x000EC0        00200000                 if EQ r0 = Null + Null;
0x000EC1        DC0D0000                 if EQ rts;
0x000EC2        D3400000                 r2 = M[r2 + Null];
0x000EC3        19502F6A                 M[$cbuffer.tmp] = r3 + Null;
0x000EC4        FD0000FF D1535BE4        r3 = M[r1 + -42012];
0x000EC6        D3500000                 r3 = M[r3 + Null];
0x000EC7        2054005F                 r3 = r2 - r3;
0x000EC8        D1430FE6                 r2 = M[r1 + 4070];
0x000EC9        E434003F                 r1 = r2 - 1;
0x000ECA        8035003F                 r1 = r3 AND r1;
0x000ECB        09502F6A                 r3 = Null + M[$cbuffer.tmp];
0x000ECC        FD000003 81228000        r0 = r0 AND 0x38000;
0x000ECE        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000ECF        FD000001 21028000        Null = r0 - 98304;
0x000ED1        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000ED2        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x000ED3        FD000002 21028000        Null = r0 - 163840;
0x000ED5        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x000ED6        9123007E                 r0 = r1 ASHIFT -2;
0x000ED7        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x000ED8        E423003F                 r0 = r1 - 1;
0x000ED9        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000EDA        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x000EDB        0023000F                 r0 = r1 + Null;
0x000EDC        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x000EDD        9123007F                 r0 = r1 ASHIFT -1;
0x000EDE        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x000EDF        5020009F                 I2 = Null + r7;
0x000EE0        51900001                 M1 = Null + 1;
0x000EE1        F3D00000                 push rLink;
0x000EE2        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x000EE3        E1F00336                 call $frmbuffer.get_buffer;
0x000EE4        5000002F                 I0 = Null + r0;
0x000EE5        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x000EE6        E1F00333                 call $frmbuffer.get_buffer;
0x000EE7        5010002F                 I1 = Null + r0;
0x000EE8        50D0003F                 L1 = Null + r1;
0x000EE9        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x000EEA        E1F00358                 call $frmbuffer.set_frame_size;
0x000EEB        E1F0032E                 call $frmbuffer.get_buffer;
0x000EEC        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x000EED        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x000EEE        F3D40000                 pop rLink;
0x000EEF        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x000EF0        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x000EF1        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x000EF2        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x000EF3        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x000EF4        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x000EF5        9041008F                 r2 = rMAC ASHIFT r6;
0x000EF6        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x000EF7        51C00000                 L0 = Null + 0;
0x000EF8        51D00000                 L1 = Null + 0;
0x000EF9        51E00000                 L4 = Null + 0;
0x000EFA        DC0D000F                 rts;

 <$cbops.copy_op_24bit_audio.main>
0x000EFB        51800001                 M0 = Null + 1;
0x000EFC        DDF00002                 jump $M.cbops.copy_op.main.ready;

 <$cbops.copy_op.main>
0x000EFD        51800000                 M0 = Null + 0;

 <$M.cbops.copy_op.main.ready>
0x000EFE        D12A0000                 r0 = M[r8 + 0];
0x000EFF        D038002F                 r1 = M[r6 + r0];
0x000F00        5000003F                 I0 = Null + r1;
0x000F01        D039002F                 r1 = M[r7 + r0];
0x000F02        50C0003F                 L0 = Null + r1;
0x000F03        D12A0001                 r0 = M[r8 + 1];
0x000F04        D038002F                 r1 = M[r6 + r0];
0x000F05        5040003F                 I4 = Null + r1;
0x000F06        D039002F                 r1 = M[r7 + r0];
0x000F07        50E0003F                 L4 = Null + r1;
0x000F08        E4CC003F                 r10 = r10 - 1;
0x000F09        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000F0A        47080000                 Null = Null + M0;
0x000F0B        DD100004                 if NE jump $M.cbops.copy_op.main.do_double_write;
0x000F0C        E5F00002                 do $M.cbops.copy_op.main.loop;
0x000F0D        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x000F0E        DDF00009                 jump $M.cbops.copy_op.main.done;

 <$M.cbops.copy_op.main.do_double_write>
0x000F0F        8D320008                 r1 = r0 LSHIFT 8;
0x000F10        8D220078                 r0 = r0 LSHIFT -8;
0x000F11        E5F00005                 do $M.cbops.copy_op.main.two_write_loop;
0x000F12        030041B1                 Null = Null + Null, r2 = M[I0,1], M[I4,1] = r1;
0x000F13        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000F14        8D340008                 r1 = r2 LSHIFT 8;
0x000F15        8D240078                 r0 = r2 LSHIFT -8;

 <$M.cbops.copy_op.main.two_write_loop>
0x000F16        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.copy_op.main.done>
0x000F17        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000F18        51E00000                 L4 = Null + 0;
0x000F19        DC0D000F                 rts;

 <$pskey.result_message_handler>
0x000F1A        FD000000 21028008        Null = r0 - 32776;
0x000F1C        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x000F1D        D035000F                 r1 = M[r3 + Null];
0x000F1E        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000F1F        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000F20        FD0000FF 1900685F        M[$pskey.request_in_progress] = Null + Null;
0x000F22        01702FC0                 r5 = Null + 12224;
0x000F23        09202FC0                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000F24        D1620001                 r4 = M[r0 + 1];
0x000F25        2003006F                 Null = r1 - r4;
0x000F26        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000F27        0072000F                 r5 = r0 + Null;
0x000F28        D1220000                 r0 = M[r0 + 0];
0x000F29        E402002F                 Null = r0 + 1;
0x000F2A        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x000F2B        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x000F2C        F3D00000                 push rLink;
0x000F2D        D1620000                 r4 = M[r0 + 0];
0x000F2E        D5670000                 M[r5 + 0] = r4;
0x000F2F        D1220002                 r0 = M[r0 + 2];
0x000F30        E002000F                 call r0;
0x000F31        09302FC0                 r1 = Null + M[$pskey.last_addr];
0x000F32        E403002F                 Null = r1 + 1;
0x000F33        E1100059                 if NE call $pskey.private.send_request;
0x000F34        DDF00310                 jump $pop_rLink_and_rts;

 <$cbops.dc_remove.main>
0x000F35        D12A0000                 r0 = M[r8 + 0];
0x000F36        D038002F                 r1 = M[r6 + r0];
0x000F37        5000003F                 I0 = Null + r1;
0x000F38        D039002F                 r1 = M[r7 + r0];
0x000F39        50C0003F                 L0 = Null + r1;
0x000F3A        D12A0001                 r0 = M[r8 + 1];
0x000F3B        D038002F                 r1 = M[r6 + r0];
0x000F3C        5040003F                 I4 = Null + r1;
0x000F3D        D039002F                 r1 = M[r7 + r0];
0x000F3E        50E0003F                 L4 = Null + r1;
0x000F3F        D11A0002                 rMAC = M[r8 + 2];
0x000F40        013009D5                 r1 = Null + 2517;
0x000F41        FD000080 01500000        r3 = Null + -8388608;
0x000F43        2045003F                 r2 = r3 - r1;
0x000F44        E4CC003F                 r10 = r10 - 1;
0x000F45        CF142100                 rMAC = rMAC * r2 (SS), r0 = M[I0,1];
0x000F46        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000F47        23210000                 r0 = r0 - rMAC;
0x000F48        9C220056                 if V r0 = r0 * r3 (int) (sat);
0x000F49        E5F00005                 do $M.cbops.dc_remove.main.loop;
0x000F4A        CF1421A1                 rMAC = rMAC * r2 (SS), r0 = M[I0,1], M[I4,1] = r0;
0x000F4B        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000F4C        23210000                 r0 = r0 - rMAC;
0x000F4D        9C220056                 if V r0 = r0 * r3 (int) (sat);

 <$M.cbops.dc_remove.main.loop>
0x000F4E        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000F4F        51E00000                 L4 = Null + 0;
0x000F50        D51A0002                 M[r8 + 2] = rMAC;
0x000F51        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x000F52        01300019                 r1 = Null + 25;
0x000F53        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x000F54        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F55        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F56        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F57        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F58        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F59        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5C        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F5D        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F5E        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F5F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F60        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F61        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F62        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F63        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F64        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F65        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F66        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F67        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F68        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F69        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F6C        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F6D        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F6E        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x000F6F        D12A0000                 r0 = M[r8 + 0];
0x000F70        D038002F                 r1 = M[r6 + r0];
0x000F71        5000003F                 I0 = Null + r1;
0x000F72        D039002F                 r1 = M[r7 + r0];
0x000F73        50C0003F                 L0 = Null + r1;
0x000F74        D12A0001                 r0 = M[r8 + 1];
0x000F75        D038002F                 r1 = M[r6 + r0];
0x000F76        5040003F                 I4 = Null + r1;
0x000F77        D039002F                 r1 = M[r7 + r0];
0x000F78        50E0003F                 L4 = Null + r1;
0x000F79        D12A0002                 r0 = M[r8 + 2];
0x000F7A        D038002F                 r1 = M[r6 + r0];
0x000F7B        5050003F                 I5 = Null + r1;
0x000F7C        D039002F                 r1 = M[r7 + r0];
0x000F7D        50F0003F                 L5 = Null + r1;
0x000F7E        D14A0003                 r2 = M[r8 + 3];
0x000F7F        8DCC007F                 r10 = r10 LSHIFT -1;
0x000F80        19C02FC3                 M[$cbops.amount_written] = r10 + Null;
0x000F81        E4CC003F                 r10 = r10 - 1;
0x000F82        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000F83        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x000F84        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F85        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F86        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x000F87        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F88        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F89        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x000F8A        51F00000                 L5 = Null + 0;
0x000F8B        DC0D000F                 rts;

 <$pskey.private.send_request>
0x000F8C        FD0000FF 0900685F        Null = Null + M[$pskey.request_in_progress];
0x000F8E        DC0D0001                 if NE rts;
0x000F8F        F3D00000                 push rLink;
0x000F90        09402F2C                 r2 = Null + M[0x2f2c];
0x000F91        E1F000D9                 call $timer.cancel_event;
0x000F92        E1F00270                 call $message.send_queue_space;
0x000F93        21020005                 Null = r0 - 5;
0x000F94        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x000F95        09302FC0                 r1 = Null + M[$pskey.last_addr];
0x000F96        85408006                 r2 = Null OR 0x8006;
0x000F97        D1530001                 r3 = M[r1 + 1];
0x000F98        E1F00096                 call $message.send_short;
0x000F99        E420002F                 r0 = Null + 1;
0x000F9A        FD0000FF 1920685F        M[$pskey.request_in_progress] = r0 + Null;
0x000F9C        DDF002A8                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x000F9D        01302F29                 r1 = Null + 12073;
0x000F9E        01402710                 r2 = Null + 10000;
0x000F9F        01500F8C                 r3 = Null + 3980;
0x000FA0        E1F0029A                 call $timer.schedule_event_in;
0x000FA1        DDF002A3                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x000FA2        01300017                 r1 = Null + 23;
0x000FA3        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x000FA4        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000FA5        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FA6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FA7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FA8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FA9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FAF        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000FB0        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000FB1        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000FB2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FB9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FBA        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000FBB        93E30000                 rMAC = rMAC ASHIFT r1;
0x000FBC        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x000FBD        01300015                 r1 = Null + 21;
0x000FBE        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x000FBF        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000FC0        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FC6        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000FC7        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000FC8        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000FC9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FCA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FCB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FCC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FCD        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000FCE        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000FCF        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000FD0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FD1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FD2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FD3        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000FD4        93E30000                 rMAC = rMAC ASHIFT r1;
0x000FD5        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x000FD6        F3D00000                 push rLink;
0x000FD7        51900001                 M1 = Null + 1;
0x000FD8        E1F00219                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000FD9        D0B9000F                 r9 = M[r7 + Null];
0x000FDA        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000FDB        D14B0006                 r2 = M[r9 + 6];
0x000FDC        D12B0000                 r0 = M[r9 + 0];
0x000FDD        D1320000                 r1 = M[r0 + 0];
0x000FDE        D16B0003                 r4 = M[r9 + 3];
0x000FDF        50D0003F                 L1 = Null + r1;
0x000FE0        E004000F                 call r2;
0x000FE1        5080006F                 M0 = Null + r4;
0x000FE2        D042000F                 r2 = M[r0 + Null];
0x000FE3        5010004F                 I1 = Null + r2;
0x000FE4        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000FE5        4440001F                 r2 = Null + I1;
0x000FE6        1824000F                 M[r0] = r2 + Null;
0x000FE7        E499002F                 r7 = r7 + 1;
0x000FE8        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000FE9        E1F001DC                 call $interrupt.unblock;
0x000FEA        50D0000F                 L1 = Null + Null;
0x000FEB        DDF00259                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x000FEC        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000FED        09302FC1                 r1 = Null + M[$timer.last_addr];
0x000FEE        E403002F                 Null = r1 + 1;
0x000FEF        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000FF0        D1230001                 r0 = M[r1 + 1];
0x000FF1        2942FE71                 r2 = r0 - M[0xfffe71];
0x000FF2        21040000                 Null = r2 - 0;
0x000FF3        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000FF4        D1D30002                 rLink = M[r1 + 2];
0x000FF5        D1230003                 r0 = M[r1 + 3];
0x000FF6        D5030003                 M[r1 + 3] = Null;
0x000FF7        D1430000                 r2 = M[r1 + 0];
0x000FF8        19402FC1                 M[$timer.last_addr] = r2 + Null;
0x000FF9        E00D000F                 call rLink;
0x000FFA        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000FFB        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000FFC        1920FE21                 M[0xfffe21] = r0 + Null;
0x000FFD        E450002F                 r3 = Null + 1;
0x000FFE        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000FFF        DDF00245                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x001000        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001001        DDF00243                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x001002        D5CB0008                 M[r9 + 8] = r10;
0x001003        D14B000A                 r2 = M[r9 + 10];
0x001004        200400CF                 Null = r2 - r10;
0x001005        004C0005                 if POS r2 = r10 + Null;
0x001006        D15B000B                 r3 = M[r9 + 11];
0x001007        200500CF                 Null = r3 - r10;
0x001008        005C0004                 if NEG r3 = r10 + Null;
0x001009        D1CB0007                 r10 = M[r9 + 7];
0x00100A        67C90000                 r10 = r10 - M1;
0x00100B        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x00100C        D54B000A                 M[r9 + 10] = r2;
0x00100D        D55B000B                 M[r9 + 11] = r3;
0x00100E        D5CB0007                 M[r9 + 7] = r10;
0x00100F        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x001010        D50B000B                 M[r9 + 11] = Null;
0x001011        D56B000A                 M[r9 + 10] = r4;
0x001012        D1CB0004                 r10 = M[r9 + 4];
0x001013        23540000                 r3 = r3 - r2;
0x001014        035C0000                 r3 = r3 + r10;
0x001015        00500004                 if NEG r3 = Null + Null;
0x001016        D55B0009                 M[r9 + 9] = r3;
0x001017        01C00078                 r10 = Null + 120;
0x001018        D5CB0007                 M[r9 + 7] = r10;
0x001019        DC0D000F                 rts;

 <$M.configure_latency_reporting.func>
0x00101A        F3D00000                 push rLink;
0x00101B        994403E8                 r2 = r2 * 1000 (int);
0x00101C        995503E8                 r3 = r3 * 1000 (int);
0x00101D        996603E8                 r4 = r4 * 1000 (int);
0x00101E        FD0000FF 1930683A        M[$M.configure_latency_reporting.enabled] = r1 + Null;
0x001020        E4600030                 if EQ r4 = Null - 1;
0x001021        19402F9B                 M[$M.configure_latency_reporting.report_period] = r2 + Null;
0x001022        FD0000FF 1950683B        M[$M.configure_latency_reporting.min_change] = r3 + Null;
0x001024        19602F9C                 M[$M.configure_latency_reporting.average_latency] = r4 + Null;
0x001025        0003000F                 Null = r1 + Null;
0x001026        DD100005                 if NE jump $M.configure_latency_reporting.no_cancel_needed;
0x001027        01302EFD                 r1 = Null + 12029;
0x001028        D1430003                 r2 = M[r1 + 3];
0x001029        E1100041                 if NE call $timer.cancel_event;
0x00102A        DDF00003                 jump $M.configure_latency_reporting.done;

 <$M.configure_latency_reporting.no_cancel_needed>
0x00102B        01302EFD                 r1 = Null + 12029;
0x00102C        E1F0FD54                 call $M.report_latency_to_vm.init;

 <$M.configure_latency_reporting.done>
0x00102D        DDF00217                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x00102E        F3D00000                 push rLink;
0x00102F        E1F001C2                 call $block_interrupts;
0x001030        FD0000FF 0930685D        r1 = Null + M[$message.queue_write_ptr];
0x001032        01230005                 r0 = r1 + 5;
0x001033        2102006E                 Null = r0 - 110;
0x001034        00200000                 if EQ r0 = Null + Null;
0x001035        29022FBD                 Null = r0 - M[$message.queue_read_ptr];
0x001036        DD000009                 if EQ jump $M.message.send_short.all_done;
0x001037        FD0000FF 1920685D        M[$message.queue_write_ptr] = r0 + Null;
0x001039        D5430F78                 M[r1 + 3960] = r2;
0x00103A        D5530F79                 M[r1 + 3961] = r3;
0x00103B        D5630F7A                 M[r1 + 3962] = r4;
0x00103C        D5730F7B                 M[r1 + 3963] = r5;
0x00103D        D5830F7C                 M[r1 + 3964] = r6;
0x00103E        E1F0FDB1                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x00103F        E1F00186                 call $interrupt.unblock;
0x001040        DDF00204                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_streams_ind>
0x001041        F3D00000                 push rLink;
0x001042        E1F001AF                 call $block_interrupts;
0x001043        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x001044        D0B9000F                 r9 = M[r7 + Null];
0x001045        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x001046        D15B0005                 r3 = M[r9 + 5];
0x001047        D12B0000                 r0 = M[r9 + 0];
0x001048        D1320000                 r1 = M[r0 + 0];
0x001049        D1820001                 r6 = M[r0 + 1];
0x00104A        D1A20002                 r8 = M[r0 + 2];
0x00104B        50D0003F                 L1 = Null + r1;
0x00104C        D16B0003                 r4 = M[r9 + 3];
0x00104D        D56B0002                 M[r9 + 2] = r4;
0x00104E        E005000F                 call r3;
0x00104F        D58B0001                 M[r9 + 1] = r6;
0x001050        E499002F                 r7 = r7 + 1;
0x001051        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x001052        E1F00173                 call $interrupt.unblock;
0x001053        50D0000F                 L1 = Null + Null;
0x001054        DDF001F0                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x001055        F3D00000                 push rLink;
0x001056        D1820002                 r6 = M[r0 + 2];
0x001057        D1A20001                 r8 = M[r0 + 1];
0x001058        20C800AF                 r10 = r6 - r8;
0x001059        00CC0034                 if NEG r10 = r10 + r1;
0x00105A        E1F0FFA8                 call $frame_sync.analyze_stream_ind;
0x00105B        D15B0008                 r3 = M[r9 + 8];
0x00105C        D14B0009                 r2 = M[r9 + 9];
0x00105D        23540000                 r3 = r3 - r2;
0x00105E        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x00105F        D14B0004                 r2 = M[r9 + 4];
0x001060        9144007F                 r2 = r2 ASHIFT -1;
0x001061        03540000                 r3 = r3 + r2;
0x001062        2006005F                 Null = r4 - r3;
0x001063        00560004                 if NEG r3 = r4 + Null;
0x001064        D14B000C                 r2 = M[r9 + 12];
0x001065        23450000                 r2 = r2 - r3;
0x001066        D54B000C                 M[r9 + 12] = r2;
0x001067        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x001068        01220002                 r0 = r0 + 2;
0x001069        DDF001DB                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x00106A        F3D00000                 push rLink;
0x00106B        E1F00186                 call $block_interrupts;
0x00106C        01C00032                 r10 = Null + 50;
0x00106D        01602FC1                 r4 = Null + 12225;
0x00106E        09202FC1                 r0 = Null + M[$timer.last_addr];
0x00106F        E5F00008                 do $M.timer.cancel_event.loop;
0x001070        E402002F                 Null = r0 + 1;
0x001071        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x001072        D1720003                 r5 = M[r0 + 3];
0x001073        2004007F                 Null = r2 - r5;
0x001074        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x001075        0062000F                 r4 = r0 + Null;
0x001076        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x001077        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x001078        D1320000                 r1 = M[r0 + 0];
0x001079        D5360000                 M[r4 + 0] = r1;
0x00107A        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x00107B        E1F0014A                 call $interrupt.unblock;
0x00107C        DDF001C8                 jump $pop_rLink_and_rts;

 <$cbuffer.empty_buffer>
0x00107D        F3D00000                 push rLink;
0x00107E        0052000F                 r3 = r0 + Null;
0x00107F        D802000F                 Null = SIGNDET r0;
0x001080        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x001081        E1F00193                 call $cbuffer.get_write_address_and_size;
0x001082        0032000F                 r1 = r0 + Null;
0x001083        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x001084        E1F00165                 call $cbuffer.calc_amount_data;
0x001085        00C2000F                 r10 = r0 + Null;
0x001086        0025000F                 r0 = r3 + Null;
0x001087        E1F00188                 call $cbuffer.get_read_address_and_size;
0x001088        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x001089        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x00108A        0025000F                 r0 = r3 + Null;
0x00108B        E1F00193                 call $cbuffer.set_read_address;
0x00108C        DDF001B8                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x00108D        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x00108E        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x00108F        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x001090        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x001091        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x001092        03650000                 r4 = r4 + r3;
0x001093        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x001094        03620000                 r4 = r4 + r0;
0x001095        59330004                 I3 = I3 + 4;
0x001096        00C2000F                 r10 = r0 + Null;
0x001097        DC0D0000                 if EQ rts;
0x001098        5000003F                 I0 = Null + r1;
0x001099        59330002                 I3 = I3 + 2;
0x00109A        F2D03C00                 push rLink, r1 = M[I3,M0];
0x00109B        21330002                 r1 = r1 - 2;
0x00109C        E003000F                 call r1;
0x00109D        5B330000                 I3 = I3 + r1;
0x00109E        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x00109F        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x0010A0        DDF001A4                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x0010A1        F3D00000                 push rLink;
0x0010A2        E1F0014F                 call $block_interrupts;
0x0010A3        D5430001                 M[r1 + 1] = r2;
0x0010A4        D5530002                 M[r1 + 2] = r3;
0x0010A5        E450003F                 r3 = Null - 1;
0x0010A6        D5530000                 M[r1 + 0] = r3;
0x0010A7        01202FC0                 r0 = Null + 12224;

 <$M.pskey.read_key.find_end_of_list>
0x0010A8        0042000F                 r2 = r0 + Null;
0x0010A9        D1240000                 r0 = M[r2 + 0];
0x0010AA        E402002F                 Null = r0 + 1;
0x0010AB        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x0010AC        D5340000                 M[r2 + 0] = r1;
0x0010AD        21042FC0                 Null = r2 - 12224;
0x0010AE        E100FEDE                 if EQ call $pskey.private.send_request;
0x0010AF        E1F00116                 call $interrupt.unblock;
0x0010B0        DDF00194                 jump $pop_rLink_and_rts;

 <$latency.reset_encoded_latency>
0x0010B1        F3D00000                 push rLink;
0x0010B2        D1290001                 r0 = M[r7 + 1];
0x0010B3        DD00000E                 if EQ jump $M.latency_measure.reset.encoded_reset_done;
0x0010B4        E1F0FFC9                 call $cbuffer.empty_buffer;
0x0010B5        D1290002                 r0 = M[r7 + 2];
0x0010B6        D1220001                 r0 = M[r0 + 1];
0x0010B7        D5290007                 M[r7 + 7] = r0;
0x0010B8        D1290003                 r0 = M[r7 + 3];
0x0010B9        D1220002                 r0 = M[r0 + 2];
0x0010BA        D5290008                 M[r7 + 8] = r0;
0x0010BB        FD00007F 0120FFFF        r0 = Null + 8388607;
0x0010BD        D529000A                 M[r7 + 10] = r0;
0x0010BE        D529000B                 M[r7 + 11] = r0;
0x0010BF        D529000C                 M[r7 + 12] = r0;
0x0010C0        D529000D                 M[r7 + 13] = r0;

 <$M.latency_measure.reset.encoded_reset_done>
0x0010C1        DDF00183                 jump $pop_rLink_and_rts;

 <$cbops.switch_op.helper>
0x0010C2        E440002F                 r2 = Null + 1;
0x0010C3        D12A0000                 r0 = M[r8 + 0];
0x0010C4        D13A0002                 r1 = M[r8 + 2];
0x0010C5        00340000                 if EQ r1 = r2 + Null;
0x0010C6        D3200000                 r0 = M[r0 + Null];
0x0010C7        D14A0003                 r2 = M[r8 + 3];
0x0010C8        88220031                 if NE r0 = r0 XOR r1;
0x0010C9        83230000                 r0 = r0 AND r1;
0x0010CA        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x0010CB        D12A0001                 r0 = M[r8 + 1];
0x0010CC        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x0010CD        21AAFFFD                 r8 = r8 - -3;
0x0010CE        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x0010CF        D12AFFFE                 r0 = M[r8 + -2];
0x0010D0        E402002F                 Null = r0 + 1;
0x0010D1        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x0010D2        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x0010D3        DC0D000F                 rts;

 <$math.log2_abs_table>
0x0010D4        D881000F                 r6 = SIGNDET rMAC;
0x0010D5        93E80000                 rMAC = rMAC ASHIFT r6;
0x0010D6        20100014                 if NEG rMAC = Null - rMAC;
0x0010D7        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x0010D8        D881000F                 r6 = SIGNDET rMAC;
0x0010D9        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x0010DA        E488002F                 r6 = r6 + 1;
0x0010DB        91880010                 r6 = r6 ASHIFT 16;
0x0010DC        8D310002                 r1 = rMAC LSHIFT 2;
0x0010DD        8D33006D                 r1 = r1 LSHIFT -19;
0x0010DE        8D210007                 r0 = rMAC LSHIFT 7;
0x0010DF        8D22007F                 r0 = r0 LSHIFT -1;
0x0010E0        D11300DD                 rMAC = M[r1 + 221];
0x0010E1        D13300DE                 r1 = M[r1 + 222];
0x0010E2        23310000                 r1 = r1 - rMAC;
0x0010E3        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0010E4        2021008F                 r0 = rMAC - r6;
0x0010E5        DC0D000F                 rts;

 <$math.pow2_taylor>
0x0010E6        F3010000                 push I0;
0x0010E7        510004DE                 I0 = Null + 1246;
0x0010E8        91920070                 r7 = r0 ASHIFT -16;
0x0010E9        8D820008                 r6 = r0 LSHIFT 8;
0x0010EA        8D88007F                 r6 = r6 LSHIFT -1;
0x0010EB        F3913100                 push M1, r1 = M[I0,1];
0x0010EC        51900001                 M1 = Null + 1;
0x0010ED        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x0010EE        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010EF        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010F0        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010F1        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010F2        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010F3        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x0010F4        9023009F                 r0 = r1 ASHIFT r7;
0x0010F5        F3950000                 pop M1;
0x0010F6        F3050000                 pop I0;
0x0010F7        DC0D000F                 rts;

 <$flash.copy_to_dm>
0x0010F8        F3D00000                 push rLink;
0x0010F9        0062000F                 r4 = r0 + Null;
0x0010FA        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x0010FB        0026000F                 r0 = r4 + Null;
0x0010FC        0037000F                 r1 = r5 + Null;
0x0010FD        E1F000FD                 call $flash.map_page_into_dm;
0x0010FE        00C3000F                 r10 = r1 + Null;
0x0010FF        5010002F                 I1 = Null + r0;
0x001100        E5F00003                 do $M.flash.copy_to_dm.loop;
0x001101        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001102        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x001103        03630000                 r4 = r4 + r1;
0x001104        23730000                 r5 = r5 - r1;
0x001105        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x001106        DDF0013E                 jump $pop_rLink_and_rts;

 <$M.MUTE_CONTROL.Process.func>
0x001107        F3D00000                 push rLink;
0x001108        D1290000                 r0 = M[r7 + 0];
0x001109        E1F00110                 call $frmbuffer.get_buffer;
0x00110A        F3D40000                 pop rLink;
0x00110B        D1490001                 r2 = M[r7 + 1];
0x00110C        D1690002                 r4 = M[r7 + 2];
0x00110D        D3400000                 r2 = M[r2 + Null];
0x00110E        23640000                 r4 = r4 - r2;
0x00110F        DD100006                 if NE jump $M.MUTE_CONTROL.Process.loop_mute;
0x001110        00C5000F                 r10 = r3 + Null;
0x001111        5000002F                 I0 = Null + r0;
0x001112        50C0003F                 L0 = Null + r1;
0x001113        E5F00002                 do $M.MUTE_CONTROL.Process.loop_mute;
0x001114        0300E100                 Null = Null + Null, M[I0,1] = r4;

 <$M.MUTE_CONTROL.Process.loop_mute>
0x001115        51C00000                 L0 = Null + 0;
0x001116        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x001117        91820070                 r6 = r0 ASHIFT -16;
0x001118        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x001119        FD00007F 0120FFFE        r0 = Null + 8388606;
0x00111B        DC0D000F                 rts;

 <$math.pow2_table>
0x00111C        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x00111D        8D920008                 r7 = r0 LSHIFT 8;
0x00111E        8D99006D                 r7 = r7 LSHIFT -19;
0x00111F        E488002F                 r6 = r6 + 1;
0x001120        D1390450                 r1 = M[r7 + 1104];
0x001121        D1990451                 r7 = M[r7 + 1105];
0x001122        23930000                 r7 = r7 - r1;
0x001123        8D22000D                 r0 = r0 LSHIFT 13;
0x001124        8D22007F                 r0 = r0 LSHIFT -1;
0x001125        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x001126        9023008F                 r0 = r1 ASHIFT r6;
0x001127        DC0D000F                 rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x001128        F3D00000                 push rLink;
0x001129        D1290000                 r0 = M[r7 + 0];
0x00112A        E1F000EF                 call $frmbuffer.get_buffer;
0x00112B        5000002F                 I0 = Null + r0;
0x00112C        50C0003F                 L0 = Null + r1;
0x00112D        F3D40000                 pop rLink;
0x00112E        51900001                 M1 = Null + 1;
0x00112F        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x001130        D1590001                 r3 = M[r7 + 1];
0x001131        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x001132        E466004F                 r4 = ABS r4;
0x001133        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x001134        50C0000F                 L0 = Null + Null;
0x001135        D5590001                 M[r7 + 1] = r3;
0x001136        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x001137        F3D00000                 push rLink;
0x001138        8122001F                 r0 = r0 AND 0x1f;
0x001139        2122000C                 r0 = r0 - 12;
0x00113A        0900FE33                 Null = Null + M[0xfffe33];
0x00113B        09002FBA                 Null = Null + M[$cbuffer.auto_mcu_message];
0x00113C        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x00113D        D1322CFB                 r1 = M[r0 + 11515];
0x00113E        2103F000                 Null = r1 - -4096;
0x00113F        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x001140        85408003                 r2 = Null OR 0x8003;
0x001141        ED520001                 r3 = 0x1 ASHIFT r0;
0x001142        E1F0FEEC                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x001143        DDF00101                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x001144        F3D00000                 push rLink;
0x001145        F3200000                 push r0;
0x001146        E1F000C9                 call $cbuffer.get_read_address_and_size;
0x001147        5000002F                 I0 = Null + r0;
0x001148        50C0003F                 L0 = Null + r1;
0x001149        50B000CF                 M3 = Null + r10;
0x00114A        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x00114B        F3240000                 pop r0;
0x00114C        4430000F                 r1 = Null + I0;
0x00114D        E1F000D1                 call $cbuffer.set_read_address;
0x00114E        51C00000                 L0 = Null + 0;
0x00114F        DDF000F5                 jump $pop_rLink_and_rts;

 <$cbops.limited_copy.amount_to_use>
0x001150        D12A0000                 r0 = M[r8 + 0];
0x001151        E402002F                 Null = r0 + 1;
0x001152        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_read_limit;
0x001153        2028002F                 r0 = r6 - r0;
0x001154        00200004                 if NEG r0 = Null + Null;
0x001155        2007002F                 Null = r5 - r0;
0x001156        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_read_limit>
0x001157        D12A0001                 r0 = M[r8 + 1];
0x001158        E402002F                 Null = r0 + 1;
0x001159        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_write_limit;
0x00115A        2029002F                 r0 = r7 - r0;
0x00115B        00200004                 if NEG r0 = Null + Null;
0x00115C        2007002F                 Null = r5 - r0;
0x00115D        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_write_limit>
0x00115E        DC0D000F                 rts;

 <$frame_sync.distribute_read_insert_ind>
0x00115F        20C000CF                 r10 = Null - r10;
0x001160        D14B0004                 r2 = M[r9 + 4];
0x001161        9144007F                 r2 = r2 ASHIFT -1;
0x001162        03C40000                 r10 = r10 + r2;
0x001163        D14B000C                 r2 = M[r9 + 12];
0x001164        034C0000                 r2 = r2 + r10;
0x001165        D54B000C                 M[r9 + 12] = r2;
0x001166        5010008F                 I1 = Null + r6;
0x001167        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x001168        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x001169        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x00116A        03004500                 Null = Null + Null, r2 = M[I1,1];
0x00116B        4480001F                 r6 = Null + I1;
0x00116C        D5820001                 M[r0 + 1] = r6;
0x00116D        DC0D000F                 rts;

 <$math.sqrt>
0x00116E        51800001                 M0 = Null + 1;
0x00116F        5100004A                 I0 = Null + 74;
0x001170        D862100F                 r4 = SIGNDET r0, rMAC = M[I0,M0];
0x001171        9032406F                 r1 = r0 ASHIFT r4, r2 = M[I0,M0];
0x001172        DC0D0000                 if EQ rts;
0x001173        AC43101F                 r2 = r2 + r1 * rMAC (SS), rMAC = M[I0,M0];
0x001174        AC13404F                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0];
0x001175        AC43101F                 r2 = r2 + r1 * rMAC (SS), rMAC = M[I0,M0];
0x001176        AC13504F                 rMAC = rMAC + r1 * r2 (SS), r3 = M[I0,M0];
0x001177        9146007F                 r2 = r4 ASHIFT -1;
0x001178        6848004F                 r2 = M0 - r2;
0x001179        9031004F                 r1 = rMAC ASHIFT r2;
0x00117A        81060001                 Null = r4 AND 0x1;
0x00117B        94330051                 if NE r1 = r1 * r3 (frac);
0x00117C        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x00117D        F3D00000                 push rLink;
0x00117E        8122001F                 r0 = r0 AND 0x1f;
0x00117F        0900FE33                 Null = Null + M[0xfffe33];
0x001180        09002FBA                 Null = Null + M[$cbuffer.auto_mcu_message];
0x001181        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001182        D1322CEF                 r1 = M[r0 + 11503];
0x001183        2103F000                 Null = r1 - -4096;
0x001184        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001185        85408002                 r2 = Null OR 0x8002;
0x001186        ED520001                 r3 = 0x1 ASHIFT r0;
0x001187        E1F0FEA7                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x001188        DDF000BC                 jump $pop_rLink_and_rts;

 <$frame_sync.update_input_streams_ind>
0x001189        D15B0008                 r3 = M[r9 + 8];
0x00118A        D14B0009                 r2 = M[r9 + 9];
0x00118B        23540000                 r3 = r3 - r2;
0x00118C        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x00118D        D14B0004                 r2 = M[r9 + 4];
0x00118E        9144007F                 r2 = r2 ASHIFT -1;
0x00118F        03540000                 r3 = r3 + r2;
0x001190        D14B000C                 r2 = M[r9 + 12];
0x001191        23450000                 r2 = r2 - r3;
0x001192        D54B000C                 M[r9 + 12] = r2;
0x001193        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x001194        E422002F                 r0 = r0 + 1;
0x001195        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x001196        D12A000C                 r0 = M[r8 + 12];
0x001197        9462009F                 r4 = r0 * r7 (frac);
0x001198        2069006F                 r4 = r7 - r4;
0x001199        D10A0009                 Null = M[r8 + 9];
0x00119A        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x00119B        2126005F                 r0 = r4 - 95;
0x00119C        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x00119D        21660002                 r4 = r4 - 2;
0x00119E        00600004                 if NEG r4 = Null + Null;
0x00119F        2006007F                 Null = r4 - r5;
0x0011A0        00760004                 if NEG r5 = r4 + Null;
0x0011A1        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x0011A2        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x0011A3        D036000F                 r1 = M[r4 + Null];
0x0011A4        DD0000A0                 if EQ jump $pop_rLink_and_rts;
0x0011A5        D1460001                 r2 = M[r4 + 1];
0x0011A6        D1560002                 r3 = M[r4 + 2];
0x0011A7        D1260003                 r0 = M[r4 + 3];
0x0011A8        01660004                 r4 = r4 + 4;
0x0011A9        19602FCE                 M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x0011AA        E002000F                 call r0;
0x0011AB        09602FCE                 r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x0011AC        DDF0FFF7                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.distribute_output_stream_ind>
0x0011AD        501000AF                 I1 = Null + r8;
0x0011AE        238A0000                 r6 = r6 - r8;
0x0011AF        0088003D                 if LE r6 = r6 + r1;
0x0011B0        67890000                 r6 = r6 - M1;
0x0011B1        70A8006F                 M2 = r6 - r4;
0x0011B2        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x0011B3        444000AF                 r2 = Null + M2;
0x0011B4        D54B000C                 M[r9 + 12] = r2;
0x0011B5        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x0011B6        4480001F                 r6 = Null + I1;
0x0011B7        D5820002                 M[r0 + 2] = r6;
0x0011B8        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x0011B9        D1C90002                 r10 = M[r7 + 2];
0x0011BA        0189000A                 r6 = r7 + 10;
0x0011BB        D1590004                 r3 = M[r7 + 4];
0x0011BC        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x0011BD        D1280002                 r0 = M[r6 + 2];
0x0011BE        CC15002F                 rMAC = r3 * r0 (SS);
0x0011BF        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0011C0        D5180003                 M[r6 + 3] = rMAC;
0x0011C1        D5180004                 M[r6 + 4] = rMAC;
0x0011C2        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x0011C3        D5090008                 M[r7 + 8] = Null;
0x0011C4        DC0D000F                 rts;

 <$interrupt.unblock>
0x0011C5        FD0000FF 0920685B        r0 = Null + M[$interrupt.block_count];
0x0011C7        E1002337                 if EQ call $error;
0x0011C8        E422003F                 r0 = r0 - 1;
0x0011C9        FD0000FF 1920685B        M[$interrupt.block_count] = r0 + Null;
0x0011CB        DC0D0001                 if NE rts;
0x0011CC        E420002F                 r0 = Null + 1;
0x0011CD        1920FE12                 M[0xfffe12] = r0 + Null;
0x0011CE        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x0011CF        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x0011D0        D076000F                 r5 = M[r4 + Null];
0x0011D1        DD000073                 if EQ jump $pop_rLink_and_rts;
0x0011D2        D1960001                 r7 = M[r4 + 1];
0x0011D3        D1A60002                 r8 = M[r4 + 2];
0x0011D4        01660003                 r4 = r4 + 3;
0x0011D5        F3600000                 push r4;
0x0011D6        E007000F                 call r5;
0x0011D7        F3640000                 pop r4;
0x0011D8        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x0011D9        D802000F                 Null = SIGNDET r0;
0x0011DA        DD00FC7F                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x0011DB        D1420000                 r2 = M[r0 + 0];
0x0011DC        D1320002                 r1 = M[r0 + 2];
0x0011DD        D1220001                 r0 = M[r0 + 1];
0x0011DE        23230000                 r0 = r0 - r1;
0x0011DF        0022004D                 if LE r0 = r0 + r2;
0x0011E0        E422003F                 r0 = r0 - 1;
0x0011E1        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x0011E2        F3D00000                 push rLink;
0x0011E3        23A80000                 r8 = r8 - r6;
0x0011E4        00AA0034                 if NEG r8 = r8 + r1;
0x0011E5        20CA006F                 r10 = r8 - r4;
0x0011E6        E140FF79                 if NEG call $frame_sync.distribute_read_insert_ind;
0x0011E7        E1F0FE1B                 call $frame_sync.analyze_stream_ind;
0x0011E8        DDF0005C                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x0011E9        D802000F                 Null = SIGNDET r0;
0x0011EA        DD00FCD4                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x0011EB        D1420000                 r2 = M[r0 + 0];
0x0011EC        D1320002                 r1 = M[r0 + 2];
0x0011ED        D1220001                 r0 = M[r0 + 1];
0x0011EE        2023002F                 r0 = r1 - r0;
0x0011EF        00220044                 if NEG r0 = r0 + r2;
0x0011F0        DC0D000F                 rts;

 <$block_interrupts>
0x0011F1        FD0000FF 0920685B        r0 = Null + M[$interrupt.block_count];
0x0011F3        E422002F                 r0 = r0 + 1;
0x0011F4        FD0000FF 1920685B        M[$interrupt.block_count] = r0 + Null;
0x0011F6        1900FE12                 M[0xfffe12] = Null + Null;
0x0011F7        03000000                 Null = Null + Null;
0x0011F8        03000000                 Null = Null + Null;
0x0011F9        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x0011FA        9152007F                 r3 = r0 ASHIFT -1;
0x0011FB        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x0011FC        81520001                 r3 = r0 AND 0x1;
0x0011FD        65251000                 r0 = 4096 - r3;
0x0011FE        2023002F                 r0 = r1 - r0;
0x0011FF        20330025                 if POS r1 = r1 - r0;
0x001200        0125D000                 r0 = r3 + -12288;
0x001201        DC0D000F                 rts;

 <$message.send_queue_space>
0x001202        09202FBD                 r0 = Null + M[$message.queue_read_ptr];
0x001203        FD0000FF 2922685D        r0 = r0 - M[$message.queue_write_ptr];
0x001205        E422003F                 r0 = r0 - 1;
0x001206        DC0D0005                 if POS rts;
0x001207        0122006E                 r0 = r0 + 110;
0x001208        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x001209        D802000F                 Null = SIGNDET r0;
0x00120A        DC0D0001                 if NE rts;
0x00120B        8122001F                 r0 = r0 AND 0x1f;
0x00120C        FD0000FF D1025BE4        Null = M[r0 + -42012];
0x00120E        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x00120F        D802000F                 Null = SIGNDET r0;
0x001210        DD00FB94                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x001211        D1320000                 r1 = M[r0 + 0];
0x001212        D1220001                 r0 = M[r0 + 1];
0x001213        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x001214        D802000F                 Null = SIGNDET r0;
0x001215        DD00FB1D                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x001216        D1320000                 r1 = M[r0 + 0];
0x001217        D1220002                 r0 = M[r0 + 2];
0x001218        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x001219        D1520002                 r3 = M[r0 + 2];
0x00121A        D1420000                 r2 = M[r0 + 0];
0x00121B        D1220001                 r0 = M[r0 + 1];
0x00121C        D1340000                 r1 = M[r2 + 0];
0x00121D        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x00121E        D802000F                 Null = SIGNDET r0;
0x00121F        DD00FF5E                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x001220        D5320001                 M[r0 + 1] = r1;
0x001221        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x001222        D802000F                 Null = SIGNDET r0;
0x001223        DD00FF14                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x001224        D5320002                 M[r0 + 2] = r1;
0x001225        DC0D000F                 rts;

 <$message.send>
0x001226        2104FFFE                 Null = r2 - -2;
0x001227        DD00FAB7                 if EQ jump $message.send_long;
0x001228        DDF0FE06                 jump $message.send_short;

 <$cbops.deinterleave.amount_to_use>
0x001229        8D77007F                 r5 = r5 LSHIFT -1;
0x00122A        2007009F                 Null = r5 - r7;
0x00122B        00790005                 if POS r5 = r7 + Null;
0x00122C        8D770001                 r5 = r5 LSHIFT 1;
0x00122D        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x00122E        8D220002                 r0 = r0 LSHIFT 2;
0x00122F        01103D09                 rMAC = Null + 15625;
0x001230        D9020000                 Div = rMAC / r0;
0x001231        D9200001                 r0 = DivResult;
0x001232        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x001233        D5320002                 M[r0 + 2] = r1;
0x001234        D5320001                 M[r0 + 1] = r1;
0x001235        D5420000                 M[r0 + 0] = r2;
0x001236        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x001237        D1230001                 r0 = M[r1 + 1];
0x001238        03420000                 r2 = r2 + r0;
0x001239        DDF0FBFE                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x00123A        0944FE71                 r2 = r2 + M[0xfffe71];
0x00123B        DDF0FBFC                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x00123C        01500000                 r3 = Null + 0;
0x00123D        DDF0FE85                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x00123E        E450002F                 r3 = Null + 1;
0x00123F        DDF0FE83                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x001240        01500002                 r3 = Null + 2;
0x001241        DDF0FE81                 jump $cbops.switch_op.helper;

 <$frmbuffer.set_frame_size>
0x001242        D5520002                 M[r0 + 2] = r3;
0x001243        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x001244        F3D40000                 pop rLink;
0x001245        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x001246        D50A0002                 M[r8 + 2] = Null;
0x001247        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x001248        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x001249        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x00124A        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x00124B        F3010000                 push I0;
0x00124C        FD0000FF 510037F1        I0 = Null + -51215;
0x00124E        E1F00935                 call $kal_float_lib.div;
0x00124F        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001250        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001251        E1F00900                 call $kal_float_lib.mul;
0x001252        0042000F                 r2 = r0 + Null;
0x001253        0053000F                 r3 = r1 + Null;
0x001254        0062000F                 r4 = r0 + Null;
0x001255        0073000F                 r5 = r1 + Null;
0x001256        E1F008FB                 call $kal_float_lib.mul;
0x001257        0082000F                 r6 = r0 + Null;
0x001258        0093000F                 r7 = r1 + Null;
0x001259        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00125A        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00125B        01C00005                 r10 = Null + 5;
0x00125C        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x00125D        0048000F                 r2 = r6 + Null;
0x00125E        0059000F                 r3 = r7 + Null;
0x00125F        E1F008F2                 call $kal_float_lib.mul;
0x001260        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001261        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001262        E1F008DD                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x001263        0046000F                 r2 = r4 + Null;
0x001264        0057000F                 r3 = r5 + Null;
0x001265        E1F008EC                 call $kal_float_lib.mul;
0x001266        F3050000                 pop I0;
0x001267        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001268        F3D40000                 pop rLink;
0x001269        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x00126A        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x00126B        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x00126C        F3010000                 push I0;
0x00126D        51002E31                 I0 = Null + 11825;
0x00126E        0062000F                 r4 = r0 + Null;
0x00126F        0073000F                 r5 = r1 + Null;
0x001270        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001271        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x001272        E1F00911                 call $kal_float_lib.div;
0x001273        0042000F                 r2 = r0 + Null;
0x001274        0053000F                 r3 = r1 + Null;
0x001275        E1F008BD                 call $kal_float_lib.float_to_int;
0x001276        0082000F                 r6 = r0 + Null;
0x001277        E1F008B5                 call $kal_float_lib.int_to_float;
0x001278        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001279        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00127A        E1F008D7                 call $kal_float_lib.mul;
0x00127B        0042000F                 r2 = r0 + Null;
0x00127C        0053000F                 r3 = r1 + Null;
0x00127D        0026000F                 r0 = r4 + Null;
0x00127E        0037000F                 r1 = r5 + Null;
0x00127F        E1F008C9                 call $kal_float_lib.sub;
0x001280        0062000F                 r4 = r0 + Null;
0x001281        0073000F                 r5 = r1 + Null;
0x001282        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001283        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001284        01C00003                 r10 = Null + 3;
0x001285        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x001286        0046000F                 r2 = r4 + Null;
0x001287        0057000F                 r3 = r5 + Null;
0x001288        E1F008C9                 call $kal_float_lib.mul;
0x001289        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00128A        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00128B        E1F008B4                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x00128C        03280000                 r0 = r0 + r6;
0x00128D        F3050000                 pop I0;
0x00128E        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x00128F        F3D40000                 pop rLink;
0x001290        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x001291        F1002001                 pushm <FP(=SP), rLink>;
0x001292        012000FF                 r0 = Null + 255;
0x001293        F1387FF6                 r1 = M[FP + -0xa];
0x001294        83320000                 r1 = r1 AND r0;
0x001295        F1487FF8                 r2 = M[FP + -0x8];
0x001296        83420000                 r2 = r2 AND r0;
0x001297        E434006F                 r1 = MAX r2;
0x001298        F1487FFA                 r2 = M[FP + -0x6];
0x001299        83420000                 r2 = r2 AND r0;
0x00129A        E434006F                 r1 = MAX r2;
0x00129B        F1487FFC                 r2 = M[FP + -0x4];
0x00129C        83420000                 r2 = r2 AND r0;
0x00129D        E434006F                 r1 = MAX r2;
0x00129E        F1487FFE                 r2 = M[FP + -0x2];
0x00129F        83420000                 r2 = r2 AND r0;
0x0012A0        E434006F                 r1 = MAX r2;
0x0012A1        2143007F                 r2 = r1 - 127;
0x0012A2        F1287FF6                 r0 = M[FP + -0xa];
0x0012A3        F1387FF7                 r1 = M[FP + -0x9];
0x0012A4        23240000                 r0 = r0 - r2;
0x0012A5        E1F00892                 call $kal_float_lib.float_to_frac;
0x0012A6        F12C7FF0                 M[FP + -0x10] = r0;
0x0012A7        F1287FF8                 r0 = M[FP + -0x8];
0x0012A8        F1387FF9                 r1 = M[FP + -0x7];
0x0012A9        23240000                 r0 = r0 - r2;
0x0012AA        E1F0088D                 call $kal_float_lib.float_to_frac;
0x0012AB        F12C7FF1                 M[FP + -0xf] = r0;
0x0012AC        F1287FFA                 r0 = M[FP + -0x6];
0x0012AD        F1387FFB                 r1 = M[FP + -0x5];
0x0012AE        23240000                 r0 = r0 - r2;
0x0012AF        E1F00888                 call $kal_float_lib.float_to_frac;
0x0012B0        F12C7FF2                 M[FP + -0xe] = r0;
0x0012B1        F1287FFC                 r0 = M[FP + -0x4];
0x0012B2        F1387FFD                 r1 = M[FP + -0x3];
0x0012B3        23240000                 r0 = r0 - r2;
0x0012B4        E1F00883                 call $kal_float_lib.float_to_frac;
0x0012B5        F12C7FF3                 M[FP + -0xd] = r0;
0x0012B6        F1287FFE                 r0 = M[FP + -0x2];
0x0012B7        F1387FFF                 r1 = M[FP + -0x1];
0x0012B8        23240000                 r0 = r0 - r2;
0x0012B9        E1F0087E                 call $kal_float_lib.float_to_frac;
0x0012BA        F12C7FF4                 M[FP + -0xc] = r0;
0x0012BB        F14C7FF5                 M[FP + -0xb] = r2;
0x0012BC        F1042001                 popm <FP, rLink>;
0x0012BD        F103FFF6                 SP = SP + -10;
0x0012BE        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x0012BF        F1002005                 pushm <FP(=SP), r0, rLink>;
0x0012C0        E420002F                 r0 = Null + 1;
0x0012C1        F12C7FFA                 M[FP + -0x6] = r0;
0x0012C2        01200000                 r0 = Null + 0;
0x0012C3        F12C7FFC                 M[FP + -0x4] = r0;
0x0012C4        F12C7FFB                 M[FP + -0x5] = r0;
0x0012C5        F12C7FFF                 M[FP + -0x1] = r0;
0x0012C6        F12C7FFE                 M[FP + -0x2] = r0;
0x0012C7        FD000040 01200000        r0 = Null + 4194304;
0x0012C9        F12C7FFD                 M[FP + -0x3] = r0;
0x0012CA        F1042005                 popm <FP, r0, rLink>;
0x0012CB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x0012CC        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012CD        F1287FFC                 r0 = M[FP + -0x4];
0x0012CE        F1387FFD                 r1 = M[FP + -0x3];
0x0012CF        F1487FFE                 r2 = M[FP + -0x2];
0x0012D0        F1587FFF                 r3 = M[FP + -0x1];
0x0012D1        E1F0FF78                 call $kal_filter_coef_lib.__warp;
0x0012D2        0062000F                 r4 = r0 + Null;
0x0012D3        0073000F                 r5 = r1 + Null;
0x0012D4        01400080                 r2 = Null + 128;
0x0012D5        FD000080 01500000        r3 = Null + -8388608;
0x0012D7        E1F00868                 call $kal_float_lib.add;
0x0012D8        E1F0088E                 call $kal_float_lib.recip;
0x0012D9        0082000F                 r6 = r0 + Null;
0x0012DA        0093000F                 r7 = r1 + Null;
0x0012DB        0046000F                 r2 = r4 + Null;
0x0012DC        0057000F                 r3 = r5 + Null;
0x0012DD        E1F00874                 call $kal_float_lib.mul;
0x0012DE        F1030006                 SP = SP + 6;
0x0012DF        F100000C                 pushm <r0, r1>;
0x0012E0        F100000C                 pushm <r0, r1>;
0x0012E1        01200000                 r0 = Null + 0;
0x0012E2        01300000                 r1 = Null + 0;
0x0012E3        F100000C                 pushm <r0, r1>;
0x0012E4        0026000F                 r0 = r4 + Null;
0x0012E5        0037000F                 r1 = r5 + Null;
0x0012E6        01400080                 r2 = Null + 128;
0x0012E7        FD000080 01500000        r3 = Null + -8388608;
0x0012E9        E1F0085F                 call $kal_float_lib.sub;
0x0012EA        0048000F                 r2 = r6 + Null;
0x0012EB        0059000F                 r3 = r7 + Null;
0x0012EC        E1F00865                 call $kal_float_lib.mul;
0x0012ED        F100000C                 pushm <r0, r1>;
0x0012EE        01200000                 r0 = Null + 0;
0x0012EF        01300000                 r1 = Null + 0;
0x0012F0        F100000C                 pushm <r0, r1>;
0x0012F1        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x0012F2        F3240000                 pop r0;
0x0012F3        F12C7FF6                 M[FP + -0xa] = r0;
0x0012F4        F3240000                 pop r0;
0x0012F5        F12C7FF8                 M[FP + -0x8] = r0;
0x0012F6        F3240000                 pop r0;
0x0012F7        F12C7FF7                 M[FP + -0x9] = r0;
0x0012F8        F3240000                 pop r0;
0x0012F9        F12C7FFB                 M[FP + -0x5] = r0;
0x0012FA        F3240000                 pop r0;
0x0012FB        F12C7FFA                 M[FP + -0x6] = r0;
0x0012FC        F3240000                 pop r0;
0x0012FD        F12C7FF9                 M[FP + -0x7] = r0;
0x0012FE        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012FF        F103FFFC                 SP = SP + -4;
0x001300        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x001301        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001302        F1287FFC                 r0 = M[FP + -0x4];
0x001303        F1387FFD                 r1 = M[FP + -0x3];
0x001304        F1487FFE                 r2 = M[FP + -0x2];
0x001305        F1587FFF                 r3 = M[FP + -0x1];
0x001306        E1F0FF43                 call $kal_filter_coef_lib.__warp;
0x001307        0062000F                 r4 = r0 + Null;
0x001308        0073000F                 r5 = r1 + Null;
0x001309        01400080                 r2 = Null + 128;
0x00130A        FD000080 01500000        r3 = Null + -8388608;
0x00130C        E1F00833                 call $kal_float_lib.add;
0x00130D        E1F00859                 call $kal_float_lib.recip;
0x00130E        0082000F                 r6 = r0 + Null;
0x00130F        0093000F                 r7 = r1 + Null;
0x001310        F1030006                 SP = SP + 6;
0x001311        F100000C                 pushm <r0, r1>;
0x001312        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001314        F100000C                 pushm <r0, r1>;
0x001315        01200000                 r0 = Null + 0;
0x001316        01300000                 r1 = Null + 0;
0x001317        F100000C                 pushm <r0, r1>;
0x001318        0026000F                 r0 = r4 + Null;
0x001319        0037000F                 r1 = r5 + Null;
0x00131A        01400080                 r2 = Null + 128;
0x00131B        FD000080 01500000        r3 = Null + -8388608;
0x00131D        E1F0082B                 call $kal_float_lib.sub;
0x00131E        0048000F                 r2 = r6 + Null;
0x00131F        0059000F                 r3 = r7 + Null;
0x001320        E1F00831                 call $kal_float_lib.mul;
0x001321        F100000C                 pushm <r0, r1>;
0x001322        01200000                 r0 = Null + 0;
0x001323        01300000                 r1 = Null + 0;
0x001324        F100000C                 pushm <r0, r1>;
0x001325        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x001326        F3240000                 pop r0;
0x001327        F12C7FF6                 M[FP + -0xa] = r0;
0x001328        F3240000                 pop r0;
0x001329        F12C7FF8                 M[FP + -0x8] = r0;
0x00132A        F3240000                 pop r0;
0x00132B        F12C7FF7                 M[FP + -0x9] = r0;
0x00132C        F3240000                 pop r0;
0x00132D        F12C7FFB                 M[FP + -0x5] = r0;
0x00132E        F3240000                 pop r0;
0x00132F        F12C7FFA                 M[FP + -0x6] = r0;
0x001330        F3240000                 pop r0;
0x001331        F12C7FF9                 M[FP + -0x7] = r0;
0x001332        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001333        F103FFFC                 SP = SP + -4;
0x001334        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x001335        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001336        F1287FFC                 r0 = M[FP + -0x4];
0x001337        F1387FFD                 r1 = M[FP + -0x3];
0x001338        F1487FFE                 r2 = M[FP + -0x2];
0x001339        F1587FFF                 r3 = M[FP + -0x1];
0x00133A        E1F0FF0F                 call $kal_filter_coef_lib.__warp;
0x00133B        0062000F                 r4 = r0 + Null;
0x00133C        0073000F                 r5 = r1 + Null;
0x00133D        01400080                 r2 = Null + 128;
0x00133E        FD000080 01500000        r3 = Null + -8388608;
0x001340        E1F007FF                 call $kal_float_lib.add;
0x001341        E1F00825                 call $kal_float_lib.recip;
0x001342        0082000F                 r6 = r0 + Null;
0x001343        0093000F                 r7 = r1 + Null;
0x001344        F1030006                 SP = SP + 6;
0x001345        01200080                 r0 = Null + 128;
0x001346        FD000080 01300000        r1 = Null + -8388608;
0x001348        0046000F                 r2 = r4 + Null;
0x001349        0057000F                 r3 = r5 + Null;
0x00134A        E1F007FE                 call $kal_float_lib.sub;
0x00134B        0048000F                 r2 = r6 + Null;
0x00134C        0059000F                 r3 = r7 + Null;
0x00134D        E1F00804                 call $kal_float_lib.mul;
0x00134E        F100000C                 pushm <r0, r1>;
0x00134F        0042000F                 r2 = r0 + Null;
0x001350        0053000F                 r3 = r1 + Null;
0x001351        01200080                 r0 = Null + 128;
0x001352        FD000080 01300000        r1 = Null + -8388608;
0x001354        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001356        F100000C                 pushm <r0, r1>;
0x001357        01200000                 r0 = Null + 0;
0x001358        01300000                 r1 = Null + 0;
0x001359        F100000C                 pushm <r0, r1>;
0x00135A        0024000F                 r0 = r2 + Null;
0x00135B        0035000F                 r1 = r3 + Null;
0x00135C        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00135E        F100000C                 pushm <r0, r1>;
0x00135F        01200000                 r0 = Null + 0;
0x001360        01300000                 r1 = Null + 0;
0x001361        F100000C                 pushm <r0, r1>;
0x001362        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x001363        F3240000                 pop r0;
0x001364        F12C7FF6                 M[FP + -0xa] = r0;
0x001365        F3240000                 pop r0;
0x001366        F12C7FF8                 M[FP + -0x8] = r0;
0x001367        F3240000                 pop r0;
0x001368        F12C7FF7                 M[FP + -0x9] = r0;
0x001369        F3240000                 pop r0;
0x00136A        F12C7FFB                 M[FP + -0x5] = r0;
0x00136B        F3240000                 pop r0;
0x00136C        F12C7FFA                 M[FP + -0x6] = r0;
0x00136D        F3240000                 pop r0;
0x00136E        F12C7FF9                 M[FP + -0x7] = r0;
0x00136F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001370        F103FFFC                 SP = SP + -4;
0x001371        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x001372        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001373        F1030004                 SP = SP + 4;
0x001374        F1287FF8                 r0 = M[FP + -0x8];
0x001375        F1387FF9                 r1 = M[FP + -0x7];
0x001376        F1487FFE                 r2 = M[FP + -0x2];
0x001377        F1587FFF                 r3 = M[FP + -0x1];
0x001378        E1F0FED1                 call $kal_filter_coef_lib.__warp;
0x001379        0062000F                 r4 = r0 + Null;
0x00137A        0073000F                 r5 = r1 + Null;
0x00137B        F1287FFC                 r0 = M[FP + -0x4];
0x00137C        F1387FFD                 r1 = M[FP + -0x3];
0x00137D        E1F0FEED                 call $kal_filter_coef_lib.__db2lin;
0x00137E        F12C000C                 M[FP + 0xc] = r0;
0x00137F        F13C000D                 M[FP + 0xd] = r1;
0x001380        F1287FFA                 r0 = M[FP + -0x6];
0x001381        F1387FFB                 r1 = M[FP + -0x5];
0x001382        E422003F                 r0 = r0 - 1;
0x001383        E1F0FEE7                 call $kal_filter_coef_lib.__db2lin;
0x001384        0042000F                 r2 = r0 + Null;
0x001385        0053000F                 r3 = r1 + Null;
0x001386        0026000F                 r0 = r4 + Null;
0x001387        0037000F                 r1 = r5 + Null;
0x001388        E1F007FB                 call $kal_float_lib.div;
0x001389        0082000F                 r6 = r0 + Null;
0x00138A        0093000F                 r7 = r1 + Null;
0x00138B        0026000F                 r0 = r4 + Null;
0x00138C        0037000F                 r1 = r5 + Null;
0x00138D        E1F007C4                 call $kal_float_lib.mul;
0x00138E        0062000F                 r4 = r0 + Null;
0x00138F        0073000F                 r5 = r1 + Null;
0x001390        0028000F                 r0 = r6 + Null;
0x001391        0039000F                 r1 = r7 + Null;
0x001392        01400080                 r2 = Null + 128;
0x001393        FD000080 01500000        r3 = Null + -8388608;
0x001395        E1F007AA                 call $kal_float_lib.add;
0x001396        E1F007D0                 call $kal_float_lib.recip;
0x001397        F12C000A                 M[FP + 0xa] = r0;
0x001398        F13C000B                 M[FP + 0xb] = r1;
0x001399        F1030006                 SP = SP + 6;
0x00139A        0026000F                 r0 = r4 + Null;
0x00139B        0037000F                 r1 = r5 + Null;
0x00139C        01400080                 r2 = Null + 128;
0x00139D        FD000080 01500000        r3 = Null + -8388608;
0x00139F        E1F007A0                 call $kal_float_lib.add;
0x0013A0        F148000A                 r2 = M[FP + 0xa];
0x0013A1        F158000B                 r3 = M[FP + 0xb];
0x0013A2        E1F007AF                 call $kal_float_lib.mul;
0x0013A3        F148000C                 r2 = M[FP + 0xc];
0x0013A4        F158000D                 r3 = M[FP + 0xd];
0x0013A5        E1F007AC                 call $kal_float_lib.mul;
0x0013A6        F100000C                 pushm <r0, r1>;
0x0013A7        0026000F                 r0 = r4 + Null;
0x0013A8        0037000F                 r1 = r5 + Null;
0x0013A9        01400080                 r2 = Null + 128;
0x0013AA        FD000080 01500000        r3 = Null + -8388608;
0x0013AC        E1F0079C                 call $kal_float_lib.sub;
0x0013AD        F148000A                 r2 = M[FP + 0xa];
0x0013AE        F158000B                 r3 = M[FP + 0xb];
0x0013AF        E1F007A2                 call $kal_float_lib.mul;
0x0013B0        F148000C                 r2 = M[FP + 0xc];
0x0013B1        F158000D                 r3 = M[FP + 0xd];
0x0013B2        E1F0079F                 call $kal_float_lib.mul;
0x0013B3        F100000C                 pushm <r0, r1>;
0x0013B4        01200000                 r0 = Null + 0;
0x0013B5        01300000                 r1 = Null + 0;
0x0013B6        F100000C                 pushm <r0, r1>;
0x0013B7        0028000F                 r0 = r6 + Null;
0x0013B8        0039000F                 r1 = r7 + Null;
0x0013B9        01400080                 r2 = Null + 128;
0x0013BA        FD000080 01500000        r3 = Null + -8388608;
0x0013BC        E1F0078C                 call $kal_float_lib.sub;
0x0013BD        F148000A                 r2 = M[FP + 0xa];
0x0013BE        F158000B                 r3 = M[FP + 0xb];
0x0013BF        E1F00792                 call $kal_float_lib.mul;
0x0013C0        F100000C                 pushm <r0, r1>;
0x0013C1        01200000                 r0 = Null + 0;
0x0013C2        01300000                 r1 = Null + 0;
0x0013C3        F100000C                 pushm <r0, r1>;
0x0013C4        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x0013C5        F3240000                 pop r0;
0x0013C6        F12C7FF7                 M[FP + -0x9] = r0;
0x0013C7        F3240000                 pop r0;
0x0013C8        F12C7FF6                 M[FP + -0xa] = r0;
0x0013C9        F3240000                 pop r0;
0x0013CA        F12C7FF5                 M[FP + -0xb] = r0;
0x0013CB        F3240000                 pop r0;
0x0013CC        F12C7FF4                 M[FP + -0xc] = r0;
0x0013CD        F3240000                 pop r0;
0x0013CE        F12C7FF3                 M[FP + -0xd] = r0;
0x0013CF        F3240000                 pop r0;
0x0013D0        F12C7FF2                 M[FP + -0xe] = r0;
0x0013D1        F103FFFC                 SP = SP + -4;
0x0013D2        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0013D3        F103FFF8                 SP = SP + -8;
0x0013D4        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x0013D5        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0013D6        F1030006                 SP = SP + 6;
0x0013D7        F1287FFA                 r0 = M[FP + -0x6];
0x0013D8        F1387FFB                 r1 = M[FP + -0x5];
0x0013D9        F100000C                 pushm <r0, r1>;
0x0013DA        F1287FFC                 r0 = M[FP + -0x4];
0x0013DB        F1387FFD                 r1 = M[FP + -0x3];
0x0013DC        F100000C                 pushm <r0, r1>;
0x0013DD        01200000                 r0 = Null + 0;
0x0013DE        01300000                 r1 = Null + 0;
0x0013DF        F100000C                 pushm <r0, r1>;
0x0013E0        F1287FFE                 r0 = M[FP + -0x2];
0x0013E1        F1387FFF                 r1 = M[FP + -0x1];
0x0013E2        F100000C                 pushm <r0, r1>;
0x0013E3        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0013E4        F3240000                 pop r0;
0x0013E5        F12C7FF4                 M[FP + -0xc] = r0;
0x0013E6        F3240000                 pop r0;
0x0013E7        F12C7FF6                 M[FP + -0xa] = r0;
0x0013E8        F3240000                 pop r0;
0x0013E9        F12C7FF5                 M[FP + -0xb] = r0;
0x0013EA        F3240000                 pop r0;
0x0013EB        F12C7FF9                 M[FP + -0x7] = r0;
0x0013EC        F3240000                 pop r0;
0x0013ED        F12C7FF8                 M[FP + -0x8] = r0;
0x0013EE        F3240000                 pop r0;
0x0013EF        F12C7FF7                 M[FP + -0x9] = r0;
0x0013F0        F104200D                 popm <FP, r0, r1, rLink>;
0x0013F1        F103FFFA                 SP = SP + -6;
0x0013F2        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x0013F3        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0013F4        F1030006                 SP = SP + 6;
0x0013F5        F1287FFA                 r0 = M[FP + -0x6];
0x0013F6        F1387FFB                 r1 = M[FP + -0x5];
0x0013F7        F100000C                 pushm <r0, r1>;
0x0013F8        F1287FFC                 r0 = M[FP + -0x4];
0x0013F9        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013FB        F1387FFD                 r1 = M[FP + -0x3];
0x0013FC        F100000C                 pushm <r0, r1>;
0x0013FD        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013FF        F100000C                 pushm <r0, r1>;
0x001400        F1287FFE                 r0 = M[FP + -0x2];
0x001401        F1387FFF                 r1 = M[FP + -0x1];
0x001402        F100000C                 pushm <r0, r1>;
0x001403        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001404        F3240000                 pop r0;
0x001405        F12C7FF4                 M[FP + -0xc] = r0;
0x001406        F3240000                 pop r0;
0x001407        F12C7FF6                 M[FP + -0xa] = r0;
0x001408        F3240000                 pop r0;
0x001409        F12C7FF5                 M[FP + -0xb] = r0;
0x00140A        F3240000                 pop r0;
0x00140B        F12C7FF9                 M[FP + -0x7] = r0;
0x00140C        F3240000                 pop r0;
0x00140D        F12C7FF8                 M[FP + -0x8] = r0;
0x00140E        F3240000                 pop r0;
0x00140F        F12C7FF7                 M[FP + -0x9] = r0;
0x001410        F104200D                 popm <FP, r0, r1, rLink>;
0x001411        F103FFFA                 SP = SP + -6;
0x001412        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x001413        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001414        F1030006                 SP = SP + 6;
0x001415        F1287FFA                 r0 = M[FP + -0x6];
0x001416        F1387FFB                 r1 = M[FP + -0x5];
0x001417        F100000C                 pushm <r0, r1>;
0x001418        F1287FFC                 r0 = M[FP + -0x4];
0x001419        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00141B        F1387FFD                 r1 = M[FP + -0x3];
0x00141C        F100000C                 pushm <r0, r1>;
0x00141D        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00141F        E422003F                 r0 = r0 - 1;
0x001420        F100000C                 pushm <r0, r1>;
0x001421        F1287FFE                 r0 = M[FP + -0x2];
0x001422        F1387FFF                 r1 = M[FP + -0x1];
0x001423        F100000C                 pushm <r0, r1>;
0x001424        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001425        F3240000                 pop r0;
0x001426        F12C7FF4                 M[FP + -0xc] = r0;
0x001427        F3240000                 pop r0;
0x001428        F12C7FF6                 M[FP + -0xa] = r0;
0x001429        F3240000                 pop r0;
0x00142A        F12C7FF5                 M[FP + -0xb] = r0;
0x00142B        F3240000                 pop r0;
0x00142C        F12C7FF9                 M[FP + -0x7] = r0;
0x00142D        F3240000                 pop r0;
0x00142E        F12C7FF8                 M[FP + -0x8] = r0;
0x00142F        F3240000                 pop r0;
0x001430        F12C7FF7                 M[FP + -0x9] = r0;
0x001431        F104200D                 popm <FP, r0, r1, rLink>;
0x001432        F103FFFA                 SP = SP + -6;
0x001433        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x001434        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001435        F1030002                 SP = SP + 2;
0x001436        F1287FFA                 r0 = M[FP + -0x6];
0x001437        F1387FFB                 r1 = M[FP + -0x5];
0x001438        F1487FFE                 r2 = M[FP + -0x2];
0x001439        F1587FFF                 r3 = M[FP + -0x1];
0x00143A        E1F0FE0F                 call $kal_filter_coef_lib.__warp;
0x00143B        0042000F                 r2 = r0 + Null;
0x00143C        0053000F                 r3 = r1 + Null;
0x00143D        E1F00714                 call $kal_float_lib.mul;
0x00143E        0082000F                 r6 = r0 + Null;
0x00143F        0093000F                 r7 = r1 + Null;
0x001440        0024000F                 r0 = r2 + Null;
0x001441        0035000F                 r1 = r3 + Null;
0x001442        F1487FFC                 r2 = M[FP + -0x4];
0x001443        F1587FFD                 r3 = M[FP + -0x3];
0x001444        E1F0073F                 call $kal_float_lib.div;
0x001445        0062000F                 r4 = r0 + Null;
0x001446        0073000F                 r5 = r1 + Null;
0x001447        0048000F                 r2 = r6 + Null;
0x001448        0059000F                 r3 = r7 + Null;
0x001449        E1F006F6                 call $kal_float_lib.add;
0x00144A        01400080                 r2 = Null + 128;
0x00144B        FD000080 01500000        r3 = Null + -8388608;
0x00144D        E1F006F2                 call $kal_float_lib.add;
0x00144E        E1F00718                 call $kal_float_lib.recip;
0x00144F        F12C000A                 M[FP + 0xa] = r0;
0x001450        F13C000B                 M[FP + 0xb] = r1;
0x001451        F1030006                 SP = SP + 6;
0x001452        0028000F                 r0 = r6 + Null;
0x001453        0039000F                 r1 = r7 + Null;
0x001454        F148000A                 r2 = M[FP + 0xa];
0x001455        F158000B                 r3 = M[FP + 0xb];
0x001456        E1F006FB                 call $kal_float_lib.mul;
0x001457        F100000C                 pushm <r0, r1>;
0x001458        E422002F                 r0 = r0 + 1;
0x001459        F100000C                 pushm <r0, r1>;
0x00145A        E422003F                 r0 = r0 - 1;
0x00145B        F100000C                 pushm <r0, r1>;
0x00145C        0028000F                 r0 = r6 + Null;
0x00145D        0039000F                 r1 = r7 + Null;
0x00145E        01400081                 r2 = Null + 129;
0x00145F        FD000080 01500000        r3 = Null + -8388608;
0x001461        E1F006F0                 call $kal_float_lib.mul;
0x001462        E1F006E6                 call $kal_float_lib.sub;
0x001463        F148000A                 r2 = M[FP + 0xa];
0x001464        F158000B                 r3 = M[FP + 0xb];
0x001465        E1F006EC                 call $kal_float_lib.mul;
0x001466        F100000C                 pushm <r0, r1>;
0x001467        0028000F                 r0 = r6 + Null;
0x001468        0039000F                 r1 = r7 + Null;
0x001469        0046000F                 r2 = r4 + Null;
0x00146A        0057000F                 r3 = r5 + Null;
0x00146B        E1F006DD                 call $kal_float_lib.sub;
0x00146C        01400080                 r2 = Null + 128;
0x00146D        FD000080 01500000        r3 = Null + -8388608;
0x00146F        E1F006D0                 call $kal_float_lib.add;
0x001470        F148000A                 r2 = M[FP + 0xa];
0x001471        F158000B                 r3 = M[FP + 0xb];
0x001472        E1F006DF                 call $kal_float_lib.mul;
0x001473        F100000C                 pushm <r0, r1>;
0x001474        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x001475        F3240000                 pop r0;
0x001476        F12C7FF4                 M[FP + -0xc] = r0;
0x001477        F3240000                 pop r0;
0x001478        F12C7FF6                 M[FP + -0xa] = r0;
0x001479        F3240000                 pop r0;
0x00147A        F12C7FF5                 M[FP + -0xb] = r0;
0x00147B        F3240000                 pop r0;
0x00147C        F12C7FF9                 M[FP + -0x7] = r0;
0x00147D        F3240000                 pop r0;
0x00147E        F12C7FF8                 M[FP + -0x8] = r0;
0x00147F        F3240000                 pop r0;
0x001480        F12C7FF7                 M[FP + -0x9] = r0;
0x001481        F103FFFE                 SP = SP + -2;
0x001482        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001483        F103FFFA                 SP = SP + -6;
0x001484        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x001485        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001486        F1030002                 SP = SP + 2;
0x001487        F1287FFA                 r0 = M[FP + -0x6];
0x001488        F1387FFB                 r1 = M[FP + -0x5];
0x001489        F1487FFE                 r2 = M[FP + -0x2];
0x00148A        F1587FFF                 r3 = M[FP + -0x1];
0x00148B        E1F0FDBE                 call $kal_filter_coef_lib.__warp;
0x00148C        0042000F                 r2 = r0 + Null;
0x00148D        0053000F                 r3 = r1 + Null;
0x00148E        E1F006C3                 call $kal_float_lib.mul;
0x00148F        0082000F                 r6 = r0 + Null;
0x001490        0093000F                 r7 = r1 + Null;
0x001491        0024000F                 r0 = r2 + Null;
0x001492        0035000F                 r1 = r3 + Null;
0x001493        F1487FFC                 r2 = M[FP + -0x4];
0x001494        F1587FFD                 r3 = M[FP + -0x3];
0x001495        E1F006EE                 call $kal_float_lib.div;
0x001496        0062000F                 r4 = r0 + Null;
0x001497        0073000F                 r5 = r1 + Null;
0x001498        0048000F                 r2 = r6 + Null;
0x001499        0059000F                 r3 = r7 + Null;
0x00149A        E1F006A5                 call $kal_float_lib.add;
0x00149B        01400080                 r2 = Null + 128;
0x00149C        FD000080 01500000        r3 = Null + -8388608;
0x00149E        E1F006A1                 call $kal_float_lib.add;
0x00149F        E1F006C7                 call $kal_float_lib.recip;
0x0014A0        F12C000A                 M[FP + 0xa] = r0;
0x0014A1        F13C000B                 M[FP + 0xb] = r1;
0x0014A2        F1030006                 SP = SP + 6;
0x0014A3        F100000C                 pushm <r0, r1>;
0x0014A4        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0014A6        E422002F                 r0 = r0 + 1;
0x0014A7        F100000C                 pushm <r0, r1>;
0x0014A8        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0014AA        E422003F                 r0 = r0 - 1;
0x0014AB        F100000C                 pushm <r0, r1>;
0x0014AC        0028000F                 r0 = r6 + Null;
0x0014AD        0039000F                 r1 = r7 + Null;
0x0014AE        01400081                 r2 = Null + 129;
0x0014AF        FD000080 01500000        r3 = Null + -8388608;
0x0014B1        E1F006A0                 call $kal_float_lib.mul;
0x0014B2        E1F00696                 call $kal_float_lib.sub;
0x0014B3        F148000A                 r2 = M[FP + 0xa];
0x0014B4        F158000B                 r3 = M[FP + 0xb];
0x0014B5        E1F0069C                 call $kal_float_lib.mul;
0x0014B6        F100000C                 pushm <r0, r1>;
0x0014B7        0028000F                 r0 = r6 + Null;
0x0014B8        0039000F                 r1 = r7 + Null;
0x0014B9        0046000F                 r2 = r4 + Null;
0x0014BA        0057000F                 r3 = r5 + Null;
0x0014BB        E1F0068D                 call $kal_float_lib.sub;
0x0014BC        01400080                 r2 = Null + 128;
0x0014BD        FD000080 01500000        r3 = Null + -8388608;
0x0014BF        E1F00680                 call $kal_float_lib.add;
0x0014C0        F148000A                 r2 = M[FP + 0xa];
0x0014C1        F158000B                 r3 = M[FP + 0xb];
0x0014C2        E1F0068F                 call $kal_float_lib.mul;
0x0014C3        F100000C                 pushm <r0, r1>;
0x0014C4        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x0014C5        F3240000                 pop r0;
0x0014C6        F12C7FF4                 M[FP + -0xc] = r0;
0x0014C7        F3240000                 pop r0;
0x0014C8        F12C7FF6                 M[FP + -0xa] = r0;
0x0014C9        F3240000                 pop r0;
0x0014CA        F12C7FF5                 M[FP + -0xb] = r0;
0x0014CB        F3240000                 pop r0;
0x0014CC        F12C7FF9                 M[FP + -0x7] = r0;
0x0014CD        F3240000                 pop r0;
0x0014CE        F12C7FF8                 M[FP + -0x8] = r0;
0x0014CF        F3240000                 pop r0;
0x0014D0        F12C7FF7                 M[FP + -0x9] = r0;
0x0014D1        F103FFFE                 SP = SP + -2;
0x0014D2        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014D3        F103FFFA                 SP = SP + -6;
0x0014D4        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x0014D5        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014D6        F1030002                 SP = SP + 2;
0x0014D7        F1287FFA                 r0 = M[FP + -0x6];
0x0014D8        F1387FFB                 r1 = M[FP + -0x5];
0x0014D9        F1487FFE                 r2 = M[FP + -0x2];
0x0014DA        F1587FFF                 r3 = M[FP + -0x1];
0x0014DB        E1F0FD6E                 call $kal_filter_coef_lib.__warp;
0x0014DC        0042000F                 r2 = r0 + Null;
0x0014DD        0053000F                 r3 = r1 + Null;
0x0014DE        E1F00673                 call $kal_float_lib.mul;
0x0014DF        0082000F                 r6 = r0 + Null;
0x0014E0        0093000F                 r7 = r1 + Null;
0x0014E1        0024000F                 r0 = r2 + Null;
0x0014E2        0035000F                 r1 = r3 + Null;
0x0014E3        F1487FFC                 r2 = M[FP + -0x4];
0x0014E4        F1587FFD                 r3 = M[FP + -0x3];
0x0014E5        E1F0069E                 call $kal_float_lib.div;
0x0014E6        0062000F                 r4 = r0 + Null;
0x0014E7        0073000F                 r5 = r1 + Null;
0x0014E8        0048000F                 r2 = r6 + Null;
0x0014E9        0059000F                 r3 = r7 + Null;
0x0014EA        E1F00655                 call $kal_float_lib.add;
0x0014EB        01400080                 r2 = Null + 128;
0x0014EC        FD000080 01500000        r3 = Null + -8388608;
0x0014EE        E1F00651                 call $kal_float_lib.add;
0x0014EF        E1F00677                 call $kal_float_lib.recip;
0x0014F0        F12C000A                 M[FP + 0xa] = r0;
0x0014F1        F13C000B                 M[FP + 0xb] = r1;
0x0014F2        F1030006                 SP = SP + 6;
0x0014F3        0028000F                 r0 = r6 + Null;
0x0014F4        0039000F                 r1 = r7 + Null;
0x0014F5        0046000F                 r2 = r4 + Null;
0x0014F6        0057000F                 r3 = r5 + Null;
0x0014F7        E1F00651                 call $kal_float_lib.sub;
0x0014F8        01400080                 r2 = Null + 128;
0x0014F9        FD000080 01500000        r3 = Null + -8388608;
0x0014FB        E1F00644                 call $kal_float_lib.add;
0x0014FC        F148000A                 r2 = M[FP + 0xa];
0x0014FD        F158000B                 r3 = M[FP + 0xb];
0x0014FE        E1F00653                 call $kal_float_lib.mul;
0x0014FF        F100000C                 pushm <r0, r1>;
0x001500        0062000F                 r4 = r0 + Null;
0x001501        0073000F                 r5 = r1 + Null;
0x001502        0028000F                 r0 = r6 + Null;
0x001503        0039000F                 r1 = r7 + Null;
0x001504        01400081                 r2 = Null + 129;
0x001505        FD000080 01500000        r3 = Null + -8388608;
0x001507        E1F0064A                 call $kal_float_lib.mul;
0x001508        E1F00640                 call $kal_float_lib.sub;
0x001509        F148000A                 r2 = M[FP + 0xa];
0x00150A        F158000B                 r3 = M[FP + 0xb];
0x00150B        E1F00646                 call $kal_float_lib.mul;
0x00150C        F100000C                 pushm <r0, r1>;
0x00150D        0082000F                 r6 = r0 + Null;
0x00150E        0093000F                 r7 = r1 + Null;
0x00150F        01200080                 r0 = Null + 128;
0x001510        FD000080 01300000        r1 = Null + -8388608;
0x001512        F100000C                 pushm <r0, r1>;
0x001513        F1000300                 pushm <r6, r7>;
0x001514        F10000C0                 pushm <r4, r5>;
0x001515        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x001516        F3240000                 pop r0;
0x001517        F12C7FF4                 M[FP + -0xc] = r0;
0x001518        F3240000                 pop r0;
0x001519        F12C7FF6                 M[FP + -0xa] = r0;
0x00151A        F3240000                 pop r0;
0x00151B        F12C7FF5                 M[FP + -0xb] = r0;
0x00151C        F3240000                 pop r0;
0x00151D        F12C7FF9                 M[FP + -0x7] = r0;
0x00151E        F3240000                 pop r0;
0x00151F        F12C7FF8                 M[FP + -0x8] = r0;
0x001520        F3240000                 pop r0;
0x001521        F12C7FF7                 M[FP + -0x9] = r0;
0x001522        F103FFFE                 SP = SP + -2;
0x001523        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001524        F103FFFA                 SP = SP + -6;
0x001525        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x001526        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001527        F1030008                 SP = SP + 8;
0x001528        F1287FF6                 r0 = M[FP + -0xa];
0x001529        F1387FF7                 r1 = M[FP + -0x9];
0x00152A        F1487FFE                 r2 = M[FP + -0x2];
0x00152B        F1587FFF                 r3 = M[FP + -0x1];
0x00152C        E1F0FD1D                 call $kal_filter_coef_lib.__warp;
0x00152D        0062000F                 r4 = r0 + Null;
0x00152E        0073000F                 r5 = r1 + Null;
0x00152F        F1287FFC                 r0 = M[FP + -0x4];
0x001530        F1387FFD                 r1 = M[FP + -0x3];
0x001531        E1F0FD39                 call $kal_filter_coef_lib.__db2lin;
0x001532        F12C000C                 M[FP + 0xc] = r0;
0x001533        F13C000D                 M[FP + 0xd] = r1;
0x001534        F1287FF8                 r0 = M[FP + -0x8];
0x001535        F1387FF9                 r1 = M[FP + -0x7];
0x001536        21220002                 r0 = r0 - 2;
0x001537        E1F0FD33                 call $kal_filter_coef_lib.__db2lin;
0x001538        0042000F                 r2 = r0 + Null;
0x001539        0053000F                 r3 = r1 + Null;
0x00153A        0026000F                 r0 = r4 + Null;
0x00153B        0037000F                 r1 = r5 + Null;
0x00153C        E1F00647                 call $kal_float_lib.div;
0x00153D        0082000F                 r6 = r0 + Null;
0x00153E        0093000F                 r7 = r1 + Null;
0x00153F        0026000F                 r0 = r4 + Null;
0x001540        0037000F                 r1 = r5 + Null;
0x001541        E1F00610                 call $kal_float_lib.mul;
0x001542        0062000F                 r4 = r0 + Null;
0x001543        0073000F                 r5 = r1 + Null;
0x001544        F1487FFA                 r2 = M[FP + -0x6];
0x001545        F1587FFB                 r3 = M[FP + -0x5];
0x001546        E1F0063D                 call $kal_float_lib.div;
0x001547        F12C000E                 M[FP + 0xe] = r0;
0x001548        F13C000F                 M[FP + 0xf] = r1;
0x001549        0028000F                 r0 = r6 + Null;
0x00154A        0039000F                 r1 = r7 + Null;
0x00154B        E1F00638                 call $kal_float_lib.div;
0x00154C        F12C0010                 M[FP + 0x10] = r0;
0x00154D        F13C0011                 M[FP + 0x11] = r1;
0x00154E        0028000F                 r0 = r6 + Null;
0x00154F        0039000F                 r1 = r7 + Null;
0x001550        0048000F                 r2 = r6 + Null;
0x001551        0059000F                 r3 = r7 + Null;
0x001552        E1F005FF                 call $kal_float_lib.mul;
0x001553        0082000F                 r6 = r0 + Null;
0x001554        0093000F                 r7 = r1 + Null;
0x001555        F1480010                 r2 = M[FP + 0x10];
0x001556        F1580011                 r3 = M[FP + 0x11];
0x001557        E1F005E8                 call $kal_float_lib.add;
0x001558        01400080                 r2 = Null + 128;
0x001559        FD000080 01500000        r3 = Null + -8388608;
0x00155B        E1F005E4                 call $kal_float_lib.add;
0x00155C        E1F0060A                 call $kal_float_lib.recip;
0x00155D        F12C000A                 M[FP + 0xa] = r0;
0x00155E        F13C000B                 M[FP + 0xb] = r1;
0x00155F        F1030006                 SP = SP + 6;
0x001560        0026000F                 r0 = r4 + Null;
0x001561        0037000F                 r1 = r5 + Null;
0x001562        0046000F                 r2 = r4 + Null;
0x001563        0057000F                 r3 = r5 + Null;
0x001564        E1F005ED                 call $kal_float_lib.mul;
0x001565        0062000F                 r4 = r0 + Null;
0x001566        0073000F                 r5 = r1 + Null;
0x001567        F148000E                 r2 = M[FP + 0xe];
0x001568        F158000F                 r3 = M[FP + 0xf];
0x001569        E1F005D6                 call $kal_float_lib.add;
0x00156A        01400080                 r2 = Null + 128;
0x00156B        FD000080 01500000        r3 = Null + -8388608;
0x00156D        E1F005D2                 call $kal_float_lib.add;
0x00156E        F148000A                 r2 = M[FP + 0xa];
0x00156F        F158000B                 r3 = M[FP + 0xb];
0x001570        E1F005E1                 call $kal_float_lib.mul;
0x001571        F148000C                 r2 = M[FP + 0xc];
0x001572        F158000D                 r3 = M[FP + 0xd];
0x001573        E1F005DE                 call $kal_float_lib.mul;
0x001574        F100000C                 pushm <r0, r1>;
0x001575        0026000F                 r0 = r4 + Null;
0x001576        0037000F                 r1 = r5 + Null;
0x001577        01400081                 r2 = Null + 129;
0x001578        FD000080 01500000        r3 = Null + -8388608;
0x00157A        E1F005D7                 call $kal_float_lib.mul;
0x00157B        E1F005CD                 call $kal_float_lib.sub;
0x00157C        F148000A                 r2 = M[FP + 0xa];
0x00157D        F158000B                 r3 = M[FP + 0xb];
0x00157E        E1F005D3                 call $kal_float_lib.mul;
0x00157F        F148000C                 r2 = M[FP + 0xc];
0x001580        F158000D                 r3 = M[FP + 0xd];
0x001581        E1F005D0                 call $kal_float_lib.mul;
0x001582        F100000C                 pushm <r0, r1>;
0x001583        0026000F                 r0 = r4 + Null;
0x001584        0037000F                 r1 = r5 + Null;
0x001585        F148000E                 r2 = M[FP + 0xe];
0x001586        F158000F                 r3 = M[FP + 0xf];
0x001587        E1F005C1                 call $kal_float_lib.sub;
0x001588        01400080                 r2 = Null + 128;
0x001589        FD000080 01500000        r3 = Null + -8388608;
0x00158B        E1F005B4                 call $kal_float_lib.add;
0x00158C        F148000A                 r2 = M[FP + 0xa];
0x00158D        F158000B                 r3 = M[FP + 0xb];
0x00158E        E1F005C3                 call $kal_float_lib.mul;
0x00158F        F148000C                 r2 = M[FP + 0xc];
0x001590        F158000D                 r3 = M[FP + 0xd];
0x001591        E1F005C0                 call $kal_float_lib.mul;
0x001592        F100000C                 pushm <r0, r1>;
0x001593        0028000F                 r0 = r6 + Null;
0x001594        0039000F                 r1 = r7 + Null;
0x001595        01400081                 r2 = Null + 129;
0x001596        FD000080 01500000        r3 = Null + -8388608;
0x001598        E1F005B9                 call $kal_float_lib.mul;
0x001599        E1F005AF                 call $kal_float_lib.sub;
0x00159A        F148000A                 r2 = M[FP + 0xa];
0x00159B        F158000B                 r3 = M[FP + 0xb];
0x00159C        E1F005B5                 call $kal_float_lib.mul;
0x00159D        F100000C                 pushm <r0, r1>;
0x00159E        0028000F                 r0 = r6 + Null;
0x00159F        0039000F                 r1 = r7 + Null;
0x0015A0        F1480010                 r2 = M[FP + 0x10];
0x0015A1        F1580011                 r3 = M[FP + 0x11];
0x0015A2        E1F005A6                 call $kal_float_lib.sub;
0x0015A3        01400080                 r2 = Null + 128;
0x0015A4        FD000080 01500000        r3 = Null + -8388608;
0x0015A6        E1F00599                 call $kal_float_lib.add;
0x0015A7        F148000A                 r2 = M[FP + 0xa];
0x0015A8        F158000B                 r3 = M[FP + 0xb];
0x0015A9        E1F005A8                 call $kal_float_lib.mul;
0x0015AA        F100000C                 pushm <r0, r1>;
0x0015AB        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0015AC        F3240000                 pop r0;
0x0015AD        F12C7FF5                 M[FP + -0xb] = r0;
0x0015AE        F3240000                 pop r0;
0x0015AF        F12C7FF4                 M[FP + -0xc] = r0;
0x0015B0        F3240000                 pop r0;
0x0015B1        F12C7FF3                 M[FP + -0xd] = r0;
0x0015B2        F3240000                 pop r0;
0x0015B3        F12C7FF2                 M[FP + -0xe] = r0;
0x0015B4        F3240000                 pop r0;
0x0015B5        F12C7FF1                 M[FP + -0xf] = r0;
0x0015B6        F3240000                 pop r0;
0x0015B7        F12C7FF0                 M[FP + -0x10] = r0;
0x0015B8        F103FFF8                 SP = SP + -8;
0x0015B9        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015BA        F103FFF6                 SP = SP + -10;
0x0015BB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x0015BC        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0015BD        F1030006                 SP = SP + 6;
0x0015BE        F1287FF8                 r0 = M[FP + -0x8];
0x0015BF        F1387FF9                 r1 = M[FP + -0x7];
0x0015C0        F100000C                 pushm <r0, r1>;
0x0015C1        F1287FFA                 r0 = M[FP + -0x6];
0x0015C2        F1387FFB                 r1 = M[FP + -0x5];
0x0015C3        F100000C                 pushm <r0, r1>;
0x0015C4        F1287FFC                 r0 = M[FP + -0x4];
0x0015C5        F1387FFD                 r1 = M[FP + -0x3];
0x0015C6        F100000C                 pushm <r0, r1>;
0x0015C7        01200000                 r0 = Null + 0;
0x0015C8        01300000                 r1 = Null + 0;
0x0015C9        F100000C                 pushm <r0, r1>;
0x0015CA        F1287FFE                 r0 = M[FP + -0x2];
0x0015CB        F1387FFF                 r1 = M[FP + -0x1];
0x0015CC        F100000C                 pushm <r0, r1>;
0x0015CD        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0015CE        F3240000                 pop r0;
0x0015CF        F12C7FF2                 M[FP + -0xe] = r0;
0x0015D0        F3240000                 pop r0;
0x0015D1        F12C7FF4                 M[FP + -0xc] = r0;
0x0015D2        F3240000                 pop r0;
0x0015D3        F12C7FF3                 M[FP + -0xd] = r0;
0x0015D4        F3240000                 pop r0;
0x0015D5        F12C7FF7                 M[FP + -0x9] = r0;
0x0015D6        F3240000                 pop r0;
0x0015D7        F12C7FF6                 M[FP + -0xa] = r0;
0x0015D8        F3240000                 pop r0;
0x0015D9        F12C7FF5                 M[FP + -0xb] = r0;
0x0015DA        F104200D                 popm <FP, r0, r1, rLink>;
0x0015DB        F103FFF8                 SP = SP + -8;
0x0015DC        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x0015DD        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0015DE        F1030006                 SP = SP + 6;
0x0015DF        F1287FF8                 r0 = M[FP + -0x8];
0x0015E0        F1387FF9                 r1 = M[FP + -0x7];
0x0015E1        F100000C                 pushm <r0, r1>;
0x0015E2        F1287FFA                 r0 = M[FP + -0x6];
0x0015E3        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015E5        F1387FFB                 r1 = M[FP + -0x5];
0x0015E6        F100000C                 pushm <r0, r1>;
0x0015E7        F1287FFC                 r0 = M[FP + -0x4];
0x0015E8        F1387FFD                 r1 = M[FP + -0x3];
0x0015E9        F100000C                 pushm <r0, r1>;
0x0015EA        F1287FFA                 r0 = M[FP + -0x6];
0x0015EB        F1387FFB                 r1 = M[FP + -0x5];
0x0015EC        F100000C                 pushm <r0, r1>;
0x0015ED        F1287FFE                 r0 = M[FP + -0x2];
0x0015EE        F1387FFF                 r1 = M[FP + -0x1];
0x0015EF        F100000C                 pushm <r0, r1>;
0x0015F0        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0015F1        F3240000                 pop r0;
0x0015F2        F12C7FF2                 M[FP + -0xe] = r0;
0x0015F3        F3240000                 pop r0;
0x0015F4        F12C7FF4                 M[FP + -0xc] = r0;
0x0015F5        F3240000                 pop r0;
0x0015F6        F12C7FF3                 M[FP + -0xd] = r0;
0x0015F7        F3240000                 pop r0;
0x0015F8        F12C7FF7                 M[FP + -0x9] = r0;
0x0015F9        F3240000                 pop r0;
0x0015FA        F12C7FF6                 M[FP + -0xa] = r0;
0x0015FB        F3240000                 pop r0;
0x0015FC        F12C7FF5                 M[FP + -0xb] = r0;
0x0015FD        F104200D                 popm <FP, r0, r1, rLink>;
0x0015FE        F103FFF8                 SP = SP + -8;
0x0015FF        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x001600        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001601        F1030006                 SP = SP + 6;
0x001602        F1287FF8                 r0 = M[FP + -0x8];
0x001603        F1387FF9                 r1 = M[FP + -0x7];
0x001604        F100000C                 pushm <r0, r1>;
0x001605        F1287FFA                 r0 = M[FP + -0x6];
0x001606        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001608        F1387FFB                 r1 = M[FP + -0x5];
0x001609        F100000C                 pushm <r0, r1>;
0x00160A        F1287FFC                 r0 = M[FP + -0x4];
0x00160B        F1387FFD                 r1 = M[FP + -0x3];
0x00160C        F100000C                 pushm <r0, r1>;
0x00160D        F1287FFA                 r0 = M[FP + -0x6];
0x00160E        E422003F                 r0 = r0 - 1;
0x00160F        F1387FFB                 r1 = M[FP + -0x5];
0x001610        F100000C                 pushm <r0, r1>;
0x001611        F1287FFE                 r0 = M[FP + -0x2];
0x001612        F1387FFF                 r1 = M[FP + -0x1];
0x001613        F100000C                 pushm <r0, r1>;
0x001614        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001615        F3240000                 pop r0;
0x001616        F12C7FF2                 M[FP + -0xe] = r0;
0x001617        F3240000                 pop r0;
0x001618        F12C7FF4                 M[FP + -0xc] = r0;
0x001619        F3240000                 pop r0;
0x00161A        F12C7FF3                 M[FP + -0xd] = r0;
0x00161B        F3240000                 pop r0;
0x00161C        F12C7FF7                 M[FP + -0x9] = r0;
0x00161D        F3240000                 pop r0;
0x00161E        F12C7FF6                 M[FP + -0xa] = r0;
0x00161F        F3240000                 pop r0;
0x001620        F12C7FF5                 M[FP + -0xb] = r0;
0x001621        F104200D                 popm <FP, r0, r1, rLink>;
0x001622        F103FFF8                 SP = SP + -8;
0x001623        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x001624        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001625        F1030004                 SP = SP + 4;
0x001626        F1287FFC                 r0 = M[FP + -0x4];
0x001627        E422002F                 r0 = r0 + 1;
0x001628        F1387FFD                 r1 = M[FP + -0x3];
0x001629        E1F0053D                 call $kal_float_lib.recip;
0x00162A        FD000080 85220000        r0 = r0 OR 0x800000;
0x00162C        0042000F                 r2 = r0 + Null;
0x00162D        0053000F                 r3 = r1 + Null;
0x00162E        0062000F                 r4 = r0 + Null;
0x00162F        0073000F                 r5 = r1 + Null;
0x001630        E1F00521                 call $kal_float_lib.mul;
0x001631        01400080                 r2 = Null + 128;
0x001632        FD000080 01500000        r3 = Null + -8388608;
0x001634        E1F0050B                 call $kal_float_lib.add;
0x001635        E1F0055A                 call $kal_float_lib.rsqrt;
0x001636        E1F00530                 call $kal_float_lib.recip;
0x001637        0046000F                 r2 = r4 + Null;
0x001638        0057000F                 r3 = r5 + Null;
0x001639        E1F00506                 call $kal_float_lib.add;
0x00163A        F1487FF8                 r2 = M[FP + -0x8];
0x00163B        F1587FF9                 r3 = M[FP + -0x7];
0x00163C        E1F00515                 call $kal_float_lib.mul;
0x00163D        F1487FFE                 r2 = M[FP + -0x2];
0x00163E        F1587FFF                 r3 = M[FP + -0x1];
0x00163F        E1F0FC0A                 call $kal_filter_coef_lib.__warp;
0x001640        0062000F                 r4 = r0 + Null;
0x001641        0073000F                 r5 = r1 + Null;
0x001642        F1287FF8                 r0 = M[FP + -0x8];
0x001643        F1387FF9                 r1 = M[FP + -0x7];
0x001644        E1F0FC05                 call $kal_filter_coef_lib.__warp;
0x001645        F12C000A                 M[FP + 0xa] = r0;
0x001646        F13C000B                 M[FP + 0xb] = r1;
0x001647        0042000F                 r2 = r0 + Null;
0x001648        0053000F                 r3 = r1 + Null;
0x001649        E1F00508                 call $kal_float_lib.mul;
0x00164A        F1000030                 pushm <r2, r3>;
0x00164B        F100000C                 pushm <r0, r1>;
0x00164C        0026000F                 r0 = r4 + Null;
0x00164D        0037000F                 r1 = r5 + Null;
0x00164E        0046000F                 r2 = r4 + Null;
0x00164F        0057000F                 r3 = r5 + Null;
0x001650        E1F00501                 call $kal_float_lib.mul;
0x001651        F1040030                 popm <r2, r3>;
0x001652        E1F004F6                 call $kal_float_lib.sub;
0x001653        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001655        E1F00511                 call $kal_float_lib.recip;
0x001656        F1040030                 popm <r2, r3>;
0x001657        E1F004FA                 call $kal_float_lib.mul;
0x001658        0046000F                 r2 = r4 + Null;
0x001659        0057000F                 r3 = r5 + Null;
0x00165A        E1F004F7                 call $kal_float_lib.mul;
0x00165B        0062000F                 r4 = r0 + Null;
0x00165C        0073000F                 r5 = r1 + Null;
0x00165D        F1287FFA                 r0 = M[FP + -0x6];
0x00165E        F1387FFB                 r1 = M[FP + -0x5];
0x00165F        0140007F                 r2 = Null + 127;
0x001660        FD000080 01500000        r3 = Null + -8388608;
0x001662        E1F004EF                 call $kal_float_lib.mul;
0x001663        E1F0FC07                 call $kal_filter_coef_lib.__db2lin;
0x001664        0042000F                 r2 = r0 + Null;
0x001665        0053000F                 r3 = r1 + Null;
0x001666        0026000F                 r0 = r4 + Null;
0x001667        0037000F                 r1 = r5 + Null;
0x001668        E1F004E9                 call $kal_float_lib.mul;
0x001669        0082000F                 r6 = r0 + Null;
0x00166A        0093000F                 r7 = r1 + Null;
0x00166B        0026000F                 r0 = r4 + Null;
0x00166C        0037000F                 r1 = r5 + Null;
0x00166D        E1F00516                 call $kal_float_lib.div;
0x00166E        0042000F                 r2 = r0 + Null;
0x00166F        0053000F                 r3 = r1 + Null;
0x001670        F128000A                 r0 = M[FP + 0xa];
0x001671        F138000B                 r1 = M[FP + 0xb];
0x001672        E1F00511                 call $kal_float_lib.div;
0x001673        0062000F                 r4 = r0 + Null;
0x001674        0073000F                 r5 = r1 + Null;
0x001675        F128000A                 r0 = M[FP + 0xa];
0x001676        F138000B                 r1 = M[FP + 0xb];
0x001677        0048000F                 r2 = r6 + Null;
0x001678        0059000F                 r3 = r7 + Null;
0x001679        E1F0050A                 call $kal_float_lib.div;
0x00167A        0082000F                 r6 = r0 + Null;
0x00167B        0093000F                 r7 = r1 + Null;
0x00167C        F128000A                 r0 = M[FP + 0xa];
0x00167D        F138000B                 r1 = M[FP + 0xb];
0x00167E        0042000F                 r2 = r0 + Null;
0x00167F        0053000F                 r3 = r1 + Null;
0x001680        E1F004D1                 call $kal_float_lib.mul;
0x001681        F12C000A                 M[FP + 0xa] = r0;
0x001682        F13C000B                 M[FP + 0xb] = r1;
0x001683        0048000F                 r2 = r6 + Null;
0x001684        0059000F                 r3 = r7 + Null;
0x001685        E1F004BA                 call $kal_float_lib.add;
0x001686        01400080                 r2 = Null + 128;
0x001687        FD000080 01500000        r3 = Null + -8388608;
0x001689        E1F004B6                 call $kal_float_lib.add;
0x00168A        E1F004DC                 call $kal_float_lib.recip;
0x00168B        F12C000C                 M[FP + 0xc] = r0;
0x00168C        F13C000D                 M[FP + 0xd] = r1;
0x00168D        F1030006                 SP = SP + 6;
0x00168E        F128000A                 r0 = M[FP + 0xa];
0x00168F        F138000B                 r1 = M[FP + 0xb];
0x001690        0046000F                 r2 = r4 + Null;
0x001691        0057000F                 r3 = r5 + Null;
0x001692        E1F004AD                 call $kal_float_lib.add;
0x001693        01400080                 r2 = Null + 128;
0x001694        FD000080 01500000        r3 = Null + -8388608;
0x001696        E1F004A9                 call $kal_float_lib.add;
0x001697        F148000C                 r2 = M[FP + 0xc];
0x001698        F158000D                 r3 = M[FP + 0xd];
0x001699        E1F004B8                 call $kal_float_lib.mul;
0x00169A        F100000C                 pushm <r0, r1>;
0x00169B        F128000A                 r0 = M[FP + 0xa];
0x00169C        F138000B                 r1 = M[FP + 0xb];
0x00169D        01400081                 r2 = Null + 129;
0x00169E        FD000080 01500000        r3 = Null + -8388608;
0x0016A0        E1F004B1                 call $kal_float_lib.mul;
0x0016A1        E1F004A7                 call $kal_float_lib.sub;
0x0016A2        F148000C                 r2 = M[FP + 0xc];
0x0016A3        F158000D                 r3 = M[FP + 0xd];
0x0016A4        E1F004AD                 call $kal_float_lib.mul;
0x0016A5        F100000C                 pushm <r0, r1>;
0x0016A6        F128000A                 r0 = M[FP + 0xa];
0x0016A7        F138000B                 r1 = M[FP + 0xb];
0x0016A8        0046000F                 r2 = r4 + Null;
0x0016A9        0057000F                 r3 = r5 + Null;
0x0016AA        E1F0049E                 call $kal_float_lib.sub;
0x0016AB        01400080                 r2 = Null + 128;
0x0016AC        FD000080 01500000        r3 = Null + -8388608;
0x0016AE        E1F00491                 call $kal_float_lib.add;
0x0016AF        F148000C                 r2 = M[FP + 0xc];
0x0016B0        F158000D                 r3 = M[FP + 0xd];
0x0016B1        E1F004A0                 call $kal_float_lib.mul;
0x0016B2        F100000C                 pushm <r0, r1>;
0x0016B3        F128000A                 r0 = M[FP + 0xa];
0x0016B4        F138000B                 r1 = M[FP + 0xb];
0x0016B5        01400081                 r2 = Null + 129;
0x0016B6        FD000080 01500000        r3 = Null + -8388608;
0x0016B8        E1F00499                 call $kal_float_lib.mul;
0x0016B9        E1F0048F                 call $kal_float_lib.sub;
0x0016BA        F148000C                 r2 = M[FP + 0xc];
0x0016BB        F158000D                 r3 = M[FP + 0xd];
0x0016BC        E1F00495                 call $kal_float_lib.mul;
0x0016BD        F100000C                 pushm <r0, r1>;
0x0016BE        F128000A                 r0 = M[FP + 0xa];
0x0016BF        F138000B                 r1 = M[FP + 0xb];
0x0016C0        0048000F                 r2 = r6 + Null;
0x0016C1        0059000F                 r3 = r7 + Null;
0x0016C2        E1F00486                 call $kal_float_lib.sub;
0x0016C3        01400080                 r2 = Null + 128;
0x0016C4        FD000080 01500000        r3 = Null + -8388608;
0x0016C6        E1F00479                 call $kal_float_lib.add;
0x0016C7        F148000C                 r2 = M[FP + 0xc];
0x0016C8        F158000D                 r3 = M[FP + 0xd];
0x0016C9        E1F00488                 call $kal_float_lib.mul;
0x0016CA        F100000C                 pushm <r0, r1>;
0x0016CB        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0016CC        F3240000                 pop r0;
0x0016CD        F12C7FF2                 M[FP + -0xe] = r0;
0x0016CE        F3240000                 pop r0;
0x0016CF        F12C7FF4                 M[FP + -0xc] = r0;
0x0016D0        F3240000                 pop r0;
0x0016D1        F12C7FF3                 M[FP + -0xd] = r0;
0x0016D2        F3240000                 pop r0;
0x0016D3        F12C7FF7                 M[FP + -0x9] = r0;
0x0016D4        F3240000                 pop r0;
0x0016D5        F12C7FF6                 M[FP + -0xa] = r0;
0x0016D6        F3240000                 pop r0;
0x0016D7        F12C7FF5                 M[FP + -0xb] = r0;
0x0016D8        F103FFFC                 SP = SP + -4;
0x0016D9        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0016DA        F103FFF8                 SP = SP + -8;
0x0016DB        DC0D000F                 rts;

 <$vee.accelerate.start>
0x0016DC        F3D00000                 push rLink;
0x0016DD        E1F0001E                 call $vee.accelerate.i2c_test;
0x0016DE        E1F00061                 call $vee.accelerate.init;
0x0016DF        01302F0D                 r1 = Null + 12045;
0x0016E0        01404F02                 r2 = Null + 20226;
0x0016E1        01501708                 r3 = Null + 5896;
0x0016E2        E1F0111D                 call $message.register_handler;
0x0016E3        FD0000FF 0130679E        r1 = Null + -39010;
0x0016E5        01404F03                 r2 = Null + 20227;
0x0016E6        01501718                 r3 = Null + 5912;
0x0016E7        E1F01118                 call $message.register_handler;
0x0016E8        01302F11                 r1 = Null + 12049;
0x0016E9        01404F05                 r2 = Null + 20229;
0x0016EA        01501725                 r3 = Null + 5925;
0x0016EB        E1F01114                 call $message.register_handler;
0x0016EC        FD0000FF 013067A2        r1 = Null + -39006;
0x0016EE        01404F07                 r2 = Null + 20231;
0x0016EF        0150172B                 r3 = Null + 5931;
0x0016F0        E1F0110F                 call $message.register_handler;
0x0016F1        01302F15                 r1 = Null + 12053;
0x0016F2        01404F08                 r2 = Null + 20232;
0x0016F3        01501731                 r3 = Null + 5937;
0x0016F4        E1F0110B                 call $message.register_handler;
0x0016F5        FD0000FF 013067A6        r1 = Null + -39002;
0x0016F7        01404F0A                 r2 = Null + 20234;
0x0016F8        01501738                 r3 = Null + 5944;
0x0016F9        E1F01106                 call $message.register_handler;
0x0016FA        DDF0FB4A                 jump $pop_rLink_and_rts;

 <$vee.accelerate.i2c_test>
0x0016FB        F3D00000                 push rLink;
0x0016FC        0120000F                 r0 = Null + 15;
0x0016FD        E1F00074                 call $vee.accelerate.read_reg;
0x0016FE        21020033                 Null = r0 - 51;
0x0016FF        DD100005                 if NE jump $vee.accelerate.acc_i2c_error;
0x001700        01404F25                 r2 = Null + 20261;
0x001701        01500000                 r3 = Null + 0;
0x001702        E1F0F92C                 call $message.send_short;
0x001703        DDF0FB41                 jump $pop_rLink_and_rts;

 <$vee.accelerate.acc_i2c_error>
0x001704        01404F25                 r2 = Null + 20261;
0x001705        E450002F                 r3 = Null + 1;
0x001706        E1F0F928                 call $message.send_short;
0x001707        DDF0FB3D                 jump $pop_rLink_and_rts;

 <$acc_sample_enable_cmd_from_vm>
0x001708        F3D00000                 push rLink;
0x001709        FD0000FF 09306845        r1 = Null + M[$vee.accelerate.acc_sample_enable];
0x00170B        E403003F                 Null = r1 - 1;
0x00170C        DD50FB38                 if POS jump $pop_rLink_and_rts;
0x00170D        E1F0FAE4                 call $block_interrupts;
0x00170E        E430002F                 r1 = Null + 1;
0x00170F        FD0000FF 19306845        M[$vee.accelerate.acc_sample_enable] = r1 + Null;
0x001711        E1F0FAB4                 call $interrupt.unblock;
0x001712        01302F19                 r1 = Null + 12057;
0x001713        FD000000 01409C40        r2 = Null + 40000;
0x001715        0150179B                 r3 = Null + 6043;
0x001716        E1F0FB24                 call $timer.schedule_event_in;
0x001717        DDF0FB2D                 jump $pop_rLink_and_rts;

 <$acc_sample_disable_cmd_from_vm>
0x001718        F3D00000                 push rLink;
0x001719        E1F0FAD8                 call $block_interrupts;
0x00171A        01300000                 r1 = Null + 0;
0x00171B        FD0000FF 19306845        M[$vee.accelerate.acc_sample_enable] = r1 + Null;
0x00171D        19302FA6                 M[$vee.accelerate.step_value_enable] = r1 + Null;
0x00171E        19302FA7                 M[$vee.accelerate.neck_protect_enable] = r1 + Null;
0x00171F        FD0000FF 19306846        M[$vee.accelerate.safe_driver_enable] = r1 + Null;
0x001721        FD0000FF 19306847        M[$vee.accelerate.const_seat_enable] = r1 + Null;
0x001723        E1F0FAA2                 call $interrupt.unblock;
0x001724        DDF0FB20                 jump $pop_rLink_and_rts;

 <$step_value_enable_cmd_from_vm>
0x001725        F3D00000                 push rLink;
0x001726        E1F0FACB                 call $block_interrupts;
0x001727        E430002F                 r1 = Null + 1;
0x001728        19302FA6                 M[$vee.accelerate.step_value_enable] = r1 + Null;
0x001729        E1F0FA9C                 call $interrupt.unblock;
0x00172A        DDF0FB1A                 jump $pop_rLink_and_rts;

 <$neck_protect_enable_cmd_from_vm>
0x00172B        F3D00000                 push rLink;
0x00172C        E1F0FAC5                 call $block_interrupts;
0x00172D        E430002F                 r1 = Null + 1;
0x00172E        19302FA7                 M[$vee.accelerate.neck_protect_enable] = r1 + Null;
0x00172F        E1F0FA96                 call $interrupt.unblock;
0x001730        DDF0FB14                 jump $pop_rLink_and_rts;

 <$safe_driver_enable_cmd_from_vm>
0x001731        F3D00000                 push rLink;
0x001732        E1F0FABF                 call $block_interrupts;
0x001733        E430002F                 r1 = Null + 1;
0x001734        FD0000FF 19306846        M[$vee.accelerate.safe_driver_enable] = r1 + Null;
0x001736        E1F0FA8F                 call $interrupt.unblock;
0x001737        DDF0FB0D                 jump $pop_rLink_and_rts;

 <$const_seat_enable_cmd_from_vm>
0x001738        F3D00000                 push rLink;
0x001739        E1F0FAB8                 call $block_interrupts;
0x00173A        E430002F                 r1 = Null + 1;
0x00173B        FD0000FF 19306847        M[$vee.accelerate.const_seat_enable] = r1 + Null;
0x00173D        E1F0FA88                 call $interrupt.unblock;
0x00173E        DDF0FB06                 jump $pop_rLink_and_rts;

 <$vee.accelerate.init>
0x00173F        F3D00000                 push rLink;
0x001740        01200020                 r0 = Null + 32;
0x001741        01300027                 r1 = Null + 39;
0x001742        E1F00047                 call $vee.accelerate.write_reg;
0x001743        01200021                 r0 = Null + 33;
0x001744        01300000                 r1 = Null + 0;
0x001745        E1F00044                 call $vee.accelerate.write_reg;
0x001746        01200022                 r0 = Null + 34;
0x001747        01300000                 r1 = Null + 0;
0x001748        E1F00041                 call $vee.accelerate.write_reg;
0x001749        01200023                 r0 = Null + 35;
0x00174A        01300084                 r1 = Null + 132;
0x00174B        E1F0003E                 call $vee.accelerate.write_reg;
0x00174C        01200024                 r0 = Null + 36;
0x00174D        01300000                 r1 = Null + 0;
0x00174E        E1F0003B                 call $vee.accelerate.write_reg;
0x00174F        01200025                 r0 = Null + 37;
0x001750        01300000                 r1 = Null + 0;
0x001751        E1F00038                 call $vee.accelerate.write_reg;
0x001752        0120001F                 r0 = Null + 31;
0x001753        01300000                 r1 = Null + 0;
0x001754        E1F00035                 call $vee.accelerate.write_reg;
0x001755        0120002E                 r0 = Null + 46;
0x001756        01300000                 r1 = Null + 0;
0x001757        E1F00032                 call $vee.accelerate.write_reg;
0x001758        01200030                 r0 = Null + 48;
0x001759        01300000                 r1 = Null + 0;
0x00175A        E1F0002F                 call $vee.accelerate.write_reg;
0x00175B        01200032                 r0 = Null + 50;
0x00175C        01300000                 r1 = Null + 0;
0x00175D        E1F0002C                 call $vee.accelerate.write_reg;
0x00175E        01200033                 r0 = Null + 51;
0x00175F        01300000                 r1 = Null + 0;
0x001760        E1F00029                 call $vee.accelerate.write_reg;
0x001761        01200038                 r0 = Null + 56;
0x001762        01300000                 r1 = Null + 0;
0x001763        E1F00026                 call $vee.accelerate.write_reg;
0x001764        0120003A                 r0 = Null + 58;
0x001765        01300000                 r1 = Null + 0;
0x001766        E1F00023                 call $vee.accelerate.write_reg;
0x001767        0120003B                 r0 = Null + 59;
0x001768        01300000                 r1 = Null + 0;
0x001769        E1F00020                 call $vee.accelerate.write_reg;
0x00176A        0120003C                 r0 = Null + 60;
0x00176B        01300000                 r1 = Null + 0;
0x00176C        E1F0001D                 call $vee.accelerate.write_reg;
0x00176D        0120003D                 r0 = Null + 61;
0x00176E        01300000                 r1 = Null + 0;
0x00176F        E1F0001A                 call $vee.accelerate.write_reg;
0x001770        DDF0FAD4                 jump $pop_rLink_and_rts;

 <$vee.accelerate.read_reg>
0x001771        F3D00000                 push rLink;
0x001772        0092000F                 r7 = r0 + Null;
0x001773        E1F0102E                 call $i2c.start_bit;
0x001774        01200030                 r0 = Null + 48;
0x001775        E1F00FDB                 call $i2c.send_byte;
0x001776        0002000F                 Null = r0 + Null;
0x001777        DD100010                 if NE jump $vee.accelerate.read_reg_err;
0x001778        0029000F                 r0 = r7 + Null;
0x001779        E1F00FD7                 call $i2c.send_byte;
0x00177A        0002000F                 Null = r0 + Null;
0x00177B        DD10000C                 if NE jump $vee.accelerate.read_reg_err;
0x00177C        E1F01025                 call $i2c.start_bit;
0x00177D        01200031                 r0 = Null + 49;
0x00177E        E1F00FD2                 call $i2c.send_byte;
0x00177F        0002000F                 Null = r0 + Null;
0x001780        DD100007                 if NE jump $vee.accelerate.read_reg_err;
0x001781        01200000                 r0 = Null + 0;
0x001782        E1F00FF7                 call $i2c.receive_byte;
0x001783        00A2000F                 r8 = r0 + Null;
0x001784        E1F0102F                 call $i2c.stop_bit;
0x001785        002A000F                 r0 = r8 + Null;
0x001786        DDF0FABE                 jump $pop_rLink_and_rts;

 <$vee.accelerate.read_reg_err>
0x001787        E420003F                 r0 = Null - 1;
0x001788        DDF0FABC                 jump $pop_rLink_and_rts;

 <$vee.accelerate.write_reg>
0x001789        F3D00000                 push rLink;
0x00178A        0092000F                 r7 = r0 + Null;
0x00178B        00A3000F                 r8 = r1 + Null;
0x00178C        E1F01015                 call $i2c.start_bit;
0x00178D        01200030                 r0 = Null + 48;
0x00178E        E1F00FC2                 call $i2c.send_byte;
0x00178F        0002000F                 Null = r0 + Null;
0x001790        DD10000A                 if NE jump $vee.accelerate.write_reg_err;
0x001791        0029000F                 r0 = r7 + Null;
0x001792        E1F00FBE                 call $i2c.send_byte;
0x001793        0002000F                 Null = r0 + Null;
0x001794        DD100006                 if NE jump $vee.accelerate.write_reg_err;
0x001795        002A000F                 r0 = r8 + Null;
0x001796        E1F00FBA                 call $i2c.send_byte;
0x001797        0002000F                 Null = r0 + Null;
0x001798        DD100002                 if NE jump $vee.accelerate.write_reg_err;
0x001799        E1F0101A                 call $i2c.stop_bit;

 <$vee.accelerate.write_reg_err>
0x00179A        DDF0FAAA                 jump $pop_rLink_and_rts;

 <$vee.accelerate.sample_timer_handler>
0x00179B        F3D00000                 push rLink;
0x00179C        FD0000FF 09206845        r0 = Null + M[$vee.accelerate.acc_sample_enable];
0x00179E        0002000F                 Null = r0 + Null;
0x00179F        DD00FAA5                 if EQ jump $pop_rLink_and_rts;
0x0017A0        01200027                 r0 = Null + 39;
0x0017A1        E1F0FFD0                 call $vee.accelerate.read_reg;
0x0017A2        0002000F                 Null = r0 + Null;
0x0017A3        DD40000B                 if NEG jump $vee.accelerate.no_validle_data;
0x0017A4        0002000F                 Null = r0 + Null;
0x0017A5        DD000009                 if EQ jump $vee.accelerate.no_validle_data;
0x0017A6        E1F0FA4B                 call $block_interrupts;
0x0017A7        FD0000FF 01906715        r7 = Null + -39147;
0x0017A9        01A00006                 r8 = Null + 6;
0x0017AA        E1F0000A                 call $vee.accelerate.read;
0x0017AB        E420002F                 r0 = Null + 1;
0x0017AC        19202FA8                 M[$vee.accelerate.acc_valid] = r0 + Null;
0x0017AD        E1F0FA18                 call $interrupt.unblock;

 <$vee.accelerate.no_validle_data>
0x0017AE        01302F19                 r1 = Null + 12057;
0x0017AF        FD000000 01409C40        r2 = Null + 40000;
0x0017B1        0150179B                 r3 = Null + 6043;
0x0017B2        E1F0FA85                 call $timer.schedule_event_in_period;
0x0017B3        DDF0FA91                 jump $pop_rLink_and_rts;

 <$vee.accelerate.read>
0x0017B4        F3D00000                 push rLink;
0x0017B5        E1F00FEC                 call $i2c.start_bit;
0x0017B6        01200030                 r0 = Null + 48;
0x0017B7        E1F00F99                 call $i2c.send_byte;
0x0017B8        0002000F                 Null = r0 + Null;
0x0017B9        DD10000E                 if NE jump $vee.accelerate.acc_read_err;
0x0017BA        012000A8                 r0 = Null + 168;
0x0017BB        E1F00F95                 call $i2c.send_byte;
0x0017BC        0002000F                 Null = r0 + Null;
0x0017BD        DD10000A                 if NE jump $vee.accelerate.acc_read_err;
0x0017BE        E1F00FE3                 call $i2c.start_bit;
0x0017BF        01200031                 r0 = Null + 49;
0x0017C0        E1F00F90                 call $i2c.send_byte;
0x0017C1        0002000F                 Null = r0 + Null;
0x0017C2        DD100005                 if NE jump $vee.accelerate.acc_read_err;
0x0017C3        0029000F                 r0 = r7 + Null;
0x0017C4        003A000F                 r1 = r8 + Null;
0x0017C5        E1F00012                 call $vee.accelerate.multiple_receive;
0x0017C6        E1F00FED                 call $i2c.stop_bit;

 <$vee.accelerate.acc_read_err>
0x0017C7        DDF0FA7D                 jump $pop_rLink_and_rts;

 <$vee.accelerate.multiple_send>
0x0017C8        F3D00000                 push rLink;
0x0017C9        5000002F                 I0 = Null + r0;
0x0017CA        51C00000                 L0 = Null + 0;
0x0017CB        00A3000F                 r8 = r1 + Null;

 <$vee.accelerate.send_multiple_byte>
0x0017CC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0017CD        E1F00F83                 call $i2c.send_byte;
0x0017CE        0002000F                 Null = r0 + Null;
0x0017CF        DD100006                 if NE jump $vee.accelerate.multiple_send_err;
0x0017D0        E4AA003F                 r8 = r8 - 1;
0x0017D1        000A000F                 Null = r8 + Null;
0x0017D2        DD10FFFA                 if NE jump $vee.accelerate.send_multiple_byte;
0x0017D3        01200000                 r0 = Null + 0;
0x0017D4        DDF0FA70                 jump $pop_rLink_and_rts;

 <$vee.accelerate.multiple_send_err>
0x0017D5        E420003F                 r0 = Null - 1;
0x0017D6        DDF0FA6E                 jump $pop_rLink_and_rts;

 <$vee.accelerate.multiple_receive>
0x0017D7        F3D00000                 push rLink;
0x0017D8        5000002F                 I0 = Null + r0;
0x0017D9        51C00000                 L0 = Null + 0;
0x0017DA        E4A3003F                 r8 = r1 - 1;

 <$vee.accelerate.receive_multiple_byte>
0x0017DB        E420002F                 r0 = Null + 1;
0x0017DC        E1F00F9D                 call $i2c.receive_byte;
0x0017DD        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x0017DE        E4AA003F                 r8 = r8 - 1;
0x0017DF        000A000F                 Null = r8 + Null;
0x0017E0        DD10FFFB                 if NE jump $vee.accelerate.receive_multiple_byte;
0x0017E1        01200000                 r0 = Null + 0;
0x0017E2        E1F00F97                 call $i2c.receive_byte;
0x0017E3        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x0017E4        DDF0FA60                 jump $pop_rLink_and_rts;

 <$vee.accelerate.arccos>
0x0017E5        F3D00000                 push rLink;
0x0017E6        0007000F                 Null = r5 + Null;
0x0017E7        DD000017                 if EQ jump $vee.accelerate.cos_vertical_angle;
0x0017E8        8D77007F                 r5 = r5 LSHIFT -1;
0x0017E9        FD000040 01170000        rMAC = r5 + 4194304;
0x0017EB        8D210000                 r0 = rMAC LSHIFT 0;
0x0017EC        FD000040 65170000        rMAC = 4194304 - r5;
0x0017EE        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x0017EF        D9020000                 Div = rMAC / r0;
0x0017F0        D9200001                 r0 = DivResult;
0x0017F1        E1F0F97D                 call $math.sqrt;
0x0017F2        D9800001                 r6 = DivResult;
0x0017F3        FD00007F 0170FFFF        r5 = Null + 8388607;
0x0017F5        E1F0F2BA                 call $atan;
0x0017F6        FD000000 CD170168        rMAC = r5 * 4.291534423828125e-005 (SS);
0x0017F8        8D210000                 r0 = rMAC LSHIFT 0;
0x0017F9        8D310018                 r1 = rMAC LSHIFT 24;
0x0017FA        8D33007F                 r1 = r1 LSHIFT -1;
0x0017FB        000B000F                 Null = r9 + Null;
0x0017FC        20200021                 if NE r0 = Null - r0;
0x0017FD        DDF0FA47                 jump $pop_rLink_and_rts;

 <$vee.accelerate.cos_vertical_angle>
0x0017FE        FD0000FF 09406849        r2 = Null + M[$vee.accelerate.angle_z_int];
0x001800        0150005A                 r3 = Null + 90;
0x001801        0160FFA6                 r4 = Null + -90;
0x001802        0004000F                 Null = r2 + Null;
0x001803        00260004                 if NEG r0 = r4 + Null;
0x001804        0004000F                 Null = r2 + Null;
0x001805        00250005                 if POS r0 = r3 + Null;
0x001806        01300000                 r1 = Null + 0;
0x001807        DDF0FA3D                 jump $pop_rLink_and_rts;

 <$vee.accelerate.arcsin>
0x001808        F3D00000                 push rLink;
0x001809        0007000F                 Null = r5 + Null;
0x00180A        DD000014                 if EQ jump $vee.accelerate.sin_zero_angle;
0x00180B        9437007F                 r1 = r5 * r5 (frac);
0x00180C        FD00007F 6513FFFF        rMAC = 8388607 - r1;
0x00180E        8D210000                 r0 = rMAC LSHIFT 0;
0x00180F        E1F0F95F                 call $math.sqrt;
0x001810        FD00007F 6513FFFF        rMAC = 8388607 - r1;
0x001812        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x001813        D9070000                 Div = rMAC / r5;
0x001814        D9800001                 r6 = DivResult;
0x001815        FD00007F 0170FFFF        r5 = Null + 8388607;
0x001817        E1F0F298                 call $atan;
0x001818        FD000000 CD170168        rMAC = r5 * 4.291534423828125e-005 (SS);
0x00181A        8D210000                 r0 = rMAC LSHIFT 0;
0x00181B        8D310018                 r1 = rMAC LSHIFT 24;
0x00181C        8D33007F                 r1 = r1 LSHIFT -1;
0x00181D        DDF0FA27                 jump $pop_rLink_and_rts;

 <$vee.accelerate.sin_zero_angle>
0x00181E        01200000                 r0 = Null + 0;
0x00181F        01300000                 r1 = Null + 0;
0x001820        DDF0FA24                 jump $pop_rLink_and_rts;

 <$vee.accelerate.angle_calc>
0x001821        F3D00000                 push rLink;
0x001822        FD0000FF 01206715        r0 = Null + -39147;
0x001824        01300006                 r1 = Null + 6;
0x001825        5000002F                 I0 = Null + r0;
0x001826        51C00000                 L0 = Null + 0;
0x001827        51402E7F                 I4 = Null + 11903;
0x001828        51E00000                 L4 = Null + 0;
0x001829        00C3000F                 r10 = r1 + Null;
0x00182A        09202FA8                 r0 = Null + M[$vee.accelerate.acc_valid];
0x00182B        0002000F                 Null = r0 + Null;
0x00182C        DD00FA18                 if EQ jump $pop_rLink_and_rts;
0x00182D        E1F0F9C4                 call $block_interrupts;
0x00182E        E5F00003                 do $vee.accelerate.copy_acc_data;
0x00182F        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001830        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$vee.accelerate.copy_acc_data>
0x001831        E1F0F994                 call $interrupt.unblock;
0x001832        09302E7F                 r1 = Null + M[$vee.accelerate.acc_calc_buf];
0x001833        09402E80                 r2 = Null + M[0x2e80];
0x001834        8D440008                 r2 = r2 LSHIFT 8;
0x001835        0023004F                 r0 = r1 + r2;
0x001836        E1F00036                 call $vee.accelerate.get_acc;
0x001837        19202FAA                 M[$vee.accelerate.acc_axis_x] = r0 + Null;
0x001838        09302E81                 r1 = Null + M[0x2e81];
0x001839        09402E82                 r2 = Null + M[0x2e82];
0x00183A        8D440008                 r2 = r2 LSHIFT 8;
0x00183B        0023004F                 r0 = r1 + r2;
0x00183C        E1F00030                 call $vee.accelerate.get_acc;
0x00183D        FD0000FF 1920684A        M[$vee.accelerate.acc_axis_y] = r0 + Null;
0x00183F        09302E83                 r1 = Null + M[0x2e83];
0x001840        09402E84                 r2 = Null + M[0x2e84];
0x001841        8D440008                 r2 = r2 LSHIFT 8;
0x001842        0023004F                 r0 = r1 + r2;
0x001843        E1F00029                 call $vee.accelerate.get_acc;
0x001844        19202FAB                 M[$vee.accelerate.acc_axis_z] = r0 + Null;
0x001845        E1F0F9AC                 call $block_interrupts;
0x001846        01200000                 r0 = Null + 0;
0x001847        19202FA8                 M[$vee.accelerate.acc_valid] = r0 + Null;
0x001848        E1F0F97D                 call $interrupt.unblock;
0x001849        E1F00014                 call $vee.accelerate.acc_output;
0x00184A        09202FA6                 r0 = Null + M[$vee.accelerate.step_value_enable];
0x00184B        0002000F                 Null = r0 + Null;
0x00184C        DD000002                 if EQ jump $vee.accelerate.dont_output_step_value;
0x00184D        E1F00AAC                 call $vee.accelerate.step_count;

 <$vee.accelerate.dont_output_step_value>
0x00184E        FD0000FF 09206846        r0 = Null + M[$vee.accelerate.safe_driver_enable];
0x001850        0002000F                 Null = r0 + Null;
0x001851        DD000002                 if EQ jump $vee.accelerate.dont_output_safe_driver_event;
0x001852        E1F00B8A                 call $vee.accelerate.safe_driver;

 <$vee.accelerate.dont_output_safe_driver_event>
0x001853        09202FA7                 r0 = Null + M[$vee.accelerate.neck_protect_enable];
0x001854        0002000F                 Null = r0 + Null;
0x001855        DD000002                 if EQ jump $vee.accelerate.dont_output_neck_prompt_event;
0x001856        E1F004F3                 call $vee.accelerate.neck_protect;

 <$vee.accelerate.dont_output_neck_prompt_event>
0x001857        FD0000FF 09206847        r0 = Null + M[$vee.accelerate.const_seat_enable];
0x001859        0002000F                 Null = r0 + Null;
0x00185A        DD000002                 if EQ jump $vee.accelerate.dont_output_seat_prompt_event;
0x00185B        E1F005A5                 call $vee.accelerate.const_seat;

 <$vee.accelerate.dont_output_seat_prompt_event>
0x00185C        DDF0F9E8                 jump $pop_rLink_and_rts;

 <$vee.accelerate.acc_output>
0x00185D        F3D00000                 push rLink;
0x00185E        51002F50                 I0 = Null + 12112;
0x00185F        51C00000                 L0 = Null + 0;
0x001860        09702FAA                 r5 = Null + M[$vee.accelerate.acc_axis_x];
0x001861        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x001862        FD0000FF 0970684A        r5 = Null + M[$vee.accelerate.acc_axis_y];
0x001864        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x001865        09702FAB                 r5 = Null + M[$vee.accelerate.acc_axis_z];
0x001866        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x001867        01504088                 r3 = Null + 16520;
0x001868        01600003                 r4 = Null + 3;
0x001869        01702F50                 r5 = Null + 12112;
0x00186A        E1F0F474                 call $message.send_long;
0x00186B        DDF0F9D9                 jump $pop_rLink_and_rts;

 <$vee.accelerate.get_acc>
0x00186C        F3D00000                 push rLink;
0x00186D        FD0000FF 01300000        r1 = Null + -65536;
0x00186F        81428000                 r2 = r0 AND 0x8000;
0x001870        0004000F                 Null = r2 + Null;
0x001871        84220031                 if NE r0 = r0 OR r1;
0x001872        9922000A                 r0 = r0 * 10 (int);
0x001873        CD120008                 rMAC = r0 * 0.000244140625 (SS);
0x001874        8D210000                 r0 = rMAC LSHIFT 0;
0x001875        DDF0F9CF                 jump $pop_rLink_and_rts;

 <$vee.heartrate.start>
0x001876        F3D00000                 push rLink;
0x001877        E1F00014                 call $vee.heartrate.i2c_test;
0x001878        01302F01                 r1 = Null + 12033;
0x001879        01404F00                 r2 = Null + 20224;
0x00187A        015018BC                 r3 = Null + 6332;
0x00187B        E1F00F84                 call $message.register_handler;
0x00187C        FD0000FF 01306792        r1 = Null + -39022;
0x00187E        01404F01                 r2 = Null + 20225;
0x00187F        015018CA                 r3 = Null + 6346;
0x001880        E1F00F7F                 call $message.register_handler;
0x001881        01302F05                 r1 = Null + 12037;
0x001882        01404F06                 r2 = Null + 20230;
0x001883        015018D2                 r3 = Null + 6354;
0x001884        E1F00F7B                 call $message.register_handler;
0x001885        FD0000FF 01306796        r1 = Null + -39018;
0x001887        01404F09                 r2 = Null + 20233;
0x001888        01501F29                 r3 = Null + 7977;
0x001889        E1F00F76                 call $message.register_handler;
0x00188A        DDF0F9BA                 jump $pop_rLink_and_rts;

 <$vee.heartrate.i2c_test>
0x00188B        F3D00000                 push rLink;
0x00188C        E1F00F15                 call $i2c.start_bit;
0x00188D        01200090                 r0 = Null + 144;
0x00188E        E1F00EC2                 call $i2c.send_byte;
0x00188F        0002000F                 Null = r0 + Null;
0x001890        DD100028                 if NE jump $vee.heartrate.i2c_test_err;
0x001891        E420002F                 r0 = Null + 1;
0x001892        E1F00EBE                 call $i2c.send_byte;
0x001893        0002000F                 Null = r0 + Null;
0x001894        DD100024                 if NE jump $vee.heartrate.i2c_test_err;
0x001895        01200085                 r0 = Null + 133;
0x001896        E1F00EBA                 call $i2c.send_byte;
0x001897        0002000F                 Null = r0 + Null;
0x001898        DD100020                 if NE jump $vee.heartrate.i2c_test_err;
0x001899        01200083                 r0 = Null + 131;
0x00189A        E1F00EB6                 call $i2c.send_byte;
0x00189B        0002000F                 Null = r0 + Null;
0x00189C        DD10001C                 if NE jump $vee.heartrate.i2c_test_err;
0x00189D        E1F00F16                 call $i2c.stop_bit;
0x00189E        E1F00F03                 call $i2c.start_bit;
0x00189F        01200090                 r0 = Null + 144;
0x0018A0        E1F00EB0                 call $i2c.send_byte;
0x0018A1        0002000F                 Null = r0 + Null;
0x0018A2        DD100016                 if NE jump $vee.heartrate.i2c_test_err;
0x0018A3        E420002F                 r0 = Null + 1;
0x0018A4        E1F00EAC                 call $i2c.send_byte;
0x0018A5        0002000F                 Null = r0 + Null;
0x0018A6        DD100012                 if NE jump $vee.heartrate.i2c_test_err;
0x0018A7        E1F00F0C                 call $i2c.stop_bit;
0x0018A8        E1F00EF9                 call $i2c.start_bit;
0x0018A9        01200091                 r0 = Null + 145;
0x0018AA        E1F00EA6                 call $i2c.send_byte;
0x0018AB        0002000F                 Null = r0 + Null;
0x0018AC        DD10000C                 if NE jump $vee.heartrate.i2c_test_err;
0x0018AD        E420002F                 r0 = Null + 1;
0x0018AE        E1F00ECB                 call $i2c.receive_byte;
0x0018AF        E420002F                 r0 = Null + 1;
0x0018B0        E1F00EC9                 call $i2c.receive_byte;
0x0018B1        21020083                 Null = r0 - 131;
0x0018B2        DD100006                 if NE jump $vee.heartrate.i2c_test_err;
0x0018B3        E1F00F00                 call $i2c.stop_bit;
0x0018B4        01404F24                 r2 = Null + 20260;
0x0018B5        01500000                 r3 = Null + 0;
0x0018B6        E1F0F778                 call $message.send_short;
0x0018B7        DDF0F98D                 jump $pop_rLink_and_rts;

 <$vee.heartrate.i2c_test_err>
0x0018B8        01404F24                 r2 = Null + 20260;
0x0018B9        E450002F                 r3 = Null + 1;
0x0018BA        E1F0F774                 call $message.send_short;
0x0018BB        DDF0F989                 jump $pop_rLink_and_rts;

 <$hb_enable_cmd_from_vm>
0x0018BC        F3D00000                 push rLink;
0x0018BD        FD0000FF 0930683C        r1 = Null + M[$vee.heartrate.hb_sample_enable];
0x0018BF        E403003F                 Null = r1 - 1;
0x0018C0        DD50F984                 if POS jump $pop_rLink_and_rts;
0x0018C1        E430002F                 r1 = Null + 1;
0x0018C2        FD0000FF 1930683C        M[$vee.heartrate.hb_sample_enable] = r1 + Null;
0x0018C4        01302F09                 r1 = Null + 12041;
0x0018C5        FD000000 0140C350        r2 = Null + 50000;
0x0018C7        015018EF                 r3 = Null + 6383;
0x0018C8        E1F0F972                 call $timer.schedule_event_in;
0x0018C9        DDF0F97B                 jump $pop_rLink_and_rts;

 <$hb_disable_cmd_from_vm>
0x0018CA        F3D00000                 push rLink;
0x0018CB        E1F0F926                 call $block_interrupts;
0x0018CC        01300000                 r1 = Null + 0;
0x0018CD        FD0000FF 1930683C        M[$vee.heartrate.hb_sample_enable] = r1 + Null;
0x0018CF        19302F9D                 M[$vee.heartrate.hb_time_enable] = r1 + Null;
0x0018D0        E1F0F8F5                 call $interrupt.unblock;
0x0018D1        DDF0F973                 jump $pop_rLink_and_rts;

 <$time_value_cmd_from_vm>
0x0018D2        F3D00000                 push rLink;
0x0018D3        09302F9D                 r1 = Null + M[$vee.heartrate.hb_time_enable];
0x0018D4        E403003F                 Null = r1 - 1;
0x0018D5        DD50F96F                 if POS jump $pop_rLink_and_rts;
0x0018D6        E430002F                 r1 = Null + 1;
0x0018D7        19302F9D                 M[$vee.heartrate.hb_time_enable] = r1 + Null;
0x0018D8        FD0000FF 0130679A        r1 = Null + -39014;
0x0018DA        FD00000F 01404240        r2 = Null + 1000000;
0x0018DC        015018DF                 r3 = Null + 6367;
0x0018DD        E1F0F95D                 call $timer.schedule_event_in;
0x0018DE        DDF0F966                 jump $pop_rLink_and_rts;

 <$vee.heartrate.sport_time_timer_handler>
0x0018DF        F3D00000                 push rLink;
0x0018E0        09202F9D                 r0 = Null + M[$vee.heartrate.hb_time_enable];
0x0018E1        0002000F                 Null = r0 + Null;
0x0018E2        DD00F962                 if EQ jump $pop_rLink_and_rts;
0x0018E3        E1F0F90E                 call $block_interrupts;
0x0018E4        09302F9E                 r1 = Null + M[$vee.heartrate.time_value];
0x0018E5        E433002F                 r1 = r1 + 1;
0x0018E6        19302F9E                 M[$vee.heartrate.time_value] = r1 + Null;
0x0018E7        E1F0F8DE                 call $interrupt.unblock;
0x0018E8        FD0000FF 0130679A        r1 = Null + -39014;
0x0018EA        FD00000F 01404240        r2 = Null + 1000000;
0x0018EC        015018DF                 r3 = Null + 6367;
0x0018ED        E1F0F94D                 call $timer.schedule_event_in;
0x0018EE        DDF0F956                 jump $pop_rLink_and_rts;

 <$vee.heartrate.sample_timer_handler>
0x0018EF        F3D00000                 push rLink;
0x0018F0        FD0000FF 0920683C        r0 = Null + M[$vee.heartrate.hb_sample_enable];
0x0018F2        0002000F                 Null = r0 + Null;
0x0018F3        DD00F951                 if EQ jump $pop_rLink_and_rts;
0x0018F4        E1F0000F                 call $vee.heartratevalue.read;
0x0018F5        0005000F                 Null = r3 + Null;
0x0018F6        DD400007                 if NEG jump $vee.heartrate.vee_heartrate_sample_ret;
0x0018F7        E1F0006F                 call $vee.heartrate.input;
0x0018F8        01202F4D                 r0 = Null + 12109;
0x0018F9        E1F0F8F0                 call $cbuffer.calc_amount_data;
0x0018FA        21020078                 Null = r0 - 120;
0x0018FB        DD400002                 if NEG jump $vee.heartrate.vee_heartrate_sample_ret;
0x0018FC        E1F0003B                 call $vee.heartrate.sample_copy;

 <$vee.heartrate.vee_heartrate_sample_ret>
0x0018FD        01302F09                 r1 = Null + 12041;
0x0018FE        FD000000 0140C350        r2 = Null + 50000;
0x001900        015018EF                 r3 = Null + 6383;
0x001901        E1F0F936                 call $timer.schedule_event_in_period;
0x001902        DDF0F942                 jump $pop_rLink_and_rts;

 <$vee.heartratevalue.read>
0x001903        F3D00000                 push rLink;
0x001904        E1F00E9D                 call $i2c.start_bit;
0x001905        01200090                 r0 = Null + 144;
0x001906        E1F00E4A                 call $i2c.send_byte;
0x001907        0002000F                 Null = r0 + Null;
0x001908        DD10002D                 if NE jump $vee.heartrate.send_err;
0x001909        E420002F                 r0 = Null + 1;
0x00190A        E1F00E46                 call $i2c.send_byte;
0x00190B        0002000F                 Null = r0 + Null;
0x00190C        DD100029                 if NE jump $vee.heartrate.send_err;
0x00190D        01200085                 r0 = Null + 133;
0x00190E        E1F00E42                 call $i2c.send_byte;
0x00190F        0002000F                 Null = r0 + Null;
0x001910        DD100025                 if NE jump $vee.heartrate.send_err;
0x001911        01200083                 r0 = Null + 131;
0x001912        E1F00E3E                 call $i2c.send_byte;
0x001913        0002000F                 Null = r0 + Null;
0x001914        DD100021                 if NE jump $vee.heartrate.send_err;
0x001915        E1F00E9E                 call $i2c.stop_bit;
0x001916        E1F00E8B                 call $i2c.start_bit;
0x001917        01200090                 r0 = Null + 144;
0x001918        E1F00E38                 call $i2c.send_byte;
0x001919        0002000F                 Null = r0 + Null;
0x00191A        DD10001B                 if NE jump $vee.heartrate.send_err;
0x00191B        01200000                 r0 = Null + 0;
0x00191C        E1F00E34                 call $i2c.send_byte;
0x00191D        0002000F                 Null = r0 + Null;
0x00191E        DD100017                 if NE jump $vee.heartrate.send_err;
0x00191F        E1F00E94                 call $i2c.stop_bit;
0x001920        E1F00E81                 call $i2c.start_bit;
0x001921        01200091                 r0 = Null + 145;
0x001922        E1F00E2E                 call $i2c.send_byte;
0x001923        0002000F                 Null = r0 + Null;
0x001924        DD100011                 if NE jump $vee.heartrate.send_err;
0x001925        E420002F                 r0 = Null + 1;
0x001926        E1F00E53                 call $i2c.receive_byte;
0x001927        19202F9F                 M[$vee.heartrate.value_msb] = r0 + Null;
0x001928        E420002F                 r0 = Null + 1;
0x001929        E1F00E50                 call $i2c.receive_byte;
0x00192A        FD0000FF 1920683E        M[$vee.heartrate.value_lsb] = r0 + Null;
0x00192C        E1F00E87                 call $i2c.stop_bit;
0x00192D        09302F9F                 r1 = Null + M[$vee.heartrate.value_msb];
0x00192E        91330008                 r1 = r1 ASHIFT 8;
0x00192F        FD0000FF 0953683E        r3 = r1 + M[$vee.heartrate.value_lsb];
0x001931        8D55007C                 r3 = r3 LSHIFT -4;
0x001932        210507FF                 Null = r3 - 2047;
0x001933        00500005                 if POS r3 = Null + Null;
0x001934        DDF0F910                 jump $pop_rLink_and_rts;

 <$vee.heartrate.send_err>
0x001935        E450003F                 r3 = Null - 1;
0x001936        DDF0F90E                 jump $pop_rLink_and_rts;

 <$vee.heartrate.sample_copy>
0x001937        F3D00000                 push rLink;
0x001938        01202F4D                 r0 = Null + 12109;
0x001939        E1F0F8D6                 call $cbuffer.get_read_address_and_size;
0x00193A        5000002F                 I0 = Null + r0;
0x00193B        50C0003F                 L0 = Null + r1;
0x00193C        FD0000FF 012067EA        r0 = Null + -38934;
0x00193E        E1F0F8D6                 call $cbuffer.get_write_address_and_size;
0x00193F        5040002F                 I4 = Null + r0;
0x001940        50E0003F                 L4 = Null + r1;
0x001941        01C00078                 r10 = Null + 120;
0x001942        E5F00003                 do $vee.heartrate.cbuf_copy;
0x001943        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001944        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$vee.heartrate.cbuf_copy>
0x001945        FD0000FF 012067EA        r0 = Null + -38934;
0x001947        4430004F                 r1 = Null + I4;
0x001948        E1F0F8DA                 call $cbuffer.set_write_address;
0x001949        51C00000                 L0 = Null + 0;
0x00194A        01202F4D                 r0 = Null + 12109;
0x00194B        E1F0F8C4                 call $cbuffer.get_read_address_and_size;
0x00194C        5000002F                 I0 = Null + r0;
0x00194D        50C0003F                 L0 = Null + r1;
0x00194E        01C00014                 r10 = Null + 20;
0x00194F        E5F00002                 do $vee.heartrate.move_read_address;
0x001950        03003100                 Null = Null + Null, r1 = M[I0,1];

 <$vee.heartrate.move_read_address>
0x001951        01202F4D                 r0 = Null + 12109;
0x001952        4430000F                 r1 = Null + I0;
0x001953        E1F0F8CB                 call $cbuffer.set_read_address;
0x001954        51C00000                 L0 = Null + 0;
0x001955        DDF0F8EF                 jump $pop_rLink_and_rts;

 <$vee.heartrate.calc_cbuffer_copy>
0x001956        F3D00000                 push rLink;
0x001957        FD0000FF 012067EA        r0 = Null + -38934;
0x001959        E1F0F8B6                 call $cbuffer.get_read_address_and_size;
0x00195A        5000002F                 I0 = Null + r0;
0x00195B        50C0003F                 L0 = Null + r1;
0x00195C        51400F00                 I4 = Null + 3840;
0x00195D        51E00000                 L4 = Null + 0;
0x00195E        01C00078                 r10 = Null + 120;
0x00195F        E5F00003                 do $vee.heartrate.calc_cbuffer_copy1;
0x001960        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001961        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$vee.heartrate.calc_cbuffer_copy1>
0x001962        FD0000FF 012067EA        r0 = Null + -38934;
0x001964        E1F0F719                 call $cbuffer.empty_buffer;
0x001965        DDF0F8DF                 jump $pop_rLink_and_rts;

 <$vee.heartrate.input>
0x001966        F3D00000                 push rLink;
0x001967        01202F4D                 r0 = Null + 12109;
0x001968        E1F0F8AC                 call $cbuffer.get_write_address_and_size;
0x001969        5000002F                 I0 = Null + r0;
0x00196A        50C0003F                 L0 = Null + r1;
0x00196B        0025000F                 r0 = r3 + Null;
0x00196C        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00196D        01202F4D                 r0 = Null + 12109;
0x00196E        4430000F                 r1 = Null + I0;
0x00196F        E1F0F8B3                 call $cbuffer.set_write_address;
0x001970        51C00000                 L0 = Null + 0;
0x001971        DDF0F8D3                 jump $pop_rLink_and_rts;

 <$vee.heartrate.average_hb>
0x001972        F3D00000                 push rLink;
0x001973        01400032                 r2 = Null + 50;
0x001974        9B240000                 r0 = r0 * r2 (int);
0x001975        91E20080                 rMAC = r0 ASHIFT 0 (LO);
0x001976        D9030000                 Div = rMAC / r1;
0x001977        D9300001                 r1 = DivResult;
0x001978        FD000000 0140EA60        r2 = Null + 60000;
0x00197A        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x00197B        D9030000                 Div = rMAC / r1;
0x00197C        D9200001                 r0 = DivResult;
0x00197D        21020032                 Null = r0 - 50;
0x00197E        00200004                 if NEG r0 = Null + Null;
0x00197F        21020096                 Null = r0 - 150;
0x001980        00200005                 if POS r0 = Null + Null;
0x001981        DDF0F8C3                 jump $pop_rLink_and_rts;

 <$vee.heartrate.calc>
0x001982        F3D00000                 push rLink;
0x001983        E1F0F86E                 call $block_interrupts;
0x001984        FD0000FF 012067EA        r0 = Null + -38934;
0x001986        E1F0F863                 call $cbuffer.calc_amount_data;
0x001987        21020078                 Null = r0 - 120;
0x001988        DD400010                 if NEG jump $vee.heartrate.do_not_calc;
0x001989        E1F0F83C                 call $interrupt.unblock;
0x00198A        E1F0FFCC                 call $vee.heartrate.calc_cbuffer_copy;
0x00198B        01200F00                 r0 = Null + 3840;
0x00198C        01300078                 r1 = Null + 120;
0x00198D        E1F002F5                 call $vee.heartrate.hb_calc;
0x00198E        E1F00510                 call $vee.heartrate.hb_smooth;
0x00198F        E1F00019                 call $vee.heartrate.output;
0x001990        01202D6D                 r0 = Null + 11629;
0x001991        01300012                 r1 = Null + 18;
0x001992        E1F00008                 call $vee.heartrate.zero_buff;
0x001993        FD0000FF 01206617        r0 = Null + -39401;
0x001995        01300012                 r1 = Null + 18;
0x001996        E1F00004                 call $vee.heartrate.zero_buff;
0x001997        DDF0F8AD                 jump $pop_rLink_and_rts;

 <$vee.heartrate.do_not_calc>
0x001998        E1F0F82D                 call $interrupt.unblock;
0x001999        DDF0F8AB                 jump $pop_rLink_and_rts;

 <$vee.heartrate.zero_buff>
0x00199A        F3D00000                 push rLink;
0x00199B        00C3000F                 r10 = r1 + Null;
0x00199C        5000002F                 I0 = Null + r0;
0x00199D        51C00000                 L0 = Null + 0;
0x00199E        01200000                 r0 = Null + 0;
0x00199F        E5F00002                 do $vee.heartrate.vee_zero_buff;
0x0019A0        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$vee.heartrate.vee_zero_buff>
0x0019A1        DDF0F8A3                 jump $pop_rLink_and_rts;

 <$vee.heartrate.test_output>
0x0019A2        F3D00000                 push rLink;
0x0019A3        01504087                 r3 = Null + 16519;
0x0019A4        0063000F                 r4 = r1 + Null;
0x0019A5        0072000F                 r5 = r0 + Null;
0x0019A6        E1F0F338                 call $message.send_long;
0x0019A7        DDF0F89D                 jump $pop_rLink_and_rts;

 <$vee.heartrate.output>
0x0019A8        F3D00000                 push rLink;
0x0019A9        FD0000FF 0950683D        r3 = Null + M[$vee.heartrate.heartrate];
0x0019AB        FD0000FF 09306845        r1 = Null + M[$vee.accelerate.acc_sample_enable];
0x0019AD        E403003F                 Null = r1 - 1;
0x0019AE        DD000004                 if EQ jump $vee.heartrate.sport_data_output;
0x0019AF        01404F20                 r2 = Null + 20256;
0x0019B0        E1F0F67E                 call $message.send_short;
0x0019B1        DDF0F893                 jump $pop_rLink_and_rts;

 <$vee.heartrate.sport_data_output>
0x0019B2        01404F21                 r2 = Null + 20257;
0x0019B3        09602FA5                 r4 = Null + M[$vee.accelerate.step_value];
0x0019B4        E1F0F83D                 call $block_interrupts;
0x0019B5        01800000                 r6 = Null + 0;
0x0019B6        19802FA5                 M[$vee.accelerate.step_value] = r6 + Null;
0x0019B7        E1F0F80E                 call $interrupt.unblock;
0x0019B8        09702F9E                 r5 = Null + M[$vee.heartrate.time_value];
0x0019B9        E1F0F675                 call $message.send_short;
0x0019BA        DDF0F88A                 jump $pop_rLink_and_rts;

 <$sbc.calc_bit_allocation>
0x0019BB        F3D00000                 push rLink;
0x0019BC        51900001                 M1 = Null + 1;
0x0019BD        D12B001E                 r0 = M[r9 + 30];
0x0019BE        81220002                 r0 = r0 AND 0x2;
0x0019BF        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x0019C0        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x0019C1        D13B0020                 r1 = M[r9 + 32];
0x0019C2        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x0019C3        D1CB0021                 r10 = M[r9 + 33];
0x0019C4        983200CF                 r1 = r0 * r10 (int);
0x0019C5        D1CB0018                 r10 = M[r9 + 24];
0x0019C6        501300CF                 I1 = r1 + r10;
0x0019C7        D1CB001A                 r10 = M[r9 + 26];
0x0019C8        502300CF                 I2 = r1 + r10;
0x0019C9        D1CB0021                 r10 = M[r9 + 33];
0x0019CA        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x0019CB        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0019CC        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x0019CD        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x0019CE        D1CB0021                 r10 = M[r9 + 33];
0x0019CF        983200CF                 r1 = r0 * r10 (int);
0x0019D0        D16B0018                 r4 = M[r9 + 24];
0x0019D1        5013006F                 I1 = r1 + r4;
0x0019D2        D16B001A                 r4 = M[r9 + 26];
0x0019D3        5023006F                 I2 = r1 + r4;
0x0019D4        E460003F                 r4 = Null - 1;
0x0019D5        D13B001C                 r1 = M[r9 + 28];
0x0019D6        9B3C0000                 r1 = r1 * r10 (int);
0x0019D7        D14B0017                 r2 = M[r9 + 23];
0x0019D8        5033004F                 I3 = r1 + r2;
0x0019D9        51440010                 I4 = r2 + 16;
0x0019DA        210C0008                 Null = r10 - 8;
0x0019DB        54330040                 if EQ I3 = r1 + I4;
0x0019DC        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x0019DD        0140FFFB                 r2 = Null + -5;
0x0019DE        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0019DF        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x0019E0        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x0019E1        2043005F                 r2 = r1 - r3;
0x0019E2        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x0019E3        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x0019E4        D1CB0021                 r10 = M[r9 + 33];
0x0019E5        983200CF                 r1 = r0 * r10 (int);
0x0019E6        D14B001A                 r2 = M[r9 + 26];
0x0019E7        5023004F                 I2 = r1 + r2;
0x0019E8        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x0019E9        D1CB0021                 r10 = M[r9 + 33];
0x0019EA        983200CF                 r1 = r0 * r10 (int);
0x0019EB        D17B001A                 r5 = M[r9 + 26];
0x0019EC        5023007F                 I2 = r1 + r5;
0x0019ED        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x0019EE        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x0019EF        D1CB0021                 r10 = M[r9 + 33];
0x0019F0        983200CF                 r1 = r0 * r10 (int);
0x0019F1        D1CB001B                 r10 = M[r9 + 27];
0x0019F2        501300CF                 I1 = r1 + r10;
0x0019F3        D1CB001A                 r10 = M[r9 + 26];
0x0019F4        502300CF                 I2 = r1 + r10;
0x0019F5        D1CB0021                 r10 = M[r9 + 33];
0x0019F6        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x0019F7        D1CB0021                 r10 = M[r9 + 33];
0x0019F8        983200CF                 r1 = r0 * r10 (int);
0x0019F9        D16B001B                 r4 = M[r9 + 27];
0x0019FA        5013006F                 I1 = r1 + r4;
0x0019FB        D16B001A                 r4 = M[r9 + 26];
0x0019FC        5023006F                 I2 = r1 + r4;
0x0019FD        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x0019FE        D13B0022                 r1 = M[r9 + 34];
0x0019FF        2005003F                 Null = r3 - r1;
0x001A00        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x001A01        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001A02        E466002F                 r4 = r4 + 1;
0x001A03        200600CF                 Null = r4 - r10;
0x001A04        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x001A05        983200CF                 r1 = r0 * r10 (int);
0x001A06        D16B001B                 r4 = M[r9 + 27];
0x001A07        5013006F                 I1 = r1 + r4;
0x001A08        D16B001A                 r4 = M[r9 + 26];
0x001A09        5023006F                 I2 = r1 + r4;
0x001A0A        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x001A0B        D13B0022                 r1 = M[r9 + 34];
0x001A0C        2005003F                 Null = r3 - r1;
0x001A0D        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x001A0E        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001A0F        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001A10        21030010                 Null = r1 - 16;
0x001A11        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x001A12        E433002F                 r1 = r1 + 1;
0x001A13        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x001A14        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001A15        E466002F                 r4 = r4 + 1;
0x001A16        200600CF                 Null = r4 - r10;
0x001A17        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x001A18        E422002F                 r0 = r0 + 1;
0x001A19        D13B001F                 r1 = M[r9 + 31];
0x001A1A        2002003F                 Null = r0 - r1;
0x001A1B        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x001A1C        DDF0F828                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x001A1D        D13B0020                 r1 = M[r9 + 32];
0x001A1E        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x001A1F        D1CB0021                 r10 = M[r9 + 33];
0x001A20        99CC0002                 r10 = r10 * 2 (int);
0x001A21        D13B0018                 r1 = M[r9 + 24];
0x001A22        5010003F                 I1 = Null + r1;
0x001A23        D13B001A                 r1 = M[r9 + 26];
0x001A24        5020003F                 I2 = Null + r1;
0x001A25        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x001A26        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001A27        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x001A28        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x001A29        D12B0021                 r0 = M[r9 + 33];
0x001A2A        E460003F                 r4 = Null - 1;
0x001A2B        D13B0018                 r1 = M[r9 + 24];
0x001A2C        5010003F                 I1 = Null + r1;
0x001A2D        D13B001A                 r1 = M[r9 + 26];
0x001A2E        5020003F                 I2 = Null + r1;
0x001A2F        D13B001C                 r1 = M[r9 + 28];
0x001A30        9B320000                 r1 = r1 * r0 (int);
0x001A31        D14B0017                 r2 = M[r9 + 23];
0x001A32        5043004F                 I4 = r1 + r2;
0x001A33        51340010                 I3 = r2 + 16;
0x001A34        21020008                 Null = r0 - 8;
0x001A35        54430030                 if EQ I4 = r1 + I3;
0x001A36        01200002                 r0 = Null + 2;
0x001A37        0170FFF6                 r5 = Null + -10;
0x001A38        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001A39        D1CB0021                 r10 = M[r9 + 33];
0x001A3A        59340001                 I3 = I4 + 1;
0x001A3B        03000050                 Null = Null + Null, r3 = M[I4,0];
0x001A3C        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x001A3D        0003000F                 Null = r1 + Null;
0x001A3E        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x001A3F        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x001A40        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x001A41        E422003F                 r0 = r0 - 1;
0x001A42        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x001A43        D1CB0021                 r10 = M[r9 + 33];
0x001A44        99CC0002                 r10 = r10 * 2 (int);
0x001A45        D14B001A                 r2 = M[r9 + 26];
0x001A46        5020004F                 I2 = Null + r2;
0x001A47        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x001A48        D1CB0021                 r10 = M[r9 + 33];
0x001A49        99CC0002                 r10 = r10 * 2 (int);
0x001A4A        D17B001A                 r5 = M[r9 + 26];
0x001A4B        5020007F                 I2 = Null + r5;
0x001A4C        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001A4D        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x001A4E        D1CB001B                 r10 = M[r9 + 27];
0x001A4F        501000CF                 I1 = Null + r10;
0x001A50        D1CB001A                 r10 = M[r9 + 26];
0x001A51        502000CF                 I2 = Null + r10;
0x001A52        D1CB0021                 r10 = M[r9 + 33];
0x001A53        99CC0002                 r10 = r10 * 2 (int);
0x001A54        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001A55        D1CB0021                 r10 = M[r9 + 33];
0x001A56        01600000                 r4 = Null + 0;
0x001A57        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x001A58        5022006F                 I2 = r0 + r4;
0x001A59        D13B001B                 r1 = M[r9 + 27];
0x001A5A        5812003F                 I1 = I2 + r1;
0x001A5B        D13B001A                 r1 = M[r9 + 26];
0x001A5C        5B230000                 I2 = I2 + r1;
0x001A5D        D13B0022                 r1 = M[r9 + 34];
0x001A5E        2005003F                 Null = r3 - r1;
0x001A5F        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x001A60        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001A61        200200CF                 Null = r0 - r10;
0x001A62        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x001A63        002C000F                 r0 = r10 + Null;
0x001A64        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x001A65        01200000                 r0 = Null + 0;
0x001A66        E466002F                 r4 = r4 + 1;
0x001A67        200600CF                 Null = r4 - r10;
0x001A68        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001A69        01600000                 r4 = Null + 0;
0x001A6A        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001A6B        5022006F                 I2 = r0 + r4;
0x001A6C        D13B001B                 r1 = M[r9 + 27];
0x001A6D        5812003F                 I1 = I2 + r1;
0x001A6E        D13B001A                 r1 = M[r9 + 26];
0x001A6F        5B230000                 I2 = I2 + r1;
0x001A70        D13B0022                 r1 = M[r9 + 34];
0x001A71        2005003F                 Null = r3 - r1;
0x001A72        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x001A73        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001A74        03007800                 Null = Null + Null, r5 = M[I2,0];
0x001A75        21030010                 Null = r1 - 16;
0x001A76        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x001A77        E433002F                 r1 = r1 + 1;
0x001A78        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001A79        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001A7A        200200CF                 Null = r0 - r10;
0x001A7B        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x001A7C        002C000F                 r0 = r10 + Null;
0x001A7D        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x001A7E        01200000                 r0 = Null + 0;
0x001A7F        E466002F                 r4 = r4 + 1;
0x001A80        200600CF                 Null = r4 - r10;
0x001A81        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x001A82        DDF0F7C2                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x001A83        01400000                 r2 = Null + 0;
0x001A84        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x001A85        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001A86        2004003F                 Null = r2 - r1;
0x001A87        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x001A88        01500000                 r3 = Null + 0;
0x001A89        01600000                 r4 = Null + 0;
0x001A8A        E444002F                 r2 = r2 + 1;
0x001A8B        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x001A8C        E444003F                 r2 = r2 - 1;
0x001A8D        03560000                 r3 = r3 + r4;
0x001A8E        01600000                 r4 = Null + 0;
0x001A8F        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x001A90        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001A91        2073004F                 r5 = r1 - r2;
0x001A92        21070002                 Null = r5 - 2;
0x001A93        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001A94        21070010                 Null = r5 - 16;
0x001A95        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001A96        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x001A97        E407003F                 Null = r5 - 1;
0x001A98        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x001A99        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x001A9A        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x001A9B        0075006F                 r5 = r3 + r4;
0x001A9C        D1CB0022                 r10 = M[r9 + 34];
0x001A9D        200700CF                 Null = r5 - r10;
0x001A9E        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x001A9F        D13B0022                 r1 = M[r9 + 34];
0x001AA0        2007003F                 Null = r5 - r1;
0x001AA1        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x001AA2        03560000                 r3 = r3 + r4;
0x001AA3        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x001AA4        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x001AA5        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001AA6        2073004F                 r5 = r1 - r2;
0x001AA7        01300000                 r1 = Null + 0;
0x001AA8        21070002                 Null = r5 - 2;
0x001AA9        00370005                 if POS r1 = r5 + Null;
0x001AAA        01700010                 r5 = Null + 16;
0x001AAB        21030010                 Null = r1 - 16;
0x001AAC        00370005                 if POS r1 = r5 + Null;
0x001AAD        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x001AAE        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x001AAF        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001AB0        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001AB1        21030002                 Null = r1 - 2;
0x001AB2        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001AB3        21030010                 Null = r1 - 16;
0x001AB4        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001AB5        E433002F                 r1 = r1 + 1;
0x001AB6        E455002F                 r3 = r3 + 1;
0x001AB7        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x001AB8        23740000                 r5 = r5 - r2;
0x001AB9        E407003F                 Null = r5 - 1;
0x001ABA        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001ABB        D17B0022                 r5 = M[r9 + 34];
0x001ABC        23750000                 r5 = r5 - r3;
0x001ABD        21070002                 Null = r5 - 2;
0x001ABE        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001ABF        01300002                 r1 = Null + 2;
0x001AC0        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x001AC1        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001AC2        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x001AC3        E420002F                 r0 = Null + 1;
0x001AC4        D52B0036                 M[r9 + 54] = r0;
0x001AC5        DDF0F77F                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x001AC6        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x001AC7        01200000                 r0 = Null + 0;
0x001AC8        01300000                 r1 = Null + 0;
0x001AC9        F3D40000                 pop rLink;
0x001ACA        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001ACB        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001ACC        0003000F                 Null = r1 + Null;
0x001ACD        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001ACE        F3600000                 push r4;
0x001ACF        816200FF                 r4 = r0 AND 0xff;
0x001AD0        FD000080 81220000        r0 = r0 AND 0x800000;
0x001AD2        0003000F                 Null = r1 + Null;
0x001AD3        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x001AD4        E466003F                 r4 = r4 - 1;
0x001AD5        8D330001                 r1 = r1 LSHIFT 1;
0x001AD6        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x001AD7        816600FF                 r4 = r4 AND 0xff;
0x001AD8        87260000                 r0 = r0 OR r4;
0x001AD9        F3640000                 pop r4;
0x001ADA        F3D40000                 pop rLink;
0x001ADB        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x001ADC        F1000330                 pushm <r2, r3, r6, r7>;
0x001ADD        0003000F                 Null = r1 + Null;
0x001ADE        00240000                 if EQ r0 = r2 + Null;
0x001ADF        0005000F                 Null = r3 + Null;
0x001AE0        00420000                 if EQ r2 = r0 + Null;
0x001AE1        817200FF                 r5 = r0 AND 0xff;
0x001AE2        818400FF                 r6 = r2 AND 0xff;
0x001AE3        2097008F                 r7 = r5 - r6;
0x001AE4        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x001AE5        2090009F                 r7 = Null - r7;
0x001AE6        8F590000                 r3 = r3 LSHIFT r7;
0x001AE7        E427002F                 r0 = r5 + 1;
0x001AE8        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x001AE9        8F390000                 r1 = r1 LSHIFT r7;
0x001AEA        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x001AEB        8D33007F                 r1 = r1 LSHIFT -1;
0x001AEC        8D55007F                 r3 = r3 LSHIFT -1;
0x001AED        03350000                 r1 = r1 + r3;
0x001AEE        87260000                 r0 = r0 OR r4;
0x001AEF        F1040330                 popm <r2, r3, r6, r7>;
0x001AF0        F10400C0                 popm <r4, r5>;
0x001AF1        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x001AF2        F1000330                 pushm <r2, r3, r6, r7>;
0x001AF3        0003000F                 Null = r1 + Null;
0x001AF4        00240000                 if EQ r0 = r2 + Null;
0x001AF5        0005000F                 Null = r3 + Null;
0x001AF6        00420000                 if EQ r2 = r0 + Null;
0x001AF7        817200FF                 r5 = r0 AND 0xff;
0x001AF8        818400FF                 r6 = r2 AND 0xff;
0x001AF9        2097008F                 r7 = r5 - r6;
0x001AFA        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x001AFB        2090009F                 r7 = Null - r7;
0x001AFC        8F590000                 r3 = r3 LSHIFT r7;
0x001AFD        E427002F                 r0 = r5 + 1;
0x001AFE        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x001AFF        8F390000                 r1 = r1 LSHIFT r7;
0x001B00        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x001B01        8D33007F                 r1 = r1 LSHIFT -1;
0x001B02        8D55007F                 r3 = r3 LSHIFT -1;
0x001B03        2003005F                 Null = r1 - r3;
0x001B04        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x001B05        23350000                 r1 = r1 - r3;
0x001B06        87260000                 r0 = r0 OR r4;
0x001B07        F1040330                 popm <r2, r3, r6, r7>;
0x001B08        F10400C0                 popm <r4, r5>;
0x001B09        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x001B0A        2035003F                 r1 = r3 - r1;
0x001B0B        FD000080 89660000        r4 = r4 XOR 0x800000;
0x001B0D        87260000                 r0 = r0 OR r4;
0x001B0E        F1040330                 popm <r2, r3, r6, r7>;
0x001B0F        F10400C0                 popm <r4, r5>;
0x001B10        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x001B11        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x001B12        0002000F                 Null = r0 + Null;
0x001B13        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B14        F1000050                 pushm <r2, r4>;
0x001B15        0042000F                 r2 = r0 + Null;
0x001B16        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B18        20400041                 if NE r2 = Null - r2;
0x001B19        0123007F                 r0 = r1 + 127;
0x001B1A        87260000                 r0 = r0 OR r4;
0x001B1B        0034000F                 r1 = r2 + Null;
0x001B1C        F1040050                 popm <r2, r4>;
0x001B1D        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x001B1E        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x001B1F        F1000060                 pushm <r3, r4>;
0x001B20        8D33007F                 r1 = r1 LSHIFT -1;
0x001B21        815200FF                 r3 = r0 AND 0xff;
0x001B22        E455003F                 r3 = r3 - 1;
0x001B23        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B25        20300031                 if NE r1 = Null - r1;
0x001B26        21550097                 r3 = r3 - 151;
0x001B27        03540000                 r3 = r3 + r2;
0x001B28        9023005F                 r0 = r1 ASHIFT r3;
0x001B29        F1040060                 popm <r3, r4>;
0x001B2A        F3D40000                 pop rLink;
0x001B2B        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x001B2C        F3D00000                 push rLink;
0x001B2D        01300018                 r1 = Null + 24;
0x001B2E        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x001B2F        F3D00000                 push rLink;
0x001B30        E430002F                 r1 = Null + 1;
0x001B31        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x001B32        F1002010                 pushm <r2, rLink>;
0x001B33        01400002                 r2 = Null + 2;
0x001B34        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x001B35        F1042010                 popm <r2, rLink>;
0x001B36        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x001B37        F1002010                 pushm <r2, rLink>;
0x001B38        01400019                 r2 = Null + 25;
0x001B39        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001B3A        F1042010                 popm <r2, rLink>;
0x001B3B        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x001B3C        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001B3E        DC0D000F                 rts;

 <$kal_float_lib.add>
0x001B3F        F3D00000                 push rLink;
0x001B40        F10000C0                 pushm <r4, r5>;
0x001B41        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B43        FD000080 81740000        r5 = r2 AND 0x800000;
0x001B45        2006007F                 Null = r4 - r5;
0x001B46        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x001B47        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x001B48        F3D00000                 push rLink;
0x001B49        F10000C0                 pushm <r4, r5>;
0x001B4A        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B4C        FD000080 81740000        r5 = r2 AND 0x800000;
0x001B4E        2006007F                 Null = r4 - r5;
0x001B4F        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x001B50        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x001B51        F3D00000                 push rLink;
0x001B52        0003000F                 Null = r1 + Null;
0x001B53        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B54        0005000F                 Null = r3 + Null;
0x001B55        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B56        F10000E0                 pushm <r3, r4, r5>;
0x001B57        816200FF                 r4 = r0 AND 0xff;
0x001B58        817400FF                 r5 = r2 AND 0xff;
0x001B59        03670000                 r4 = r4 + r5;
0x001B5A        2166007F                 r4 = r4 - 127;
0x001B5B        8872004F                 r5 = r0 XOR r2;
0x001B5C        FD000080 81770000        r5 = r5 AND 0x800000;
0x001B5E        8426007F                 r0 = r4 OR r5;
0x001B5F        8D33007F                 r1 = r1 LSHIFT -1;
0x001B60        8D55007F                 r3 = r3 LSHIFT -1;
0x001B61        CC13005F                 rMAC = r1 * r3 (SS);
0x001B62        0031000F                 r1 = rMAC + Null;
0x001B63        8D330001                 r1 = r1 LSHIFT 1;
0x001B64        F10400E0                 popm <r3, r4, r5>;
0x001B65        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x001B66        F3D00000                 push rLink;
0x001B67        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001B68        654200FF                 r2 = 255 - r0;
0x001B69        91530017                 r3 = r1 ASHIFT 23;
0x001B6A        F100000C                 pushm <r0, r1>;
0x001B6B        01C00006                 r10 = Null + 6;
0x001B6C        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001B6D        F104000C                 popm <r0, r1>;
0x001B6E        F100000C                 pushm <r0, r1>;
0x001B6F        E1F0FFE2                 call $kal_float_lib.mul;
0x001B70        F100003C                 pushm <r0, r1, r2, r3>;
0x001B71        F10400F0                 popm <r2, r3, r4, r5>;
0x001B72        01200080                 r0 = Null + 128;
0x001B73        FD000080 01300000        r1 = Null + -8388608;
0x001B75        E1F0FFD3                 call $kal_float_lib.sub;
0x001B76        0046000F                 r2 = r4 + Null;
0x001B77        0057000F                 r3 = r5 + Null;
0x001B78        E1F0FFD9                 call $kal_float_lib.mul;
0x001B79        0046000F                 r2 = r4 + Null;
0x001B7A        0057000F                 r3 = r5 + Null;
0x001B7B        E1F0FFC4                 call $kal_float_lib.add;
0x001B7C        0042000F                 r2 = r0 + Null;
0x001B7D        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001B7E        F104000C                 popm <r0, r1>;
0x001B7F        0024000F                 r0 = r2 + Null;
0x001B80        0035000F                 r1 = r3 + Null;
0x001B81        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x001B82        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x001B83        F3D00000                 push rLink;
0x001B84        F1000030                 pushm <r2, r3>;
0x001B85        F100000C                 pushm <r0, r1>;
0x001B86        0024000F                 r0 = r2 + Null;
0x001B87        0035000F                 r1 = r3 + Null;
0x001B88        E1F0FFDE                 call $kal_float_lib.recip;
0x001B89        0042000F                 r2 = r0 + Null;
0x001B8A        0053000F                 r3 = r1 + Null;
0x001B8B        F104000C                 popm <r0, r1>;
0x001B8C        E1F0FFC5                 call $kal_float_lib.mul;
0x001B8D        F1040030                 popm <r2, r3>;
0x001B8E        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x001B8F        F3D00000                 push rLink;
0x001B90        0002000F                 Null = r0 + Null;
0x001B91        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x001B92        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x001B93        0062000F                 r4 = r0 + Null;
0x001B94        0073000F                 r5 = r1 + Null;
0x001B95        E482003F                 r6 = r0 - 1;
0x001B96        0093000F                 r7 = r1 + Null;
0x001B97        E466003F                 r4 = r4 - 1;
0x001B98        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x001B9A        8D66000E                 r4 = r4 LSHIFT 14;
0x001B9B        8D770077                 r5 = r5 LSHIFT -9;
0x001B9C        87670000                 r4 = r4 OR r5;
0x001B9D        FD00005F 01703759        r5 = Null + 6240089;
0x001B9F        2067006F                 r4 = r5 - r4;
0x001BA0        8D760008                 r5 = r4 LSHIFT 8;
0x001BA1        FD000080 85770000        r5 = r5 OR 0x800000;
0x001BA3        8D660071                 r4 = r4 LSHIFT -15;
0x001BA4        E466002F                 r4 = r4 + 1;
0x001BA5        01C00003                 r10 = Null + 3;
0x001BA6        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x001BA7        0026000F                 r0 = r4 + Null;
0x001BA8        0037000F                 r1 = r5 + Null;
0x001BA9        0046000F                 r2 = r4 + Null;
0x001BAA        0057000F                 r3 = r5 + Null;
0x001BAB        E1F0FFA6                 call $kal_float_lib.mul;
0x001BAC        0048000F                 r2 = r6 + Null;
0x001BAD        0059000F                 r3 = r7 + Null;
0x001BAE        E1F0FFA3                 call $kal_float_lib.mul;
0x001BAF        0042000F                 r2 = r0 + Null;
0x001BB0        0053000F                 r3 = r1 + Null;
0x001BB1        01200080                 r0 = Null + 128;
0x001BB2        FD0000C0 01300000        r1 = Null + -4194304;
0x001BB4        E1F0FF94                 call $kal_float_lib.sub;
0x001BB5        0046000F                 r2 = r4 + Null;
0x001BB6        0057000F                 r3 = r5 + Null;
0x001BB7        E1F0FF9A                 call $kal_float_lib.mul;
0x001BB8        0062000F                 r4 = r0 + Null;
0x001BB9        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x001BBA        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001BBB        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.Subwoofer.l2cap_handler>
0x001BBC        F3D00000                 push rLink;
0x001BBD        E1F00463                 call $create_sub_packet;
0x001BBE        E1F0F633                 call $block_interrupts;
0x001BBF        FD0000FF 01A06739        r8 = Null + -39111;
0x001BC1        E1F0EC9C                 call $cbops.copy;
0x001BC2        01A02EA3                 r8 = Null + 11939;
0x001BC3        E1F0EC9A                 call $cbops.copy;
0x001BC4        E1F0F601                 call $interrupt.unblock;
0x001BC5        DDF0F67F                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_preprocess>
0x001BC6        F3D00000                 push rLink;
0x001BC7        0930FE71                 r1 = Null + M[0xfffe71];
0x001BC8        19302F94                 M[$time_before_fp] = r1 + Null;
0x001BC9        DDF0F67B                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_post_process>
0x001BCA        F3D00000                 push rLink;
0x001BCB        E1F00590                 call $downsample_sub_to_1k2;
0x001BCC        0930FE71                 r1 = Null + M[0xfffe71];
0x001BCD        29432F94                 r2 = r1 - M[$time_before_fp];
0x001BCE        09302F96                 r1 = Null + M[$subwoofer.sco_offset];
0x001BCF        2043004F                 r2 = r1 - r2;
0x001BD0        214401F4                 r2 = r2 - 500;
0x001BD1        09302F88                 r1 = Null + M[$sco_param_tesco];
0x001BD2        21030006                 Null = r1 - 6;
0x001BD3        DD100004                 if NE jump $M.Subwoofer.do_not_send_duplicates;
0x001BD4        E430002F                 r1 = Null + 1;
0x001BD5        FD0000FF 1930682D        M[$queue_another_bass_packet] = r1 + Null;

 <$M.Subwoofer.do_not_send_duplicates>
0x001BD7        FD0000FF 0130678A        r1 = Null + -39030;
0x001BD9        D1530003                 r3 = M[r1 + 3];
0x001BDA        DD100003                 if NE jump $M.Subwoofer.bass_packet_already_scheduled;
0x001BDB        01501BDF                 r3 = Null + 7135;
0x001BDC        E1F0F65E                 call $timer.schedule_event_in;

 <$M.Subwoofer.bass_packet_already_scheduled>
0x001BDD        19502F8C                 M[$bass_timer_id] = r3 + Null;
0x001BDE        DDF0F666                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.send_bass_packet>
0x001BDF        F3D00000                 push rLink;
0x001BE0        E1F00440                 call $create_sub_packet;
0x001BE1        09202F84                 r0 = Null + M[$sub_link_port];
0x001BE2        E1F0F5F7                 call $cbuffer.calc_amount_space;
0x001BE3        09602F8E                 r4 = Null + M[$min_port_space];
0x001BE4        2002006F                 Null = r0 - r4;
0x001BE5        00620004                 if NEG r4 = r0 + Null;
0x001BE6        19602F8E                 M[$min_port_space] = r4 + Null;
0x001BE7        FD0000FF 01A06734        r8 = Null + -39116;
0x001BE9        E1F0EC74                 call $cbops.copy;
0x001BEA        0930FE71                 r1 = Null + M[0xfffe71];
0x001BEB        09402F93                 r2 = Null + M[$esco_write_deadline];
0x001BEC        2053004F                 r3 = r1 - r2;
0x001BED        DD40000B                 if NEG jump $M.Subwoofer.early;
0x001BEE        FD0000FF 0960682E        r4 = Null + M[$late_write_counter];
0x001BF0        E466002F                 r4 = r4 + 1;
0x001BF1        FD0000FF 1960682E        M[$late_write_counter] = r4 + Null;
0x001BF3        09602F8F                 r4 = Null + M[$max_late_write];
0x001BF4        2005006F                 Null = r3 - r4;
0x001BF5        00650005                 if POS r4 = r3 + Null;
0x001BF6        19602F8F                 M[$max_late_write] = r4 + Null;
0x001BF7        DDF00010                 jump $M.Subwoofer.done_logging_debug_data;

 <$M.Subwoofer.early>
0x001BF8        FD0000FF 0960682F        r4 = Null + M[$early_write_counter];
0x001BFA        E466002F                 r4 = r4 + 1;
0x001BFB        FD0000FF 1960682F        M[$early_write_counter] = r4 + Null;
0x001BFD        09602F90                 r4 = Null + M[$min_early_write];
0x001BFE        2005006F                 Null = r3 - r4;
0x001BFF        00650005                 if POS r4 = r3 + Null;
0x001C00        19602F90                 M[$min_early_write] = r4 + Null;
0x001C01        FD0000FF 09606830        r4 = Null + M[$max_early_write];
0x001C03        2005006F                 Null = r3 - r4;
0x001C04        00650004                 if NEG r4 = r3 + Null;
0x001C05        FD0000FF 19606830        M[$max_early_write] = r4 + Null;

 <$M.Subwoofer.done_logging_debug_data>
0x001C07        09602F88                 r4 = Null + M[$sco_param_tesco];
0x001C08        99660271                 r4 = r4 * 625 (int);
0x001C09        03460000                 r2 = r2 + r4;
0x001C0A        19402F93                 M[$esco_write_deadline] = r2 + Null;
0x001C0B        FD0000FF 0900682D        Null = Null + M[$queue_another_bass_packet];
0x001C0D        DD000009                 if EQ jump $M.Subwoofer.done_sending_bass_packets;
0x001C0E        FD0000FF 1900682D        M[$queue_another_bass_packet] = Null + Null;
0x001C10        01400EA6                 r2 = Null + 3750;
0x001C11        FD0000FF 0130678A        r1 = Null + -39030;
0x001C13        01501BDF                 r3 = Null + 7135;
0x001C14        E1F0F623                 call $timer.schedule_event_in_period;
0x001C15        19502F8C                 M[$bass_timer_id] = r3 + Null;

 <$M.Subwoofer.done_sending_bass_packets>
0x001C16        DDF0F62E                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_connected_handler>
0x001C17        2133000C                 r1 = r1 - 12;
0x001C18        FD0000FF D1236786        r0 = M[r1 + -39034];
0x001C1A        DC02000F                 jump r0;

 <$M.Subwoofer.dummy>
0x001C1B        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_connected>
0x001C1C        F3D00000                 push rLink;
0x001C1D        FD000000 01408018        r2 = Null + 32792;
0x001C1F        0153000C                 r3 = r1 + 12;
0x001C20        E1F0F606                 call $message.send;
0x001C21        FD000091 0120A00E        r0 = Null + -7233522;
0x001C23        19202F84                 M[$sub_link_port] = r0 + Null;
0x001C24        E420002F                 r0 = Null + 1;
0x001C25        19202F95                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001C26        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x001C28        21020005                 Null = r0 - 5;
0x001C29        DD000004                 if EQ jump $M.Subwoofer.usb_input;
0x001C2A        FD0000FF 0120682C        r0 = Null + -38868;
0x001C2C        19202F7A                 M[$music_example.sync_flag_ptr] = r0 + Null;

 <$M.Subwoofer.usb_input>
0x001C2D        DDF0F617                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_connected>
0x001C2E        F3D00000                 push rLink;
0x001C2F        FD000000 01408018        r2 = Null + 32792;
0x001C31        0153000C                 r3 = r1 + 12;
0x001C32        E1F0F5F4                 call $message.send;
0x001C33        01200BCC                 r0 = Null + 3020;
0x001C34        19202EE4                 M[0x2ee4] = r0 + Null;
0x001C35        FD0000FF 19206771        M[0xff6771] = r0 + Null;
0x001C37        19202EBD                 M[$M.main.samples_latency_measure] = r0 + Null;
0x001C38        01A02EE1                 r8 = Null + 12001;
0x001C39        E1F01891                 call $audio_proc.delay.initialize;
0x001C3A        FD0000FF 01A0676E        r8 = Null + -39058;
0x001C3C        E1F0188E                 call $audio_proc.delay.initialize;
0x001C3D        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x001C3F        01500003                 r3 = Null + 3;
0x001C40        FD000000 2102BB80        Null = r0 - 48000;
0x001C42        DD000002                 if EQ jump $M.Subwoofer.set_data_objects;
0x001C43        01500002                 r3 = Null + 2;

 <$M.Subwoofer.set_data_objects>
0x001C44        0125005C                 r0 = r3 + 92;
0x001C45        19202EA9                 M[0x2ea9] = r0 + Null;
0x001C46        19202EAB                 M[0x2eab] = r0 + Null;
0x001C47        192005FB                 M[0x5fb] = r0 + Null;
0x001C48        192005FD                 M[0x5fd] = r0 + Null;
0x001C49        FD000094 0120600F        r0 = Null + -7053297;
0x001C4B        19202F84                 M[$sub_link_port] = r0 + Null;
0x001C4C        E420002F                 r0 = Null + 1;
0x001C4D        19202F95                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001C4E        FD0000FF 09206813        r0 = Null + M[$sra_rate_addr];
0x001C50        D3200000                 r0 = M[r0 + Null];
0x001C51        FD0000FF 19206836        M[$synchronized_rate] = r0 + Null;
0x001C53        FD0000FF 01206836        r0 = Null + -38858;
0x001C55        FD0000FF 192065FA        M[0xff65fa] = r0 + Null;
0x001C57        19202D3B                 M[0x2d3b] = r0 + Null;
0x001C58        01200168                 r0 = Null + 360;
0x001C59        91220001                 r0 = r0 ASHIFT 1;
0x001C5A        FD0000FF 1920681A        M[$music_example.frame_processing_size] = r0 + Null;
0x001C5C        DDF0F5E8                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_disconnected_handler>
0x001C5D        2133000C                 r1 = r1 - 12;
0x001C5E        D1232EF9                 r0 = M[r1 + 12025];
0x001C5F        DC02000F                 jump r0;

 <$M.Subwoofer.dummy_disconnected>
0x001C60        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_disconnected>
0x001C61        F3D00000                 push rLink;
0x001C62        FD0000FF 09206813        r0 = Null + M[$sra_rate_addr];
0x001C64        19202D3B                 M[0x2d3b] = r0 + Null;
0x001C65        E1F0087F                 call $disable_esco_subwoofer;
0x001C66        DDF0F5DE                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_disconnected>
0x001C67        F3D00000                 push rLink;
0x001C68        FD0000FF 09206813        r0 = Null + M[$sra_rate_addr];
0x001C6A        FD0000FF 192065FA        M[0xff65fa] = r0 + Null;
0x001C6C        19202D3B                 M[0x2d3b] = r0 + Null;
0x001C6D        E1F00877                 call $disable_esco_subwoofer;
0x001C6E        DDF0F5D6                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.subwoofer_init>
0x001C6F        F3D00000                 push rLink;
0x001C70        01300B85                 r1 = Null + 2949;
0x001C71        E1F008A7                 call $enable_esco_subwoofer;
0x001C72        01201C17                 r0 = Null + 7191;
0x001C73        19202FB8                 M[$cbuffer.write_port_connect_address] = r0 + Null;
0x001C74        01201C5D                 r0 = Null + 7261;
0x001C75        FD0000FF 19206858        M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x001C77        DDF0F5CD                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.synchronise>
0x001C78        F3D00000                 push rLink;
0x001C79        09202F84                 r0 = Null + M[$sub_link_port];
0x001C7A        FD000094 2102600F        Null = r0 - -7053297;
0x001C7C        DD100005                 if NE jump $M.Subwoofer.done_synchronise;
0x001C7D        01902EA8                 r7 = Null + 11944;
0x001C7E        01A005F9                 r8 = Null + 1529;
0x001C7F        E1F00631                 call $calc_time_to_play;
0x001C80        19802F86                 M[$M.Subwoofer.playback_time] = r6 + Null;

 <$M.Subwoofer.done_synchronise>
0x001C81        DDF0F5C3                 jump $pop_rLink_and_rts;

 <$vee.heartrate.hb_calc>
0x001C82        F3D00000                 push rLink;
0x001C83        01500000                 r3 = Null + 0;
0x001C84        FD0000FF 1950683F        M[$vee.heartrate.hb_calc.status] = r3 + Null;
0x001C86        19502FA2                 M[$vee.heartrate.hb_calc.max_value] = r3 + Null;
0x001C87        E450002F                 r3 = Null + 1;
0x001C88        19502FA0                 M[$vee.heartrate.hb_calc.max_flag] = r3 + Null;
0x001C89        FD0000FF 19506840        M[$vee.heartrate.hb_calc.min_flag] = r3 + Null;
0x001C8B        015007D0                 r3 = Null + 2000;
0x001C8C        FD0000FF 19506842        M[$vee.heartrate.hb_calc.min_value] = r3 + Null;
0x001C8E        01500008                 r3 = Null + 8;
0x001C8F        2050005F                 r3 = Null - r3;
0x001C90        19502FA1                 M[$vee.heartrate.hb_calc.max_index] = r3 + Null;
0x001C91        FD0000FF 19506841        M[$vee.heartrate.hb_calc.min_index] = r3 + Null;
0x001C93        5000002F                 I0 = Null + r0;
0x001C94        51C00000                 L0 = Null + 0;
0x001C95        E4C3003F                 r10 = r1 - 1;
0x001C96        01200000                 r0 = Null + 0;
0x001C97        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001C98        01400000                 r2 = Null + 0;
0x001C99        01500000                 r3 = Null + 0;
0x001C9A        01800000                 r6 = Null + 0;
0x001C9B        01600000                 r4 = Null + 0;
0x001C9C        01700000                 r5 = Null + 0;

 <$vee.heartrate.hb_calc.hb_calc_loop>
0x001C9D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001C9E        E444002F                 r2 = r2 + 1;
0x001C9F        2002003F                 Null = r0 - r1;
0x001CA0        DD400004                 if NEG jump $vee.heartrate.hb_calc.hb_check_max_value;
0x001CA1        2003002F                 Null = r1 - r0;
0x001CA2        DD400031                 if NEG jump $vee.heartrate.hb_calc.hb_check_min_value;
0x001CA3        DDF0005A                 jump $vee.heartrate.hb_calc.hb_continue_check;

 <$vee.heartrate.hb_calc.hb_check_max_value>
0x001CA4        FD0000FF 0950683F        r3 = Null + M[$vee.heartrate.hb_calc.status];
0x001CA6        0005000F                 Null = r3 + Null;
0x001CA7        DD100056                 if NE jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CA8        E450002F                 r3 = Null + 1;
0x001CA9        FD0000FF 1950683F        M[$vee.heartrate.hb_calc.status] = r3 + Null;
0x001CAB        FD0000FF 09506840        r3 = Null + M[$vee.heartrate.hb_calc.min_flag];
0x001CAD        0005000F                 Null = r3 + Null;
0x001CAE        DD000016                 if EQ jump $vee.heartrate.hb_calc.hb_update_max_value;
0x001CAF        FD0000FF 09506841        r3 = Null + M[$vee.heartrate.hb_calc.min_index];
0x001CB1        2054005F                 r3 = r2 - r3;
0x001CB2        21050002                 Null = r3 - 2;
0x001CB3        DD40004A                 if NEG jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CB4        09502FA1                 r3 = Null + M[$vee.heartrate.hb_calc.max_index];
0x001CB5        2054005F                 r3 = r2 - r3;
0x001CB6        21050008                 Null = r3 - 8;
0x001CB7        DD400046                 if NEG jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CB8        01500000                 r3 = Null + 0;
0x001CB9        FD0000FF 19506840        M[$vee.heartrate.hb_calc.min_flag] = r3 + Null;
0x001CBB        E450002F                 r3 = Null + 1;
0x001CBC        19502FA0                 M[$vee.heartrate.hb_calc.max_flag] = r3 + Null;
0x001CBD        09602FA1                 r4 = Null + M[$vee.heartrate.hb_calc.max_index];
0x001CBE        2064006F                 r4 = r2 - r4;
0x001CBF        D5672D6D                 M[r5 + 11629] = r4;
0x001CC0        19402FA1                 M[$vee.heartrate.hb_calc.max_index] = r2 + Null;
0x001CC1        19302FA2                 M[$vee.heartrate.hb_calc.max_value] = r1 + Null;
0x001CC2        E477002F                 r5 = r5 + 1;
0x001CC3        DDF0003A                 jump $vee.heartrate.hb_calc.hb_continue_check;

 <$vee.heartrate.hb_calc.hb_update_max_value>
0x001CC4        09502FA2                 r3 = Null + M[$vee.heartrate.hb_calc.max_value];
0x001CC5        2005003F                 Null = r3 - r1;
0x001CC6        DD500037                 if POS jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CC7        09502FA1                 r3 = Null + M[$vee.heartrate.hb_calc.max_index];
0x001CC8        2054005F                 r3 = r2 - r3;
0x001CC9        21050008                 Null = r3 - 8;
0x001CCA        DD500033                 if POS jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CCB        E477003F                 r5 = r5 - 1;
0x001CCC        D1672D6D                 r4 = M[r5 + 11629];
0x001CCD        03650000                 r4 = r4 + r3;
0x001CCE        D5672D6D                 M[r5 + 11629] = r4;
0x001CCF        E477002F                 r5 = r5 + 1;
0x001CD0        19402FA1                 M[$vee.heartrate.hb_calc.max_index] = r2 + Null;
0x001CD1        19302FA2                 M[$vee.heartrate.hb_calc.max_value] = r1 + Null;
0x001CD2        DDF0002B                 jump $vee.heartrate.hb_calc.hb_continue_check;

 <$vee.heartrate.hb_calc.hb_check_min_value>
0x001CD3        FD0000FF 0950683F        r3 = Null + M[$vee.heartrate.hb_calc.status];
0x001CD5        0005000F                 Null = r3 + Null;
0x001CD6        DD000027                 if EQ jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CD7        01500000                 r3 = Null + 0;
0x001CD8        FD0000FF 1950683F        M[$vee.heartrate.hb_calc.status] = r3 + Null;
0x001CDA        09502FA0                 r3 = Null + M[$vee.heartrate.hb_calc.max_flag];
0x001CDB        0005000F                 Null = r3 + Null;
0x001CDC        DD000014                 if EQ jump $vee.heartrate.hb_calc.hb_update_min_value;
0x001CDD        09502FA1                 r3 = Null + M[$vee.heartrate.hb_calc.max_index];
0x001CDE        2054005F                 r3 = r2 - r3;
0x001CDF        21050004                 Null = r3 - 4;
0x001CE0        DD40001D                 if NEG jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CE1        FD0000FF 09506841        r3 = Null + M[$vee.heartrate.hb_calc.min_index];
0x001CE3        2054005F                 r3 = r2 - r3;
0x001CE4        21050008                 Null = r3 - 8;
0x001CE5        DD400018                 if NEG jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CE6        01500000                 r3 = Null + 0;
0x001CE7        19502FA0                 M[$vee.heartrate.hb_calc.max_flag] = r3 + Null;
0x001CE8        E450002F                 r3 = Null + 1;
0x001CE9        FD0000FF 19506840        M[$vee.heartrate.hb_calc.min_flag] = r3 + Null;
0x001CEB        FD0000FF 19306842        M[$vee.heartrate.hb_calc.min_value] = r1 + Null;
0x001CED        FD0000FF 19406841        M[$vee.heartrate.hb_calc.min_index] = r2 + Null;
0x001CEF        DDF0000E                 jump $vee.heartrate.hb_calc.hb_continue_check;

 <$vee.heartrate.hb_calc.hb_update_min_value>
0x001CF0        FD0000FF 09506842        r3 = Null + M[$vee.heartrate.hb_calc.min_value];
0x001CF2        2003005F                 Null = r1 - r3;
0x001CF3        DD50000A                 if POS jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CF4        FD0000FF 09506841        r3 = Null + M[$vee.heartrate.hb_calc.min_index];
0x001CF6        2054005F                 r3 = r2 - r3;
0x001CF7        21050008                 Null = r3 - 8;
0x001CF8        DD500005                 if POS jump $vee.heartrate.hb_calc.hb_continue_check;
0x001CF9        FD0000FF 19406841        M[$vee.heartrate.hb_calc.min_index] = r2 + Null;
0x001CFB        FD0000FF 19306842        M[$vee.heartrate.hb_calc.min_value] = r1 + Null;

 <$vee.heartrate.hb_calc.hb_continue_check>
0x001CFD        0032000F                 r1 = r0 + Null;
0x001CFE        E4CC003F                 r10 = r10 - 1;
0x001CFF        000C000F                 Null = r10 + Null;
0x001D00        DD10FF9D                 if NE jump $vee.heartrate.hb_calc.hb_calc_loop;
0x001D01        01200000                 r0 = Null + 0;
0x001D02        21070005                 Null = r5 - 5;
0x001D03        DD400044                 if NEG jump $vee.heartrate.hb_calc.invalide_exit;
0x001D04        01300000                 r1 = Null + 0;
0x001D05        01400000                 r2 = Null + 0;
0x001D06        01500000                 r3 = Null + 0;
0x001D07        01600000                 r4 = Null + 0;
0x001D08        01800000                 r6 = Null + 0;

 <$vee.heartrate.hb_calc.hb_outside_loop>
0x001D09        01200000                 r0 = Null + 0;
0x001D0A        01400000                 r2 = Null + 0;
0x001D0B        D1532D6D                 r3 = M[r1 + 11629];

 <$vee.heartrate.hb_calc.hb_inside_loop>
0x001D0C        D1642D6D                 r4 = M[r2 + 11629];
0x001D0D        2005006F                 Null = r3 - r4;
0x001D0E        20850065                 if POS r6 = r3 - r4;
0x001D0F        2005006F                 Null = r3 - r4;
0x001D10        20860054                 if NEG r6 = r4 - r3;
0x001D11        21080004                 Null = r6 - 4;
0x001D12        E4220024                 if NEG r0 = r0 + 1;
0x001D13        E444002F                 r2 = r2 + 1;
0x001D14        2004007F                 Null = r2 - r5;
0x001D15        DD40FFF7                 if NEG jump $vee.heartrate.hb_calc.hb_inside_loop;
0x001D16        FD0000FF D5236617        M[r1 + -39401] = r0;
0x001D18        E433002F                 r1 = r1 + 1;
0x001D19        2003007F                 Null = r1 - r5;
0x001D1A        DD40FFEF                 if NEG jump $vee.heartrate.hb_calc.hb_outside_loop;
0x001D1B        01300002                 r1 = Null + 2;
0x001D1C        0057000F                 r3 = r5 + Null;
0x001D1D        91E50080                 rMAC = r3 ASHIFT 0 (LO);
0x001D1E        D9030000                 Div = rMAC / r1;
0x001D1F        D9200001                 r0 = DivResult;
0x001D20        D9300002                 r1 = DivRemainder;
0x001D21        0003000F                 Null = r1 + Null;
0x001D22        E4220021                 if NE r0 = r0 + 1;
0x001D23        01300000                 r1 = Null + 0;
0x001D24        01400000                 r2 = Null + 0;
0x001D25        01500000                 r3 = Null + 0;
0x001D26        01600000                 r4 = Null + 0;
0x001D27        01800000                 r6 = Null + 0;
0x001D28        00C7000F                 r10 = r5 + Null;
0x001D29        01B00000                 r9 = Null + 0;

 <$vee.heartrate.hb_calc.calc_valid_period>
0x001D2A        FD0000FF D1436617        r2 = M[r1 + -39401];
0x001D2C        D1832D6D                 r6 = M[r1 + 11629];
0x001D2D        2004002F                 Null = r2 - r0;
0x001D2E        DD500002                 if POS jump $vee.heartrate.hb_calc.check_valid_period;
0x001D2F        DDF0000E                 jump $vee.heartrate.hb_calc.continue_check_period;

 <$vee.heartrate.hb_calc.check_valid_period>
0x001D30        01B00078                 r9 = Null + 120;
0x001D31        91EB0080                 rMAC = r9 ASHIFT 0 (LO);
0x001D32        D9080000                 Div = rMAC / r6;
0x001D33        D9B00001                 r9 = DivResult;
0x001D34        01900000                 r7 = Null + 0;
0x001D35        210B000A                 Null = r9 - 10;
0x001D36        E4990025                 if POS r7 = r7 + 1;
0x001D37        200700BF                 Null = r5 - r9;
0x001D38        E4990024                 if NEG r7 = r7 + 1;
0x001D39        21090002                 Null = r7 - 2;
0x001D3A        DD000003                 if EQ jump $vee.heartrate.hb_calc.continue_check_period;
0x001D3B        E455002F                 r3 = r3 + 1;
0x001D3C        03680000                 r4 = r4 + r6;

 <$vee.heartrate.hb_calc.continue_check_period>
0x001D3D        E433002F                 r1 = r1 + 1;
0x001D3E        E4CC003F                 r10 = r10 - 1;
0x001D3F        000C000F                 Null = r10 + Null;
0x001D40        DD10FFEA                 if NE jump $vee.heartrate.hb_calc.calc_valid_period;
0x001D41        0005000F                 Null = r3 + Null;
0x001D42        DD000005                 if EQ jump $vee.heartrate.hb_calc.invalide_exit;
0x001D43        0026000F                 r0 = r4 + Null;
0x001D44        0035000F                 r1 = r3 + Null;
0x001D45        E1F0FC2D                 call $vee.heartrate.average_hb;
0x001D46        DDF0F4FE                 jump $pop_rLink_and_rts;

 <$vee.heartrate.hb_calc.invalide_exit>
0x001D47        01200000                 r0 = Null + 0;
0x001D48        DDF0F4FC                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect>
0x001D49        F3D00000                 push rLink;
0x001D4A        09302FB1                 r1 = Null + M[$vee.accelerate.neck_protect.acc_count];
0x001D4B        2103000A                 Null = r1 - 10;
0x001D4C        DD400061                 if NEG jump $vee.accelerate.neck_protect.store_acc_value;
0x001D4D        2103000A                 Null = r1 - 10;
0x001D4E        DD000002                 if EQ jump $vee.accelerate.neck_protect.calc_angle_value;
0x001D4F        DDF0F4F5                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.calc_angle_value>
0x001D50        FD0000FF 012066B4        r0 = Null + -39244;
0x001D52        0130000A                 r1 = Null + 10;
0x001D53        E1F0007F                 call $vee.accelerate.necke_protect.acc_average;
0x001D54        0072000F                 r5 = r0 + Null;
0x001D55        E1F0FAB3                 call $vee.accelerate.arcsin;
0x001D56        FD0000FF 19206848        M[$vee.accelerate.angle_x_int] = r0 + Null;
0x001D58        01202E27                 r0 = Null + 11815;
0x001D59        0130000A                 r1 = Null + 10;
0x001D5A        E1F00078                 call $vee.accelerate.necke_protect.acc_average;
0x001D5B        0072000F                 r5 = r0 + Null;
0x001D5C        E1F0FAAC                 call $vee.accelerate.arcsin;
0x001D5D        19202FA9                 M[$vee.accelerate.angle_y_int] = r0 + Null;
0x001D5E        FD0000FF 012066BE        r0 = Null + -39234;
0x001D60        0130000A                 r1 = Null + 10;
0x001D61        E1F00071                 call $vee.accelerate.necke_protect.acc_average;
0x001D62        0072000F                 r5 = r0 + Null;
0x001D63        E1F0FA82                 call $vee.accelerate.arccos;
0x001D64        FD0000FF 19206849        M[$vee.accelerate.angle_z_int] = r0 + Null;
0x001D66        E1F0FAF7                 call $vee.accelerate.acc_output;
0x001D67        01300000                 r1 = Null + 0;
0x001D68        19302FB1                 M[$vee.accelerate.neck_protect.acc_count] = r1 + Null;
0x001D69        FD0000FF 09306851        r1 = Null + M[$vee.accelerate.neck_protect.angle_count];
0x001D6B        2103000A                 Null = r1 - 10;
0x001D6C        DD40004D                 if NEG jump $vee.accelerate.neck_protect.store_angle_value;
0x001D6D        2103000A                 Null = r1 - 10;
0x001D6E        DD00002D                 if EQ jump $vee.accelerate.neck_protect.calc_init_angle;
0x001D6F        FD0000FF 09306848        r1 = Null + M[$vee.accelerate.angle_x_int];
0x001D71        09402FB2                 r2 = Null + M[$vee.accelerate.neck_protect.angle_x_init];
0x001D72        2003004F                 Null = r1 - r2;
0x001D73        20530045                 if POS r3 = r1 - r2;
0x001D74        2003004F                 Null = r1 - r2;
0x001D75        20540034                 if NEG r3 = r2 - r1;
0x001D76        21050028                 Null = r3 - 40;
0x001D77        DD500017                 if POS jump $vee.accelerate.neck_protect.start_timer_count;
0x001D78        09302FA9                 r1 = Null + M[$vee.accelerate.angle_y_int];
0x001D79        FD0000FF 09406852        r2 = Null + M[$vee.accelerate.neck_protect.angle_y_init];
0x001D7B        2003004F                 Null = r1 - r2;
0x001D7C        20530045                 if POS r3 = r1 - r2;
0x001D7D        2003004F                 Null = r1 - r2;
0x001D7E        20540034                 if NEG r3 = r2 - r1;
0x001D7F        21050028                 Null = r3 - 40;
0x001D80        DD50000E                 if POS jump $vee.accelerate.neck_protect.start_timer_count;
0x001D81        FD0000FF 09306849        r1 = Null + M[$vee.accelerate.angle_z_int];
0x001D83        09402FB3                 r2 = Null + M[$vee.accelerate.neck_protect.angle_z_init];
0x001D84        2003004F                 Null = r1 - r2;
0x001D85        20530045                 if POS r3 = r1 - r2;
0x001D86        2003004F                 Null = r1 - r2;
0x001D87        20540034                 if NEG r3 = r2 - r1;
0x001D88        21050028                 Null = r3 - 40;
0x001D89        DD500005                 if POS jump $vee.accelerate.neck_protect.start_timer_count;
0x001D8A        01200000                 r0 = Null + 0;
0x001D8B        FD0000FF 19206853        M[$vee.accelerate.neck_protect.neck_timer_enable] = r0 + Null;
0x001D8D        DDF0F4B7                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.start_timer_count>
0x001D8E        FD0000FF 09206853        r0 = Null + M[$vee.accelerate.neck_protect.neck_timer_enable];
0x001D90        0002000F                 Null = r0 + Null;
0x001D91        DD10F4B3                 if NE jump $pop_rLink_and_rts;
0x001D92        01302F1D                 r1 = Null + 12061;
0x001D93        FD00000F 01404240        r2 = Null + 1000000;
0x001D95        01501DE6                 r3 = Null + 7654;
0x001D96        E1F0F4A4                 call $timer.schedule_event_in;
0x001D97        E420002F                 r0 = Null + 1;
0x001D98        FD0000FF 19206853        M[$vee.accelerate.neck_protect.neck_timer_enable] = r0 + Null;
0x001D9A        DDF0F4AA                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.calc_init_angle>
0x001D9B        E433002F                 r1 = r1 + 1;
0x001D9C        FD0000FF 19306851        M[$vee.accelerate.neck_protect.angle_count] = r1 + Null;
0x001D9E        01202E13                 r0 = Null + 11795;
0x001D9F        0130000A                 r1 = Null + 10;
0x001DA0        E1F00026                 call $vee.accelerate.necke_protect.average_method;
0x001DA1        19202FB2                 M[$vee.accelerate.neck_protect.angle_x_init] = r0 + Null;
0x001DA2        FD0000FF 012066AA        r0 = Null + -39254;
0x001DA4        0130000A                 r1 = Null + 10;
0x001DA5        E1F00021                 call $vee.accelerate.necke_protect.average_method;
0x001DA6        FD0000FF 19206852        M[$vee.accelerate.neck_protect.angle_y_init] = r0 + Null;
0x001DA8        01202E1D                 r0 = Null + 11805;
0x001DA9        0130000A                 r1 = Null + 10;
0x001DAA        E1F0001C                 call $vee.accelerate.necke_protect.average_method;
0x001DAB        19202FB3                 M[$vee.accelerate.neck_protect.angle_z_init] = r0 + Null;
0x001DAC        DDF0F498                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.store_acc_value>
0x001DAD        09202FAA                 r0 = Null + M[$vee.accelerate.acc_axis_x];
0x001DAE        FD0000FF D52366B4        M[r1 + -39244] = r0;
0x001DB0        FD0000FF 0920684A        r0 = Null + M[$vee.accelerate.acc_axis_y];
0x001DB2        D5232E27                 M[r1 + 11815] = r0;
0x001DB3        09202FAB                 r0 = Null + M[$vee.accelerate.acc_axis_z];
0x001DB4        FD0000FF D52366BE        M[r1 + -39234] = r0;
0x001DB6        E433002F                 r1 = r1 + 1;
0x001DB7        19302FB1                 M[$vee.accelerate.neck_protect.acc_count] = r1 + Null;
0x001DB8        DDF0F48C                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.store_angle_value>
0x001DB9        FD0000FF 09206848        r0 = Null + M[$vee.accelerate.angle_x_int];
0x001DBB        D5232E13                 M[r1 + 11795] = r0;
0x001DBC        09202FA9                 r0 = Null + M[$vee.accelerate.angle_y_int];
0x001DBD        FD0000FF D52366AA        M[r1 + -39254] = r0;
0x001DBF        FD0000FF 09206849        r0 = Null + M[$vee.accelerate.angle_z_int];
0x001DC1        D5232E1D                 M[r1 + 11805] = r0;
0x001DC2        E433002F                 r1 = r1 + 1;
0x001DC3        FD0000FF 19306851        M[$vee.accelerate.neck_protect.angle_count] = r1 + Null;
0x001DC5        DDF0F47F                 jump $pop_rLink_and_rts;

 <$vee.accelerate.necke_protect.average_method>
0x001DC6        F3D00000                 push rLink;
0x001DC7        5000002F                 I0 = Null + r0;
0x001DC8        51C00000                 L0 = Null + 0;
0x001DC9        00C3000F                 r10 = r1 + Null;
0x001DCA        01500000                 r3 = Null + 0;
0x001DCB        E5F00003                 do $vee.accelerate.neck_protect.angle_init_loop;
0x001DCC        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001DCD        03540000                 r3 = r3 + r2;

 <$vee.accelerate.neck_protect.angle_init_loop>
0x001DCE        91E50080                 rMAC = r3 ASHIFT 0 (LO);
0x001DCF        D9030000                 Div = rMAC / r1;
0x001DD0        D9200001                 r0 = DivResult;
0x001DD1        DDF0F473                 jump $pop_rLink_and_rts;

 <$vee.accelerate.necke_protect.acc_average>
0x001DD2        F3D00000                 push rLink;
0x001DD3        5000002F                 I0 = Null + r0;
0x001DD4        51C00000                 L0 = Null + 0;
0x001DD5        00C3000F                 r10 = r1 + Null;
0x001DD6        01500000                 r3 = Null + 0;
0x001DD7        01600063                 r4 = Null + 99;
0x001DD8        0170FF9D                 r5 = Null + -99;
0x001DD9        E5F00003                 do $vee.accelerate.neck_protect.acc_average_loop;
0x001DDA        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001DDB        03540000                 r3 = r3 + r2;

 <$vee.accelerate.neck_protect.acc_average_loop>
0x001DDC        0035000F                 r1 = r3 + Null;
0x001DDD        21030064                 Null = r1 - 100;
0x001DDE        00560005                 if POS r3 = r4 + Null;
0x001DDF        01030064                 Null = r1 + 100;
0x001DE0        00570004                 if NEG r3 = r5 + Null;
0x001DE1        FD000001 CD1547AE        rMAC = r3 * 0.0099999904632568359 (SS);
0x001DE3        8D210018                 r0 = rMAC LSHIFT 24;
0x001DE4        8D22007F                 r0 = r0 LSHIFT -1;
0x001DE5        DDF0F45F                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.neck_timer_handler>
0x001DE6        F3D00000                 push rLink;
0x001DE7        09202FB4                 r0 = Null + M[$vee.accelerate.neck_protect.neck_timer_count];
0x001DE8        E422002F                 r0 = r0 + 1;
0x001DE9        19202FB4                 M[$vee.accelerate.neck_protect.neck_timer_count] = r0 + Null;
0x001DEA        2102001E                 Null = r0 - 30;
0x001DEB        DD50000B                 if POS jump $vee.accelerate.neck_protect.send_neck_prompt_event;
0x001DEC        FD0000FF 09206853        r0 = Null + M[$vee.accelerate.neck_protect.neck_timer_enable];
0x001DEE        0002000F                 Null = r0 + Null;
0x001DEF        DD00F455                 if EQ jump $pop_rLink_and_rts;
0x001DF0        01302F1D                 r1 = Null + 12061;
0x001DF1        FD00000F 01404240        r2 = Null + 1000000;
0x001DF3        01501DE6                 r3 = Null + 7654;
0x001DF4        E1F0F443                 call $timer.schedule_event_in_period;
0x001DF5        DDF0F44F                 jump $pop_rLink_and_rts;

 <$vee.accelerate.neck_protect.send_neck_prompt_event>
0x001DF6        01200000                 r0 = Null + 0;
0x001DF7        19202FB4                 M[$vee.accelerate.neck_protect.neck_timer_count] = r0 + Null;
0x001DF8        FD0000FF 19206853        M[$vee.accelerate.neck_protect.neck_timer_enable] = r0 + Null;
0x001DFA        19202FB1                 M[$vee.accelerate.neck_protect.acc_count] = r0 + Null;
0x001DFB        FD0000FF 19206851        M[$vee.accelerate.neck_protect.angle_count] = r0 + Null;
0x001DFD        01404F23                 r2 = Null + 20259;
0x001DFE        E1F0F230                 call $message.send_short;
0x001DFF        DDF0F445                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat>
0x001E00        F3D00000                 push rLink;
0x001E01        01500000                 r3 = Null + 0;
0x001E02        09302FAA                 r1 = Null + M[$vee.accelerate.acc_axis_x];
0x001E03        9B330000                 r1 = r1 * r1 (int);
0x001E04        03530000                 r3 = r3 + r1;
0x001E05        FD0000FF 0930684A        r1 = Null + M[$vee.accelerate.acc_axis_y];
0x001E07        9B330000                 r1 = r1 * r1 (int);
0x001E08        03530000                 r3 = r3 + r1;
0x001E09        01200000                 r0 = Null + 0;
0x001E0A        FD0000FF 0930684D        r1 = Null + M[$vee.accelerate.const_seat.p_value];
0x001E0C        01400000                 r2 = Null + 0;
0x001E0D        FD0000FF 0920684F        r0 = Null + M[$vee.accelerate.const_seat.stable_status];
0x001E0F        0002000F                 Null = r0 + Null;
0x001E10        DD100012                 if NE jump $vee.accelerate.const_seat.get_up_state_check;

 <$vee.accelerate.const_seat.stable_state_check>
0x001E11        21050082                 Null = r3 - 130;
0x001E12        DD50000B                 if POS jump $vee.accelerate.const_seat.continue_stable_state_check;
0x001E13        21050046                 Null = r3 - 70;
0x001E14        DD400009                 if NEG jump $vee.accelerate.const_seat.continue_stable_state_check;
0x001E15        09402FAD                 r2 = Null + M[$vee.accelerate.const_seat.stable_count];
0x001E16        E444002F                 r2 = r2 + 1;
0x001E17        2104003C                 Null = r2 - 60;
0x001E18        DD500045                 if POS jump $vee.accelerate.const_seat.start_seat_timer;
0x001E19        19402FAD                 M[$vee.accelerate.const_seat.stable_count] = r2 + Null;
0x001E1A        FD0000FF 1950684D        M[$vee.accelerate.const_seat.p_value] = r3 + Null;
0x001E1C        DDF0F428                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.continue_stable_state_check>
0x001E1D        01200000                 r0 = Null + 0;
0x001E1E        19202FAD                 M[$vee.accelerate.const_seat.stable_count] = r0 + Null;
0x001E1F        FD0000FF 1950684D        M[$vee.accelerate.const_seat.p_value] = r3 + Null;
0x001E21        DDF0F423                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.get_up_state_check>
0x001E22        FD0000FF 0920684F        r0 = Null + M[$vee.accelerate.const_seat.stable_status];
0x001E24        0002000F                 Null = r0 + Null;
0x001E25        DD000035                 if EQ jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E26        2005003F                 Null = r3 - r1;
0x001E27        DD50000D                 if POS jump $vee.accelerate.const_seat.seat_check_max_value;

 <$vee.accelerate.const_seat.seat_check_min_value>
0x001E28        09202FAE                 r0 = Null + M[$vee.accelerate.const_seat.status];
0x001E29        0002000F                 Null = r0 + Null;
0x001E2A        DD100030                 if NE jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E2B        E420002F                 r0 = Null + 1;
0x001E2C        19202FAE                 M[$vee.accelerate.const_seat.status] = r0 + Null;
0x001E2D        2103008C                 Null = r1 - 140;
0x001E2E        DD40002C                 if NEG jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E2F        E420002F                 r0 = Null + 1;
0x001E30        FD0000FF 1920684E        M[$vee.accelerate.const_seat.max_flag] = r0 + Null;
0x001E32        19302FAF                 M[$vee.accelerate.const_seat.max_value] = r1 + Null;
0x001E33        DDF00027                 jump $vee.accelerate.const_seat.get_up_continue_check;

 <$vee.accelerate.const_seat.seat_check_max_value>
0x001E34        09202FAE                 r0 = Null + M[$vee.accelerate.const_seat.status];
0x001E35        0002000F                 Null = r0 + Null;
0x001E36        DD000024                 if EQ jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E37        01200000                 r0 = Null + 0;
0x001E38        19202FAE                 M[$vee.accelerate.const_seat.status] = r0 + Null;
0x001E39        21030046                 Null = r1 - 70;
0x001E3A        DD500020                 if POS jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E3B        E1F0F3B6                 call $block_interrupts;
0x001E3C        01200000                 r0 = Null + 0;
0x001E3D        19202FAD                 M[$vee.accelerate.const_seat.stable_count] = r0 + Null;
0x001E3E        FD0000FF 1920684F        M[$vee.accelerate.const_seat.stable_status] = r0 + Null;
0x001E40        FD0000FF 1920684B        M[$vee.accelerate.const_seat.seat_timer_enable] = r0 + Null;
0x001E42        FD0000FF 0920684C        r0 = Null + M[$vee.accelerate.const_seat.move_timer_count];
0x001E44        E422002F                 r0 = r0 + 1;
0x001E45        FD0000FF 1920684C        M[$vee.accelerate.const_seat.move_timer_count] = r0 + Null;
0x001E47        E1F0F37E                 call $interrupt.unblock;
0x001E48        2103003C                 Null = r1 - 60;
0x001E49        DD500011                 if POS jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E4A        FD0000FF 0920684E        r0 = Null + M[$vee.accelerate.const_seat.max_flag];
0x001E4C        0002000F                 Null = r0 + Null;
0x001E4D        DD00000D                 if EQ jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E4E        09202FAF                 r0 = Null + M[$vee.accelerate.const_seat.max_value];
0x001E4F        23230000                 r0 = r0 - r1;
0x001E50        21020064                 Null = r0 - 100;
0x001E51        DD400009                 if NEG jump $vee.accelerate.const_seat.get_up_continue_check;
0x001E52        E1F0F39F                 call $block_interrupts;
0x001E53        01200000                 r0 = Null + 0;
0x001E54        FD0000FF 1920684E        M[$vee.accelerate.const_seat.max_flag] = r0 + Null;
0x001E56        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;
0x001E57        E1F0F36E                 call $interrupt.unblock;
0x001E58        01404F22                 r2 = Null + 20258;
0x001E59        E1F0F1D5                 call $message.send_short;

 <$vee.accelerate.const_seat.get_up_continue_check>
0x001E5A        FD0000FF 1950684D        M[$vee.accelerate.const_seat.p_value] = r3 + Null;
0x001E5C        DDF0F3E8                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.start_seat_timer>
0x001E5D        FD0000FF 0920684B        r0 = Null + M[$vee.accelerate.const_seat.seat_timer_enable];
0x001E5F        0002000F                 Null = r0 + Null;
0x001E60        DD10F3E4                 if NE jump $pop_rLink_and_rts;
0x001E61        FD0000FF 013067AA        r1 = Null + -38998;
0x001E63        FD00000F 01404240        r2 = Null + 1000000;
0x001E65        01501E6D                 r3 = Null + 7789;
0x001E66        E1F0F3D4                 call $timer.schedule_event_in;
0x001E67        E420002F                 r0 = Null + 1;
0x001E68        FD0000FF 1920684B        M[$vee.accelerate.const_seat.seat_timer_enable] = r0 + Null;
0x001E6A        FD0000FF 1920684F        M[$vee.accelerate.const_seat.stable_status] = r0 + Null;
0x001E6C        DDF0F3D8                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.seat_timer_handler>
0x001E6D        F3D00000                 push rLink;
0x001E6E        FD0000FF 0920684B        r0 = Null + M[$vee.accelerate.const_seat.seat_timer_enable];
0x001E70        0002000F                 Null = r0 + Null;
0x001E71        DD00F3D3                 if EQ jump $pop_rLink_and_rts;
0x001E72        09202FAC                 r0 = Null + M[$vee.accelerate.const_seat.seat_timer_count];
0x001E73        E422002F                 r0 = r0 + 1;
0x001E74        2102001E                 Null = r0 - 30;
0x001E75        DD500009                 if POS jump $vee.accelerate.const_seat.send_const_seat_event;
0x001E76        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;

 <$vee.accelerate.const_seat.another_timer_event>
0x001E77        FD0000FF 013067AA        r1 = Null + -38998;
0x001E79        FD00000F 01404240        r2 = Null + 1000000;
0x001E7B        01501E6D                 r3 = Null + 7789;
0x001E7C        E1F0F3BB                 call $timer.schedule_event_in_period;
0x001E7D        DDF0F3C7                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.send_const_seat_event>
0x001E7E        FD0000FF 0920684F        r0 = Null + M[$vee.accelerate.const_seat.stable_status];
0x001E80        0002000F                 Null = r0 + Null;
0x001E81        DD00000B                 if EQ jump $vee.accelerate.const_seat.dont_send_seat_event;
0x001E82        01404F26                 r2 = Null + 20262;
0x001E83        E1F0F1AB                 call $message.send_short;
0x001E84        01200000                 r0 = Null + 0;
0x001E85        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;
0x001E86        FD0000FF 1920684B        M[$vee.accelerate.const_seat.seat_timer_enable] = r0 + Null;
0x001E88        FD0000FF 1920684F        M[$vee.accelerate.const_seat.stable_status] = r0 + Null;
0x001E8A        19202FAD                 M[$vee.accelerate.const_seat.stable_count] = r0 + Null;
0x001E8B        DDF0F3B9                 jump $pop_rLink_and_rts;

 <$vee.accelerate.const_seat.dont_send_seat_event>
0x001E8C        09202FAC                 r0 = Null + M[$vee.accelerate.const_seat.seat_timer_count];
0x001E8D        E422002F                 r0 = r0 + 1;
0x001E8E        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;
0x001E8F        2142001E                 r2 = r0 - 30;
0x001E90        2104000A                 Null = r2 - 10;
0x001E91        DD40FFE6                 if NEG jump $vee.accelerate.const_seat.another_timer_event;
0x001E92        0120001E                 r0 = Null + 30;
0x001E93        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;
0x001E94        FD0000FF 0920684C        r0 = Null + M[$vee.accelerate.const_seat.move_timer_count];
0x001E96        01300000                 r1 = Null + 0;
0x001E97        FD0000FF 1930684C        M[$vee.accelerate.const_seat.move_timer_count] = r1 + Null;
0x001E99        21020005                 Null = r0 - 5;
0x001E9A        DD40FFDD                 if NEG jump $vee.accelerate.const_seat.another_timer_event;
0x001E9B        01200000                 r0 = Null + 0;
0x001E9C        19202FAC                 M[$vee.accelerate.const_seat.seat_timer_count] = r0 + Null;
0x001E9D        DDF0FFDA                 jump $vee.accelerate.const_seat.another_timer_event;

 <$vee.heartrate.hb_smooth>
0x001E9E        F3D00000                 push rLink;
0x001E9F        01C00005                 r10 = Null + 5;
0x001EA0        01602E79                 r4 = Null + 11897;
0x001EA1        003C000F                 r1 = r10 + Null;
0x001EA2        E5F00005                 do $vee.heartrate.hb_smooth.add_value_to_origin_buff;
0x001EA3        E473003F                 r5 = r1 - 1;
0x001EA4        D046007F                 r2 = M[r4 + r5];
0x001EA5        D446003F                 M[r4 + r1] = r2;
0x001EA6        E433003F                 r1 = r1 - 1;

 <$vee.heartrate.hb_smooth.add_value_to_origin_buff>
0x001EA7        1862000F                 M[r4] = r0 + Null;
0x001EA8        D1360001                 r1 = M[r4 + 1];
0x001EA9        FD0000FF 19306843        M[$vee.heartrate.hb_smooth.p_hb_value] = r1 + Null;
0x001EAB        FD0000FF 09306844        r1 = Null + M[$vee.heartrate.hb_smooth.hb_smooth_status];
0x001EAD        0003000F                 Null = r1 + Null;
0x001EAE        DD000006                 if EQ jump $vee.heartrate.hb_smooth.hb_smooth_before;
0x001EAF        E403003F                 Null = r1 - 1;
0x001EB0        DD000028                 if EQ jump $vee.heartrate.hb_smooth.hb_smooth_middle;
0x001EB1        21030002                 Null = r1 - 2;
0x001EB2        DD00004B                 if EQ jump $vee.heartrate.hb_smooth.hb_smooth_after;
0x001EB3        DDF00072                 jump $vee.heartrate.hb_smooth.smooth_hb_value;

 <$vee.heartrate.hb_smooth.hb_smooth_before>
0x001EB4        01C00003                 r10 = Null + 3;
0x001EB5        51002E79                 I0 = Null + 11897;
0x001EB6        51C00000                 L0 = Null + 0;
0x001EB7        01300000                 r1 = Null + 0;
0x001EB8        01400000                 r2 = Null + 0;
0x001EB9        01500000                 r3 = Null + 0;
0x001EBA        01600000                 r4 = Null + 0;
0x001EBB        E5F00009                 do $vee.heartrate.hb_smooth.desity_filter_add;
0x001EBC        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001EBD        03530000                 r3 = r3 + r1;
0x001EBE        2003002F                 Null = r1 - r0;
0x001EBF        20420034                 if NEG r2 = r0 - r1;
0x001EC0        2003002F                 Null = r1 - r0;
0x001EC1        20430025                 if POS r2 = r1 - r0;
0x001EC2        21040004                 Null = r2 - 4;
0x001EC3        E4660024                 if NEG r4 = r4 + 1;

 <$vee.heartrate.hb_smooth.desity_filter_add>
0x001EC4        01300003                 r1 = Null + 3;
0x001EC5        91E50080                 rMAC = r3 ASHIFT 0 (LO);
0x001EC6        D9030000                 Div = rMAC / r1;
0x001EC7        D9300001                 r1 = DivResult;
0x001EC8        21030032                 Null = r1 - 50;
0x001EC9        00200004                 if NEG r0 = Null + Null;
0x001ECA        21030032                 Null = r1 - 50;
0x001ECB        DD40005A                 if NEG jump $vee.heartrate.hb_smooth.smooth_hb_value;
0x001ECC        21060003                 Null = r4 - 3;
0x001ECD        DD400058                 if NEG jump $vee.heartrate.hb_smooth.smooth_hb_value;
0x001ECE        E440002F                 r2 = Null + 1;
0x001ECF        FD0000FF 19406844        M[$vee.heartrate.hb_smooth.hb_smooth_status] = r2 + Null;
0x001ED1        0042000F                 r2 = r0 + Null;
0x001ED2        FD0000FF 012066A0        r0 = Null + -39264;
0x001ED4        0130000A                 r1 = Null + 10;
0x001ED5        E1F0FAC5                 call $vee.heartrate.zero_buff;
0x001ED6        0024000F                 r0 = r2 + Null;
0x001ED7        DDF0004E                 jump $vee.heartrate.hb_smooth.smooth_hb_value;

 <$vee.heartrate.hb_smooth.hb_smooth_middle>
0x001ED8        0002000F                 Null = r0 + Null;
0x001ED9        DD000014                 if EQ jump $vee.heartrate.hb_smooth.hb_smooth_zero_check;

 <$vee.heartrate.hb_smooth.hb_smooth_filter>
0x001EDA        09302FA3                 r1 = Null + M[$vee.heartrate.hb_smooth.p_smooth_value];
0x001EDB        01530004                 r3 = r1 + 4;
0x001EDC        0143000C                 r2 = r1 + 12;
0x001EDD        2002004F                 Null = r0 - r2;
0x001EDE        DD50002C                 if POS jump $vee.heartrate.hb_smooth.calc_smooth_hb;
0x001EDF        21530004                 r3 = r1 - 4;
0x001EE0        2143000C                 r2 = r1 - 12;
0x001EE1        2004002F                 Null = r2 - r0;
0x001EE2        DD500028                 if POS jump $vee.heartrate.hb_smooth.calc_smooth_hb;
0x001EE3        0053000F                 r3 = r1 + Null;
0x001EE4        01430004                 r2 = r1 + 4;
0x001EE5        2002004F                 Null = r0 - r2;
0x001EE6        DD500024                 if POS jump $vee.heartrate.hb_smooth.calc_smooth_hb;
0x001EE7        0053000F                 r3 = r1 + Null;
0x001EE8        21430004                 r2 = r1 - 4;
0x001EE9        2004002F                 Null = r2 - r0;
0x001EEA        DD500020                 if POS jump $vee.heartrate.hb_smooth.calc_smooth_hb;
0x001EEB        0052000F                 r3 = r0 + Null;
0x001EEC        DDF0001E                 jump $vee.heartrate.hb_smooth.calc_smooth_hb;

 <$vee.heartrate.hb_smooth.hb_smooth_zero_check>
0x001EED        01400000                 r2 = Null + 0;
0x001EEE        09502FA4                 r3 = Null + M[$vee.heartrate.hb_smooth.p_yzero];
0x001EEF        E455002F                 r3 = r3 + 1;
0x001EF0        FD0000FF 09306843        r1 = Null + M[$vee.heartrate.hb_smooth.p_hb_value];
0x001EF2        0003000F                 Null = r1 + Null;
0x001EF3        00540001                 if NE r3 = r2 + Null;
0x001EF4        19502FA4                 M[$vee.heartrate.hb_smooth.p_yzero] = r3 + Null;
0x001EF5        FD0000FF 09306844        r1 = Null + M[$vee.heartrate.hb_smooth.hb_smooth_status];
0x001EF7        01400002                 r2 = Null + 2;
0x001EF8        21050005                 Null = r3 - 5;
0x001EF9        00340005                 if POS r1 = r2 + Null;
0x001EFA        FD0000FF 19306844        M[$vee.heartrate.hb_smooth.hb_smooth_status] = r1 + Null;
0x001EFC        DDF0FFDE                 jump $vee.heartrate.hb_smooth.hb_smooth_filter;

 <$vee.heartrate.hb_smooth.hb_smooth_after>
0x001EFD        01200000                 r0 = Null + 0;
0x001EFE        FD0000FF 19206844        M[$vee.heartrate.hb_smooth.hb_smooth_status] = r0 + Null;
0x001F00        19202FA4                 M[$vee.heartrate.hb_smooth.p_yzero] = r0 + Null;
0x001F01        FD0000FF 012066A0        r0 = Null + -39264;
0x001F03        0130000A                 r1 = Null + 10;
0x001F04        E1F0FA96                 call $vee.heartrate.zero_buff;
0x001F05        01202E79                 r0 = Null + 11897;
0x001F06        01300006                 r1 = Null + 6;
0x001F07        E1F0FA93                 call $vee.heartrate.zero_buff;
0x001F08        01200000                 r0 = Null + 0;
0x001F09        DDF0001C                 jump $vee.heartrate.hb_smooth.smooth_hb_value;

 <$vee.heartrate.hb_smooth.calc_smooth_hb>
0x001F0A        01C00009                 r10 = Null + 9;
0x001F0B        FD0000FF 016066A0        r4 = Null + -39264;
0x001F0D        003C000F                 r1 = r10 + Null;
0x001F0E        E5F00005                 do $vee.heartrate.hb_smooth.add_value_to_fifo;
0x001F0F        E473003F                 r5 = r1 - 1;
0x001F10        D046007F                 r2 = M[r4 + r5];
0x001F11        D446003F                 M[r4 + r1] = r2;
0x001F12        E433003F                 r1 = r1 - 1;

 <$vee.heartrate.hb_smooth.add_value_to_fifo>
0x001F13        1865000F                 M[r4] = r3 + Null;
0x001F14        01C0000A                 r10 = Null + 10;
0x001F15        01200000                 r0 = Null + 0;
0x001F16        01300000                 r1 = Null + 0;
0x001F17        01400000                 r2 = Null + 0;
0x001F18        01500000                 r3 = Null + 0;
0x001F19        E5F00007                 do $vee.heartrate.hb_smooth.smooth_average;
0x001F1A        D056004F                 r3 = M[r4 + r2];
0x001F1B        0005000F                 Null = r3 + Null;
0x001F1C        00220051                 if NE r0 = r0 + r3;
0x001F1D        0005000F                 Null = r3 + Null;
0x001F1E        E4330021                 if NE r1 = r1 + 1;
0x001F1F        E444002F                 r2 = r2 + 1;

 <$vee.heartrate.hb_smooth.smooth_average>
0x001F20        0002000F                 Null = r0 + Null;
0x001F21        DD000004                 if EQ jump $vee.heartrate.hb_smooth.smooth_hb_value;
0x001F22        91E20080                 rMAC = r0 ASHIFT 0 (LO);
0x001F23        D9030000                 Div = rMAC / r1;
0x001F24        D9200001                 r0 = DivResult;

 <$vee.heartrate.hb_smooth.smooth_hb_value>
0x001F25        FD0000FF 1920683D        M[$vee.heartrate.heartrate] = r0 + Null;
0x001F27        19202FA3                 M[$vee.heartrate.hb_smooth.p_smooth_value] = r0 + Null;
0x001F28        DDF0F31C                 jump $pop_rLink_and_rts;

 <$vee.heartrate.hb_recover>
0x001F29        F3D00000                 push rLink;
0x001F2A        FD0000FF 510066A0        I0 = Null + -39264;
0x001F2C        51C00000                 L0 = Null + 0;
0x001F2D        01C0000A                 r10 = Null + 10;
0x001F2E        E5F00002                 do $vee.heartrate.hb_smooth.hb_value_recover;
0x001F2F        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$vee.heartrate.hb_smooth.hb_value_recover>
0x001F30        DDF0F314                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x001F31        F3D00000                 push rLink;
0x001F32        1970007F                 M[$sbcdec.codec_struc] = r5 + Null;
0x001F33        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x001F34        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F35        D1270000                 r0 = M[r5 + 0];
0x001F36        E1F0F2D9                 call $cbuffer.get_read_address_and_size;
0x001F37        5000002F                 I0 = Null + r0;
0x001F38        50C0003F                 L0 = Null + r1;
0x001F39        D1270000                 r0 = M[r5 + 0];
0x001F3A        E1F0F2AF                 call $cbuffer.calc_amount_data;
0x001F3B        00C2002F                 r10 = r0 + r0;
0x001F3C        21CC0002                 r10 = r10 - 2;
0x001F3D        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x001F3E        006C000F                 r4 = r10 + Null;
0x001F3F        E1F00739                 call $sbcdec.find_sync;
0x001F40        21080063                 Null = r6 - 99;
0x001F41        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x001F42        236C0000                 r4 = r4 - r10;
0x001F43        D1270003                 r0 = M[r5 + 3];
0x001F44        21020002                 Null = r0 - 2;
0x001F45        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001F46        D1270001                 r0 = M[r5 + 1];
0x001F47        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001F48        E1F0F291                 call $cbuffer.calc_amount_space;
0x001F49        21020080                 Null = r0 - 128;
0x001F4A        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001F4B        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x001F4C        D1270002                 r0 = M[r5 + 2];
0x001F4D        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001F4E        E1F0F28B                 call $cbuffer.calc_amount_space;
0x001F4F        21020080                 Null = r0 - 128;
0x001F50        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x001F51        01200002                 r0 = Null + 2;
0x001F52        D5270003                 M[r5 + 3] = r0;
0x001F53        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x001F54        D1270000                 r0 = M[r5 + 0];
0x001F55        E1F0F294                 call $cbuffer.calc_amount_data;
0x001F56        03220000                 r0 = r0 + r0;
0x001F57        23260000                 r0 = r0 - r4;
0x001F58        21020016                 Null = r0 - 22;
0x001F59        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x001F5A        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F5B        E420002F                 r0 = Null + 1;
0x001F5C        D5270003                 M[r5 + 3] = r0;
0x001F5D        D1270000                 r0 = M[r5 + 0];
0x001F5E        4430000F                 r1 = Null + I0;
0x001F5F        E1F0F2BF                 call $cbuffer.set_read_address;
0x001F60        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x001F61        D52B0037                 M[r9 + 55] = r0;
0x001F62        E1F0030B                 call $sbcdec.read_frame_header;
0x001F63        D12B0039                 r0 = M[r9 + 57];
0x001F64        D13B0037                 r1 = M[r9 + 55];
0x001F65        2002003F                 Null = r0 - r1;
0x001F66        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x001F67        5802000F                 I0 = I2 + Null;
0x001F68        D58B003B                 M[r9 + 59] = r6;
0x001F69        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x001F6A        D10B0036                 Null = M[r9 + 54];
0x001F6B        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x001F6C        E1F00751                 call $sbcdec.read_scale_factors;
0x001F6D        D12B0023                 r0 = M[r9 + 35];
0x001F6E        D13B0024                 r1 = M[r9 + 36];
0x001F6F        23230000                 r0 = r0 - r1;
0x001F70        812200FF                 r0 = r0 AND 0xff;
0x001F71        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x001F72        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F73        4430000F                 r1 = Null + I0;
0x001F74        D1270000                 r0 = M[r5 + 0];
0x001F75        E1F0F2A9                 call $cbuffer.set_read_address;
0x001F76        51C00000                 L0 = Null + 0;
0x001F77        D12B003A                 r0 = M[r9 + 58];
0x001F78        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x001F79        01200005                 r0 = Null + 5;
0x001F7A        D5270003                 M[r5 + 3] = r0;
0x001F7B        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x001F7C        E1F0FA3F                 call $sbc.calc_bit_allocation;
0x001F7D        E1F006B7                 call $sbcdec.read_audio_samples;
0x001F7E        E1F007C8                 call $sbcdec.byte_align;
0x001F7F        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F80        4430000F                 r1 = Null + I0;
0x001F81        D1270000                 r0 = M[r5 + 0];
0x001F82        E1F0F29C                 call $cbuffer.set_read_address;
0x001F83        51C00000                 L0 = Null + 0;
0x001F84        D1270003                 r0 = M[r5 + 3];
0x001F85        21020000                 Null = r0 - 0;
0x001F86        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x001F87        E1F0047B                 call $sbcdec.sample_reconstruction;
0x001F88        D12B001E                 r0 = M[r9 + 30];
0x001F89        21020003                 Null = r0 - 3;
0x001F8A        E10005D8                 if EQ call $sbcdec.joint_stereo_decode;
0x001F8B        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F8C        D1270001                 r0 = M[r5 + 1];
0x001F8D        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x001F8E        E1F0F286                 call $cbuffer.get_write_address_and_size;
0x001F8F        5010002F                 I1 = Null + r0;
0x001F90        50D0003F                 L1 = Null + r1;
0x001F91        01700000                 r5 = Null + 0;
0x001F92        E1F0027C                 call $sbcdec.synthesis_subband_filter;
0x001F93        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F94        4430001F                 r1 = Null + I1;
0x001F95        D1270001                 r0 = M[r5 + 1];
0x001F96        E1F0F28C                 call $cbuffer.set_write_address;
0x001F97        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x001F98        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001F99        D1270002                 r0 = M[r5 + 2];
0x001F9A        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x001F9B        E1F0F279                 call $cbuffer.get_write_address_and_size;
0x001F9C        5010002F                 I1 = Null + r0;
0x001F9D        50D0003F                 L1 = Null + r1;
0x001F9E        E470002F                 r5 = Null + 1;
0x001F9F        E1F0026F                 call $sbcdec.synthesis_subband_filter;
0x001FA0        0970007F                 r5 = Null + M[$sbcdec.codec_struc];
0x001FA1        4430001F                 r1 = Null + I1;
0x001FA2        D1270002                 r0 = M[r5 + 2];
0x001FA3        E1F0F27F                 call $cbuffer.set_write_address;
0x001FA4        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x001FA5        01200000                 r0 = Null + 0;
0x001FA6        D5270003                 M[r5 + 3] = r0;
0x001FA7        D12B001D                 r0 = M[r9 + 29];
0x001FA8        D13B0021                 r1 = M[r9 + 33];
0x001FA9        9B230000                 r0 = r0 * r1 (int);
0x001FAA        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x001FAB        51C00000                 L0 = Null + 0;
0x001FAC        DDF0F298                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy>
0x001FAD        F3D00000                 push rLink;
0x001FAE        E1F0057E                 call $cbops.av_copy.init_avcopy_struct;
0x001FAF        FD0000FF 19306863        M[$M.cbops.av_copy.control_port] = r1 + Null;
0x001FB1        19202FC4                 M[$M.cbops.av_copy.control_cbuffer] = r0 + Null;
0x001FB2        FD0000FF 09206863        r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FB4        E1F0F255                 call $cbuffer.is_it_enabled;
0x001FB5        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x001FB6        09202FC4                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001FB7        E1F0F232                 call $cbuffer.calc_amount_data;
0x001FB8        19202FC7                 M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x001FB9        FD0000FF 09206863        r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FBB        E1F0F21E                 call $cbuffer.calc_amount_space;
0x001FBC        9144007F                 r2 = r2 ASHIFT -1;
0x001FBD        FD0000FF 29326865        r1 = r0 - M[$M.cbops.dac_av_copy.prev_port_mnt_space];
0x001FBF        FD0000FF 19206865        M[$M.cbops.dac_av_copy.prev_port_mnt_space] = r0 + Null;
0x001FC1        FD0000FF 09336867        r1 = r1 + M[$M.cbops.dac_av_copy.port_amount_written];
0x001FC3        00330044                 if NEG r1 = r1 + r2;
0x001FC4        DD40000A                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x001FC5        91230008                 r0 = r1 ASHIFT 8;
0x001FC6        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x001FC8        09302FC5                 r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001FC9        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x001FCB        03320000                 r1 = r1 + r0;
0x001FCC        19302FC5                 M[$M.cbops.dac_av_copy.port_mnt_data_avg] = r1 + Null;
0x001FCD        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x001FCE        19002FC3                 M[$cbops.amount_written] = Null + Null;
0x001FCF        E1F0E88E                 call $cbops.copy;
0x001FD0        09202FC3                 r0 = Null + M[$cbops.amount_written];
0x001FD1        FD0000FF 19206867        M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;
0x001FD3        FD0000FF 09206863        r0 = Null + M[$M.cbops.av_copy.control_port];
0x001FD5        E1F0F204                 call $cbuffer.calc_amount_space;
0x001FD6        9144007F                 r2 = r2 ASHIFT -1;
0x001FD7        2024002F                 r0 = r2 - r0;
0x001FD8        09302FC5                 r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001FD9        91330078                 r1 = r1 ASHIFT -8;
0x001FDA        09002FC7                 Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x001FDB        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x001FDC        2093002F                 r7 = r1 - r0;
0x001FDD        DDB00015                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x001FDE        0093000F                 r7 = r1 + Null;
0x001FDF        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x001FE0        6592006E                 r7 = 110 - r0;
0x001FE1        DD400011                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x001FE2        00C9000F                 r10 = r7 + Null;
0x001FE3        FD0000FF 012067ED        r0 = Null + -38931;
0x001FE5        E1F00730                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001FE6        00C9000F                 r10 = r7 + Null;
0x001FE7        01202F53                 r0 = Null + 12115;
0x001FE8        E1F0072D                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001FE9        FD0000FF 01A066F0        r8 = Null + -39184;
0x001FEB        19002FC3                 M[$cbops.amount_written] = Null + Null;
0x001FEC        E1F0E871                 call $cbops.copy;
0x001FED        09202FC3                 r0 = Null + M[$cbops.amount_written];
0x001FEE        FD0000FF 09226867        r0 = r0 + M[$M.cbops.dac_av_copy.port_amount_written];
0x001FF0        FD0000FF 19206867        M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x001FF2        09202FC4                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001FF3        E1F0F1F6                 call $cbuffer.calc_amount_data;
0x001FF4        0082000F                 r6 = r0 + Null;
0x001FF5        09202FC4                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001FF6        E1F0F219                 call $cbuffer.get_read_address_and_size;
0x001FF7        0092000F                 r7 = r0 + Null;
0x001FF8        FD0000FF 09506866        r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001FFA        2105000A                 Null = r3 - 10;
0x001FFB        DD00000D                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x001FFC        01500000                 r3 = Null + 0;
0x001FFD        29492FC6                 r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001FFE        DD100007                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x001FFF        8D43007F                 r2 = r1 LSHIFT -1;
0x002000        2008004F                 Null = r6 - r2;
0x002001        DD400004                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x002002        FD0000FF 09506866        r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x002004        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x002005        FD0000FF 19506866        M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = r3 + Null;
0x002007        DDF00017                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x002008        29492FC6                 r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x002009        DD000004                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x00200A        FD0000FF 19006866        M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = Null + Null;
0x00200C        DDF00012                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x00200D        FD0000FF 09206864        r0 = Null + M[$M.cbops.av_copy.right_channel];
0x00200F        E110F1DA                 if NE call $cbuffer.calc_amount_data;
0x002010        2008002F                 Null = r6 - r0;
0x002011        00820005                 if POS r6 = r0 + Null;
0x002012        21280048                 r0 = r6 - 72;
0x002013        20880025                 if POS r6 = r6 - r0;
0x002014        00C8000F                 r10 = r6 + Null;
0x002015        09202FC4                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x002016        E1F0F12E                 call $cbuffer.advance_read_ptr;
0x002017        09202FC4                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x002018        E1F0F1F7                 call $cbuffer.get_read_address_and_size;
0x002019        0092000F                 r7 = r0 + Null;
0x00201A        00C8000F                 r10 = r6 + Null;
0x00201B        FD0000FF 09206864        r0 = Null + M[$M.cbops.av_copy.right_channel];
0x00201D        E110F127                 if NE call $cbuffer.advance_read_ptr;

 <$M.cbops.dac_av_copy.remove_end>
0x00201E        19902FC6                 M[$M.cbops.dac_av_copy.prev_buffer_read_addr] = r7 + Null;
0x00201F        DDF0F225                 jump $pop_rLink_and_rts;

 <$create_sub_packet>
0x002020        F3D00000                 push rLink;
0x002021        01202F4A                 r0 = Null + 12106;
0x002022        E1F0F1C7                 call $cbuffer.calc_amount_data;
0x002023        01400009                 r2 = Null + 9;
0x002024        91540001                 r3 = r2 ASHIFT 1;
0x002025        09302F88                 r1 = Null + M[$sco_param_tesco];
0x002026        21030018                 Null = r1 - 24;
0x002027        00450000                 if EQ r2 = r3 + Null;
0x002028        20C2004F                 r10 = r0 - r2;
0x002029        DD50000D                 if POS jump $M.create_sub_packet.continue;
0x00202A        20C000CF                 r10 = Null - r10;
0x00202B        01202F4A                 r0 = Null + 12106;
0x00202C        E1F0F1E8                 call $cbuffer.get_write_address_and_size;
0x00202D        5000002F                 I0 = Null + r0;
0x00202E        50C0003F                 L0 = Null + r1;
0x00202F        01200000                 r0 = Null + 0;
0x002030        E5F00002                 do $M.create_sub_packet.zero_insertion;
0x002031        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_insertion>
0x002032        01202F4A                 r0 = Null + 12106;
0x002033        4430000F                 r1 = Null + I0;
0x002034        E1F0F1EE                 call $cbuffer.set_write_address;
0x002035        51C00000                 L0 = Null + 0;

 <$M.create_sub_packet.continue>
0x002036        01202F47                 r0 = Null + 12103;
0x002037        E1F0F1DD                 call $cbuffer.get_write_address_and_size;
0x002038        5000002F                 I0 = Null + r0;
0x002039        50C0003F                 L0 = Null + r1;
0x00203A        01202F4A                 r0 = Null + 12106;
0x00203B        E1F0F1D4                 call $cbuffer.get_read_address_and_size;
0x00203C        5040002F                 I4 = Null + r0;
0x00203D        50E0003F                 L4 = Null + r1;
0x00203E        FD0000FF 09C06829        r10 = Null + M[$sco_param_to_air_size];
0x002040        91CC007F                 r10 = r10 ASHIFT -1;
0x002041        FD000000 0120F5F5        r0 = Null + 62965;
0x002043        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x002044        09602F95                 r4 = Null + M[$M.create_sub_packet.packet_counter];
0x002045        8126FFFF                 r0 = r4 AND 0xffff;
0x002046        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x002047        FD0000FF 09206832        r0 = Null + M[$wall_clock_adjustment];
0x002049        0922FE71                 r0 = r0 + M[0xfffe71];
0x00204A        8D420070                 r2 = r0 LSHIFT -16;
0x00204B        FD0000FF 81760000        r5 = r4 AND 0xff0000;
0x00204D        8D770078                 r5 = r5 LSHIFT -8;
0x00204E        0047004F                 r2 = r5 + r2;
0x00204F        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002050        8142FFFF                 r2 = r0 AND 0xffff;
0x002051        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002052        09302F84                 r1 = Null + M[$sub_link_port];
0x002053        FD000094 2103600F        Null = r1 - -7053297;
0x002055        DD00001C                 if EQ jump $M.create_sub_packet.write_l2cap_sub_data;
0x002056        215C000D                 r3 = r10 - 13;
0x002057        01C00009                 r10 = Null + 9;
0x002058        E5F00004                 do $M.create_sub_packet.copy_esco_sub_data_to_air;
0x002059        03000021                 Null = Null + Null, r0 = M[I4,1];
0x00205A        91220078                 r0 = r0 ASHIFT -8;
0x00205B        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_esco_sub_data_to_air>
0x00205C        00C5000F                 r10 = r3 + Null;
0x00205D        E5F00003                 do $M.create_sub_packet.zero_padding;
0x00205E        01200000                 r0 = Null + 0;
0x00205F        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_padding>
0x002060        09302F88                 r1 = Null + M[$sco_param_tesco];
0x002061        21030006                 Null = r1 - 6;
0x002062        DD100003                 if NE jump $M.create_sub_packet.update_read_addr;
0x002063        E406003F                 Null = r4 - 1;
0x002064        DD000004                 if EQ jump $M.create_sub_packet.dont_update_sub_1k2_read_ptrs;

 <$M.create_sub_packet.update_read_addr>
0x002065        01202F4A                 r0 = Null + 12106;
0x002066        4430004F                 r1 = Null + I4;
0x002067        E1F0F1B7                 call $cbuffer.set_read_address;

 <$M.create_sub_packet.dont_update_sub_1k2_read_ptrs>
0x002068        09302F88                 r1 = Null + M[$sco_param_tesco];
0x002069        21030006                 Null = r1 - 6;
0x00206A        DD100006                 if NE jump $M.create_sub_packet.do_not_send_duplicates;
0x00206B        E430002F                 r1 = Null + 1;
0x00206C        E466002F                 r4 = r4 + 1;
0x00206D        21060002                 Null = r4 - 2;
0x00206E        00630001                 if NE r4 = r1 + Null;
0x00206F        19602F95                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.do_not_send_duplicates>
0x002070        DDF00017                 jump $M.create_sub_packet.done;

 <$M.create_sub_packet.write_l2cap_sub_data>
0x002071        09202F86                 r0 = Null + M[$M.Subwoofer.playback_time];
0x002072        8D420070                 r2 = r0 LSHIFT -16;
0x002073        FD0000FF 09306836        r1 = Null + M[$synchronized_rate];
0x002075        8D530070                 r3 = r1 LSHIFT -16;
0x002076        8D550008                 r3 = r3 LSHIFT 8;
0x002077        0045004F                 r2 = r3 + r2;
0x002078        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x002079        8142FFFF                 r2 = r0 AND 0xffff;
0x00207A        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x00207B        8143FFFF                 r2 = r1 AND 0xffff;
0x00207C        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x00207D        01C00012                 r10 = Null + 18;
0x00207E        E5F00004                 do $M.create_sub_packet.copy_l2cap_sub_data_to_air;
0x00207F        03000021                 Null = Null + Null, r0 = M[I4,1];
0x002080        91220078                 r0 = r0 ASHIFT -8;
0x002081        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_l2cap_sub_data_to_air>
0x002082        01202F4A                 r0 = Null + 12106;
0x002083        4430004F                 r1 = Null + I4;
0x002084        E1F0F19A                 call $cbuffer.set_read_address;
0x002085        E466002F                 r4 = r4 + 1;
0x002086        19602F95                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.done>
0x002087        01202F47                 r0 = Null + 12103;
0x002088        4430000F                 r1 = Null + I0;
0x002089        E1F0F199                 call $cbuffer.set_write_address;
0x00208A        51C00000                 L0 = Null + 0;
0x00208B        51E00000                 L4 = Null + 0;
0x00208C        DDF0F1B8                 jump $pop_rLink_and_rts;

 <$conn_init>
0x00208D        F3D00000                 push rLink;
0x00208E        015005DC                 r3 = Null + 1500;
0x00208F        01601000                 r4 = Null + 4096;
0x002090        E1F0056E                 call $conn_init_cbuffers;
0x002091        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x002093        21020005                 Null = r0 - 5;
0x002094        DD10001C                 if NE jump $M.conn_init.skip_usb_conn_init;
0x002095        012009C4                 r0 = Null + 2500;
0x002096        FD0000FF 19205B39        M[$sra_struct] = r0 + Null;
0x002098        FD000080 01200000        r0 = Null + -8388608;
0x00209A        FD0000FF 19205B3A        M[0xff5b3a] = r0 + Null;
0x00209C        012000A5                 r0 = Null + 165;
0x00209D        FD0000FF 19205B3B        M[0xff5b3b] = r0 + Null;
0x00209F        012000AD                 r0 = Null + 173;
0x0020A0        FD0000FF 19205B3C        M[0xff5b3c] = r0 + Null;
0x0020A2        FD000000 0120A3D7        r0 = Null + 41943;
0x0020A4        FD0000FF 19205B3D        M[0xff5b3d] = r0 + Null;
0x0020A6        FD000001 01207700        r0 = Null + 96000;
0x0020A8        FD0000FF 19205B3E        M[0xff5b3e] = r0 + Null;
0x0020AA        01200320                 r0 = Null + 800;
0x0020AB        19202F72                 M[$tmr_period_con_copy] = r0 + Null;
0x0020AC        FD0000FF 51006629        I0 = Null + -39383;
0x0020AE        E1F013F7                 call $copy_codec_stats_pointers;
0x0020AF        DDF00047                 jump $M.conn_init.exit;

 <$M.conn_init.skip_usb_conn_init>
0x0020B0        21020008                 Null = r0 - 8;
0x0020B1        DD10001B                 if NE jump $M.conn_init.skip_analogue_conn_init;
0x0020B2        01200535                 r0 = Null + 1333;
0x0020B3        FD0000FF 19205B39        M[$sra_struct] = r0 + Null;
0x0020B5        FD000080 01200000        r0 = Null + -8388608;
0x0020B7        FD0000FF 19205B3A        M[0xff5b3a] = r0 + Null;
0x0020B9        012000A5                 r0 = Null + 165;
0x0020BA        FD0000FF 19205B3B        M[0xff5b3b] = r0 + Null;
0x0020BC        012000AD                 r0 = Null + 173;
0x0020BD        FD0000FF 19205B3C        M[0xff5b3c] = r0 + Null;
0x0020BF        FD000000 0120A3D7        r0 = Null + 41943;
0x0020C1        FD0000FF 19205B3D        M[0xff5b3d] = r0 + Null;
0x0020C3        FD000001 01207700        r0 = Null + 96000;
0x0020C5        FD0000FF 19205B3E        M[0xff5b3e] = r0 + Null;
0x0020C7        012005DC                 r0 = Null + 1500;
0x0020C8        19202F72                 M[$tmr_period_con_copy] = r0 + Null;
0x0020C9        51002D90                 I0 = Null + 11664;
0x0020CA        E1F013DB                 call $copy_codec_stats_pointers;
0x0020CB        DDF0002B                 jump $M.conn_init.exit;

 <$M.conn_init.skip_analogue_conn_init>
0x0020CC        012007D0                 r0 = Null + 2000;
0x0020CD        FD0000FF 19205B39        M[$sra_struct] = r0 + Null;
0x0020CF        FD000080 01200000        r0 = Null + -8388608;
0x0020D1        FD0000FF 19205B3A        M[0xff5b3a] = r0 + Null;
0x0020D3        FD0000FF 012067C6        r0 = Null + -38970;
0x0020D5        FD0000FF 19205B3B        M[0xff5b3b] = r0 + Null;
0x0020D7        012000A5                 r0 = Null + 165;
0x0020D8        FD0000FF 19205B3C        M[0xff5b3c] = r0 + Null;
0x0020DA        0900008F                 Null = Null + M[$current_dac_sampling_rate];
0x0020DB        DD100009                 if NE jump $M.conn_init.sra_conf_done;
0x0020DC        FD000000 0120A3D7        r0 = Null + 41943;
0x0020DE        FD0000FF 19205B3D        M[0xff5b3d] = r0 + Null;
0x0020E0        FD000001 01207700        r0 = Null + 96000;
0x0020E2        FD0000FF 19205B3E        M[0xff5b3e] = r0 + Null;

 <$M.conn_init.sra_conf_done>
0x0020E4        012003E8                 r0 = Null + 1000;
0x0020E5        19202F72                 M[$tmr_period_con_copy] = r0 + Null;
0x0020E6        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x0020E8        E402003F                 Null = r0 - 1;
0x0020E9        DD10000C                 if NE jump $M.conn_init.skip_sbc;
0x0020EA        01201F31                 r0 = Null + 7985;
0x0020EB        19200471                 M[$decoder_codec_stream_struc] = r0 + Null;
0x0020EC        0120272F                 r0 = Null + 10031;
0x0020ED        19200472                 M[0x472] = r0 + Null;
0x0020EE        01202685                 r0 = Null + 9861;
0x0020EF        19200473                 M[0x473] = r0 + Null;
0x0020F0        01700474                 r5 = Null + 1140;
0x0020F1        E1F00365                 call $sbcdec.init_static_decoder;
0x0020F2        51002D7F                 I0 = Null + 11647;
0x0020F3        E1F013B2                 call $copy_codec_stats_pointers;
0x0020F4        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x0020F5        DDF01409                 jump $error;

 <$M.conn_init.exit>
0x0020F6        DDF0F14E                 jump $pop_rLink_and_rts;

 <$codec.av_decode>
0x0020F7        F3D00000                 push rLink;
0x0020F8        FD0000FF 1970686C        M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x0020FA        E420002F                 r0 = Null + 1;
0x0020FB        D5270006                 M[r5 + 6] = r0;
0x0020FC        0980FE71                 r6 = Null + M[0xfffe71];
0x0020FD        D1270013                 r0 = M[r5 + 19];
0x0020FE        D5870013                 M[r5 + 19] = r6;
0x0020FF        23820000                 r6 = r6 - r0;
0x002100        20800084                 if NEG r6 = Null - r6;
0x002101        D1270003                 r0 = M[r5 + 3];
0x002102        E1F0F112                 call $cbuffer.get_write_address_and_size;
0x002103        D137000F                 r1 = M[r5 + 15];
0x002104        D527000F                 M[r5 + 15] = r0;
0x002105        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x002107        D1570010                 r3 = M[r5 + 16];
0x002108        0045008F                 r2 = r3 + r6;
0x002109        00410006                 if V r2 = rMAC + Null;
0x00210A        2003002F                 Null = r1 - r0;
0x00210B        00400001                 if NE r2 = Null + Null;
0x00210C        D5470010                 M[r5 + 16] = r2;
0x00210D        D107000D                 Null = M[r5 + 13];
0x00210E        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x00210F        FD000002 210449F0        Null = r2 - 150000;
0x002111        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x002112        FD000002 210549F0        Null = r3 - 150000;
0x002114        DD40002E                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x002115        D1070011                 Null = M[r5 + 17];
0x002116        DD100017                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x002117        E420002F                 r0 = Null + 1;
0x002118        D1370012                 r1 = M[r5 + 18];
0x002119        0004000F                 Null = r2 + Null;
0x00211A        00320000                 if EQ r1 = r0 + Null;
0x00211B        D5370012                 M[r5 + 18] = r1;
0x00211C        DD000007                 if EQ jump $M.codec_av_decode.check_buf_level;
0x00211D        FD000001 21041170        Null = r2 - 70000;
0x00211F        DD400004                 if NEG jump $M.codec_av_decode.check_buf_level;
0x002120        FD000001 21051170        Null = r3 - 70000;
0x002122        DD400008                 if NEG jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x002123        D1270003                 r0 = M[r5 + 3];
0x002124        D1620000                 r4 = M[r0 + 0];
0x002125        E1F0F0C4                 call $cbuffer.calc_amount_data;
0x002126        D147000B                 r2 = M[r5 + 11];
0x002127        97460000                 r2 = r2 * r4 (frac);
0x002128        2002004F                 Null = r0 - r2;
0x002129        DD400031                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x00212A        D5070012                 M[r5 + 18] = Null;
0x00212B        E430002F                 r1 = Null + 1;
0x00212C        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.decoding_proc>
0x00212D        01200000                 r0 = Null + 0;
0x00212E        D5270006                 M[r5 + 6] = r0;
0x00212F        D1270000                 r0 = M[r5 + 0];
0x002130        01770003                 r5 = r5 + 3;
0x002131        E002000F                 call r0;
0x002132        FD0000FF 0970686C        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002134        D1370010                 r1 = M[r5 + 16];
0x002135        D1270006                 r0 = M[r5 + 6];
0x002136        21020000                 Null = r0 - 0;
0x002137        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x002138        00300000                 if EQ r1 = Null + Null;
0x002139        D5370010                 M[r5 + 16] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x00213A        D1270006                 r0 = M[r5 + 6];
0x00213B        E402003F                 Null = r0 - 1;
0x00213C        DD10001E                 if NE jump $M.codec_av_decode.end;
0x00213D        D1370010                 r1 = M[r5 + 16];
0x00213E        D127000A                 r0 = M[r5 + 10];
0x00213F        2003002F                 Null = r1 - r0;
0x002140        DD500019                 if POS jump $M.codec_av_decode.switchto_stall;
0x002141        DDF00019                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x002142        E1F0F0AF                 call $block_interrupts;
0x002143        D1370003                 r1 = M[r5 + 3];
0x002144        D1230002                 r0 = M[r1 + 2];
0x002145        D5230001                 M[r1 + 1] = r0;
0x002146        D527000F                 M[r5 + 15] = r0;
0x002147        D1370004                 r1 = M[r5 + 4];
0x002148        D1230001                 r0 = M[r1 + 1];
0x002149        D5230002                 M[r1 + 2] = r0;
0x00214A        D1370005                 r1 = M[r5 + 5];
0x00214B        D1230001                 r0 = M[r1 + 1];
0x00214C        D5230002                 M[r1 + 2] = r0;
0x00214D        01770003                 r5 = r5 + 3;
0x00214E        D127FFFE                 r0 = M[r5 + -2];
0x00214F        E0020001                 if NE call r0;
0x002150        FD0000FF 0970686C        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002152        D127000E                 r0 = M[r5 + 14];
0x002153        E0020001                 if NE call r0;
0x002154        FD0000FF 0970686C        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x002156        E420002F                 r0 = Null + 1;
0x002157        19202FCD                 M[$master_reset_needed] = r0 + Null;
0x002158        E1F0F06D                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x002159        D5070011                 M[r5 + 17] = Null;

 <$M.codec_av_decode.end>
0x00215A        DDF0F0EA                 jump $pop_rLink_and_rts;

 <$downsample_sub_to_1k2>
0x00215B        F3D00000                 push rLink;
0x00215C        FD0000FF 012067E4        r0 = Null + -38940;
0x00215E        E1F0F08B                 call $cbuffer.calc_amount_data;
0x00215F        00C2000F                 r10 = r0 + Null;
0x002160        21020028                 Null = r0 - 40;
0x002161        DD40F0E3                 if NEG jump $pop_rLink_and_rts;
0x002162        E1F0045E                 call $calc_sub_sra_ratio;
0x002163        FD0000FF 012067E4        r0 = Null + -38940;
0x002165        E1F0F0AA                 call $cbuffer.get_read_address_and_size;
0x002166        5000002F                 I0 = Null + r0;
0x002167        50C0003F                 L0 = Null + r1;
0x002168        01202F4A                 r0 = Null + 12106;
0x002169        E1F0F0AB                 call $cbuffer.get_write_address_and_size;
0x00216A        5040002F                 I4 = Null + r0;
0x00216B        50E0003F                 L4 = Null + r1;
0x00216C        51800028                 M0 = Null + 40;
0x00216D        01300000                 r1 = Null + 0;
0x00216E        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x002170        FD000000 2102AC44        Null = r0 - 44100;
0x002172        DD100004                 if NE jump $M.downsample_sub_to_1k2.dont_modify;
0x002173        51800024                 M0 = Null + 36;
0x002174        FD000060 01300000        r1 = Null + 6291456;

 <$M.downsample_sub_to_1k2.dont_modify>
0x002176        09202F84                 r0 = Null + M[$sub_link_port];
0x002177        FD000094 2102600F        Null = r0 - -7053297;
0x002179        DD000013                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x00217A        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x00217C        21020008                 Null = r0 - 8;
0x00217D        DD00000F                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x00217E        4440008F                 r2 = Null + M0;
0x00217F        FD0000FF 29206833        r0 = Null - M[$sub_sra_ratio];
0x002181        8DE40200                 rMAC12 = r2 LSHIFT 0;
0x002182        0053003F                 r3 = r1 + r1;
0x002183        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x002184        AC12004F                 rMAC = rMAC + r0 * r2 (SS);
0x002185        91110017                 rMAC = rMAC ASHIFT 23 (56bit);
0x002186        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x002187        91110069                 rMAC = rMAC ASHIFT -23 (56bit);
0x002188        8D410000                 r2 = rMAC LSHIFT 0;
0x002189        5080004F                 M0 = Null + r2;
0x00218A        8D310018                 r1 = rMAC LSHIFT 24;
0x00218B        8D33007F                 r1 = r1 LSHIFT -1;

 <$M.downsample_sub_to_1k2.downsample>
0x00218C        09602F92                 r4 = Null + M[$M.downsample_sub_to_1k2.mute_index];
0x00218D        09702F91                 r5 = Null + M[$M.downsample_sub_to_1k2.mute_direction];
0x00218E        FD0000FF 09406831        r2 = Null + M[$M.downsample_sub_to_1k2.residual];

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop>
0x002190        4480008F                 r6 = Null + M0;
0x002191        0054003F                 r3 = r2 + r1;
0x002192        E488002A                 if GE r6 = r6 + 1;
0x002193        23C80000                 r10 = r10 - r6;
0x002194        DD400013                 if NEG jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit;
0x002195        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x002196        03430000                 r2 = r2 + r1;
0x002197        DD500004                 if POS jump $M.downsample_sub_to_1k2.no_extra_read;
0x002198        03005100                 Null = Null + Null, r3 = M[I0,1];
0x002199        FD00007F 8144FFFF        r2 = r2 AND 0x7fffff;

 <$M.downsample_sub_to_1k2.no_extra_read>
0x00219B        03670000                 r4 = r4 + r5;
0x00219C        00600004                 if NEG r4 = Null + Null;
0x00219D        01500007                 r3 = Null + 7;
0x00219E        2005006F                 Null = r3 - r4;
0x00219F        00650004                 if NEG r4 = r3 + Null;
0x0021A0        01502E4C                 r3 = Null + 11852;
0x0021A1        0056005F                 r3 = r4 + r3;
0x0021A2        D3500000                 r3 = M[r3 + Null];
0x0021A3        97250000                 r0 = r0 * r3 (frac);
0x0021A4        2020002F                 r0 = Null - r0;
0x0021A5        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0021A6        DDF0FFEA                 jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop;

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit>
0x0021A7        FD0000FF 19406831        M[$M.downsample_sub_to_1k2.residual] = r2 + Null;
0x0021A9        19602F92                 M[$M.downsample_sub_to_1k2.mute_index] = r4 + Null;
0x0021AA        FD0000FF 012067E4        r0 = Null + -38940;
0x0021AC        4430000F                 r1 = Null + I0;
0x0021AD        E1F0F071                 call $cbuffer.set_read_address;
0x0021AE        51C00000                 L0 = Null + 0;
0x0021AF        01202F4A                 r0 = Null + 12106;
0x0021B0        4430004F                 r1 = Null + I4;
0x0021B1        E1F0F071                 call $cbuffer.set_write_address;
0x0021B2        51E00000                 L4 = Null + 0;
0x0021B3        DDF0F091                 jump $pop_rLink_and_rts;

 <$wall_clock_message_handler>
0x0021B4        F3D00000                 push rLink;
0x0021B5        D1250004                 r0 = M[r3 + 4];
0x0021B6        FD0000FF 19206826        M[$wall_clock_msw] = r0 + Null;
0x0021B8        D1250005                 r0 = M[r3 + 5];
0x0021B9        19202F87                 M[$wall_clock_lsw] = r0 + Null;
0x0021BA        D1250006                 r0 = M[r3 + 6];
0x0021BB        D1350007                 r1 = M[r3 + 7];
0x0021BC        8D220010                 r0 = r0 LSHIFT 16;
0x0021BD        8133FFFF                 r1 = r1 AND 0xffff;
0x0021BE        03320000                 r1 = r1 + r0;
0x0021BF        FD0000FF 19306827        M[$wall_clock_time] = r1 + Null;
0x0021C1        D1350004                 r1 = M[r3 + 4];
0x0021C2        FD0000FF 19306826        M[$wall_clock_msw] = r1 + Null;
0x0021C4        D1450005                 r2 = M[r3 + 5];
0x0021C5        19402F87                 M[$wall_clock_lsw] = r2 + Null;
0x0021C6        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x0021C7        811100FF                 rMAC = rMAC AND 0xff;
0x0021C8        991104E2                 rMAC = rMAC * 1250 (int);
0x0021C9        8D330010                 r1 = r1 LSHIFT 16;
0x0021CA        8144FFFF                 r2 = r2 AND 0xffff;
0x0021CB        03430000                 r2 = r2 + r1;
0x0021CC        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x0021CE        8D410016                 r2 = rMAC LSHIFT 22;
0x0021CF        D1650007                 r4 = M[r3 + 7];
0x0021D0        D1550006                 r3 = M[r3 + 6];
0x0021D1        8D550010                 r3 = r3 LSHIFT 16;
0x0021D2        8166FFFF                 r4 = r4 AND 0xffff;
0x0021D3        03650000                 r4 = r4 + r3;
0x0021D4        23460000                 r2 = r2 - r4;
0x0021D5        FD0000FF 19406832        M[$wall_clock_adjustment] = r2 + Null;
0x0021D7        09002F88                 Null = Null + M[$sco_param_tesco];
0x0021D8        DD100035                 if NE jump $M.wall_clock_message_handler.done;
0x0021D9        E1F0F018                 call $block_interrupts;
0x0021DA        092000AF                 r0 = Null + M[0xaf];
0x0021DB        192000AE                 M[0xae] = r0 + Null;
0x0021DC        FD0000FF 092067CE        r0 = Null + M[0xff67ce];
0x0021DE        FD0000FF 192067CD        M[0xff67cd] = r0 + Null;
0x0021E0        09200097                 r0 = Null + M[0x97];
0x0021E1        19200096                 M[0x96] = r0 + Null;
0x0021E2        0920009F                 r0 = Null + M[0x9f];
0x0021E3        1920009E                 M[0x9e] = r0 + Null;
0x0021E4        FD0000FF 092067E6        r0 = Null + M[0xff67e6];
0x0021E6        FD0000FF 192067E5        M[0xff67e5] = r0 + Null;
0x0021E8        09202F4C                 r0 = Null + M[0x2f4c];
0x0021E9        19202F4B                 M[0x2f4b] = r0 + Null;
0x0021EA        09202F49                 r0 = Null + M[0x2f49];
0x0021EB        19202F48                 M[0x2f48] = r0 + Null;
0x0021EC        E1F0EFD9                 call $interrupt.unblock;
0x0021ED        09302F84                 r1 = Null + M[$sub_link_port];
0x0021EE        FD000094 2103600F        Null = r1 - -7053297;
0x0021F0        DD000018                 if EQ jump $M.wall_clock_message_handler.uses_l2cap;
0x0021F1        FD000000 01408014        r2 = Null + 32788;
0x0021F3        09502F84                 r3 = Null + M[$sub_link_port];
0x0021F4        8155001F                 r3 = r3 AND 0x1f;
0x0021F5        01600000                 r4 = Null + 0;
0x0021F6        01700000                 r5 = Null + 0;
0x0021F7        01800000                 r6 = Null + 0;
0x0021F8        E1F0F02E                 call $message.send;
0x0021F9        0120028A                 r0 = Null + 650;
0x0021FA        91320001                 r1 = r0 ASHIFT 1;
0x0021FB        09402F88                 r2 = Null + M[$sco_param_tesco];
0x0021FC        21040018                 Null = r2 - 24;
0x0021FD        00230000                 if EQ r0 = r1 + Null;
0x0021FE        19202EE4                 M[0x2ee4] = r0 + Null;
0x0021FF        FD0000FF 19206771        M[0xff6771] = r0 + Null;
0x002201        19202EBD                 M[$M.main.samples_latency_measure] = r0 + Null;
0x002202        01A02EE1                 r8 = Null + 12001;
0x002203        E1F012C7                 call $audio_proc.delay.initialize;
0x002204        FD0000FF 01A0676E        r8 = Null + -39058;
0x002206        E1F012C4                 call $audio_proc.delay.initialize;
0x002207        DDF00006                 jump $M.wall_clock_message_handler.done;

 <$M.wall_clock_message_handler.uses_l2cap>
0x002208        E420002F                 r0 = Null + 1;
0x002209        19202F88                 M[$sco_param_tesco] = r0 + Null;
0x00220A        01200032                 r0 = Null + 50;
0x00220B        FD0000FF 19206829        M[$sco_param_to_air_size] = r0 + Null;

 <$M.wall_clock_message_handler.done>
0x00220D        DDF0F037                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x00220E        F3D00000                 push rLink;
0x00220F        D13B0021                 r1 = M[r9 + 33];
0x002210        5080003F                 M0 = Null + r1;
0x002211        D14B001F                 r2 = M[r9 + 31];
0x002212        9854003F                 r3 = r2 * r1 (int);
0x002213        E455003F                 r3 = r3 - 1;
0x002214        9823007F                 r0 = r1 * r5 (int);
0x002215        E404003F                 Null = r2 - 1;
0x002216        00200000                 if EQ r0 = Null + Null;
0x002217        D16B0014                 r4 = M[r9 + 20];
0x002218        5022006F                 I2 = r0 + r4;
0x002219        012B003C                 r0 = r9 + 60;
0x00221A        D027002F                 r0 = M[r5 + r0];
0x00221B        5000002F                 I0 = Null + r0;
0x00221C        D16B001D                 r4 = M[r9 + 29];
0x00221D        69080004                 Null = M0 - 4;
0x00221E        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x00221F        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x002220        D12B0015                 r0 = M[r9 + 21];
0x002221        5040002F                 I4 = Null + r0;
0x002222        D12B002E                 r0 = M[r9 + 46];
0x002223        5050002F                 I5 = Null + r0;
0x002224        51900001                 M1 = Null + 1;
0x002225        51A0FFF0                 M2 = Null + -16;
0x002226        51B0FFF9                 M3 = Null + -7;
0x002227        4CC8008F                 r10 = M0 + M0;
0x002228        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x002229        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x00222A        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00222B        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00222C        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00222D        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00222E        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00222F        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002230        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x002231        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x002232        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x002233        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x002234        5B250000                 I2 = I2 + r3;
0x002235        51900018                 M1 = Null + 24;
0x002236        51A0FFB9                 M2 = Null + -71;
0x002237        51B0FF69                 M3 = Null + -151;
0x002238        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x002239        5190FFD0                 M1 = Null + -48;
0x00223A        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x00223B        E466003F                 r4 = r4 - 1;
0x00223C        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x00223D        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x00223E        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x00223F        D12B0016                 r0 = M[r9 + 22];
0x002240        5040002F                 I4 = Null + r0;
0x002241        D12B002F                 r0 = M[r9 + 47];
0x002242        5050002F                 I5 = Null + r0;
0x002243        51900001                 M1 = Null + 1;
0x002244        51A0FFF8                 M2 = Null + -8;
0x002245        51B0FFFD                 M3 = Null + -3;
0x002246        4CC8008F                 r10 = M0 + M0;
0x002247        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x002248        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x002249        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00224A        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00224B        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x00224C        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00224D        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x00224E        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x00224F        5B250000                 I2 = I2 + r3;
0x002250        5190000C                 M1 = Null + 12;
0x002251        51A0FFDD                 M2 = Null + -35;
0x002252        51B0FFB5                 M3 = Null + -75;
0x002253        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x002254        5190FFE8                 M1 = Null + -24;
0x002255        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x002256        E466003F                 r4 = r4 - 1;
0x002257        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x002258        4420000F                 r0 = Null + I0;
0x002259        016B003C                 r4 = r9 + 60;
0x00225A        D427006F                 M[r5 + r4] = r0;
0x00225B        51C00000                 L0 = Null + 0;
0x00225C        DDF0EFE8                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x00225D        44C0008F                 r10 = Null + M0;
0x00225E        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x00225F        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x002260        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x002261        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x002262        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x002263        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x002264        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x002265        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x002266        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x002267        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x002268        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x002269        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00226A        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x00226B        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x00226C        DC0D000F                 rts;

 <$sbcdec.read_frame_header>
0x00226D        F3D00000                 push rLink;
0x00226E        D50B0036                 M[r9 + 54] = Null;
0x00226F        E1F002D8                 call $sbcdec.get1byte;
0x002270        0120000F                 r0 = Null + 15;
0x002271        D52B0024                 M[r9 + 36] = r0;
0x002272        E1F002D9                 call $sbcdec.get2bits;
0x002273        E1F00484                 call $sbc.crc_calc;
0x002274        D53B001C                 M[r9 + 28] = r1;
0x002275        E1F002D6                 call $sbcdec.get2bits;
0x002276        E1F00481                 call $sbc.crc_calc;
0x002277        99330004                 r1 = r1 * 4 (int);
0x002278        01330004                 r1 = r1 + 4;
0x002279        D53B001D                 M[r9 + 29] = r1;
0x00227A        E1F002D1                 call $sbcdec.get2bits;
0x00227B        E1F0047C                 call $sbc.crc_calc;
0x00227C        E420002F                 r0 = Null + 1;
0x00227D        D53B001E                 M[r9 + 30] = r1;
0x00227E        00220021                 if NE r0 = r0 + r0;
0x00227F        D52B001F                 M[r9 + 31] = r0;
0x002280        E1F002CD                 call $sbcdec.get1bit;
0x002281        E1F00476                 call $sbc.crc_calc;
0x002282        D53B0020                 M[r9 + 32] = r1;
0x002283        E1F002CA                 call $sbcdec.get1bit;
0x002284        E1F00473                 call $sbc.crc_calc;
0x002285        99330004                 r1 = r1 * 4 (int);
0x002286        01330004                 r1 = r1 + 4;
0x002287        D12B0021                 r0 = M[r9 + 33];
0x002288        2003002F                 Null = r1 - r0;
0x002289        E11003FC                 if NE call $sbcdec.silence_decoder;
0x00228A        D53B0021                 M[r9 + 33] = r1;
0x00228B        E1F002BC                 call $sbcdec.get1byte;
0x00228C        E1F0046B                 call $sbc.crc_calc;
0x00228D        D53B0022                 M[r9 + 34] = r1;
0x00228E        D14B0021                 r2 = M[r9 + 33];
0x00228F        99440010                 r2 = r2 * 16 (int);
0x002290        D12B001E                 r0 = M[r9 + 30];
0x002291        21020002                 Null = r0 - 2;
0x002292        00440045                 if POS r2 = r2 + r2;
0x002293        212400FA                 r0 = r2 - 250;
0x002294        2044002C                 if GT r2 = r2 - r0;
0x002295        2004003F                 Null = r2 - r1;
0x002296        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x002297        21030002                 Null = r1 - 2;
0x002298        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x002299        E1F002AE                 call $sbcdec.get1byte;
0x00229A        D53B0023                 M[r9 + 35] = r1;
0x00229B        D13B001E                 r1 = M[r9 + 30];
0x00229C        21030003                 Null = r1 - 3;
0x00229D        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x00229E        D1AB0021                 r8 = M[r9 + 33];
0x00229F        E4AA003F                 r8 = r8 - 1;
0x0022A0        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x0022A1        E1F002AC                 call $sbcdec.get1bit;
0x0022A2        E1F00455                 call $sbc.crc_calc;
0x0022A3        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0022A4        E4AA003F                 r8 = r8 - 1;
0x0022A5        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x0022A6        01200000                 r0 = Null + 0;
0x0022A7        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x0022A8        E1F002A5                 call $sbcdec.get1bit;
0x0022A9        E1F0044E                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x0022AA        E1F003AC                 call $sbc.calc_frame_length;
0x0022AB        D52B0039                 M[r9 + 57] = r0;
0x0022AC        DDF0EF98                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x0022AD        E420002F                 r0 = Null + 1;
0x0022AE        D52B0036                 M[r9 + 54] = r0;
0x0022AF        DDF0EF95                 jump $pop_rLink_and_rts;

 <$calc_time_to_play>
0x0022B0        F3D00000                 push rLink;
0x0022B1        E1F0EF40                 call $block_interrupts;
0x0022B2        01800000                 r6 = Null + 0;

 <$M.calc_time_to_play.proc_loop>
0x0022B3        D029000F                 r0 = M[r7 + Null];
0x0022B4        DD00000A                 if EQ jump $M.calc_time_to_play.done_counting_cbuffer_data;
0x0022B5        E1F0EF34                 call $cbuffer.calc_amount_data;
0x0022B6        D1390001                 r1 = M[r7 + 1];
0x0022B7        D3300000                 r1 = M[r1 + Null];
0x0022B8        CC12003F                 rMAC = r0 * r1 (SS);
0x0022B9        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x0022BA        8D310000                 r1 = rMAC LSHIFT 0;
0x0022BB        03830000                 r6 = r6 + r1;
0x0022BC        01990002                 r7 = r7 + 2;
0x0022BD        DDF0FFF6                 jump $M.calc_time_to_play.proc_loop;

 <$M.calc_time_to_play.done_counting_cbuffer_data>
0x0022BE        0030000F                 r1 = Null + Null;
0x0022BF        0008000F                 Null = r6 + Null;
0x0022C0        DD100012                 if NE jump $M.calc_time_to_play.calculate_num_samples_in_port;
0x0022C1        D12A0000                 r0 = M[r8 + 0];
0x0022C2        D3200000                 r0 = M[r0 + Null];
0x0022C3        E1F0EF16                 call $cbuffer.calc_amount_space;
0x0022C4        0012000F                 rMAC = r0 + Null;
0x0022C5        D12A0001                 r0 = M[r8 + 1];
0x0022C6        D3200000                 r0 = M[r0 + Null];
0x0022C7        E1F0EF12                 call $cbuffer.calc_amount_space;
0x0022C8        2001002F                 Null = rMAC - r0;
0x0022C9        00120005                 if POS rMAC = r0 + Null;
0x0022CA        D12A0000                 r0 = M[r8 + 0];
0x0022CB        00C1000F                 r10 = rMAC + Null;
0x0022CC        D052000F                 r3 = M[r0 + Null];
0x0022CD        E1F003E3                 call $audio_insert_silence;
0x0022CE        D12A0001                 r0 = M[r8 + 1];
0x0022CF        00C1000F                 r10 = rMAC + Null;
0x0022D0        D052000F                 r3 = M[r0 + Null];
0x0022D1        E1F003DF                 call $audio_insert_silence;

 <$M.calc_time_to_play.calculate_num_samples_in_port>
0x0022D2        D12A0000                 r0 = M[r8 + 0];
0x0022D3        D3200000                 r0 = M[r0 + Null];
0x0022D4        E1F0EF05                 call $cbuffer.calc_amount_space;
0x0022D5        E422002F                 r0 = r0 + 1;
0x0022D6        9144007F                 r2 = r2 ASHIFT -1;
0x0022D7        2024002F                 r0 = r2 - r0;
0x0022D8        D13A0002                 r1 = M[r8 + 2];
0x0022D9        D3300000                 r1 = M[r1 + Null];
0x0022DA        CC12003F                 rMAC = r0 * r1 (SS);
0x0022DB        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x0022DC        8D310000                 r1 = rMAC LSHIFT 0;
0x0022DD        F3300000                 push r1;
0x0022DE        D12A0003                 r0 = M[r8 + 3];
0x0022DF        D13A0004                 r1 = M[r8 + 4];
0x0022E0        D3300000                 r1 = M[r1 + Null];
0x0022E1        CC12003F                 rMAC = r0 * r1 (SS);
0x0022E2        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x0022E3        8D310000                 r1 = rMAC LSHIFT 0;
0x0022E4        03830000                 r6 = r6 + r1;
0x0022E5        FD0000FF 09206836        r0 = Null + M[$synchronized_rate];
0x0022E7        9428002F                 r0 = r6 * r0 (frac);
0x0022E8        0082008F                 r6 = r0 + r6;
0x0022E9        F3340000                 pop r1;
0x0022EA        0048003F                 r2 = r6 + r1;
0x0022EB        FD0000FF 09306832        r1 = Null + M[$wall_clock_adjustment];
0x0022ED        0933FE71                 r1 = r1 + M[0xfffe71];
0x0022EE        0083004F                 r6 = r1 + r2;
0x0022EF        D58A0006                 M[r8 + 6] = r6;

 <$M.calc_time_to_play.done>
0x0022F0        E1F0EED5                 call $interrupt.unblock;
0x0022F1        09002F97                 Null = Null + M[$warp_timer_id];
0x0022F2        DD100006                 if NE jump $M.calc_time_to_play.do_not_set_timer;
0x0022F3        FD0000FF 01306772        r1 = Null + -39054;
0x0022F5        01502720                 r3 = Null + 10016;
0x0022F6        E1F0EF44                 call $timer.schedule_event_in;
0x0022F7        19502F97                 M[$warp_timer_id] = r3 + Null;

 <$M.calc_time_to_play.do_not_set_timer>
0x0022F8        DDF0EF4C                 jump $pop_rLink_and_rts;

 <$vee.accelerate.step_count>
0x0022F9        F3D00000                 push rLink;
0x0022FA        01500000                 r3 = Null + 0;
0x0022FB        09302FAA                 r1 = Null + M[$vee.accelerate.acc_axis_x];
0x0022FC        9B330000                 r1 = r1 * r1 (int);
0x0022FD        03530000                 r3 = r3 + r1;
0x0022FE        FD0000FF 0930684A        r1 = Null + M[$vee.accelerate.acc_axis_y];
0x002300        9B330000                 r1 = r1 * r1 (int);
0x002301        03530000                 r3 = r3 + r1;
0x002302        FD0000FF 09306854        r1 = Null + M[$vee.accelerate.step_count.p_value];
0x002304        09402FB5                 r2 = Null + M[$vee.accelerate.step_count.index_curr];
0x002305        01200000                 r0 = Null + 0;
0x002306        09702FB6                 r5 = Null + M[$vee.accelerate.step_count.index_max];
0x002307        2005003F                 Null = r3 - r1;
0x002308        DD500021                 if POS jump $vee.accelerate.step_count.check_max_value;

 <$vee.accelerate.step_count.check_min_value>
0x002309        FD0000FF 09206855        r0 = Null + M[$vee.accelerate.step_count.status];
0x00230B        0002000F                 Null = r0 + Null;
0x00230C        DD100031                 if NE jump $vee.accelerate.step_count.continue_check;
0x00230D        E420002F                 r0 = Null + 1;
0x00230E        FD0000FF 19206855        M[$vee.accelerate.step_count.status] = r0 + Null;
0x002310        2103005A                 Null = r1 - 90;
0x002311        DD40002C                 if NEG jump $vee.accelerate.step_count.continue_check;
0x002312        2024007F                 r0 = r2 - r5;
0x002313        21020003                 Null = r0 - 3;
0x002314        DD400029                 if NEG jump $vee.accelerate.step_count.continue_check;
0x002315        09202FB7                 r0 = Null + M[$vee.accelerate.step_count.min_flag];
0x002316        0002000F                 Null = r0 + Null;
0x002317        DD000026                 if EQ jump $vee.accelerate.step_count.continue_check;
0x002318        FD0000FF 09206857        r0 = Null + M[$vee.accelerate.step_count.min_value];
0x00231A        2023002F                 r0 = r1 - r0;
0x00231B        21020028                 Null = r0 - 40;
0x00231C        DD400021                 if NEG jump $vee.accelerate.step_count.continue_check;
0x00231D        E1F0EED4                 call $block_interrupts;
0x00231E        09202FA5                 r0 = Null + M[$vee.accelerate.step_value];
0x00231F        E422002F                 r0 = r0 + 1;
0x002320        19202FA5                 M[$vee.accelerate.step_value] = r0 + Null;
0x002321        E1F0EEA4                 call $interrupt.unblock;
0x002322        01200000                 r0 = Null + 0;
0x002323        19202FB7                 M[$vee.accelerate.step_count.min_flag] = r0 + Null;
0x002324        E420002F                 r0 = Null + 1;
0x002325        FD0000FF 19206856        M[$vee.accelerate.step_count.max_flag] = r0 + Null;
0x002327        19402FB6                 M[$vee.accelerate.step_count.index_max] = r2 + Null;
0x002328        DDF00015                 jump $vee.accelerate.step_count.continue_check;

 <$vee.accelerate.step_count.check_max_value>
0x002329        FD0000FF 09206855        r0 = Null + M[$vee.accelerate.step_count.status];
0x00232B        0002000F                 Null = r0 + Null;
0x00232C        DD000011                 if EQ jump $vee.accelerate.step_count.continue_check;
0x00232D        01200000                 r0 = Null + 0;
0x00232E        FD0000FF 19206855        M[$vee.accelerate.step_count.status] = r0 + Null;
0x002330        21030046                 Null = r1 - 70;
0x002331        DD50000C                 if POS jump $vee.accelerate.step_count.continue_check;
0x002332        FD0000FF 09206856        r0 = Null + M[$vee.accelerate.step_count.max_flag];
0x002334        0002000F                 Null = r0 + Null;
0x002335        DD000008                 if EQ jump $vee.accelerate.step_count.continue_check;
0x002336        01200000                 r0 = Null + 0;
0x002337        FD0000FF 19206856        M[$vee.accelerate.step_count.max_flag] = r0 + Null;
0x002339        E420002F                 r0 = Null + 1;
0x00233A        19202FB7                 M[$vee.accelerate.step_count.min_flag] = r0 + Null;
0x00233B        FD0000FF 19306857        M[$vee.accelerate.step_count.min_value] = r1 + Null;

 <$vee.accelerate.step_count.continue_check>
0x00233D        FD0000FF 19506854        M[$vee.accelerate.step_count.p_value] = r3 + Null;
0x00233F        09502FB5                 r3 = Null + M[$vee.accelerate.step_count.index_curr];
0x002340        E455002F                 r3 = r3 + 1;
0x002341        19502FB5                 M[$vee.accelerate.step_count.index_curr] = r3 + Null;
0x002342        DDF0EF02                 jump $pop_rLink_and_rts;

 <$sco_schedule_to_air>
0x002343        F3D00000                 push rLink;
0x002344        FD0000FF 09306826        r1 = Null + M[$wall_clock_msw];
0x002346        09402F87                 r2 = Null + M[$wall_clock_lsw];
0x002347        8D330010                 r1 = r1 LSHIFT 16;
0x002348        8144FFFF                 r2 = r2 AND 0xffff;
0x002349        03430000                 r2 = r2 + r1;
0x00234A        FD0000FF 09306826        r1 = Null + M[$wall_clock_msw];
0x00234C        8D330078                 r1 = r1 LSHIFT -8;
0x00234D        FD0000FF 09506828        r3 = Null + M[$sco_param_clock_msw];
0x00234F        09602F89                 r4 = Null + M[$sco_param_clock_lsw];

 <$M.sco_schedule_to_air.sco_schedule_next_instant>
0x002350        2086004F                 r6 = r4 - r2;
0x002351        2475003F                 r5 = r3 - r1 - Borrow;
0x002352        99780271                 r5 = r6 * 625 (int);
0x002353        9177007F                 r5 = r5 ASHIFT -1;
0x002354        FD0000FF 09206827        r0 = Null + M[$wall_clock_time];
0x002356        0042007F                 r2 = r0 + r5;
0x002357        FD0000FF 2944682A        r2 = r2 - M[$sco_param_to_air_time];
0x002359        0054000F                 r3 = r2 + Null;
0x00235A        29442F96                 r2 = r2 - M[$subwoofer.sco_offset];
0x00235B        2904FE71                 Null = r2 - M[0xfffe71];
0x00235C        DD500007                 if POS jump $M.sco_schedule_to_air.continue;
0x00235D        09302F88                 r1 = Null + M[$sco_param_tesco];
0x00235E        99330271                 r1 = r1 * 625 (int);

 <$M.sco_schedule_to_air.advance>
0x00235F        03430000                 r2 = r2 + r1;
0x002360        03530000                 r3 = r3 + r1;
0x002361        2904FE71                 Null = r2 - M[0xfffe71];
0x002362        DD40FFFD                 if NEG jump $M.sco_schedule_to_air.advance;

 <$M.sco_schedule_to_air.continue>
0x002363        19502F93                 M[$esco_write_deadline] = r3 + Null;
0x002364        F3400000                 push r2;
0x002365        FD0000FF 0940682B        r2 = Null + M[$sco_timer_id];
0x002367        E1F0ED03                 call $timer.cancel_event;
0x002368        F3440000                 pop r2;
0x002369        01302EF1                 r1 = Null + 12017;
0x00236A        015026E1                 r3 = Null + 9953;
0x00236B        E1F0EACC                 call $timer.schedule_event_at;
0x00236C        FD0000FF 1950682B        M[$sco_timer_id] = r3 + Null;
0x00236E        FD0000FF 012067E4        r0 = Null + -38940;
0x002370        E1F0EEA4                 call $cbuffer.get_write_address_and_size;
0x002371        5000002F                 I0 = Null + r0;
0x002372        50C0003F                 L0 = Null + r1;
0x002373        5180FF9C                 M0 = Null + -100;
0x002374        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x002375        FD0000FF 012067E4        r0 = Null + -38940;
0x002377        4430000F                 r1 = Null + I0;
0x002378        E1F0EEA6                 call $cbuffer.set_read_address;
0x002379        51C00000                 L0 = Null + 0;
0x00237A        DDF0EECA                 jump $pop_rLink_and_rts;

 <$run_usb_state_mc>
0x00237B        F3D00000                 push rLink;
0x00237C        FD000080 01200000        r0 = Null + -8388608;
0x00237E        E1F0EE6B                 call $cbuffer.calc_amount_data;
0x00237F        FD0000FF 0950681F        r3 = Null + M[$usb_state];
0x002381        FD0000FF D13567DB        r1 = M[r3 + -38949];
0x002383        E003000F                 call r1;
0x002384        FD0000FF 1950681F        M[$usb_state] = r3 + Null;
0x002386        DDF0EEBE                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.paused_fn>
0x002387        F3D00000                 push rLink;
0x002388        FD000080 01200000        r0 = Null + -8388608;
0x00238A        E1F0ECF3                 call $cbuffer.empty_buffer;
0x00238B        E1F00FF7                 call $master_app_reset;
0x00238C        E450002F                 r3 = Null + 1;
0x00238D        E420002F                 r0 = Null + 1;
0x00238E        FD0000FF 19206816        M[$M.jitter_buffering.is_buffering] = r0 + Null;
0x002390        DDF0EEB4                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.waiting_to_start_fn>
0x002391        F3D00000                 push rLink;
0x002392        0002000F                 Null = r0 + Null;
0x002393        DD00000D                 if EQ jump $M.usb_state_mc.still_waiting_to_start;
0x002394        19002F80                 M[$usb_pause_period_count] = Null + Null;
0x002395        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x002397        09302F81                 r1 = Null + M[$usb_pause_silence_insertion_time];
0x002398        9472003F                 r5 = r0 * r1 (frac);
0x002399        016000A5                 r4 = Null + 165;
0x00239A        E1F0028A                 call $audio_prime_silence;
0x00239B        FD0000FF 016067C9        r4 = Null + -38967;
0x00239D        E1F00287                 call $audio_prime_silence;
0x00239E        E009000F                 call r7;
0x00239F        01500002                 r3 = Null + 2;

 <$M.usb_state_mc.still_waiting_to_start>
0x0023A0        DDF0EEA4                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.running_fn>
0x0023A1        F3D00000                 push rLink;
0x0023A2        01700000                 r5 = Null + 0;
0x0023A3        09602F80                 r4 = Null + M[$usb_pause_period_count];
0x0023A4        E466002F                 r4 = r4 + 1;
0x0023A5        0002000F                 Null = r0 + Null;
0x0023A6        00600001                 if NE r4 = Null + Null;
0x0023A7        19602F80                 M[$usb_pause_period_count] = r4 + Null;
0x0023A8        FD0000FF 29066820        Null = r4 - M[$usb_pause_period_thresh];
0x0023AA        00570005                 if POS r3 = r5 + Null;
0x0023AB        F3500000                 push r3;
0x0023AC        E009000F                 call r7;
0x0023AD        F3540000                 pop r3;
0x0023AE        DDF0EE96                 jump $pop_rLink_and_rts;

 <$jitter_buffering>
0x0023AF        F3D00000                 push rLink;
0x0023B0        FD0000FF 09006816        Null = Null + M[$M.jitter_buffering.is_buffering];
0x0023B2        DD000029                 if EQ jump $M.jitter_buffering.done;
0x0023B3        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x0023B5        21020005                 Null = r0 - 5;
0x0023B6        DD100023                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x0023B7        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x0023B9        FD000000 2102BB80        Null = r0 - 48000;
0x0023BB        DD100003                 if NE jump $M.jitter_buffering.check_fs_44100;
0x0023BC        01600000                 r4 = Null + 0;
0x0023BD        DDF00015                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_44100>
0x0023BE        FD000000 2102AC44        Null = r0 - 44100;
0x0023C0        DD100003                 if NE jump $M.jitter_buffering.check_fs_32000;
0x0023C1        01600084                 r4 = Null + 132;
0x0023C2        DDF00010                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_32000>
0x0023C3        21027D00                 Null = r0 - 32000;
0x0023C4        DD100003                 if NE jump $M.jitter_buffering.check_fs_22050;
0x0023C5        01600000                 r4 = Null + 0;
0x0023C6        DDF0000C                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_22050>
0x0023C7        21025622                 Null = r0 - 22050;
0x0023C8        DD100003                 if NE jump $M.jitter_buffering.check_fs_16000;
0x0023C9        01600084                 r4 = Null + 132;
0x0023CA        DDF00008                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_16000>
0x0023CB        21023E80                 Null = r0 - 16000;
0x0023CC        DD100003                 if NE jump $M.jitter_buffering.check_fs_8000;
0x0023CD        01600000                 r4 = Null + 0;
0x0023CE        DDF00004                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_8000>
0x0023CF        21021F40                 Null = r0 - 8000;
0x0023D0        DD100009                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x0023D1        01600000                 r4 = Null + 0;

 <$M.jitter_buffering.buffering_state>
0x0023D2        FD0000FF 0950681A        r3 = Null + M[$music_example.frame_processing_size];
0x0023D4        03560000                 r3 = r3 + r4;
0x0023D5        012000A5                 r0 = Null + 165;
0x0023D6        E1F0EE13                 call $cbuffer.calc_amount_data;
0x0023D7        2002005F                 Null = r0 - r3;
0x0023D8        DD400003                 if NEG jump $M.jitter_buffering.done;

 <$M.jitter_buffering.clear_buffering_flag>
0x0023D9        FD0000FF 19006816        M[$M.jitter_buffering.is_buffering] = Null + Null;

 <$M.jitter_buffering.done>
0x0023DB        DDF0EE69                 jump $pop_rLink_and_rts;

 <$vee.accelerate.safe_driver>
0x0023DC        F3D00000                 push rLink;
0x0023DD        DDF0EE67                 jump $pop_rLink_and_rts;
0x0023DE        01300000                 r1 = Null + 0;
0x0023DF        01400000                 r2 = Null + 0;
0x0023E0        01500000                 r3 = Null + 0;
0x0023E1        01600000                 r4 = Null + 0;
0x0023E2        01700000                 r5 = Null + 0;
0x0023E3        09302FAA                 r1 = Null + M[$vee.accelerate.acc_axis_x];
0x0023E4        9B330000                 r1 = r1 * r1 (int);
0x0023E5        FD0000FF 0940684A        r2 = Null + M[$vee.accelerate.acc_axis_y];
0x0023E7        9B440000                 r2 = r2 * r2 (int);
0x0023E8        09502FAB                 r3 = Null + M[$vee.accelerate.acc_axis_z];
0x0023E9        9B550000                 r3 = r3 * r3 (int);
0x0023EA        21040040                 Null = r2 - 64;
0x0023EB        DD40000B                 if NEG jump $vee.accelerate.safe_driver.shake_action_check;
0x0023EC        09602FB0                 r4 = Null + M[$vee.accelerate.safe_driver.nod_action_flag];
0x0023ED        0006000F                 Null = r4 + Null;
0x0023EE        DD10EE56                 if NE jump $pop_rLink_and_rts;
0x0023EF        21030019                 Null = r1 - 25;
0x0023F0        DD50EE54                 if POS jump $pop_rLink_and_rts;
0x0023F1        E460002F                 r4 = Null + 1;
0x0023F2        19602FB0                 M[$vee.accelerate.safe_driver.nod_action_flag] = r4 + Null;
0x0023F3        01404F27                 r2 = Null + 20263;
0x0023F4        E1F0EC3A                 call $message.send_short;
0x0023F5        DDF0EE4F                 jump $pop_rLink_and_rts;

 <$vee.accelerate.safe_driver.shake_action_check>
0x0023F6        FD0000FF 09606850        r4 = Null + M[$vee.accelerate.safe_driver.shake_action_flag];
0x0023F8        0006000F                 Null = r4 + Null;
0x0023F9        DD10EE4B                 if NE jump $pop_rLink_and_rts;
0x0023FA        21050019                 Null = r3 - 25;
0x0023FB        DD40EE49                 if NEG jump $pop_rLink_and_rts;
0x0023FC        E460002F                 r4 = Null + 1;
0x0023FD        FD0000FF 19606850        M[$vee.accelerate.safe_driver.shake_action_flag] = r4 + Null;
0x0023FF        01404F28                 r2 = Null + 20264;
0x002400        E1F0EC2E                 call $message.send_short;
0x002401        DDF0EE43                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x002402        01700080                 r5 = Null + 128;
0x002403        D1AB0030                 r8 = M[r9 + 48];
0x002404        21AA0002                 r8 = r8 - 2;
0x002405        D13B0014                 r1 = M[r9 + 20];
0x002406        5000003F                 I0 = Null + r1;
0x002407        D13B001B                 r1 = M[r9 + 27];
0x002408        5010003F                 I1 = Null + r1;
0x002409        D13B0018                 r1 = M[r9 + 24];
0x00240A        5020003F                 I2 = Null + r1;
0x00240B        D19B001F                 r7 = M[r9 + 31];
0x00240C        D13B0021                 r1 = M[r9 + 33];
0x00240D        9B390000                 r1 = r1 * r7 (int);
0x00240E        5080003F                 M0 = Null + r1;
0x00240F        70A0003F                 M2 = Null - r1;
0x002410        50B3003F                 M3 = r1 + r1;
0x002411        D14B001D                 r2 = M[r9 + 29];
0x002412        9843004F                 r2 = r1 * r2 (int);
0x002413        7090004F                 M1 = Null - r2;
0x002414        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x002415        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x002416        D1CB001D                 r10 = M[r9 + 29];
0x002417        03003500                 Null = Null + Null, r1 = M[I1,1];
0x002418        03034900                 Null = Null + r1, r2 = M[I2,1];
0x002419        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x00241A        E444002F                 r2 = r2 + 1;
0x00241B        D05A003F                 r3 = M[r8 + r1];
0x00241C        2034003F                 r1 = r2 - r1;
0x00241D        9067004F                 r4 = r5 ASHIFT r2;
0x00241E        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00241F        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x002420        8D220008                 r0 = r0 LSHIFT 8;
0x002421        01220080                 r0 = r0 + 128;
0x002422        C012005F                 rMAC = r0 * r3 (UU);
0x002423        8C21003F                 r0 = rMAC LSHIFT r1;
0x002424        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x002425        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x002426        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x002427        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x002428        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x002429        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x00242A        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x00242B        E488003F                 r6 = r6 - 1;
0x00242C        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x00242D        E499003F                 r7 = r7 - 1;
0x00242E        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x00242F        DC0D000F                 rts;

 <$sco_params_message_handler>
0x002430        F3D00000                 push rLink;
0x002431        D1250001                 r0 = M[r3 + 1];
0x002432        19202F88                 M[$sco_param_tesco] = r0 + Null;
0x002433        D1250003                 r0 = M[r3 + 3];
0x002434        FD0000FF 19206829        M[$sco_param_to_air_size] = r0 + Null;
0x002436        D1250004                 r0 = M[r3 + 4];
0x002437        19202F8A                 M[$sco_param_from_air_size] = r0 + Null;
0x002438        D1250005                 r0 = M[r3 + 5];
0x002439        D1350006                 r1 = M[r3 + 6];
0x00243A        8D220010                 r0 = r0 LSHIFT 16;
0x00243B        8133FFFF                 r1 = r1 AND 0xffff;
0x00243C        03320000                 r1 = r1 + r0;
0x00243D        D1250005                 r0 = M[r3 + 5];
0x00243E        8D220078                 r0 = r0 LSHIFT -8;
0x00243F        FD0000FF 19206828        M[$sco_param_clock_msw] = r0 + Null;
0x002441        19302F89                 M[$sco_param_clock_lsw] = r1 + Null;
0x002442        D1250007                 r0 = M[r3 + 7];
0x002443        8D220008                 r0 = r0 LSHIFT 8;
0x002444        91220078                 r0 = r0 ASHIFT -8;
0x002445        FD0000FF 1920682A        M[$sco_param_to_air_time] = r0 + Null;
0x002447        D1250008                 r0 = M[r3 + 8];
0x002448        8D220008                 r0 = r0 LSHIFT 8;
0x002449        91220078                 r0 = r0 ASHIFT -8;
0x00244A        19202F8B                 M[$sco_param_from_air_time] = r0 + Null;
0x00244B        FD0000FF 0940682B        r2 = Null + M[$sco_timer_id];
0x00244D        E1F0EC1D                 call $timer.cancel_event;
0x00244E        85408017                 r2 = Null OR 0x8017;
0x00244F        09502F84                 r3 = Null + M[$sub_link_port];
0x002450        8155001F                 r3 = r3 AND 0x1f;
0x002451        FD0000FF 09606829        r4 = Null + M[$sco_param_to_air_size];
0x002453        E1F0EDD3                 call $message.send;
0x002454        E1F0FEEF                 call $sco_schedule_to_air;
0x002455        DDF0EDEF                 jump $pop_rLink_and_rts;

 <$sbcdec.init_static_decoder>
0x002456        F3D00000                 push rLink;
0x002457        01B02C13                 r9 = Null + 11283;
0x002458        D5B70005                 M[r5 + 5] = r9;
0x002459        E1F002F6                 call $sbc.init_static_common;
0x00245A        FD0000FF 01203260        r0 = Null + -52640;
0x00245C        D52B002E                 M[r9 + 46] = r0;
0x00245D        FD0000FF 012030D0        r0 = Null + -53040;
0x00245F        D52B002F                 M[r9 + 47] = r0;
0x002460        FD0000FF 012030F0        r0 = Null + -53008;
0x002462        D52B0030                 M[r9 + 48] = r0;
0x002463        FD0000FF 0120341B        r0 = Null + -52197;
0x002465        D52B0031                 M[r9 + 49] = r0;
0x002466        FD0000FF 01203000        r0 = Null + -53248;
0x002468        D52B0032                 M[r9 + 50] = r0;
0x002469        FD0000FF 01203100        r0 = Null + -52992;
0x00246B        D52B0033                 M[r9 + 51] = r0;
0x00246C        D50B003A                 M[r9 + 58] = Null;
0x00246D        01200010                 r0 = Null + 16;
0x00246E        D52B003B                 M[r9 + 59] = r0;
0x00246F        FD0000FF 012035A0        r0 = Null + -51808;
0x002471        D52B003E                 M[r9 + 62] = r0;
0x002472        E1F002BD                 call $sbcdec.reset_decoder;
0x002473        E1F002C2                 call $sbcdec.init_tables;
0x002474        01302F31                 r1 = Null + 12081;
0x002475        01407010                 r2 = Null + 28688;
0x002476        01502479                 r3 = Null + 9337;
0x002477        E1F00388                 call $message.register_handler;
0x002478        DDF0EDCC                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x002479        D53B0034                 M[r9 + 52] = r1;
0x00247A        DC0D000F                 rts;

 <$cbops.signal_detect_op.timer_handler>
0x00247B        F3D00000                 push rLink;
0x00247C        D13A0000                 r1 = M[r8 + 0];
0x00247D        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x00247E        D12A0002                 r0 = M[r8 + 2];
0x00247F        2002003F                 Null = r0 - r1;
0x002480        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x002481        D14A0003                 r2 = M[r8 + 3];
0x002482        E444002F                 r2 = r2 + 1;
0x002483        D54A0003                 M[r8 + 3] = r2;
0x002484        D13A0001                 r1 = M[r8 + 1];
0x002485        2004003F                 Null = r2 - r1;
0x002486        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x002487        D10A0004                 Null = M[r8 + 4];
0x002488        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x002489        01500000                 r3 = Null + 0;
0x00248A        D55A0004                 M[r8 + 4] = r3;
0x00248B        D14A0005                 r2 = M[r8 + 5];
0x00248C        E1F0EBA2                 call $message.send_short;
0x00248D        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x00248E        D10A0004                 Null = M[r8 + 4];
0x00248F        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x002490        E450002F                 r3 = Null + 1;
0x002491        D55A0004                 M[r8 + 4] = r3;
0x002492        D14A0005                 r2 = M[r8 + 5];
0x002493        E1F0EB9B                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x002494        01400000                 r2 = Null + 0;
0x002495        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x002496        01200000                 r0 = Null + 0;
0x002497        D52A0002                 M[r8 + 2] = r0;
0x002498        DDF0EDAC                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x002499        01200000                 r0 = Null + 0;
0x00249A        D52A0003                 M[r8 + 3] = r0;
0x00249B        D52A0002                 M[r8 + 2] = r0;
0x00249C        E420002F                 r0 = Null + 1;
0x00249D        D52A0004                 M[r8 + 4] = r0;
0x00249E        DDF0EDA6                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x00249F        F3D00000                 push rLink;
0x0024A0        00BC000F                 r9 = r10 + Null;
0x0024A1        D17A0002                 r5 = M[r8 + 2];
0x0024A2        511A0003                 I1 = r8 + 3;
0x0024A3        51D00000                 L1 = Null + 0;
0x0024A4        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x0024A5        00CB000F                 r10 = r9 + Null;
0x0024A6        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0024A7        D038002F                 r1 = M[r6 + r0];
0x0024A8        5000003F                 I0 = Null + r1;
0x0024A9        D039002F                 r1 = M[r7 + r0];
0x0024AA        50C0003F                 L0 = Null + r1;
0x0024AB        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0024AC        D038002F                 r1 = M[r6 + r0];
0x0024AD        5040003F                 I4 = Null + r1;
0x0024AE        D039002F                 r1 = M[r7 + r0];
0x0024AF        50E0003F                 L4 = Null + r1;
0x0024B0        D12A0001                 r0 = M[r8 + 1];
0x0024B1        D13A0000                 r1 = M[r8 + 0];
0x0024B2        E5F0000D                 do $M.cbops.soft_mute.sampleLoop;
0x0024B3        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x0024B4        00200004                 if NEG r0 = Null + Null;
0x0024B5        0160001F                 r4 = Null + 31;
0x0024B6        2006002F                 Null = r4 - r0;
0x0024B7        00260004                 if NEG r0 = r4 + Null;
0x0024B8        FD0000FF 01605F60        r4 = Null + -41120;
0x0024BA        0062006F                 r4 = r0 + r4;
0x0024BB        D3600000                 r4 = M[r4 + Null];
0x0024BC        97460000                 r2 = r2 * r4 (frac);
0x0024BD        2040004F                 r2 = Null - r2;
0x0024BE        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x0024BF        E477003F                 r5 = r5 - 1;
0x0024C0        DD10FFE5                 if NE jump $M.cbops.soft_mute.channelLoop;
0x0024C1        D52A0001                 M[r8 + 1] = r0;
0x0024C2        51C00000                 L0 = Null + 0;
0x0024C3        51E00000                 L4 = Null + 0;
0x0024C4        DDF0ED80                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x0024C5        FD0000FF 090037FF        Null = Null + M[$app_config.io];
0x0024C7        DC0D0005                 if POS rts;
0x0024C8        FD0000FF 193037FF        M[$app_config.io] = r1 + Null;
0x0024CA        21030005                 Null = r1 - 5;
0x0024CB        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_usb;
0x0024CC        01200003                 r0 = Null + 3;
0x0024CD        19202F71                 M[$codec_type] = r0 + Null;
0x0024CE        0120011D                 r0 = Null + 285;
0x0024CF        FD0000FF 19206811        M[$codec_config] = r0 + Null;
0x0024D1        DDF00012                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_usb>
0x0024D2        21030008                 Null = r1 - 8;
0x0024D3        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_analogue;
0x0024D4        01200006                 r0 = Null + 6;
0x0024D5        19202F71                 M[$codec_type] = r0 + Null;
0x0024D6        01200120                 r0 = Null + 288;
0x0024D7        FD0000FF 19206811        M[$codec_config] = r0 + Null;
0x0024D9        DDF0000A                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_analogue>
0x0024DA        21030001                 Null = r1 - 1;
0x0024DB        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_sbc;
0x0024DC        01200000                 r0 = Null + 0;
0x0024DD        19202F71                 M[$codec_type] = r0 + Null;
0x0024DE        0120011A                 r0 = Null + 282;
0x0024DF        FD0000FF 19206811        M[$codec_config] = r0 + Null;
0x0024E1        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_sbc>
0x0024E2        DDF0101C                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x0024E3        DC0D000F                 rts;

 <$disable_esco_subwoofer>
0x0024E4        F3D00000                 push rLink;
0x0024E5        FD0000FF 0940682B        r2 = Null + M[$sco_timer_id];
0x0024E7        E1F0EB83                 call $timer.cancel_event;
0x0024E8        FD0000FF 09406834        r2 = Null + M[$wall_clock_timer_id];
0x0024EA        E1F0EB80                 call $timer.cancel_event;
0x0024EB        09402F8C                 r2 = Null + M[$bass_timer_id];
0x0024EC        E1F0EB7E                 call $timer.cancel_event;
0x0024ED        19002EF5                 M[$bdaddr_struc] = Null + Null;
0x0024EE        19002EF6                 M[0x2ef6] = Null + Null;
0x0024EF        19002EF7                 M[0x2ef7] = Null + Null;
0x0024F0        19002EF8                 M[0x2ef8] = Null + Null;
0x0024F1        19002F88                 M[$sco_param_tesco] = Null + Null;
0x0024F2        19002F84                 M[$sub_link_port] = Null + Null;
0x0024F3        FD0000FF 1900686D        M[$frame_sync.sync_flag] = Null + Null;
0x0024F5        19002EE4                 M[0x2ee4] = Null + Null;
0x0024F6        FD0000FF 19006771        M[0xff6771] = Null + Null;
0x0024F8        19002EBD                 M[$M.main.samples_latency_measure] = Null + Null;
0x0024F9        FD0000FF 0120686D        r0 = Null + -38803;
0x0024FB        19202F7A                 M[$music_example.sync_flag_ptr] = r0 + Null;
0x0024FC        01200168                 r0 = Null + 360;
0x0024FD        FD0000FF 1920681A        M[$music_example.frame_processing_size] = r0 + Null;

 <$M.disable_esco_subwoofer.done>
0x0024FF        DDF0ED45                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x002500        F3D00000                 push rLink;
0x002501        FD0000FF 09406676        r2 = Null + M[$flash.windowed_data16.address];
0x002503        D12B002E                 r0 = M[r9 + 46];
0x002504        5000002F                 I0 = Null + r0;
0x002505        01200000                 r0 = Null + 0;
0x002506        01300080                 r1 = Null + 128;
0x002507        E1F0E6D5                 call $flash.copy_to_dm_24;
0x002508        D12B002F                 r0 = M[r9 + 47];
0x002509        5000002F                 I0 = Null + r0;
0x00250A        01200174                 r0 = Null + 372;
0x00250B        01300020                 r1 = Null + 32;
0x00250C        E1F0E6D0                 call $flash.copy_to_dm_24;
0x00250D        D12B0030                 r0 = M[r9 + 48];
0x00250E        5000002F                 I0 = Null + r0;
0x00250F        012001EE                 r0 = Null + 494;
0x002510        0130000F                 r1 = Null + 15;
0x002511        E1F0E6CB                 call $flash.copy_to_dm_24;
0x002512        D12B0031                 r0 = M[r9 + 49];
0x002513        5000002F                 I0 = Null + r0;
0x002514        012001D4                 r0 = Null + 468;
0x002515        01300011                 r1 = Null + 17;
0x002516        E1F0E6C6                 call $flash.copy_to_dm_24;
0x002517        DDF0ED2D                 jump $pop_rLink_and_rts;

 <$enable_esco_subwoofer>
0x002518        F3D00000                 push rLink;
0x002519        19302F96                 M[$subwoofer.sco_offset] = r1 + Null;
0x00251A        FD0000FF 0130677A        r1 = Null + -39046;
0x00251C        FD000000 01408019        r2 = Null + 32793;
0x00251E        0150257D                 r3 = Null + 9597;
0x00251F        E1F002E0                 call $message.register_handler;
0x002520        01302EED                 r1 = Null + 12013;
0x002521        FD000000 01408015        r2 = Null + 32789;
0x002523        01502430                 r3 = Null + 9264;
0x002524        E1F002DB                 call $message.register_handler;
0x002525        FD0000FF 0130677E        r1 = Null + -39042;
0x002527        FD000000 0140801C        r2 = Null + 32796;
0x002529        015021B4                 r3 = Null + 8628;
0x00252A        E1F002D5                 call $message.register_handler;

 <$M.enable_esco_subwoofer.done>
0x00252B        DDF0ED19                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.init_avcopy_struct>
0x00252C        500000AF                 I0 = Null + r8;
0x00252D        01C00007                 r10 = Null + 7;
0x00252E        FD0000FF 511066F0        I1 = Null + -39184;
0x002530        E5F00003                 do $M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct;
0x002531        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002532        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct>
0x002533        D12A0001                 r0 = M[r8 + 1];
0x002534        01320003                 r1 = r0 + 3;
0x002535        D33A0000                 r1 = M[r1 + r8];
0x002536        D12A0002                 r0 = M[r8 + 2];
0x002537        FD0000FF 19006864        M[$M.cbops.av_copy.right_channel] = Null + Null;
0x002539        FD0000FF 019066F2        r7 = Null + -39182;
0x00253B        FD0000FF 014067ED        r2 = Null + -38931;
0x00253D        D5490000                 M[r7 + 0] = r2;
0x00253E        D14A0001                 r2 = M[r8 + 1];
0x00253F        21040002                 Null = r2 - 2;
0x002540        DD100006                 if NE jump $M.cbops.av_copy.init_avcopy_struct.is_mono_struct;
0x002541        01402F53                 r2 = Null + 12115;
0x002542        D5490001                 M[r7 + 1] = r2;
0x002543        D14A0003                 r2 = M[r8 + 3];
0x002544        FD0000FF 19406864        M[$M.cbops.av_copy.right_channel] = r2 + Null;

 <$M.cbops.av_copy.init_avcopy_struct.is_mono_struct>
0x002546        DC0D000F                 rts;

 <$sbcdec.get1byte>
0x002547        01200008                 r0 = Null + 8;
0x002548        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x002549        01200004                 r0 = Null + 4;
0x00254A        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x00254B        01200002                 r0 = Null + 2;
0x00254C        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x00254D        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x00254E        D15B0031                 r3 = M[r9 + 49];
0x00254F        D3520000                 r3 = M[r3 + r0];
0x002550        D14B003B                 r2 = M[r9 + 59];
0x002551        2042004F                 r2 = r0 - r2;
0x002552        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x002553        03003000                 Null = Null + Null, r1 = M[I0,0];
0x002554        8F340000                 r1 = r1 LSHIFT r2;
0x002555        83350000                 r1 = r1 AND r3;
0x002556        2040004F                 r2 = Null - r2;
0x002557        D54B003B                 M[r9 + 59] = r2;
0x002558        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x002559        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00255A        8F340000                 r1 = r1 LSHIFT r2;
0x00255B        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x00255C        21440010                 r2 = r2 - 16;
0x00255D        8F540000                 r3 = r3 LSHIFT r2;
0x00255E        03350000                 r1 = r1 + r3;
0x00255F        2040004F                 r2 = Null - r2;
0x002560        D54B003B                 M[r9 + 59] = r2;
0x002561        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x002562        D15B0014                 r3 = M[r9 + 20];
0x002563        5010005F                 I1 = Null + r3;
0x002564        D1CB0021                 r10 = M[r9 + 33];
0x002565        D15B001D                 r3 = M[r9 + 29];
0x002566        508000CF                 M0 = Null + r10;
0x002567        709000CF                 M1 = Null - r10;
0x002568        59A90001                 M2 = M1 + 1;
0x002569        51B00001                 M3 = Null + 1;
0x00256A        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x00256C        514B0026                 I4 = r9 + 38;
0x00256D        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x00256E        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x00256F        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x002570        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x002571        0042003F                 r2 = r0 + r1;
0x002572        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x002573        2032003F                 r1 = r0 - r1;
0x002574        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x002575        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x002576        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x002577        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x002578        D1CB0021                 r10 = M[r9 + 33];
0x002579        5B1C0000                 I1 = I1 + r10;
0x00257A        E455003F                 r3 = r3 - 1;
0x00257B        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x00257C        DC0D000F                 rts;

 <$bdaddr_message_handler>
0x00257D        F3D00000                 push rLink;
0x00257E        8D330078                 r1 = r1 LSHIFT -8;
0x00257F        19302EF5                 M[$bdaddr_struc] = r1 + Null;
0x002580        19402EF6                 M[0x2ef6] = r2 + Null;
0x002581        19502EF7                 M[0x2ef7] = r3 + Null;
0x002582        19602EF8                 M[0x2ef8] = r4 + Null;
0x002583        8540801B                 r2 = Null OR 0x801b;
0x002584        09502EF5                 r3 = Null + M[$bdaddr_struc];
0x002585        09602EF6                 r4 = Null + M[0x2ef6];
0x002586        09702EF7                 r5 = Null + M[0x2ef7];
0x002587        09802EF8                 r6 = Null + M[0x2ef8];
0x002588        E1F0EC9E                 call $message.send;
0x002589        FD0000FF 01306782        r1 = Null + -39038;
0x00258B        FD000001 014086A0        r2 = Null + 100000;
0x00258D        01502646                 r3 = Null + 9798;
0x00258E        E1F0ECAC                 call $timer.schedule_event_in;
0x00258F        E430002F                 r1 = Null + 1;
0x002590        FD0000FF 19306835        M[$subwoofer.running] = r1 + Null;
0x002592        DDF0ECB2                 jump $pop_rLink_and_rts;

 <$av_insert_silence>
0x002593        F3D00000                 push rLink;
0x002594        0026000F                 r0 = r4 + Null;
0x002595        E1F0EC44                 call $cbuffer.calc_amount_space;
0x002596        D035000F                 r1 = M[r3 + Null];
0x002597        00C3000F                 r10 = r1 + Null;
0x002598        200200CF                 Null = r0 - r10;
0x002599        00C20004                 if NEG r10 = r0 + Null;
0x00259A        202300CF                 r0 = r1 - r10;
0x00259B        1852000F                 M[r3] = r0 + Null;
0x00259C        0026000F                 r0 = r4 + Null;
0x00259D        E1F0EC77                 call $cbuffer.get_write_address_and_size;
0x00259E        5000002F                 I0 = Null + r0;
0x00259F        50C0003F                 L0 = Null + r1;
0x0025A0        01200000                 r0 = Null + 0;
0x0025A1        E5F00002                 do $M.av_insert_silence.audio_fill_loop;
0x0025A2        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.av_insert_silence.audio_fill_loop>
0x0025A3        0026000F                 r0 = r4 + Null;
0x0025A4        4430000F                 r1 = Null + I0;
0x0025A5        E1F0EC7D                 call $cbuffer.set_write_address;
0x0025A6        51C00000                 L0 = Null + 0;
0x0025A7        DDF0EC9D                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.main>
0x0025A8        F3D00000                 push rLink;
0x0025A9        00BC000F                 r9 = r10 + Null;
0x0025AA        D17A0000                 r5 = M[r8 + 0];
0x0025AB        D15A0001                 r3 = M[r8 + 1];
0x0025AC        514A0002                 I4 = r8 + 2;
0x0025AD        51E00000                 L4 = Null + 0;
0x0025AE        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x0025AF        00CB000F                 r10 = r9 + Null;
0x0025B0        03000021                 Null = Null + Null, r0 = M[I4,1];
0x0025B1        D038002F                 r1 = M[r6 + r0];
0x0025B2        5000003F                 I0 = Null + r1;
0x0025B3        D039002F                 r1 = M[r7 + r0];
0x0025B4        50C0003F                 L0 = Null + r1;
0x0025B5        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x0025B6        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0025B7        0002000F                 Null = r0 + Null;
0x0025B8        20200024                 if NEG r0 = Null - r0;
0x0025B9        2004002F                 Null = r2 - r0;
0x0025BA        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x0025BB        E455003F                 r3 = r3 - 1;
0x0025BC        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x0025BD        D5470002                 M[r5 + 2] = r2;
0x0025BE        51C00000                 L0 = Null + 0;
0x0025BF        DDF0EC85                 jump $pop_rLink_and_rts;

 <$calc_sub_sra_ratio>
0x0025C0        F3D00000                 push rLink;
0x0025C1        FD0000FF 012067E4        r0 = Null + -38940;
0x0025C3        E1F0EC26                 call $cbuffer.calc_amount_data;
0x0025C4        21340168                 r1 = r2 - 360;
0x0025C5        214402D0                 r2 = r2 - 720;
0x0025C6        01500054                 r3 = Null + 84;
0x0025C7        0015000F                 rMAC = r3 + Null;
0x0025C8        2002003F                 Null = r0 - r1;
0x0025C9        20110055                 if POS rMAC = rMAC - r3;
0x0025CA        2002004F                 Null = r0 - r2;
0x0025CB        20110055                 if POS rMAC = rMAC - r3;
0x0025CC        09112D3F                 rMAC = rMAC + M[0x2d3f];
0x0025CD        FD0000FF 09206833        r0 = Null + M[$sub_sra_ratio];
0x0025CF        FD00000C CD11CCCD        rMAC = rMAC * 0.10000002384185791 (SS);
0x0025D1        FD000073 AD123333        rMAC = rMAC + r0 * 0.89999997615814209 (SS);
0x0025D3        FD0000FF 19106833        M[$sub_sra_ratio] = rMAC + Null;
0x0025D5        DDF0EC6F                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetConfig.func>
0x0025D6        F3D00000                 push rLink;
0x0025D7        8144FFFF                 r2 = r2 AND 0xffff;
0x0025D8        8D330010                 r1 = r1 LSHIFT 16;
0x0025D9        87340000                 r1 = r1 OR r2;
0x0025DA        8166FFFF                 r4 = r4 AND 0xffff;
0x0025DB        8D550010                 r3 = r3 LSHIFT 16;
0x0025DC        87560000                 r3 = r3 OR r4;
0x0025DD        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0025DE        83530000                 r3 = r3 AND r1;
0x0025DF        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x0025E1        83230000                 r0 = r0 AND r1;
0x0025E2        87250000                 r0 = r0 OR r3;
0x0025E3        19200DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x0025E4        0140100F                 r2 = Null + 4111;
0x0025E5        8D520070                 r3 = r0 LSHIFT -16;
0x0025E6        8162FFFF                 r4 = r0 AND 0xffff;
0x0025E7        E1F0EA47                 call $message.send_short;
0x0025E8        E430002F                 r1 = Null + 1;
0x0025E9        19302F79                 M[$music_example.reinit] = r1 + Null;
0x0025EA        DDF0EC5A                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x0025EB        F3D00000                 push rLink;
0x0025EC        FD0000FF 09406676        r2 = Null + M[$flash.windowed_data16.address];
0x0025EE        D12B0015                 r0 = M[r9 + 21];
0x0025EF        5000002F                 I0 = Null + r0;
0x0025F0        012000C0                 r0 = Null + 192;
0x0025F1        01300050                 r1 = Null + 80;
0x0025F2        E1F0E5EA                 call $flash.copy_to_dm_24;
0x0025F3        D12B0016                 r0 = M[r9 + 22];
0x0025F4        5000002F                 I0 = Null + r0;
0x0025F5        01200138                 r0 = Null + 312;
0x0025F6        01300028                 r1 = Null + 40;
0x0025F7        E1F0E5E5                 call $flash.copy_to_dm_24;
0x0025F8        D12B0017                 r0 = M[r9 + 23];
0x0025F9        5000002F                 I0 = Null + r0;
0x0025FA        012001A4                 r0 = Null + 420;
0x0025FB        01300030                 r1 = Null + 48;
0x0025FC        E1F0EAFC                 call $flash.copy_to_dm;
0x0025FD        DDF0EC47                 jump $pop_rLink_and_rts;

 <$conn_init_cbuffers>
0x0025FE        F3D00000                 push rLink;
0x0025FF        012000A5                 r0 = Null + 165;
0x002600        FD0000FF 01306000        r1 = Null + -40960;
0x002602        0045000F                 r2 = r3 + Null;
0x002603        E1F0EC30                 call $cbuffer.buffer_configure;
0x002604        FD0000FF 012067C9        r0 = Null + -38967;
0x002606        01300800                 r1 = Null + 2048;
0x002607        0045000F                 r2 = r3 + Null;
0x002608        E1F0EC2B                 call $cbuffer.buffer_configure;
0x002609        FD0000FF 012067C6        r0 = Null + -38970;
0x00260B        FD0000FF 01304000        r1 = Null + -49152;
0x00260D        0046000F                 r2 = r4 + Null;
0x00260E        E1F0EC25                 call $cbuffer.buffer_configure;
0x00260F        DDF0EC35                 jump $pop_rLink_and_rts;

 <$config_usb>
0x002610        FD0000FF 01206604        r0 = Null + -39420;
0x002612        5000002F                 I0 = Null + r0;
0x002613        51800002                 M0 = Null + 2;
0x002614        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];

 <$M.config_usb.rate_loop>
0x002616        03003100                 Null = Null + Null, r1 = M[I0,1];
0x002617        0003000F                 Null = r1 + Null;
0x002618        DD000005                 if EQ jump $M.config_usb.error;
0x002619        2003002F                 Null = r1 - r0;
0x00261A        DD000005                 if EQ jump $M.config_usb.done;
0x00261B        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x00261C        DDF0FFFA                 jump $M.config_usb.rate_loop;

 <$M.config_usb.error>
0x00261D        FD0000FF 51006605        I0 = Null + -39419;

 <$M.config_usb.done>
0x00261F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002620        D52A0003                 M[r8 + 3] = r0;
0x002621        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002622        D52A0006                 M[r8 + 6] = r0;
0x002623        DC0D000F                 rts;

 <$audio_prime_silence>
0x002624        F3D00000                 push rLink;
0x002625        0026000F                 r0 = r4 + Null;
0x002626        E1F0EA57                 call $cbuffer.empty_buffer;
0x002627        0026000F                 r0 = r4 + Null;
0x002628        E1F0EBEC                 call $cbuffer.get_write_address_and_size;
0x002629        5000002F                 I0 = Null + r0;
0x00262A        50C0003F                 L0 = Null + r1;
0x00262B        00C7000F                 r10 = r5 + Null;
0x00262C        01200000                 r0 = Null + 0;
0x00262D        E5F00002                 do $M.audio_prime_silence.audio_fill_loop;
0x00262E        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_prime_silence.audio_fill_loop>
0x00262F        0026000F                 r0 = r4 + Null;
0x002630        4430000F                 r1 = Null + I0;
0x002631        E1F0EBF1                 call $cbuffer.set_write_address;
0x002632        51C00000                 L0 = Null + 0;
0x002633        DDF0EC11                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x002634        F3D00000                 push rLink;
0x002635        D17B0014                 r5 = M[r9 + 20];
0x002636        5010007F                 I1 = Null + r5;
0x002637        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x002638        D17B001F                 r5 = M[r9 + 31];
0x002639        D1CB001B                 r10 = M[r9 + 27];
0x00263A        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x00263B        D1CB0021                 r10 = M[r9 + 33];
0x00263C        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x00263D        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x00263E        0002000F                 Null = r0 + Null;
0x00263F        E110FF0F                 if NE call $sbcdec.getbits;
0x002640        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x002641        E477003F                 r5 = r5 - 1;
0x002642        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x002643        E466003F                 r4 = r4 - 1;
0x002644        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x002645        DDF0EBFF                 jump $pop_rLink_and_rts;

 <$wall_clock_timer_handler>
0x002646        F3D00000                 push rLink;
0x002647        8540801B                 r2 = Null OR 0x801b;
0x002648        09502EF5                 r3 = Null + M[$bdaddr_struc];
0x002649        09602EF6                 r4 = Null + M[0x2ef6];
0x00264A        09702EF7                 r5 = Null + M[0x2ef7];
0x00264B        09802EF8                 r6 = Null + M[0x2ef8];
0x00264C        E1F0EBDA                 call $message.send;
0x00264D        FD0000FF 01306782        r1 = Null + -39038;
0x00264F        FD000001 014086A0        r2 = Null + 100000;
0x002651        01502646                 r3 = Null + 9798;
0x002652        E1F0EBE5                 call $timer.schedule_event_in_period;
0x002653        FD0000FF 19506834        M[$wall_clock_timer_id] = r3 + Null;
0x002655        DDF0EBEF                 jump $pop_rLink_and_rts;

 <$sbc.calc_frame_length>
0x002656        D12B0021                 r0 = M[r9 + 33];
0x002657        D13B001F                 r1 = M[r9 + 31];
0x002658        9862003F                 r4 = r0 * r1 (int);
0x002659        8D66007F                 r4 = r4 LSHIFT -1;
0x00265A        01660005                 r4 = r4 + 5;
0x00265B        D14B001D                 r2 = M[r9 + 29];
0x00265C        D15B0022                 r3 = M[r9 + 34];
0x00265D        9854005F                 r3 = r2 * r3 (int);
0x00265E        D14B001E                 r2 = M[r9 + 30];
0x00265F        21440002                 r2 = r2 - 2;
0x002660        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x002661        9B420000                 r2 = r2 * r0 (int);
0x002662        03540000                 r3 = r3 + r2;
0x002663        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x002664        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x002665        E455003F                 r3 = r3 - 1;
0x002666        8D55007D                 r3 = r3 LSHIFT -3;
0x002667        0026005F                 r0 = r4 + r3;
0x002668        DC0D000F                 rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x002669        F3D00000                 push rLink;
0x00266A        5000005F                 I0 = Null + r3;
0x00266B        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00266C        00C3000F                 r10 = r1 + Null;
0x00266D        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x00266E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00266F        E1F009F9                 call $user_eq.calcParamAddrOffset;
0x002670        01220E31                 r0 = r0 + 3633;
0x002671        D3200000                 r0 = M[r0 + Null];
0x002672        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x002673        0075000F                 r5 = r3 + Null;
0x002674        0064000F                 r4 = r2 + Null;
0x002675        0150329B                 r3 = Null + 12955;
0x002676        E1F0E668                 call $message.send_long;
0x002677        DDF0EBCD                 jump $pop_rLink_and_rts;

 <$sbcdec.find_sync>
0x002678        F3D00000                 push rLink;
0x002679        E1F000CD                 call $sbcdec.byte_align;
0x00267A        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x00267B        D18B003B                 r6 = M[r9 + 59];
0x00267C        5820000F                 I2 = I0 + Null;
0x00267D        E1F0FECA                 call $sbcdec.get1byte;
0x00267E        2103009C                 Null = r1 - 156;
0x00267F        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x002680        01800063                 r6 = Null + 99;
0x002681        DDF0EBC3                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x002682        5802000F                 I0 = I2 + Null;
0x002683        D58B003B                 M[r9 + 59] = r6;
0x002684        DDF0EBC0                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x002685        D12B0032                 r0 = M[r9 + 50];
0x002686        D52B003C                 M[r9 + 60] = r0;
0x002687        D12B0032                 r0 = M[r9 + 50];
0x002688        5010002F                 I1 = Null + r0;
0x002689        01C000A0                 r10 = Null + 160;
0x00268A        01200000                 r0 = Null + 0;
0x00268B        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x00268C        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x00268D        D12B0033                 r0 = M[r9 + 51];
0x00268E        D52B003D                 M[r9 + 61] = r0;
0x00268F        D12B0033                 r0 = M[r9 + 51];
0x002690        5010002F                 I1 = Null + r0;
0x002691        01C000A0                 r10 = Null + 160;
0x002692        01200000                 r0 = Null + 0;
0x002693        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x002694        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x002695        DC0D000F                 rts;

 <$M.music_example_message.SoftMute.func>
0x002696        F3D00000                 push rLink;
0x002697        0043000F                 r2 = r1 + Null;
0x002698        81330001                 r1 = r1 AND 0x1;
0x002699        FD0000FF 01A066CA        r8 = Null + -39222;
0x00269B        E1F0008D                 call $M.cbops.soft_mute.message_handler.func;
0x00269C        8D34007F                 r1 = r2 LSHIFT -1;
0x00269D        81330001                 r1 = r1 AND 0x1;
0x00269E        E420002F                 r0 = Null + 1;
0x00269F        2030003F                 r1 = Null - r1;
0x0026A0        0003000F                 Null = r1 + Null;
0x0026A1        00320000                 if EQ r1 = r0 + Null;
0x0026A2        19302F91                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x0026A3        DDF0EBA1                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x0026A4        F3D00000                 push rLink;
0x0026A5        0023000F                 r0 = r1 + Null;
0x0026A6        E1F009C2                 call $user_eq.calcParamAddrOffset;
0x0026A7        01220E31                 r0 = r0 + 3633;
0x0026A8        8144FFFF                 r2 = r2 AND 0xffff;
0x0026A9        1824000F                 M[r0] = r2 + Null;
0x0026AA        21050000                 Null = r3 - 0;
0x0026AB        DD00EB99                 if EQ jump $pop_rLink_and_rts;
0x0026AC        0023000F                 r0 = r1 + Null;
0x0026AD        019004FE                 r7 = Null + 1278;
0x0026AE        E1F00990                 call $user_eq.calcBandCoefs;
0x0026AF        DDF0EB95                 jump $pop_rLink_and_rts;

 <$audio_insert_silence>
0x0026B0        F3D00000                 push rLink;
0x0026B1        0025000F                 r0 = r3 + Null;
0x0026B2        E1F0EB62                 call $cbuffer.get_write_address_and_size;
0x0026B3        5000002F                 I0 = Null + r0;
0x0026B4        50C0003F                 L0 = Null + r1;
0x0026B5        01200000                 r0 = Null + 0;
0x0026B6        E5F00002                 do $M.audio_insert_silence.audio_fill_loop;
0x0026B7        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_insert_silence.audio_fill_loop>
0x0026B8        0025000F                 r0 = r3 + Null;
0x0026B9        4430000F                 r1 = Null + I0;
0x0026BA        E1F0EB68                 call $cbuffer.set_write_address;
0x0026BB        51C00000                 L0 = Null + 0;
0x0026BC        DDF0EB88                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x0026BD        F3D00000                 push rLink;
0x0026BE        D18B001F                 r6 = M[r9 + 31];
0x0026BF        D19B0021                 r7 = M[r9 + 33];
0x0026C0        9B890000                 r6 = r6 * r7 (int);
0x0026C1        D12B0018                 r0 = M[r9 + 24];
0x0026C2        5010002F                 I1 = Null + r0;
0x0026C3        51900001                 M1 = Null + 1;
0x0026C4        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x0026C5        E1F0FE89                 call $sbcdec.getbits;
0x0026C6        E1F00031                 call $sbc.crc_calc;
0x0026C7        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x0026C8        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x0026C9        DDF0EB7B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x0026CA        F3D00000                 push rLink;
0x0026CB        0053000F                 r3 = r1 + Null;
0x0026CC        0023000F                 r0 = r1 + Null;
0x0026CD        E1F0099B                 call $user_eq.calcParamAddrOffset;
0x0026CE        01220E31                 r0 = r0 + 3633;
0x0026CF        D062000F                 r4 = M[r0 + Null];
0x0026D0        01700000                 r5 = Null + 0;
0x0026D1        01800000                 r6 = Null + 0;
0x0026D2        0140329A                 r2 = Null + 12954;
0x0026D3        E1F0E95B                 call $message.send_short;
0x0026D4        DDF0EB70                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x0026D5        F3D00000                 push rLink;
0x0026D6        5000005F                 I0 = Null + r3;
0x0026D7        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0026D8        00C3000F                 r10 = r1 + Null;
0x0026D9        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x0026DA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0026DB        E1F0098D                 call $user_eq.calcParamAddrOffset;
0x0026DC        01220E31                 r0 = r0 + 3633;
0x0026DD        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0026DE        8133FFFF                 r1 = r1 AND 0xffff;
0x0026DF        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x0026E0        DDF0EB64                 jump $pop_rLink_and_rts;

 <$sco_timer_handler>
0x0026E1        F3D00000                 push rLink;
0x0026E2        09202F8D                 r0 = Null + M[$sub_app_esco_func];
0x0026E3        E0020001                 if NE call r0;
0x0026E4        01401D4C                 r2 = Null + 7500;
0x0026E5        01302EF1                 r1 = Null + 12017;
0x0026E6        015026E1                 r3 = Null + 9953;
0x0026E7        E1F0EB50                 call $timer.schedule_event_in_period;
0x0026E8        FD0000FF 1950682B        M[$sco_timer_id] = r3 + Null;
0x0026EA        FD0000FF 1900686D        M[$frame_sync.sync_flag] = Null + Null;
0x0026EC        DDF0EB58                 jump $pop_rLink_and_rts;

 <$av_audio_out_silence_insert>
0x0026ED        F3D00000                 push rLink;
0x0026EE        01502F77                 r3 = Null + 12151;
0x0026EF        016000A5                 r4 = Null + 165;
0x0026F0        E1F0FEA3                 call $av_insert_silence;
0x0026F1        FD0000FF 01506817        r3 = Null + -38889;
0x0026F3        FD0000FF 016067C9        r4 = Null + -38967;
0x0026F5        E1F0FE9E                 call $av_insert_silence;
0x0026F6        DDF0EB4E                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x0026F7        D14B0024                 r2 = M[r9 + 36];
0x0026F8        0170001D                 r5 = Null + 29;
0x0026F9        65520008                 r3 = 8 - r0;
0x0026FA        00C2000F                 r10 = r0 + Null;
0x0026FB        8C53005F                 r3 = r1 LSHIFT r3;
0x0026FC        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x0026FD        8865004F                 r4 = r3 XOR r2;
0x0026FE        8D440001                 r2 = r2 LSHIFT 1;
0x0026FF        81660080                 r4 = r4 AND 0x80;
0x002700        88440071                 if NE r2 = r2 XOR r5;
0x002701        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x002702        D54B0024                 M[r9 + 36] = r2;
0x002703        DC0D000F                 rts;

 <$signal_detect_timer_handler>
0x002704        F3D00000                 push rLink;
0x002705        01A02E67                 r8 = Null + 11879;
0x002706        E1F0FD75                 call $cbops.signal_detect_op.timer_handler;
0x002707        01302EB9                 r1 = Null + 11961;
0x002708        FD00000F 01404240        r2 = Null + 1000000;
0x00270A        01502704                 r3 = Null + 9988;
0x00270B        E1F0EB2C                 call $timer.schedule_event_in_period;
0x00270C        DDF0EB38                 jump $pop_rLink_and_rts;

 <$usb_sub_esco_process>
0x00270D        F3D00000                 push rLink;
0x00270E        09202F84                 r0 = Null + M[$sub_link_port];
0x00270F        FD000091 2102A00E        Null = r0 - -7233522;
0x002711        DD100003                 if NE jump $M.usb_sub_esco_process.not_esco_sub;
0x002712        E1F0F4B4                 call $M.Subwoofer.esco_preprocess;
0x002713        E1F0F4B7                 call $M.Subwoofer.esco_post_process;

 <$M.usb_sub_esco_process.not_esco_sub>
0x002714        DDF0EB30                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.fill_silence_buffer_with_zeros>
0x002715        D1320000                 r1 = M[r0 + 0];
0x002716        50C0003F                 L0 = Null + r1;
0x002717        D1320001                 r1 = M[r0 + 1];
0x002718        5000003F                 I0 = Null + r1;
0x002719        01300000                 r1 = Null + 0;
0x00271A        E5F00002                 do $M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero;
0x00271B        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero>
0x00271C        51C00000                 L0 = Null + 0;
0x00271D        4430000F                 r1 = Null + I0;
0x00271E        D5320002                 M[r0 + 2] = r1;
0x00271F        DC0D000F                 rts;

 <$set_synchronized_warp_handler>
0x002720        F3D00000                 push rLink;
0x002721        19002F97                 M[$warp_timer_id] = Null + Null;
0x002722        FD0000FF 09206813        r0 = Null + M[$sra_rate_addr];
0x002724        D3200000                 r0 = M[r0 + Null];
0x002725        FD0000FF 19206836        M[$synchronized_rate] = r0 + Null;
0x002727        DDF0EB1D                 jump $pop_rLink_and_rts;

 <$M.cbops.soft_mute.message_handler.func>
0x002728        F3D00000                 push rLink;
0x002729        E420002F                 r0 = Null + 1;
0x00272A        2030003F                 r1 = Null - r1;
0x00272B        0003000F                 Null = r1 + Null;
0x00272C        00320000                 if EQ r1 = r0 + Null;
0x00272D        D53A0000                 M[r8 + 0] = r1;
0x00272E        DDF0EB16                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x00272F        F3D00000                 push rLink;
0x002730        01200010                 r0 = Null + 16;
0x002731        D1B70005                 r9 = M[r5 + 5];
0x002732        D52B003B                 M[r9 + 59] = r0;
0x002733        E1F0FF52                 call $sbcdec.silence_decoder;
0x002734        DDF0EB10                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x002735        F3D00000                 push rLink;
0x002736        D1B70005                 r9 = M[r5 + 5];
0x002737        E1F0FDC9                 call $sbcdec.private.init_tables;
0x002738        E1F0FEB3                 call $sbc.private.init_tables_common;
0x002739        DDF0EB0B                 jump $pop_rLink_and_rts;

 <$av_audio_out_silence_prime>
0x00273A        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x00273C        9122007D                 r0 = r0 ASHIFT -3;
0x00273D        19202F77                 M[$M.av_audio_out_silence_insert.left_zero_samples] = r0 + Null;
0x00273E        FD0000FF 19206817        M[$M.av_audio_out_silence_insert.right_zero_samples] = r0 + Null;
0x002740        DC0D000F                 rts;

 <$M.music_example_message.SignalDetect.func>
0x002741        F3D00000                 push rLink;
0x002742        8D330008                 r1 = r1 LSHIFT 8;
0x002743        01A02E67                 r8 = Null + 11879;
0x002744        E1F00007                 call $M.cbops.signal_detect_op.message_handler.func;
0x002745        DDF0EAFF                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x002746        F3D00000                 push rLink;
0x002747        D12B003B                 r0 = M[r9 + 59];
0x002748        81220007                 r0 = r0 AND 0x7;
0x002749        E1F0FE05                 call $sbcdec.getbits;
0x00274A        DDF0EAFA                 jump $pop_rLink_and_rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x00274B        F3D00000                 push rLink;
0x00274C        D53A0000                 M[r8 + 0] = r1;
0x00274D        D54A0001                 M[r8 + 1] = r2;
0x00274E        DDF0EAF6                 jump $pop_rLink_and_rts;

 <$sbc.init_static_common>
0x00274F        DC0D000F                 rts;

 <$i2c.send_byte>
0x002750        F3D00000                 push rLink;
0x002751        09402FD2                 r2 = Null + M[$i2c.pio_sda_mask];
0x002752        0930FE51                 r1 = Null + M[0xfffe51];
0x002753        FD0000FF 09646871        r4 = r2 + M[$i2c.pio_sclk_mask];
0x002755        87360000                 r1 = r1 OR r4;
0x002756        23360000                 r1 = r1 - r4;
0x002757        01500080                 r3 = Null + 128;

 <$M.i2c.send_byte.loop>
0x002758        0063000F                 r4 = r1 + Null;
0x002759        8002005F                 Null = r0 AND r3;
0x00275A        00630041                 if NE r4 = r1 + r2;
0x00275B        1960FE51                 M[0xfffe51] = r4 + Null;
0x00275C        E1F00069                 call $i2c.delay_low_clk;
0x00275D        FD0000FF 09666871        r4 = r4 + M[$i2c.pio_sclk_mask];
0x00275F        1960FE51                 M[0xfffe51] = r4 + Null;
0x002760        E1F00061                 call $i2c.delay_high_clk;
0x002761        8D55007F                 r3 = r3 LSHIFT -1;
0x002762        DD10FFF6                 if NE jump $M.i2c.send_byte.loop;
0x002763        0920FE53                 r0 = Null + M[0xfffe53];
0x002764        87240000                 r0 = r0 OR r2;
0x002765        23240000                 r0 = r0 - r2;
0x002766        1920FE53                 M[0xfffe53] = r0 + Null;
0x002767        0063004F                 r4 = r1 + r2;
0x002768        1960FE51                 M[0xfffe51] = r4 + Null;
0x002769        E1F0005C                 call $i2c.delay_low_clk;
0x00276A        E420002F                 r0 = Null + 1;
0x00276B        0930FE4F                 r1 = Null + M[0xfffe4f];
0x00276C        8003004F                 Null = r1 AND r2;
0x00276D        00200000                 if EQ r0 = Null + Null;
0x00276E        FD0000FF 09666871        r4 = r4 + M[$i2c.pio_sclk_mask];
0x002770        1960FE51                 M[0xfffe51] = r4 + Null;
0x002771        E1F00050                 call $i2c.delay_high_clk;
0x002772        FD0000FF 29666871        r4 = r4 - M[$i2c.pio_sclk_mask];
0x002774        1960FE51                 M[0xfffe51] = r4 + Null;
0x002775        0930FE53                 r1 = Null + M[0xfffe53];
0x002776        87340000                 r1 = r1 OR r2;
0x002777        1930FE53                 M[0xfffe53] = r1 + Null;
0x002778        DDF0EACC                 jump $pop_rLink_and_rts;

 <$i2c.receive_byte>
0x002779        F3D00000                 push rLink;
0x00277A        FD0000FF 19206872        M[$i2c.send_ack] = r0 + Null;
0x00277C        09402FD2                 r2 = Null + M[$i2c.pio_sda_mask];
0x00277D        0920FE53                 r0 = Null + M[0xfffe53];
0x00277E        87240000                 r0 = r0 OR r2;
0x00277F        3924FE53                 M[0xfffe53] = r0 - r2;
0x002780        0930FE51                 r1 = Null + M[0xfffe51];
0x002781        FD0000FF 09246871        r0 = r2 + M[$i2c.pio_sclk_mask];
0x002783        87320000                 r1 = r1 OR r0;
0x002784        01200000                 r0 = Null + 0;
0x002785        01500080                 r3 = Null + 128;

 <$M.i2c.receive_byte.loop>
0x002786        E1F0003F                 call $i2c.delay_low_clk;
0x002787        0960FE4F                 r4 = Null + M[0xfffe4f];
0x002788        8006004F                 Null = r4 AND r2;
0x002789        00220051                 if NE r0 = r0 + r3;
0x00278A        1930FE51                 M[0xfffe51] = r1 + Null;
0x00278B        E1F00036                 call $i2c.delay_high_clk;
0x00278C        FD0000FF 29636871        r4 = r1 - M[$i2c.pio_sclk_mask];
0x00278E        1960FE51                 M[0xfffe51] = r4 + Null;
0x00278F        8D55007F                 r3 = r3 LSHIFT -1;
0x002790        DD10FFF6                 if NE jump $M.i2c.receive_byte.loop;
0x002791        0930FE53                 r1 = Null + M[0xfffe53];
0x002792        87340000                 r1 = r1 OR r2;
0x002793        1930FE53                 M[0xfffe53] = r1 + Null;
0x002794        FD0000FF 09006872        Null = Null + M[$i2c.send_ack];
0x002796        20660041                 if NE r4 = r4 - r2;
0x002797        1960FE51                 M[0xfffe51] = r4 + Null;
0x002798        E1F0002D                 call $i2c.delay_low_clk;
0x002799        FD0000FF 09666871        r4 = r4 + M[$i2c.pio_sclk_mask];
0x00279B        1960FE51                 M[0xfffe51] = r4 + Null;
0x00279C        E1F00025                 call $i2c.delay_high_clk;
0x00279D        FD0000FF 29666871        r4 = r4 - M[$i2c.pio_sclk_mask];
0x00279F        1960FE51                 M[0xfffe51] = r4 + Null;
0x0027A0        DDF0EAA4                 jump $pop_rLink_and_rts;

 <$i2c.start_bit>
0x0027A1        F3D00000                 push rLink;
0x0027A2        FD0000FF 09306871        r1 = Null + M[$i2c.pio_sclk_mask];
0x0027A4        09402FD2                 r2 = Null + M[$i2c.pio_sda_mask];
0x0027A5        0920FE53                 r0 = Null + M[0xfffe53];
0x0027A6        0053004F                 r3 = r1 + r2;
0x0027A7        87250000                 r0 = r0 OR r3;
0x0027A8        1920FE53                 M[0xfffe53] = r0 + Null;
0x0027A9        E1F0001C                 call $i2c.delay_low_clk;
0x0027AA        0920FE51                 r0 = Null + M[0xfffe51];
0x0027AB        0053004F                 r3 = r1 + r2;
0x0027AC        87250000                 r0 = r0 OR r3;
0x0027AD        1920FE51                 M[0xfffe51] = r0 + Null;
0x0027AE        E1F00013                 call $i2c.delay_high_clk;
0x0027AF        3924FE51                 M[0xfffe51] = r0 - r2;
0x0027B0        E1F00011                 call $i2c.delay_high_clk;
0x0027B1        3925FE51                 M[0xfffe51] = r0 - r3;
0x0027B2        DDF0EA92                 jump $pop_rLink_and_rts;

 <$i2c.stop_bit>
0x0027B3        F3D00000                 push rLink;
0x0027B4        FD0000FF 09306871        r1 = Null + M[$i2c.pio_sclk_mask];
0x0027B6        09402FD2                 r2 = Null + M[$i2c.pio_sda_mask];
0x0027B7        0920FE51                 r0 = Null + M[0xfffe51];
0x0027B8        0053004F                 r3 = r1 + r2;
0x0027B9        87250000                 r0 = r0 OR r3;
0x0027BA        3925FE51                 M[0xfffe51] = r0 - r3;
0x0027BB        E1F0000A                 call $i2c.delay_low_clk;
0x0027BC        3924FE51                 M[0xfffe51] = r0 - r2;
0x0027BD        E1F00004                 call $i2c.delay_high_clk;
0x0027BE        1920FE51                 M[0xfffe51] = r0 + Null;
0x0027BF        E1F00002                 call $i2c.delay_high_clk;
0x0027C0        DDF0EA84                 jump $pop_rLink_and_rts;

 <$i2c.delay_high_clk>
0x0027C1        01C0013C                 r10 = Null + 316;
0x0027C2        E5F00002                 do $M.i2c.delay_high_clk.loop;
0x0027C3        03000000                 Null = Null + Null;

 <$M.i2c.delay_high_clk.loop>
0x0027C4        DC0D000F                 rts;

 <$i2c.delay_low_clk>
0x0027C5        01C00174                 r10 = Null + 372;
0x0027C6        E5F00002                 do $M.i2c.delay_low_clk.loop;
0x0027C7        03000000                 Null = Null + Null;

 <$M.i2c.delay_low_clk.loop>
0x0027C8        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x0027C9        FD000000 0120AAAA        r0 = Null + 43690;
0x0027CB        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x0027CC        DC0D0001                 if NE rts;
0x0027CD        F3D00000                 push rLink;
0x0027CE        01C00032                 r10 = Null + 50;
0x0027CF        09302FD1                 r1 = Null + M[$M.spi_comm.last_addr];
0x0027D0        09200045                 r0 = Null + M[$M.spi_block.command];
0x0027D1        FD000000 0190AAAA        r7 = Null + 43690;
0x0027D3        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x0027D4        E403002F                 Null = r1 + 1;
0x0027D5        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x0027D6        D1430001                 r2 = M[r1 + 1];
0x0027D7        2002004F                 Null = r0 - r2;
0x0027D8        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x0027D9        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x0027DA        E1F00D24                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x0027DB        D1D30002                 rLink = M[r1 + 2];
0x0027DC        01300005                 r1 = Null + 5;
0x0027DD        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x0027DE        E00D000F                 call rLink;
0x0027DF        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x0027E0        01205555                 r0 = Null + 21845;
0x0027E1        FD000000 0130AAAA        r1 = Null + 43690;
0x0027E3        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x0027E4        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x0027E5        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x0027E6        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x0027E7        DDF0EA5D                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x0027E8        D12A000A                 r0 = M[r8 + 10];
0x0027E9        D13A000B                 r1 = M[r8 + 11];
0x0027EA        D14A000C                 r2 = M[r8 + 12];
0x0027EB        D15A000E                 r3 = M[r8 + 14];
0x0027EC        D16A000F                 r4 = M[r8 + 15];
0x0027ED        2073002F                 r5 = r1 - r0;
0x0027EE        CC17005F                 rMAC = r5 * r3 (SS);
0x0027EF        D51A0012                 M[r8 + 18] = rMAC;
0x0027F0        2074003F                 r5 = r2 - r1;
0x0027F1        CC17006F                 rMAC = r5 * r4 (SS);
0x0027F2        D51A0013                 M[r8 + 19] = rMAC;
0x0027F3        D15A000D                 r3 = M[r8 + 13];
0x0027F4        D16A0010                 r4 = M[r8 + 16];
0x0027F5        2075004F                 r5 = r3 - r2;
0x0027F6        CC17006F                 rMAC = r5 * r4 (SS);
0x0027F7        D51A0014                 M[r8 + 20] = rMAC;
0x0027F8        01300000                 r1 = Null + 0;
0x0027F9        D16A0007                 r4 = M[r8 + 7];
0x0027FA        1863000F                 M[r4] = r1 + Null;
0x0027FB        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x0027FC        8966FFFF                 r4 = r4 XOR 0xffff;
0x0027FD        D5630003                 M[r1 + 3] = r4;
0x0027FE        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x0027FF        8520FFFF                 r0 = Null OR 0xffff;
0x002800        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x002801        F3D00000                 push rLink;
0x002802        E1F0E9EF                 call $block_interrupts;
0x002803        FD0000FF 0920685C        r0 = Null + M[$message.last_addr];
0x002805        D5230000                 M[r1 + 0] = r0;
0x002806        FD0000FF 1930685C        M[$message.last_addr] = r1 + Null;
0x002808        D5430001                 M[r1 + 1] = r2;
0x002809        D5530002                 M[r1 + 2] = r3;
0x00280A        E1F0E9BB                 call $interrupt.unblock;
0x00280B        DDF0EA39                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x00280C        F3D00000                 push rLink;
0x00280D        FD0000FF 013067B2        r1 = Null + -38990;
0x00280F        01407000                 r2 = Null + 28672;
0x002810        01502813                 r3 = Null + 10259;
0x002811        E1F0FFEE                 call $message.register_handler;
0x002812        DDF00004                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x002813        E420002F                 r0 = Null + 1;
0x002814        19202FBF                 M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x002815        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x002816        85408000                 r2 = Null OR 0x8000;
0x002817        E1F0E817                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x002818        09002FBF                 Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x002819        DD00FFFF                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x00281A        DDF0EA2A                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x00281B        F3D00000                 push rLink;
0x00281C        01302F25                 r1 = Null + 12069;
0x00281D        FD000000 01408007        r2 = Null + 32775;
0x00281F        01500F1A                 r3 = Null + 3866;
0x002820        E1F0FFDF                 call $message.register_handler;
0x002821        FD0000FF 013067B6        r1 = Null + -38986;
0x002823        85408008                 r2 = Null OR 0x8008;
0x002824        01500F1A                 r3 = Null + 3866;
0x002825        E1F0FFDA                 call $message.register_handler;
0x002826        DDF0EA1E                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x002827        F3D00000                 push rLink;
0x002828        FD0000FF 013067BA        r1 = Null + -38982;
0x00282A        8540801C                 r2 = Null OR 0x801c;
0x00282B        01500C39                 r3 = Null + 3129;
0x00282C        E1F0FFD3                 call $message.register_handler;
0x00282D        01302F2D                 r1 = Null + 12077;
0x00282E        8540801D                 r2 = Null OR 0x801d;
0x00282F        01501248                 r3 = Null + 4680;
0x002830        E1F0FFCF                 call $message.register_handler;
0x002831        DDF0EA13                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x002832        F3D00000                 push rLink;
0x002833        09202FD1                 r0 = Null + M[$M.spi_comm.last_addr];
0x002834        D5230000                 M[r1 + 0] = r0;
0x002835        19302FD1                 M[$M.spi_comm.last_addr] = r1 + Null;
0x002836        D5430001                 M[r1 + 1] = r2;
0x002837        D5530002                 M[r1 + 2] = r3;
0x002838        DDF0EA0C                 jump $pop_rLink_and_rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.initialize>
0x003000        F3D00000                 push rLink;
0x003001        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003002        81220007                 r0 = r0 AND 0x7;
0x003003        D03A000F                 r1 = M[r8 + Null];
0x003004        E423005F                 r0 = MIN r1;
0x003005        E422002F                 r0 = r0 + 1;
0x003006        03A20000                 r8 = r8 + r0;
0x003007        D3A00000                 r8 = M[r8 + Null];
0x003008        E1F00002                 call $user_eq.calcBankCoefs;
0x003009        DDF0E23B                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs>
0x00300A        F3D00000                 push rLink;
0x00300B        D029000F                 r0 = M[r7 + Null];
0x00300C        D1420003                 r2 = M[r0 + 3];
0x00300D        01202C8F                 r0 = Null + 11407;
0x00300E        FD0000FF 01305BC3        r1 = Null + -42045;
0x003010        2004002F                 Null = r2 - r0;
0x003011        00230000                 if EQ r0 = r1 + Null;
0x003012        F1000204                 pushm <r0, r7>;
0x003013        500000AF                 I0 = Null + r8;
0x003014        5010002F                 I1 = Null + r0;
0x003015        000A000F                 Null = r8 + Null;
0x003016        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x003017        01200000                 r0 = Null + 0;
0x003018        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003019        E420002F                 r0 = Null + 1;
0x00301A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301B        FD000040 01200000        r0 = Null + 4194304;
0x00301D        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301E        DDF00016                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x00301F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003020        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003021        F3200000                 push r0;
0x003022        E1F000A5                 call $user_eq.calcPreGain.call_entry;
0x003023        4420001F                 r0 = Null + I1;
0x003024        01220019                 r0 = r0 + 25;
0x003025        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003026        F1010007                 pushm <I0, I1, I2>;
0x003027        E1F0006F                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003028        F104001C                 popm <r0, r1, r2>;
0x003029        01220004                 r0 = r0 + 4;
0x00302A        5000002F                 I0 = Null + r0;
0x00302B        01330005                 r1 = r1 + 5;
0x00302C        5010003F                 I1 = Null + r1;
0x00302D        E444002F                 r2 = r2 + 1;
0x00302E        5020004F                 I2 = Null + r2;
0x00302F        F3240000                 pop r0;
0x003030        E422003F                 r0 = r0 - 1;
0x003031        F3200000                 push r0;
0x003032        DD10FFF4                 if NE jump $user_eq.calcBandLoop;
0x003033        F3240000                 pop r0;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x003034        F1040204                 popm <r0, r7>;
0x003035        F1000204                 pushm <r0, r7>;
0x003036        D3900000                 r7 = M[r7 + Null];
0x003037        D5290003                 M[r7 + 3] = r0;
0x003038        E1F00484                 call $audio_proc.peq.initialize;
0x003039        F1040204                 popm <r0, r7>;
0x00303A        D1990001                 r7 = M[r7 + 1];
0x00303B        D5290003                 M[r7 + 3] = r0;
0x00303C        E1F00480                 call $audio_proc.peq.initialize;
0x00303D        DDF0E207                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x00303E        F3D00000                 push rLink;
0x00303F        0062000F                 r4 = r0 + Null;
0x003040        8122FFF0                 r0 = r0 AND 0xfff0;
0x003041        E1F00027                 call $user_eq.calcParamAddrOffset;
0x003042        01A20E31                 r8 = r0 + 3633;
0x003043        D089000F                 r6 = M[r7 + Null];
0x003044        D1880003                 r6 = M[r6 + 3];
0x003045        21082C8F                 Null = r6 - 11407;
0x003046        DD000005                 if EQ jump $user_eq.calcBandCoefsB;
0x003047        01402C8F                 r2 = Null + 11407;
0x003048        FD0000FF 01505BC3        r3 = Null + -42045;
0x00304A        DDF00004                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x00304B        FD0000FF 01405BC3        r2 = Null + -42045;
0x00304D        01502C8F                 r3 = Null + 11407;

 <$user_eq.calcBandCoefsAorB>
0x00304E        5000005F                 I0 = Null + r3;
0x00304F        5010004F                 I1 = Null + r2;
0x003050        01C00021                 r10 = Null + 33;
0x003051        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x003052        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003053        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x003054        500000AF                 I0 = Null + r8;
0x003055        0026000F                 r0 = r4 + Null;
0x003056        E1F00027                 call $user_eq.calcCoefAddrOffset;
0x003057        00A2004F                 r8 = r0 + r2;
0x003058        501000AF                 I1 = Null + r8;
0x003059        00A3004F                 r8 = r1 + r2;
0x00305A        502000AF                 I2 = Null + r8;
0x00305B        F1000210                 pushm <r2, r7>;
0x00305C        0026000F                 r0 = r4 + Null;
0x00305D        E1F0002D                 call $user_eq.coefCalc;
0x00305E        F1040210                 popm <r2, r7>;
0x00305F        F1000210                 pushm <r2, r7>;
0x003060        D3900000                 r7 = M[r7 + Null];
0x003061        D5490003                 M[r7 + 3] = r2;
0x003062        E1F0045A                 call $audio_proc.peq.initialize;
0x003063        F1040210                 popm <r2, r7>;
0x003064        D1990001                 r7 = M[r7 + 1];
0x003065        D5490003                 M[r7 + 3] = r2;
0x003066        E1F00456                 call $audio_proc.peq.initialize;
0x003067        DDF0E1DD                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003068        F1000038                 pushm <r1, r2, r3>;
0x003069        81320F00                 r1 = r0 AND 0xf00;
0x00306A        91330078                 r1 = r1 ASHIFT -8;
0x00306B        814200F0                 r2 = r0 AND 0xf0;
0x00306C        9144007C                 r2 = r2 ASHIFT -4;
0x00306D        8152000F                 r3 = r0 AND 0xf;
0x00306E        0025000F                 r0 = r3 + Null;
0x00306F        21030000                 Null = r1 - 0;
0x003070        DD00000B                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003071        E433003F                 r1 = r1 - 1;
0x003072        99330016                 r1 = r1 * 22 (int);
0x003073        0023005F                 r0 = r1 + r3;
0x003074        E422002F                 r0 = r0 + 1;
0x003075        21040000                 Null = r2 - 0;
0x003076        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003077        E444003F                 r2 = r2 - 1;
0x003078        99440004                 r2 = r2 * 4 (int);
0x003079        03240000                 r0 = r0 + r2;
0x00307A        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x00307B        F1040038                 popm <r1, r2, r3>;
0x00307C        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x00307D        F1000030                 pushm <r2, r3>;
0x00307E        814200F0                 r2 = r0 AND 0xf0;
0x00307F        9144007C                 r2 = r2 ASHIFT -4;
0x003080        8152000F                 r3 = r0 AND 0xf;
0x003081        0025000F                 r0 = r3 + Null;
0x003082        21040000                 Null = r2 - 0;
0x003083        DD000005                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x003084        E444003F                 r2 = r2 - 1;
0x003085        0134001C                 r1 = r2 + 28;
0x003086        99240005                 r0 = r2 * 5 (int);
0x003087        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x003088        F1040030                 popm <r2, r3>;
0x003089        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x00308A        F3D00000                 push rLink;
0x00308B        814200F0                 r2 = r0 AND 0xf0;
0x00308C        9144007C                 r2 = r2 ASHIFT -4;
0x00308D        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x00308E        8122000F                 r0 = r0 AND 0xf;
0x00308F        21020000                 Null = r0 - 0;
0x003090        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x003091        03004100                 Null = Null + Null, r2 = M[I0,1];
0x003092        E402003F                 Null = r0 - 1;
0x003093        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x003094        F3D40000                 pop rLink;
0x003095        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x003096        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x003097        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003098        21020000                 Null = r0 - 0;
0x003099        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x00309A        019012CC                 r7 = Null + 4812;
0x00309B        E402003F                 Null = r0 - 1;
0x00309C        DD000050                 if EQ jump $user_eq.calcXP1.jump_entry;
0x00309D        01901301                 r7 = Null + 4865;
0x00309E        21020002                 Null = r0 - 2;
0x00309F        DD00004D                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A0        01901335                 r7 = Null + 4917;
0x0030A1        21020003                 Null = r0 - 3;
0x0030A2        DD00004A                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A3        01901434                 r7 = Null + 5172;
0x0030A4        21020007                 Null = r0 - 7;
0x0030A5        DD00005E                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A6        01901485                 r7 = Null + 5253;
0x0030A7        21020008                 Null = r0 - 8;
0x0030A8        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A9        019014D5                 r7 = Null + 5333;
0x0030AA        21020009                 Null = r0 - 9;
0x0030AB        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030AC        019013D5                 r7 = Null + 5077;
0x0030AD        21020004                 Null = r0 - 4;
0x0030AE        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030AF        019013F3                 r7 = Null + 5107;
0x0030B0        21020005                 Null = r0 - 5;
0x0030B1        DD000072                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B2        01901413                 r7 = Null + 5139;
0x0030B3        21020006                 Null = r0 - 6;
0x0030B4        DD00006F                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B5        019015BC                 r7 = Null + 5564;
0x0030B6        2102000A                 Null = r0 - 10;
0x0030B7        DD000091                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030B8        019015DD                 r7 = Null + 5597;
0x0030B9        2102000B                 Null = r0 - 11;
0x0030BA        DD00008E                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BB        01901600                 r7 = Null + 5632;
0x0030BC        2102000C                 Null = r0 - 12;
0x0030BD        DD00008B                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BE        2102000D                 Null = r0 - 13;
0x0030BF        DD0000B6                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030C0        F3D40000                 pop rLink;
0x0030C1        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030C2        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030C3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030C5        F3D40000                 pop rLink;
0x0030C6        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030C7        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030C8        0120003C                 r0 = Null + 60;
0x0030C9        E1F0EA63                 call $kal_float_lib.int_to_float;
0x0030CA        0042000F                 r2 = r0 + Null;
0x0030CB        0053000F                 r3 = r1 + Null;
0x0030CC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030CD        8D220008                 r0 = r0 LSHIFT 8;
0x0030CE        91220078                 r0 = r0 ASHIFT -8;
0x0030CF        0130F790                 r1 = Null + -2160;
0x0030D0        E423006F                 r0 = MAX r1;
0x0030D1        013002D0                 r1 = Null + 720;
0x0030D2        E423005F                 r0 = MIN r1;
0x0030D3        E1F0EA59                 call $kal_float_lib.int_to_float;
0x0030D4        E1F0EAAF                 call $kal_float_lib.div;
0x0030D5        E1F0E195                 call $kal_filter_coef_lib.__db2lin;
0x0030D6        812200FF                 r0 = r0 AND 0xff;
0x0030D7        2122007F                 r0 = r0 - 127;
0x0030D8        8D33007F                 r1 = r1 LSHIFT -1;
0x0030D9        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030DA        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0030DB        F3D40000                 pop rLink;
0x0030DC        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x0030DD        F1030006                 SP = SP + 6;
0x0030DE        E1F0E1E1                 call $kal_filter_coef_lib.calc_bypass;
0x0030DF        DDF000C4                 jump $user_eq.pop_biquad_coefs_and_rts;
0x0030E0        FD000040 01200000        r0 = Null + 4194304;
0x0030E2        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E3        01200000                 r0 = Null + 0;
0x0030E4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E6        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E8        E420002F                 r0 = Null + 1;
0x0030E9        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0030EA        F3D40000                 pop rLink;
0x0030EB        DC0D000F                 rts;

 <$user_eq.calcXP1.jump_entry>
0x0030EC        F1030006                 SP = SP + 6;
0x0030ED        01200003                 r0 = Null + 3;
0x0030EE        E1F0EA3E                 call $kal_float_lib.int_to_float;
0x0030EF        0042000F                 r2 = r0 + Null;
0x0030F0        0053000F                 r3 = r1 + Null;
0x0030F1        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F2        E430002F                 r1 = Null + 1;
0x0030F3        E423006F                 r0 = MAX r1;
0x0030F4        FD000000 0130EA60        r1 = Null + 60000;
0x0030F6        E423005F                 r0 = MIN r1;
0x0030F7        E1F0EA35                 call $kal_float_lib.int_to_float;
0x0030F8        E1F0EA8B                 call $kal_float_lib.div;
0x0030F9        F100000C                 pushm <r0, r1>;
0x0030FA        FD000000 0130BB80        r1 = Null + 48000;
0x0030FC        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x0030FE        00230000                 if EQ r0 = r1 + Null;
0x0030FF        E1F0EA2D                 call $kal_float_lib.int_to_float;
0x003100        F100000C                 pushm <r0, r1>;
0x003101        E009000F                 call r7;
0x003102        DDF000A1                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003103        F1030006                 SP = SP + 6;
0x003104        01200003                 r0 = Null + 3;
0x003105        E1F0EA27                 call $kal_float_lib.int_to_float;
0x003106        0042000F                 r2 = r0 + Null;
0x003107        0053000F                 r3 = r1 + Null;
0x003108        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003109        01300078                 r1 = Null + 120;
0x00310A        E423006F                 r0 = MAX r1;
0x00310B        FD000000 0130EA60        r1 = Null + 60000;
0x00310D        E423005F                 r0 = MIN r1;
0x00310E        E1F0EA1E                 call $kal_float_lib.int_to_float;
0x00310F        E1F0EA74                 call $kal_float_lib.div;
0x003110        F100000C                 pushm <r0, r1>;
0x003111        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003112        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003113        01300400                 r1 = Null + 1024;
0x003114        E423006F                 r0 = MAX r1;
0x003115        01302000                 r1 = Null + 8192;
0x003116        E423005F                 r0 = MIN r1;
0x003117        0130000C                 r1 = Null + 12;
0x003118        E1F0E9F9                 call $kal_float_lib.q_to_float;
0x003119        F100000C                 pushm <r0, r1>;
0x00311A        FD000000 0130BB80        r1 = Null + 48000;
0x00311C        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x00311E        00230000                 if EQ r0 = r1 + Null;
0x00311F        E1F0EA0D                 call $kal_float_lib.int_to_float;
0x003120        F100000C                 pushm <r0, r1>;
0x003121        E009000F                 call r7;
0x003122        DDF00081                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x003123        F1030006                 SP = SP + 6;
0x003124        01200003                 r0 = Null + 3;
0x003125        E1F0EA07                 call $kal_float_lib.int_to_float;
0x003126        0042000F                 r2 = r0 + Null;
0x003127        0053000F                 r3 = r1 + Null;
0x003128        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003129        0130003C                 r1 = Null + 60;
0x00312A        E423006F                 r0 = MAX r1;
0x00312B        FD000000 0130EA60        r1 = Null + 60000;
0x00312D        E423005F                 r0 = MIN r1;
0x00312E        E1F0E9FE                 call $kal_float_lib.int_to_float;
0x00312F        E1F0EA54                 call $kal_float_lib.div;
0x003130        F100000C                 pushm <r0, r1>;
0x003131        0120003C                 r0 = Null + 60;
0x003132        E1F0E9FA                 call $kal_float_lib.int_to_float;
0x003133        0042000F                 r2 = r0 + Null;
0x003134        0053000F                 r3 = r1 + Null;
0x003135        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003136        8D220008                 r0 = r0 LSHIFT 8;
0x003137        91220078                 r0 = r0 ASHIFT -8;
0x003138        0130FD30                 r1 = Null + -720;
0x003139        E423006F                 r0 = MAX r1;
0x00313A        013002D0                 r1 = Null + 720;
0x00313B        E423005F                 r0 = MIN r1;
0x00313C        E1F0E9F0                 call $kal_float_lib.int_to_float;
0x00313D        E1F0EA46                 call $kal_float_lib.div;
0x00313E        F100000C                 pushm <r0, r1>;
0x00313F        FD000000 0130BB80        r1 = Null + 48000;
0x003141        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003143        00230000                 if EQ r0 = r1 + Null;
0x003144        E1F0E9E8                 call $kal_float_lib.int_to_float;
0x003145        F100000C                 pushm <r0, r1>;
0x003146        E009000F                 call r7;
0x003147        DDF0005C                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003148        F1030006                 SP = SP + 6;
0x003149        01200003                 r0 = Null + 3;
0x00314A        E1F0E9E2                 call $kal_float_lib.int_to_float;
0x00314B        0042000F                 r2 = r0 + Null;
0x00314C        0053000F                 r3 = r1 + Null;
0x00314D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314E        01300078                 r1 = Null + 120;
0x00314F        E423006F                 r0 = MAX r1;
0x003150        FD000000 0130EA60        r1 = Null + 60000;
0x003152        E423005F                 r0 = MIN r1;
0x003153        E1F0E9D9                 call $kal_float_lib.int_to_float;
0x003154        E1F0EA2F                 call $kal_float_lib.div;
0x003155        F100000C                 pushm <r0, r1>;
0x003156        0120003C                 r0 = Null + 60;
0x003157        E1F0E9D5                 call $kal_float_lib.int_to_float;
0x003158        0042000F                 r2 = r0 + Null;
0x003159        0053000F                 r3 = r1 + Null;
0x00315A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00315B        8D220008                 r0 = r0 LSHIFT 8;
0x00315C        91220078                 r0 = r0 ASHIFT -8;
0x00315D        0130FD30                 r1 = Null + -720;
0x00315E        E423006F                 r0 = MAX r1;
0x00315F        013002D0                 r1 = Null + 720;
0x003160        E423005F                 r0 = MIN r1;
0x003161        E1F0E9CB                 call $kal_float_lib.int_to_float;
0x003162        E1F0EA21                 call $kal_float_lib.div;
0x003163        F100000C                 pushm <r0, r1>;
0x003164        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003165        01300400                 r1 = Null + 1024;
0x003166        E423006F                 r0 = MAX r1;
0x003167        01302000                 r1 = Null + 8192;
0x003168        E423005F                 r0 = MIN r1;
0x003169        0130000C                 r1 = Null + 12;
0x00316A        E1F0E9A7                 call $kal_float_lib.q_to_float;
0x00316B        F100000C                 pushm <r0, r1>;
0x00316C        FD000000 0130BB80        r1 = Null + 48000;
0x00316E        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003170        00230000                 if EQ r0 = r1 + Null;
0x003171        E1F0E9BB                 call $kal_float_lib.int_to_float;
0x003172        F100000C                 pushm <r0, r1>;
0x003173        E009000F                 call r7;
0x003174        DDF0002F                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x003175        F1030006                 SP = SP + 6;
0x003176        01200003                 r0 = Null + 3;
0x003177        E1F0E9B5                 call $kal_float_lib.int_to_float;
0x003178        0042000F                 r2 = r0 + Null;
0x003179        0053000F                 r3 = r1 + Null;
0x00317A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00317B        0130003C                 r1 = Null + 60;
0x00317C        E423006F                 r0 = MAX r1;
0x00317D        FD000000 0130EA60        r1 = Null + 60000;
0x00317F        E423005F                 r0 = MIN r1;
0x003180        E1F0E9AC                 call $kal_float_lib.int_to_float;
0x003181        E1F0EA02                 call $kal_float_lib.div;
0x003182        F100000C                 pushm <r0, r1>;
0x003183        0120003C                 r0 = Null + 60;
0x003184        E1F0E9A8                 call $kal_float_lib.int_to_float;
0x003185        0042000F                 r2 = r0 + Null;
0x003186        0053000F                 r3 = r1 + Null;
0x003187        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003188        8D220008                 r0 = r0 LSHIFT 8;
0x003189        91220078                 r0 = r0 ASHIFT -8;
0x00318A        0130F790                 r1 = Null + -2160;
0x00318B        E423006F                 r0 = MAX r1;
0x00318C        013002D0                 r1 = Null + 720;
0x00318D        E423005F                 r0 = MIN r1;
0x00318E        E1F0E99E                 call $kal_float_lib.int_to_float;
0x00318F        E1F0E9F4                 call $kal_float_lib.div;
0x003190        F100000C                 pushm <r0, r1>;
0x003191        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003192        01300400                 r1 = Null + 1024;
0x003193        E423006F                 r0 = MAX r1;
0x003194        FD000000 01308000        r1 = Null + 32768;
0x003196        E423005F                 r0 = MIN r1;
0x003197        0130000C                 r1 = Null + 12;
0x003198        E1F0E979                 call $kal_float_lib.q_to_float;
0x003199        F100000C                 pushm <r0, r1>;
0x00319A        FD000000 0130BB80        r1 = Null + 48000;
0x00319C        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x00319E        00230000                 if EQ r0 = r1 + Null;
0x00319F        E1F0E98D                 call $kal_float_lib.int_to_float;
0x0031A0        F100000C                 pushm <r0, r1>;
0x0031A1        E1F0E483                 call $kal_filter_coef_lib.calc_peq;
0x0031A2        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031A3        F3240000                 pop r0;
0x0031A4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A5        F3240000                 pop r0;
0x0031A6        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A7        F3240000                 pop r0;
0x0031A8        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A9        F3240000                 pop r0;
0x0031AA        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AB        F3240000                 pop r0;
0x0031AC        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AD        F3240000                 pop r0;
0x0031AE        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0031AF        F3D40000                 pop rLink;
0x0031B0        DC0D000F                 rts;

 <$main>
0x0031B1        E1F00325                 call $_stack_initialise;
0x0031B2        E1F002FD                 call $interrupt.initialise;
0x0031B3        E1F00351                 call $message.initialise;
0x0031B4        E1F00343                 call $cbuffer.initialise;
0x0031B5        E1F0F666                 call $pskey.initialise;
0x0031B6        E1F0F671                 call $wall_clock.initialise;
0x0031B7        E1F0CE86                 call $flash.init_dmconst;
0x0031B8        01302EAD                 r1 = Null + 11949;
0x0031B9        01401070                 r2 = Null + 4208;
0x0031BA        01503401                 r3 = Null + 13313;
0x0031BB        E1F0F644                 call $message.register_handler;
0x0031BC        FD0000FF 0130673E        r1 = Null + -39106;
0x0031BE        01401071                 r2 = Null + 4209;
0x0031BF        01503480                 r3 = Null + 13440;
0x0031C0        E1F0F63F                 call $message.register_handler;
0x0031C1        01302EB1                 r1 = Null + 11953;
0x0031C2        01401072                 r2 = Null + 4210;
0x0031C3        01500C69                 r3 = Null + 3177;
0x0031C4        E1F0F63B                 call $message.register_handler;
0x0031C5        E1F0E517                 call $vee.accelerate.start;
0x0031C6        E1F0E6B0                 call $vee.heartrate.start;
0x0031C7        E1F00340                 call $spi_comm.initialize;
0x0031C8        E1F002CE                 call $music_example.power_up_reset;
0x0031C9        01401000                 r2 = Null + 4096;
0x0031CA        FD000000 0150E008        r3 = Null + 57352;
0x0031CC        09602F78                 r4 = Null + M[$music_example.Version];
0x0031CD        8D660078                 r4 = r4 LSHIFT -8;
0x0031CE        E1F0DE60                 call $message.send_short;
0x0031CF        E1F0EAA0                 call $M.Subwoofer.subwoofer_init;
0x0031D0        FD0000FF 019035F2        r7 = Null + -51726;
0x0031D2        E1F0DEDF                 call $latency.reset_encoded_latency;
0x0031D3        E1F0F639                 call $message.send_ready_wait_for_go;
0x0031D4        E1F0EEB9                 call $conn_init;
0x0031D5        E1F0017C                 call $config_resampler;
0x0031D6        E1F00100                 call $config_rate_matching;
0x0031D7        01A004C5                 r8 = Null + 1221;
0x0031D8        E1F0F438                 call $config_usb;
0x0031D9        01302EB5                 r1 = Null + 11957;
0x0031DA        014005DC                 r2 = Null + 1500;
0x0031DB        01500DCD                 r3 = Null + 3533;
0x0031DC        E1F0E05E                 call $timer.schedule_event_in;
0x0031DD        FD0000FF 01306742        r1 = Null + -39102;
0x0031DF        09402F72                 r2 = Null + M[$tmr_period_con_copy];
0x0031E0        01500CBB                 r3 = Null + 3259;
0x0031E1        E1F0E059                 call $timer.schedule_event_in;
0x0031E2        FD0000FF 01306746        r1 = Null + -39098;
0x0031E4        FD0000FF 09406812        r2 = Null + M[$tmr_period_tone_copy];
0x0031E6        01500B51                 r3 = Null + 2897;
0x0031E7        E1F0E053                 call $timer.schedule_event_in;
0x0031E8        01302EB9                 r1 = Null + 11961;
0x0031E9        FD00000F 01404240        r2 = Null + 1000000;
0x0031EB        01502704                 r3 = Null + 9988;
0x0031EC        E1F0E04E                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x0031ED        E1F0E634                 call $vee.accelerate.angle_calc;
0x0031EE        E1F0E794                 call $vee.heartrate.calc;
0x0031EF        E1F0F5DA                 call $spi_comm.polled_service_routine;
0x0031F0        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x0031F2        21020005                 Null = r0 - 5;
0x0031F3        DD00001E                 if EQ jump $M.main.skip_a2dp_decode;
0x0031F4        21020008                 Null = r0 - 8;
0x0031F5        DD00001C                 if EQ jump $M.main.skip_a2dp_decode;

 <$M.main.start_profiler>
0x0031F6        FD0000FF 01A03FF5        r8 = Null + -49163;
0x0031F8        E1F0D985                 call $M.mips_profile.mainstart;
0x0031F9        01700471                 r5 = Null + 1137;
0x0031FA        E1F0EEFD                 call $codec.av_decode;
0x0031FB        09200482                 r0 = Null + M[0x482];
0x0031FC        E110F53E                 if NE call $av_audio_out_silence_prime;
0x0031FD        09200482                 r0 = Null + M[0x482];
0x0031FE        E100F4EF                 if EQ call $av_audio_out_silence_insert;
0x0031FF        E1F0D2D8                 call $sra_calcrate;
0x003200        FD0000FF 0900683A        Null = Null + M[$M.configure_latency_reporting.enabled];
0x003202        DD000004                 if EQ jump $M.main.skip_latency_measurement;
0x003203        FD0000FF 019035F2        r7 = Null + -51726;
0x003205        E1F0D56C                 call $latency.calc_encoded_latency;

 <$M.main.skip_latency_measurement>
0x003206        FD0000FF 01A03FF5        r8 = Null + -49163;
0x003208        E1F0D982                 call $M.mips_profile.mainend;
0x003209        D12A0006                 r0 = M[r8 + 6];
0x00320A        FD0000FF 19206750        M[$music_example.PeakMipsDecoder] = r0 + Null;
0x00320C        01700471                 r5 = Null + 1137;
0x00320D        D1270006                 r0 = M[r5 + 6];
0x00320E        21020000                 Null = r0 - 0;
0x00320F        E11002D2                 if NE call $frame_sync.1ms_delay;
0x003210        DDF00002                 jump $M.main.done_decode;

 <$M.main.skip_a2dp_decode>
0x003211        E1F0D2C6                 call $sra_calcrate;

 <$M.main.done_decode>
0x003212        09202F84                 r0 = Null + M[$sub_link_port];
0x003213        FD000091 2102A00E        Null = r0 - -7233522;
0x003215        DD10000A                 if NE jump $M.main.not_esco_sub;
0x003216        FD0000FF 092037FF        r0 = Null + M[$app_config.io];
0x003218        21020005                 Null = r0 - 5;
0x003219        DD000004                 if EQ jump $M.main.usb_input;
0x00321A        E1F002C7                 call $frame_sync.1ms_delay;
0x00321B        E1F0E9AB                 call $M.Subwoofer.esco_preprocess;
0x00321C        DDF00003                 jump $M.main.not_esco_sub;

 <$M.main.usb_input>
0x00321D        0120270D                 r0 = Null + 9997;
0x00321E        19202F8D                 M[$sub_app_esco_func] = r0 + Null;

 <$M.main.not_esco_sub>
0x00321F        FD0000FF 0950681A        r3 = Null + M[$music_example.frame_processing_size];
0x003221        012000A5                 r0 = Null + 165;
0x003222        E1F0DFC7                 call $cbuffer.calc_amount_data;
0x003223        2002005F                 Null = r0 - r3;
0x003224        DD40FFC9                 if NEG jump $M.main.frame_loop;
0x003225        012000AD                 r0 = Null + 173;
0x003226        E1F0DFB3                 call $cbuffer.calc_amount_space;
0x003227        2002005F                 Null = r0 - r3;
0x003228        DD40FFC5                 if NEG jump $M.main.frame_loop;
0x003229        FD0000FF 012067C9        r0 = Null + -38967;
0x00322B        E1F0DFBE                 call $cbuffer.calc_amount_data;
0x00322C        2002005F                 Null = r0 - r3;
0x00322D        DD40FFC0                 if NEG jump $M.main.frame_loop;
0x00322E        FD0000FF 09006819        Null = Null + M[$music_example.stereo_processing];
0x003230        DD000006                 if EQ jump $M.main.mono_process;
0x003231        FD0000FF 012067CC        r0 = Null + -38964;
0x003233        E1F0DFA6                 call $cbuffer.calc_amount_space;
0x003234        2002005F                 Null = r0 - r3;
0x003235        DD40FFB8                 if NEG jump $M.main.frame_loop;

 <$M.main.mono_process>
0x003236        E1F0EA42                 call $M.Subwoofer.synchronise;

 <$M.main.process>
0x003237        E1F0F178                 call $jitter_buffering;
0x003238        FD0000FF 09006816        Null = Null + M[$M.jitter_buffering.is_buffering];
0x00323A        DD10FFB3                 if NE jump $M.main.frame_loop;
0x00323B        E1F00017                 call $music_example_process;
0x00323C        09202F84                 r0 = Null + M[$sub_link_port];
0x00323D        FD000091 2102A00E        Null = r0 - -7233522;
0x00323F        DD100003                 if NE jump $M.main.check_l2cap_sub;
0x003240        09002F8D                 Null = Null + M[$sub_app_esco_func];
0x003241        E100E989                 if EQ call $M.Subwoofer.esco_post_process;

 <$M.main.check_l2cap_sub>
0x003242        09202F84                 r0 = Null + M[$sub_link_port];
0x003243        FD000094 2102600F        Null = r0 - -7053297;
0x003245        DD10FFA8                 if NE jump $M.main.frame_loop;
0x003246        E1F0EF15                 call $downsample_sub_to_1k2;
0x003247        01202F4A                 r0 = Null + 12106;
0x003248        E1F0DFA1                 call $cbuffer.calc_amount_data;
0x003249        21020012                 Null = r0 - 18;
0x00324A        DD40FFA3                 if NEG jump $M.main.frame_loop;
0x00324B        E1F0E971                 call $M.Subwoofer.l2cap_handler;
0x00324C        01202F4A                 r0 = Null + 12106;
0x00324D        E1F0DF9C                 call $cbuffer.calc_amount_data;
0x00324E        21020012                 Null = r0 - 18;
0x00324F        DD40FF9E                 if NEG jump $M.main.frame_loop;
0x003250        E1F0E96C                 call $M.Subwoofer.l2cap_handler;
0x003251        DDF0FF9C                 jump $M.main.frame_loop;

 <$music_example_process>
0x003252        F3D00000                 push rLink;
0x003253        1900FE93                 M[0xfffe93] = Null + Null;
0x003254        01A01BF5                 r8 = Null + 7157;
0x003255        E1F0D928                 call $M.mips_profile.mainstart;
0x003256        09002F79                 Null = Null + M[$music_example.reinit];
0x003257        E11001C2                 if NE call $music_example_reinitialize;
0x003258        FD0000FF 09306818        r1 = Null + M[$music_example.sys_mode];
0x00325A        09202E9E                 r0 = Null + M[$music_example.SpiSysControl];
0x00325B        09602EA1                 r4 = Null + M[$music_example.OvrMode];
0x00325C        81022000                 Null = r0 AND 0x2000;
0x00325D        00360001                 if NE r1 = r4 + Null;
0x00325E        8D530001                 r3 = r1 LSHIFT 1;
0x00325F        FD0000FF D145663A        r2 = M[r3 + -39366];
0x003261        FD000080 0120000D        r0 = Null + -8388595;
0x003263        E1F0DFA6                 call $cbuffer.is_it_enabled;
0x003264        00340000                 if EQ r1 = r2 + Null;
0x003265        E440002F                 r2 = Null + 1;
0x003266        01600004                 r4 = Null + 4;
0x003267        8D530001                 r3 = r1 LSHIFT 1;
0x003268        FD0000FF D105663B        Null = M[r3 + -39365];
0x00326A        00460000                 if EQ r2 = r4 + Null;
0x00326B        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x00326D        FD0000FF 09606823        r4 = Null + M[$M.system_config.data.dithertype];
0x00326F        FD000000 2102AC44        Null = r0 - 44100;
0x003271        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x003272        FD000000 2102BB80        Null = r0 - 48000;
0x003274        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x003275        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x003276        FD0000FF 1930674E        M[$music_example.CurMode] = r1 + Null;
0x003278        01400000                 r2 = Null + 0;
0x003279        E403003F                 Null = r1 - 1;
0x00327A        00640000                 if EQ r4 = r2 + Null;
0x00327B        21030004                 Null = r1 - 4;
0x00327C        00640000                 if EQ r4 = r2 + Null;
0x00327D        0920008F                 r0 = Null + M[$current_dac_sampling_rate];
0x00327E        FD000000 2102AC44        Null = r0 - 44100;
0x003280        00640004                 if NEG r4 = r2 + Null;
0x003281        19602D3C                 M[0x2d3c] = r4 + Null;
0x003282        FD0000FF 196065FB        M[0xff65fb] = r4 + Null;
0x003284        8D530001                 r3 = r1 LSHIFT 1;
0x003285        FD0000FF D125663B        r0 = M[r3 + -39365];
0x003287        FD0000FF 19206819        M[$music_example.stereo_processing] = r0 + Null;
0x003289        D1632E3B                 r4 = M[r1 + 11835];
0x00328A        E1F0DF45                 call $frame_sync.run_function_table;
0x00328B        01A01BF5                 r8 = Null + 7157;
0x00328C        E1F0D8FE                 call $M.mips_profile.mainend;
0x00328D        D12A0006                 r0 = M[r8 + 6];
0x00328E        FD0000FF 1920674F        M[$music_example.PeakMipsFunc] = r0 + Null;
0x003290        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003292        FD0000FF 19206751        M[$music_example.SamplingRate] = r0 + Null;
0x003294        DDF0DFB0                 jump $pop_rLink_and_rts;

 <$M.music_example.PsKeyReadHandler.func>
0x003295        F3D00000                 push rLink;
0x003296        E404002F                 Null = r2 + 1;
0x003297        DD10000C                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x003298        FD0000FF 0920681E        r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x00329A        DD000005                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x00329B        FD0000FF 1900681E        M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x00329D        09402F7F                 r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x00329E        DDF00155                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x00329F        E420002F                 r0 = Null + 1;
0x0032A0        FD0000FF 1920681E        M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x0032A2        DDF00157                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x0032A3        51050001                 I0 = r3 + 1;
0x0032A4        E4C4003F                 r10 = r2 - 1;
0x0032A5        5820000F                 I2 = I0 + Null;
0x0032A6        FD000000 0150FFFF        r3 = Null + 65535;
0x0032A8        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x0032A9        03002800                 Null = Null + Null, r0 = M[I2,0];
0x0032AA        83250000                 r0 = r0 AND r3;
0x0032AB        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x0032AC        01C00100                 r10 = Null + 256;
0x0032AD        79220001                 I2 = I2 - 1;
0x0032AE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0032AF        2003002F                 Null = r1 - r0;
0x0032B0        DD100149                 if NE jump $M.music_example.LoadParams.done;
0x0032B1        03007100                 Null = Null + Null, r5 = M[I0,1];
0x0032B2        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0032B3        816200FF                 r4 = r0 AND 0xff;
0x0032B4        006C0000                 if EQ r4 = r10 + Null;
0x0032B5        8D220078                 r0 = r0 LSHIFT -8;
0x0032B6        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x0032B7        8DAA007F                 r8 = r8 LSHIFT -1;
0x0032B8        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x0032B9        6C02000F                 Null = I2 - I0;
0x0032BA        DD400016                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x0032BB        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0032BC        FD000000 01A08000        r8 = Null + 32768;
0x0032BE        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x0032BF        800500AF                 Null = r3 AND r8;
0x0032C0        DD00000D                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x0032C1        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x0032C3        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x0032C4        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0032C5        8D840078                 r6 = r2 LSHIFT -8;
0x0032C6        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x0032C7        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x0032C8        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0032C9        8D880010                 r6 = r6 LSHIFT 16;
0x0032CA        87380000                 r1 = r1 OR r6;
0x0032CB        09822F7E                 r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x0032CC        D5380DDC                 M[r6 + 3548] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x0032CD        E422002F                 r0 = r0 + 1;
0x0032CE        2002006F                 Null = r0 - r4;
0x0032CF        DD40FFE8                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x0032D0        09402F7E                 r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x0032D1        200600CF                 Null = r4 - r10;
0x0032D2        004400C0                 if EQ r2 = r2 + r10;
0x0032D3        19402F7E                 M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x0032D4        0047000F                 r2 = r5 + Null;
0x0032D5        DDF0011E                 jump $M.music_example.LoadParams.TestPsKey;

 <$config_rate_matching>
0x0032D6        F3D00000                 push rLink;
0x0032D7        FD0000FF 09303FFF        r1 = Null + M[$current_codec_sampling_rate];
0x0032D9        99330002                 r1 = r1 * 2 (int);
0x0032DA        FD0000FF 19305B3E        M[0xff5b3e] = r1 + Null;
0x0032DC        FD0000FF 0940680D        r2 = Null + M[$max_clock_mismatch];
0x0032DE        8D240079                 r0 = r2 LSHIFT -7;
0x0032DF        81220001                 r0 = r0 AND 0x1;
0x0032E0        19202F73                 M[$rate_match_disable] = r0 + Null;
0x0032E1        09602F6C                 r4 = Null + M[$local_encoded_play_back];
0x0032E2        DD000005                 if EQ jump $M.config_rate_matching.is_remote_stream;
0x0032E3        012001F4                 r0 = Null + 500;
0x0032E4        19202F72                 M[$tmr_period_con_copy] = r0 + Null;
0x0032E5        E420002F                 r0 = Null + 1;
0x0032E6        19202F73                 M[$rate_match_disable] = r0 + Null;

 <$M.config_rate_matching.is_remote_stream>
0x0032E7        09002F73                 Null = Null + M[$rate_match_disable];
0x0032E8        DD10002C                 if NE jump $M.config_rate_matching.end;
0x0032E9        8144007F                 r2 = r2 AND 0x7f;
0x0032EA        21340004                 r1 = r2 - 4;
0x0032EB        20440034                 if NEG r2 = r2 - r1;
0x0032EC        994420C5                 r2 = r2 * 8389 (int);
0x0032ED        95342000                 r1 = r2 * 0.25 (frac);
0x0032EE        03430000                 r2 = r2 + r1;
0x0032EF        FD000003 2134D70A        r1 = r2 - 251658;
0x0032F1        20440035                 if POS r2 = r2 - r1;
0x0032F2        FD0000FF 19405B3D        M[0xff5b3d] = r2 + Null;
0x0032F4        FD000040 01400000        r2 = Null + 4194304;
0x0032F6        FD0000FF 19405B52        M[0xff5b52] = r2 + Null;
0x0032F8        09502F6E                 r3 = Null + M[$long_term_mismatch];
0x0032F9        81250001                 r0 = r3 AND 0x1;
0x0032FA        DD00001A                 if EQ jump $M.config_rate_matching.end;
0x0032FB        9155007F                 r3 = r3 ASHIFT -1;
0x0032FC        91550006                 r3 = r3 ASHIFT 6;
0x0032FD        FD0000FF 29055B3D        Null = r3 - M[0xff5b3d];
0x0032FF        DD500015                 if POS jump $M.config_rate_matching.end;
0x003300        FD0000FF 09055B3D        Null = r3 + M[0xff5b3d];
0x003302        DD400012                 if NEG jump $M.config_rate_matching.end;
0x003303        FD0000FF 19505B51        M[0xff5b51] = r3 + Null;
0x003305        FD0000FF 19505B4A        M[0xff5b4a] = r3 + Null;
0x003307        FD0000FF 09205B3E        r0 = Null + M[0xff5b3e];
0x003309        97250000                 r0 = r0 * r3 (frac);
0x00330A        FD0000FF 19205B59        M[0xff5b59] = r0 + Null;
0x00330C        FD0000FF 19205B5A        M[0xff5b5a] = r0 + Null;
0x00330E        01200002                 r0 = Null + 2;
0x00330F        FD0000FF 19205B4C        M[0xff5b4c] = r0 + Null;
0x003311        E420002F                 r0 = Null + 1;
0x003312        FD0000FF 19205B53        M[0xff5b53] = r0 + Null;

 <$M.config_rate_matching.end>
0x003314        DDF0DF30                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.vmdB2vol>
0x003315        FD000035 0130F5E3        r1 = Null + 3536355;
0x003317        991200B5                 rMAC = r0 * 181 (int);
0x003318        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x003319        FD000004 21210000        r0 = rMAC - 262144;
0x00331B        00200005                 if POS r0 = Null + Null;
0x00331C        DDF0DDCA                 jump $math.pow2_taylor;

 <$M.music_example_message.Volume.update_volumes>
0x00331D        F3D00000                 push rLink;
0x00331E        8133000F                 r1 = r1 AND 0xf;
0x00331F        19302F7B                 M[$music_example.SystemVolume] = r1 + Null;
0x003320        0004000F                 Null = r2 + Null;
0x003321        00400005                 if POS r2 = Null + Null;
0x003322        FD0000FF 1940681B        M[$music_example.MasterVolume] = r2 + Null;
0x003324        0005000F                 Null = r3 + Null;
0x003325        00500005                 if POS r3 = Null + Null;
0x003326        19502F7C                 M[$music_example.ToneVolume] = r3 + Null;
0x003327        212602D2                 r0 = r4 - 722;
0x003328        20660025                 if POS r4 = r4 - r0;
0x003329        2126FD2E                 r0 = r4 - -722;
0x00332A        20660024                 if NEG r4 = r4 - r0;
0x00332B        FD0000FF 1960681C        M[$music_example.LeftTrimVolume] = r4 + Null;
0x00332D        212702D2                 r0 = r5 - 722;
0x00332E        20770025                 if POS r5 = r5 - r0;
0x00332F        2126FD2E                 r0 = r4 - -722;
0x003330        20770024                 if NEG r5 = r5 - r0;
0x003331        19702F7D                 M[$music_example.RightTrimVolume] = r5 + Null;
0x003332        0024000F                 r0 = r2 + Null;
0x003333        E1F0FFE2                 call $M.music_example_message.Volume.vmdB2vol;
0x003334        91220002                 r0 = r0 ASHIFT 2;
0x003335        19202D5D                 M[0x2d5d] = r0 + Null;
0x003336        19202DC5                 M[0x2dc5] = r0 + Null;
0x003337        09202F7C                 r0 = Null + M[$music_example.ToneVolume];
0x003338        E1F0FFDD                 call $M.music_example_message.Volume.vmdB2vol;
0x003339        91520003                 r3 = r0 ASHIFT 3;
0x00333A        19502D26                 M[0x2d26] = r3 + Null;
0x00333B        FD0000FF 195065E5        M[0xff65e5] = r3 + Null;
0x00333D        FD0000FF 0920681C        r0 = Null + M[$music_example.LeftTrimVolume];
0x00333F        E1F0FFD6                 call $M.music_example_message.Volume.vmdB2vol;
0x003340        19202D65                 M[0x2d65] = r0 + Null;
0x003341        09202F7D                 r0 = Null + M[$music_example.RightTrimVolume];
0x003342        E1F0FFD3                 call $M.music_example_message.Volume.vmdB2vol;
0x003343        19202D6A                 M[0x2d6a] = r0 + Null;
0x003344        09602F7B                 r4 = Null + M[$music_example.SystemVolume];
0x003345        0056000F                 r3 = r4 + Null;
0x003346        01401006                 r2 = Null + 4102;
0x003347        E1F0DCE7                 call $message.send_short;
0x003348        DDF0DEFC                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.func>
0x003349        F3D00000                 push rLink;
0x00334A        D1350000                 r1 = M[r3 + 0];
0x00334B        D1450001                 r2 = M[r3 + 1];
0x00334C        D1650003                 r4 = M[r3 + 3];
0x00334D        D1750004                 r5 = M[r3 + 4];
0x00334E        D1550002                 r3 = M[r3 + 2];
0x00334F        E1F0FFCE                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example_message.Volume.volume_msg_done>
0x003350        DDF0DEF4                 jump $pop_rLink_and_rts;

 <$config_resampler>
0x003351        F3D00000                 push rLink;
0x003352        FD0000FF 01305B79        r1 = Null + -42119;

 <$M.config_resampler.lookup_loop>
0x003354        D023000F                 r0 = M[r1 + Null];
0x003355        DD000009                 if EQ jump $M.config_resampler.rates_not_supported;
0x003356        FD0000FF 29023FFF        Null = r0 - M[$current_codec_sampling_rate];
0x003358        DD100004                 if NE jump $M.config_resampler.skip;
0x003359        D1230001                 r0 = M[r1 + 1];
0x00335A        2902008F                 Null = r0 - M[$current_dac_sampling_rate];
0x00335B        DD000017                 if EQ jump $M.config_resampler.done;

 <$M.config_resampler.skip>
0x00335C        01330003                 r1 = r1 + 3;
0x00335D        DDF0FFF7                 jump $M.config_resampler.lookup_loop;

 <$M.config_resampler.rates_not_supported>
0x00335E        FD0000FF 09503FFF        r3 = Null + M[$current_codec_sampling_rate];
0x003360        0960008F                 r4 = Null + M[$current_dac_sampling_rate];
0x003361        0120000A                 r0 = Null + 10;
0x003362        0015000F                 rMAC = r3 + Null;
0x003363        D9020000                 Div = rMAC / r0;
0x003364        D9500001                 r3 = DivResult;
0x003365        0016000F                 rMAC = r4 + Null;
0x003366        D9020000                 Div = rMAC / r0;
0x003367        D9600001                 r4 = DivResult;
0x003368        01401090                 r2 = Null + 4240;
0x003369        E1F0DCC5                 call $message.send_short;
0x00336A        E1F00194                 call $error;
0x00336B        FD0000FF 01305B79        r1 = Null + -42119;
0x00336D        D023000F                 r0 = M[r1 + Null];
0x00336E        FD0000FF 19203FFF        M[$current_codec_sampling_rate] = r0 + Null;
0x003370        D1230001                 r0 = M[r1 + 1];
0x003371        1920008F                 M[$current_dac_sampling_rate] = r0 + Null;

 <$M.config_resampler.done>
0x003372        E1F0DE7F                 call $block_interrupts;
0x003373        E440002F                 r2 = Null + 1;
0x003374        19001FBD                 M[0x1fbd] = Null + Null;
0x003375        19001F71                 M[0x1f71] = Null + Null;
0x003376        FD0000FF 19005A70        M[0xff5a70] = Null + Null;
0x003378        D1230002                 r0 = M[r1 + 2];
0x003379        19201FB0                 M[0x1fb0] = r0 + Null;
0x00337A        19201F64                 M[0x1f64] = r0 + Null;
0x00337B        FD0000FF 19205A63        M[0xff5a63] = r0 + Null;
0x00337D        00400000                 if EQ r2 = Null + Null;
0x00337E        FD0000FF 194030FF        M[$dac_resampler.resampler_active] = r2 + Null;
0x003380        E1F0DE45                 call $interrupt.unblock;
0x003381        DDF0DEC3                 jump $pop_rLink_and_rts;

 <$master_app_reset>
0x003382        F3D00000                 push rLink;
0x003383        09002F6C                 Null = Null + M[$local_encoded_play_back];
0x003384        DD000008                 if EQ jump $M.master_app_reset.pause_happened;
0x003385        01401080                 r2 = Null + 4224;
0x003386        01500000                 r3 = Null + 0;
0x003387        01600000                 r4 = Null + 0;
0x003388        01700000                 r5 = Null + 0;
0x003389        01800000                 r6 = Null + 0;
0x00338A        E1F0DCA4                 call $message.send_short;
0x00338B        19002F6C                 M[$local_encoded_play_back] = Null + Null;

 <$M.master_app_reset.pause_happened>
0x00338C        E1F0DE65                 call $block_interrupts;
0x00338D        092000AF                 r0 = Null + M[0xaf];
0x00338E        192000AE                 M[0xae] = r0 + Null;
0x00338F        FD0000FF 092067CE        r0 = Null + M[0xff67ce];
0x003391        FD0000FF 192067CD        M[0xff67cd] = r0 + Null;
0x003393        09200097                 r0 = Null + M[0x97];
0x003394        19200096                 M[0x96] = r0 + Null;
0x003395        0920009F                 r0 = Null + M[0x9f];
0x003396        1920009E                 M[0x9e] = r0 + Null;
0x003397        01601BCD                 r4 = Null + 7117;
0x003398        E1F0DE37                 call $frame_sync.run_function_table;
0x003399        FD0000FF 01605FBC        r4 = Null + -41028;
0x00339B        E1F0DE34                 call $frame_sync.run_function_table;
0x00339C        FD0000FF 019035F2        r7 = Null + -51726;
0x00339E        E1F0DD13                 call $latency.reset_encoded_latency;
0x00339F        19002F99                 M[$first_packet_received] = Null + Null;
0x0033A0        FD0000FF 19005B55        M[0xff5b55] = Null + Null;
0x0033A2        E1F0DE23                 call $interrupt.unblock;
0x0033A3        DDF0DEA1                 jump $pop_rLink_and_rts;

 <$M.music_example.GetControl.func>
0x0033A4        F3D00000                 push rLink;
0x0033A5        51402E9E                 I4 = Null + 11934;
0x0033A6        5000003F                 I0 = Null + r1;
0x0033A7        01C00005                 r10 = Null + 5;
0x0033A8        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x0033A9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0033AA        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x0033AB        E460002F                 r4 = Null + 1;
0x0033AC        19602D20                 M[0x2d20] = r4 + Null;
0x0033AD        09202EA1                 r0 = Null + M[$music_example.OvrMode];
0x0033AE        03220000                 r0 = r0 + r0;
0x0033AF        FD0000FF D102663B        Null = M[r0 + -39365];
0x0033B1        DD100008                 if NE jump $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033B2        39062D20                 M[0x2d20] = Null - r4;
0x0033B3        0050000F                 r3 = Null + Null;
0x0033B4        19502E98                 M[0x2e98] = r3 + Null;
0x0033B5        01C00360                 r10 = Null + 864;
0x0033B6        51001C00                 I0 = Null + 7168;
0x0033B7        E5F00002                 do $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033B8        0300D100                 Null = Null + Null, M[I0,1] = r3;

 <$M.music_example.GetControl.clear_right_cbuffer_output>
0x0033B9        09202E9E                 r0 = Null + M[$music_example.SpiSysControl];
0x0033BA        81028000                 Null = r0 AND 0x8000;
0x0033BB        DD00000A                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x0033BC        09302E9F                 r1 = Null + M[$music_example.OvrMasterSystemVolume];
0x0033BD        9143007C                 r2 = r1 ASHIFT -4;
0x0033BE        8133000F                 r1 = r1 AND 0xf;
0x0033BF        09502F7C                 r3 = Null + M[$music_example.ToneVolume];
0x0033C0        09602EA2                 r4 = Null + M[$music_example.OvrTrimVolumes];
0x0033C1        91760074                 r5 = r4 ASHIFT -12;
0x0033C2        8D66000C                 r4 = r4 LSHIFT 12;
0x0033C3        91660074                 r4 = r4 ASHIFT -12;
0x0033C4        E1F0FF59                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC>
0x0033C5        01A00000                 r8 = Null + 0;
0x0033C6        DDF0DE7E                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x0033C7        0004000F                 Null = r2 + Null;
0x0033C8        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x0033C9        01600007                 r4 = Null + 7;
0x0033CA        09700E31                 r5 = Null + M[0xe31];
0x0033CB        83760000                 r5 = r5 AND r4;
0x0033CC        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033CD        8082006F                 r6 = r0 AND r4;
0x0033CE        E488002F                 r6 = r6 + 1;
0x0033CF        21040002                 Null = r2 - 2;
0x0033D0        00850000                 if EQ r6 = r3 + Null;
0x0033D1        01A00200                 r8 = Null + 512;
0x0033D2        01500000                 r3 = Null + 0;
0x0033D3        E490002F                 r7 = Null + 1;
0x0033D4        800200AF                 Null = r0 AND r8;
0x0033D5        00590000                 if EQ r3 = r7 + Null;
0x0033D6        2007008F                 Null = r5 - r6;
0x0033D7        0085000B                 if LT r6 = r3 + Null;
0x0033D8        21080000                 Null = r6 - 0;
0x0033D9        00850000                 if EQ r6 = r3 + Null;
0x0033DA        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x0033DC        8092009F                 r7 = r0 AND r7;
0x0033DD        8489008F                 r6 = r7 OR r6;
0x0033DE        19800DDC                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x0033DF        01500008                 r3 = Null + 8;
0x0033E0        2005003F                 Null = r3 - r1;
0x0033E1        00350004                 if NEG r1 = r3 + Null;
0x0033E2        01500000                 r3 = Null + 0;
0x0033E3        2005003F                 Null = r3 - r1;
0x0033E4        00350005                 if POS r1 = r3 + Null;
0x0033E5        FD0000FF 19306818        M[$music_example.sys_mode] = r1 + Null;
0x0033E7        E430002F                 r1 = Null + 1;
0x0033E8        19302F79                 M[$music_example.reinit] = r1 + Null;
0x0033E9        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x0033EA        F3D00000                 push rLink;
0x0033EB        01A00000                 r8 = Null + 0;
0x0033EC        FD0000FF 19A06818        M[$music_example.sys_mode] = r8 + Null;
0x0033EE        F3300000                 push r1;
0x0033EF        E1F0007E                 call $M.music_example.load_default_params.func;
0x0033F0        19002F7E                 M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x0033F1        F3440000                 pop r2;
0x0033F2        19402F7F                 M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x0033F3        DD000006                 if EQ jump $M.music_example.LoadParams.done;
0x0033F4        FD0000FF 013067D8        r1 = Null + -38952;
0x0033F6        01503295                 r3 = Null + 12949;
0x0033F7        E1F0DCAA                 call $pskey.read_key;
0x0033F8        DDF0DE4C                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x0033F9        FD0000FF 09206811        r0 = Null + M[$codec_config];
0x0033FB        D1220DDC                 r0 = M[r0 + 3548];
0x0033FC        19200DDC                 M[$M.system_config.data.CurParams] = r0 + Null;
0x0033FD        E1F000AE                 call $M.music_example.ReInit.func;
0x0033FE        01401015                 r2 = Null + 4117;
0x0033FF        E1F0DC2F                 call $message.send_short;
0x003400        DDF0DE44                 jump $pop_rLink_and_rts;

 <$set_dac_rate_from_vm>
0x003401        8133FFFF                 r1 = r1 AND 0xffff;
0x003402        9933000A                 r1 = r1 * 10 (int);
0x003403        1930008F                 M[$current_dac_sampling_rate] = r1 + Null;
0x003404        FD0000FF 1940680D        M[$max_clock_mismatch] = r2 + Null;
0x003406        19502F6E                 M[$long_term_mismatch] = r3 + Null;
0x003407        81360200                 r1 = r4 AND 0x200;
0x003408        89430200                 r2 = r1 XOR 0x200;
0x003409        81260100                 r0 = r4 AND 0x100;
0x00340A        9F420000                 r2 = r2 * r0 (int) (sat);
0x00340B        19402F6C                 M[$local_encoded_play_back] = r2 + Null;
0x00340C        E450002F                 r3 = Null + 1;
0x00340D        9F320000                 r1 = r1 * r0 (int) (sat);
0x00340E        00350001                 if NE r1 = r3 + Null;
0x00340F        FD0000FF 1930680C        M[$aux_input_stream_available] = r1 + Null;
0x003411        812600FF                 r0 = r4 AND 0xff;
0x003412        19202F6D                 M[$audio_if_mode] = r0 + Null;
0x003413        F3D00000                 push rLink;
0x003414        0920008F                 r0 = Null + M[$current_dac_sampling_rate];
0x003415        E1F0DE19                 call $latency.calc_inv_fs;
0x003416        19202F6F                 M[$inv_dac_fs] = r0 + Null;
0x003417        F3D40000                 pop rLink;
0x003418        DC0D000F                 rts;

 <$music_example_reinitialize>
0x003419        F3D00000                 push rLink;
0x00341A        51900001                 M1 = Null + 1;
0x00341B        FD0000FF 5100335E        I0 = Null + -52386;
0x00341D        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x00341E        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x00341F        D3200000                 r0 = M[r0 + Null];
0x003420        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x003421        0002000F                 Null = r0 + Null;
0x003422        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x003423        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003424        FD0000FF 09406811        r2 = Null + M[$codec_config];
0x003426        D5240DDC                 M[r2 + 3548] = r0;
0x003427        01401014                 r2 = Null + 4116;
0x003428        81520007                 r3 = r0 AND 0x7;
0x003429        E1F0DC05                 call $message.send_short;
0x00342A        01601BCD                 r4 = Null + 7117;
0x00342B        E1F0DDA4                 call $frame_sync.run_function_table;
0x00342C        19002F79                 M[$music_example.reinit] = Null + Null;
0x00342D        DDF0DE17                 jump $pop_rLink_and_rts;

 <$M.music_example.GetStatus.func>
0x00342E        5010003F                 I1 = Null + r1;
0x00342F        01C00023                 r10 = Null + 35;
0x003430        00AC000F                 r8 = r10 + Null;
0x003431        514007DA                 I4 = Null + 2010;
0x003432        03000031                 Null = Null + Null, r1 = M[I4,1];
0x003433        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x003434        D3300000                 r1 = M[r1 + Null];
0x003435        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x003436        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x003437        01C00004                 r10 = Null + 4;
0x003438        FD0000FF 5140674E        I4 = Null + -39090;
0x00343A        8B440000                 r2 = r2 XOR r2;
0x00343B        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x00343C        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x00343D        FD0000FF 19006806        M[0xff6806] = Null + Null;
0x00343F        19000FFF                 M[0xfff] = Null + Null;
0x003440        FD0000FF 19006808        M[0xff6808] = Null + Null;
0x003442        19002F69                 M[0x2f69] = Null + Null;
0x003443        FD0000FF 1900680A        M[0xff680a] = Null + Null;
0x003445        DC0D000F                 rts;

 <$music_example.peq.initialize>
0x003446        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003447        D07A000F                 r5 = M[r8 + Null];
0x003448        81520007                 r3 = r0 AND 0x7;
0x003449        E407003F                 Null = r5 - 1;
0x00344A        00500000                 if EQ r3 = Null + Null;
0x00344B        FD0000FF 09303FFF        r1 = Null + M[$current_codec_sampling_rate];
0x00344D        FD000000 2103BB80        Null = r1 - 48000;
0x00344F        00550070                 if EQ r3 = r3 + r5;
0x003450        E4AA002F                 r8 = r8 + 1;
0x003451        D02A005F                 r0 = M[r8 + r3];
0x003452        D5290003                 M[r7 + 3] = r0;
0x003453        DC0D0000                 if EQ rts;
0x003454        DDF00068                 jump $audio_proc.peq.initialize;

 <$music_example.peq.process>
0x003455        09200DDC                 r0 = Null + M[$M.system_config.data.CurParams];
0x003456        800200AF                 Null = r0 AND r8;
0x003457        DC0D0001                 if NE rts;
0x003458        D1090003                 Null = M[r7 + 3];
0x003459        DC0D0000                 if EQ rts;
0x00345A        DDF0D61B                 jump $audio_proc.peq.process;

 <$music_example.cmpd100.initialize>
0x00345B        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x00345D        FD000000 2102BB80        Null = r0 - 48000;
0x00345F        00A90001                 if NE r8 = r7 + Null;
0x003460        DDF0F388                 jump $cmpd100.initialize;

 <$music_example.cmpd100.analysis>
0x003461        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003463        FD000000 2102BB80        Null = r0 - 48000;
0x003465        00A90001                 if NE r8 = r7 + Null;
0x003466        DDF0D388                 jump $cmpd100.analysis;

 <$music_example.cmpd100.applygain>
0x003467        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003469        FD000000 2102BB80        Null = r0 - 48000;
0x00346B        00A90001                 if NE r8 = r7 + Null;
0x00346C        DDF0D6B6                 jump $cmpd100.applygain;

 <$M.music_example.load_default_params.func>
0x00346D        51C00005                 L0 = Null + 5;
0x00346E        510000A0                 I0 = Null + 160;
0x00346F        FD0000D0 51400000        I4 = Null + -3145728;
0x003471        51100DDC                 I1 = Null + 3548;
0x003472        01C00124                 r10 = Null + 292;
0x003473        91CC007F                 r10 = r10 ASHIFT -1;
0x003474        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x003475        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x003476        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x003477        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x003478        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x003479        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x00347A        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x00347B        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x00347C        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x00347D        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x00347E        51C00000                 L0 = Null + 0;
0x00347F        DC0D000F                 rts;

 <$set_codec_rate_from_vm>
0x003480        8133FFFF                 r1 = r1 AND 0xffff;
0x003481        9933000A                 r1 = r1 * 10 (int);
0x003482        FD0000FF 19303FFF        M[$current_codec_sampling_rate] = r1 + Null;
0x003484        F3D00000                 push rLink;
0x003485        FD0000FF 09203FFF        r0 = Null + M[$current_codec_sampling_rate];
0x003487        E1F0DDA7                 call $latency.calc_inv_fs;
0x003488        FD0000FF 1920680E        M[$inv_codec_fs] = r0 + Null;
0x00348A        F3D40000                 pop rLink;
0x00348B        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x00348C        FD000000 0150E008        r3 = Null + 57352;
0x00348E        09702F78                 r5 = Null + M[$music_example.Version];
0x00348F        FD0000FF 09803FFF        r6 = Null + M[$current_codec_sampling_rate];
0x003491        1835000F                 M[r1] = r3 + Null;
0x003492        D5730001                 M[r1 + 1] = r5;
0x003493        D5830002                 M[r1 + 2] = r6;
0x003494        01A00003                 r8 = Null + 3;
0x003495        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x003496        F3D00000                 push rLink;
0x003497        E1F0FFD6                 call $M.music_example.load_default_params.func;
0x003498        FD0000FF 01605AF4        r4 = Null + -42252;
0x00349A        E1F0DD08                 call $frame_sync.register_handlers;
0x00349B        DDF0DDA9                 jump $pop_rLink_and_rts;

 <$M.music_example.GetParams.func>
0x00349C        01500DDC                 r3 = Null + 3548;
0x00349D        01600124                 r4 = Null + 292;
0x00349E        FD0000D0 01700000        r5 = Null + -3145728;
0x0034A0        1835000F                 M[r1] = r3 + Null;
0x0034A1        D5630001                 M[r1 + 1] = r4;
0x0034A2        D5730002                 M[r1 + 2] = r5;
0x0034A3        01A00003                 r8 = Null + 3;
0x0034A4        DC0D000F                 rts;

 <$copy_codec_stats_pointers>
0x0034A5        01C00011                 r10 = Null + 17;
0x0034A6        514007EC                 I4 = Null + 2028;
0x0034A7        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x0034A8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0034A9        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x0034AA        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x0034AB        E4A0002F                 r8 = Null + 1;
0x0034AC        19A02F79                 M[$music_example.reinit] = r8 + Null;
0x0034AD        01A00000                 r8 = Null + 0;
0x0034AE        DC0D000F                 rts;

 <$interrupt.initialise>
0x0034AF        01200015                 r0 = Null + 21;
0x0034B0        1920FE14                 M[0xfffe14] = r0 + Null;
0x0034B1        01200311                 r0 = Null + 785;
0x0034B2        1920FE15                 M[0xfffe15] = r0 + Null;
0x0034B3        E420002F                 r0 = Null + 1;
0x0034B4        1920FE11                 M[0xfffe11] = r0 + Null;
0x0034B5        1920FE12                 M[0xfffe12] = r0 + Null;
0x0034B6        1920FE13                 M[0xfffe13] = r0 + Null;
0x0034B7        1900FE4E                 M[0xfffe4e] = Null + Null;
0x0034B8        85EE0080                 rFlags = rFlags OR 0x80;
0x0034B9        DC0D000F                 rts;
0x0034BA        DDF0CB46                 jump $reset;
0x0034BB        DDF0CB47                 jump $interrupt.handler;

 <$audio_proc.peq.initialize>
0x0034BC        D1A90003                 r8 = M[r7 + 3];
0x0034BD        D12A0000                 r0 = M[r8 + 0];
0x0034BE        812200FF                 r0 = r0 AND 0xff;
0x0034BF        D5290006                 M[r7 + 6] = r0;
0x0034C0        E432002F                 r1 = r0 + 1;
0x0034C1        91C30001                 r10 = r1 ASHIFT 1;
0x0034C2        D5C90007                 M[r7 + 7] = r10;
0x0034C3        01390009                 r1 = r7 + 9;
0x0034C4        D5390004                 M[r7 + 4] = r1;
0x0034C5        99C20005                 r10 = r0 * 5 (int);
0x0034C6        D5C90008                 M[r7 + 8] = r10;
0x0034C7        012A0003                 r0 = r8 + 3;
0x0034C8        D5290005                 M[r7 + 5] = r0;
0x0034C9        DC0D000F                 rts;

 <$audio_proc.delay.initialize>
0x0034CA        D12A0002                 r0 = M[r8 + 2];
0x0034CB        F3D00000                 push rLink;
0x0034CC        E1F0DD43                 call $cbuffer.get_read_address_and_size;
0x0034CD        5000002F                 I0 = Null + r0;
0x0034CE        50C0003F                 L0 = Null + r1;
0x0034CF        00C3000F                 r10 = r1 + Null;
0x0034D0        F3D40000                 pop rLink;
0x0034D1        01200000                 r0 = Null + 0;
0x0034D2        E5F00002                 do $M.audio_proc.delay.initialize.loop_delay_init;
0x0034D3        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.delay.initialize.loop_delay_init>
0x0034D4        51C00000                 L0 = Null + 0;
0x0034D5        DC0D000F                 rts;

 <$_stack_initialise>
0x0034D6        FD0000FF 01B0325F        r9 = Null + -52641;
0x0034D8        19B0FE67                 M[0xfffe67] = r9 + Null;
0x0034D9        FD0000FF 01B031A0        r9 = Null + -52832;
0x0034DB        19B0FE66                 M[0xfffe66] = r9 + Null;
0x0034DC        19B0FE68                 M[0xfffe68] = r9 + Null;
0x0034DD        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x0034DE        E420002F                 r0 = Null + 1;
0x0034DF        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x0034E0        DC0D000F                 rts;

 <$frame_sync.1ms_delay>
0x0034E1        E430002F                 r1 = Null + 1;
0x0034E2        FD0000FF 1930686D        M[$frame_sync.sync_flag] = r1 + Null;
0x0034E4        0930FE4D                 r1 = Null + M[0xfffe4d];
0x0034E5        0120003F                 r0 = Null + 63;
0x0034E6        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.1ms_delay.frame_operator_sync_loop>
0x0034E7        FD0000FF 0900686D        Null = Null + M[$frame_sync.sync_flag];
0x0034E9        DD10FFFE                 if NE jump $M.frame_sync.1ms_delay.frame_operator_sync_loop;
0x0034EA        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x0034EB        DC0D000F                 rts;

 <$audio_proc.peq.zero_delay_data>
0x0034EC        F3C00000                 push r10;
0x0034ED        D1C90002                 r10 = M[r7 + 2];
0x0034EE        E4CC002F                 r10 = r10 + 1;
0x0034EF        91CC0001                 r10 = r10 ASHIFT 1;
0x0034F0        01390009                 r1 = r7 + 9;
0x0034F1        5000003F                 I0 = Null + r1;
0x0034F2        0030000F                 r1 = Null + Null;
0x0034F3        E5F00002                 do $M.audio_proc.peq.zero_delay_data.init_dly_ln_loop;
0x0034F4        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.peq.zero_delay_data.init_dly_ln_loop>
0x0034F5        F3C40000                 pop r10;
0x0034F6        DC0D000F                 rts;

 <$cbuffer.initialise>
0x0034F7        F3D00000                 push rLink;
0x0034F8        FD0000FF 013067AE        r1 = Null + -38994;
0x0034FA        85408001                 r2 = Null OR 0x8001;
0x0034FB        015009F8                 r3 = Null + 2552;
0x0034FC        E1F0F303                 call $message.register_handler;
0x0034FD        DDF0DD47                 jump $pop_rLink_and_rts;

 <$error>
0x0034FE        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x0034FF        FD0000FF 09B0685A        r9 = Null + M[$error.handler];
0x003501        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x003502        E400001F                 break;
0x003503        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x003504        0920E000                 r0 = Null + M[0xffe000];
0x003505        19202FBE                 M[$message.last_seq_sent] = r0 + Null;
0x003506        DC0D000F                 rts;

 <$spi_comm.initialize>
0x003507        01205555                 r0 = Null + 21845;
0x003508        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x003509        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.SPI_BLOCK
0x000000	$M.spi_block.signature
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$M.math.sqrt.sqrtcoefs
0x00004A	$M.math.sqrt.coefs
        F88B71 1F11C9 C6F3BF 52AA94 
        0EC449 

0x00004F	$M.math.sqrt.sqrtofhalf
        5A827A 

0x000050	$tone_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00005C	$us_per_sample_sbc
        000000 000000 5AB3F4 535555 

0x000060	$tone_right_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00006C	$M.system_config.data.mute_cntrl_l_dm1
        002DF9 FF6821 000000 

0x00006F	$interrupt.start_time
        000000 

0x000070	$sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00007C	$M.system_config.data.mute_cntrl_r_dm1
        FF6687 FF6821 000000 

0x00007F	$sbcdec.codec_struc
        000000 

0x000080	$sr_hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00008F	$current_dac_sampling_rate
        000000 

0x000090	$dither_hist_left
        000000 000000 000000 000000 
        000000 

0x000095	$dac_out_temp_left_cbuffer_struc
        000091 FF3500 FF3500 

0x000098	$dither_hist_right
        000000 000000 000000 000000 
        000000 

0x00009D	$dac_out_temp_right_cbuffer_struc
        000091 FF3600 FF3600 

0x0000A0	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000A5	$audio_out_left_cbuffer_struc
        0005DC FF6000 FF6000 

0x0000A8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0000AD	$dac_out_left_cbuffer_struc
        000360 FF5C00 FF5C00 

0x0000B0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0000B5	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000DD	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x0000FE	$pcm_latency_input_struct
        002DDF 002EBD 

0x000100	$tone_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000200	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000300	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000400	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000450	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x000471	$decoder_codec_stream_struc
        000000 000000 000000 FF67C6 
        0000A5 FF67C9 000000 000000 
        000000 000000 000000 533333 
        000000 000001 003382 000000 
        000000 000000 000000 000000 

0x000485	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000495	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004A5	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004B5	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004C5	$usb_audio_in_copy_struc
        800000 0000A5 FF67C9 0000C0 
        000008 000000 000000 000000 
        000000 000000 

0x0004CF	$stereo_3d_enhancement.coeff_buf
        CF5C29 5EB852 C7AE14 27AE14 
        D47AE1 570A3D C7AE14 27AE14 

0x0004D7	$analogue_audio_in_copy_struc
        002E85 000002 800000 800001 
        000002 0000A5 FF67C9 

0x0004DE	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0004E5	$M.system_config.data.StandBy_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001128 000FFE 
        000000 001107 00006C 000000 
        001107 00007C 000000 001128 
        FF6807 000000 001128 002F68 
        000000 000FD6 FF670F 000000 
        000000 

0x0004FE	$M.system_config.data.UserEqInitTable
        FF33F1 FF3406 

0x000500	$vee.heartrate.sample_cbuffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x000579	$audio_mute_op_mono
0x000579	$audio_mute_op_mono.next
        FF672F 

0x00057A	$audio_mute_op_mono.func
        FF67FF 

0x00057B	$audio_mute_op_mono.param
        000001 000000 000001 000000 
        000000 

0x000580	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0005F9	$output_port_and_delay_size
        002F85 FF6825 00005E 000BCC 
        00005E FF6824 000000 

0x000600	$sub_out_1k2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00063C	$dac_resampler.stereo_right_copy_op.next
0x00063C	$dac_resampler.stereo_right_copy_op
        FFFFFF 

0x00063D	$dac_resampler.stereo_right_copy_op.func
        FF67F0 

0x00063E	$dac_resampler.stereo_right_copy_op.param
        000001 000003 

0x000640	$codec_packets_info
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000672	$M.system_config.data.bass_manager_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0007DA	$M.system_config.data.StatisticsPtrs
        FF674E 002E9E FF674F FF6750 
        FF6806 000FFF FF6821 FF6808 
        002F69 FF680A 002F7B FF681B 
        FF681C 002F7D 000DDC FF66EC 
        002F9C 002F71 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x0007FD	$tone_in_cbuffer_struc
        000100 000100 000100 

0x000800	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000DDC	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F00	$vee.heartrate.calc_buff
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F78	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FE6	$cbuffer.read_port_buffer_size
0x000FE6	$cbuffer.port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000FF2	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000FFE	$M.system_config.data.pcmin_r_pk_dtct
        FF667A 000000 

0x001000	$M.system_config.data.delay_buf_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x001BCD	$M.system_config.data.reinitialize_table
        003446 FF33C7 FF3467 003446 
        FF33DC FF3467 003446 FF342C 
        FF346A 003446 FF3439 FF346A 
        003000 0004FE FF3451 0006E8 
        000000 FF3446 00345B FF5F80 
        FF5F9E 0011B9 002D59 002D59 
        0011B9 002DC1 002DC1 0011B9 
        002DD0 002DD0 0001CB FF6694 
        FF67E4 0034CA 000000 002EE1 
        0034CA 000000 FF676E 000000 

0x001BF5	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001BFF	$current_tone_sampling_rate
        001F40 

0x001C00	$dac_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001F60	$dac_resampler.stereo_left_resampler_op.next
0x001F60	$dac_resampler.stereo_left_resampler_op
        FF5A5F 

0x001F61	$dac_resampler.stereo_left_resampler_op.func
        002F5F 

0x001F62	$dac_resampler.stereo_left_resampler_op.param
        000000 000002 000000 FFFFF8 
        000008 FF5925 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001FAC	$dac_resampler.mono_resampler_op
0x001FAC	$dac_resampler.mono_resampler_op.next
        FFFFFF 

0x001FAD	$dac_resampler.mono_resampler_op.func
        002F5F 

0x001FAE	$dac_resampler.mono_resampler_op.param
        000000 000001 000000 FFFFF8 
        000008 FF5925 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001FF8	$audio_out_dither_and_shift_op_left.next
0x001FF8	$audio_out_dither_and_shift_op_left
        002E44 

0x001FF9	$audio_out_dither_and_shift_op_left.func
        FF67F3 

0x001FFA	$audio_out_dither_and_shift_op_left.param
        000000 000002 FFFFF8 000000 
        000090 000000 

0x002000	$M.system_config.data.delay_buf_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002BCD	$M.system_config.data.soundbar_2_1_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001128 000FFE 
        000000 000AEC 002ED9 000000 
        000AEC FF676A 000000 000708 
        000000 FF3446 003455 FF33C7 
        000400 003455 FF33DC 000400 
        003455 FF342C 000080 003455 
        FF3439 000080 003455 FF33F1 
        000100 003455 FF3406 000100 
        0001F5 FF6694 000000 003461 
        FF5F80 FF5F9E 003467 FF5F80 
        FF5F9E 000D5C 000000 002EE1 
        000D5C 000000 FF676E 0005A6 
        002D59 000000 0005A6 002DD0 
        000000 001128 FF6807 000000 
        001128 002F68 000000 001128 
        FF6809 000000 000FD6 FF670F 
        000000 000000 

0x002C13	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000300 000400 0000B5 FF30A0 
        000485 000495 0004A5 0004B5 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002C58	$M.system_config.data.full_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001128 000FFE 
        000000 000AEC 002ED9 000000 
        000AEC FF676A 000000 000708 
        000000 FF3446 003455 FF33C7 
        000400 003455 FF33DC 000400 
        003455 FF342C 000080 003455 
        FF3439 000080 003455 FF33F1 
        000100 003455 FF3406 000100 
        003461 FF5F80 FF5F9E 003467 
        FF5F80 FF5F9E 0005A6 002D59 
        000000 001128 FF6807 000000 
        001128 002F68 000000 000FD6 
        FF670F 000000 000000 

0x002C8F	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x002CB0	$M.system_config.data.bass_manager_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002CD0	$M.system_config.data.pass_thru_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001128 000FFE 
        000000 000AEC 002ED9 000000 
        000AEC FF676A 000000 000E7D 
        FF6766 000000 0005A6 002D59 
        000000 001128 FF6807 000000 
        001128 002F68 000000 000FD6 
        FF670F 000000 000000 

0x002CEF	$cbuffer.port_limit_addr
0x002CEF	$cbuffer.read_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002CFB	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002D07	$M.system_config.data.mono_pass_thru_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 000EDF FF6709 
        000000 000AEC 002EDD 000000 
        0005A6 002DC1 000000 001128 
        FF6807 000000 000FD6 FF670F 
        000000 000000 

0x002D1D	$audio_out_tone_upsample_stereo_mix
0x002D1D	$audio_out_tone_upsample_stereo_mix.next
        FF5FE7 

0x002D1E	$audio_out_tone_upsample_stereo_mix.func
        FF67FC 

0x002D1F	$audio_out_tone_upsample_stereo_mix.param
        000000 000001 0007FD FF32E0 
        00008F 000050 001BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D31	$audio_out_rate_adjustment_and_shift_op_stereo
0x002D31	$audio_out_rate_adjustment_and_shift_op_stereo.next
        FFFFFF 

0x002D32	$audio_out_rate_adjustment_and_shift_op_stereo.func
        002F5C 

0x002D33	$audio_out_rate_adjustment_and_shift_op_stereo.param
        000000 000002 000001 000003 
        FFFFF8 FF32E0 000070 000080 
        FF5B4A 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D45	$audio_out_tone_right_upsample_mono_mix
0x002D45	$audio_out_tone_right_upsample_mono_mix.next
        002E99 

0x002D46	$audio_out_tone_right_upsample_mono_mix.func
        FF67FC 

0x002D47	$audio_out_tone_right_upsample_mono_mix.param
        000000 FFFFFF FF67CF FF32E0 
        00008F 000060 001BFF 200000 
        7FFFFF 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D59	$M.system_config.data.stereo_volume_and_limit_block
0x002D59	$M.system_config.data.stereo_volume_and_limit_obj
        000000 001000 000002 FF3FFF 
        000000 FBD57B 072148 79999A 
        000000 000000 

0x002D63	$M.system_config.data.left_channel_vol_struc
        002DF9 002DF9 080000 000000 
        000000 

0x002D68	$M.system_config.data.right_channel_vol_struc
        FF6687 FF6687 080000 000000 
        000000 

0x002D6D	$vee.heartrate.hb_addr_min
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002D7F	$sbc_stats
        002C2F 002C31 002C35 002C30 
        002C32 002C34 002C33 FF6821 
        FF6821 FF6821 FF6821 FF6821 
        FF6821 002F6D FF6751 00008F 
        FF3FFF 

0x002D90	$analogue_stats
        FF6751 FF6821 FF6821 FF6821 
        FF6821 FF6821 FF6821 FF6821 
        FF6821 FF6821 FF6821 FF6821 
        FF6821 002F6D FF6751 00008F 
        FF3FFF 

0x002DA1	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002DB1	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002DC1	$M.system_config.data.mono_volume_and_limit_block
0x002DC1	$M.system_config.data.mono_volume_and_limit_obj
        000000 001000 000001 FF3FFF 
        000000 FBD57B 072148 79999A 
        000000 000000 

0x002DCB	$M.system_config.data.mono_channel_vol_struc
        002DF9 002DF9 080000 000000 
        000000 

0x002DD0	$M.system_config.data.sub_volume_and_limit_obj
0x002DD0	$M.system_config.data.sub_volume_and_limit_block
        000000 001000 000001 FF3FFF 
        200000 FBD57B 072148 79999A 
        000000 000000 

0x002DDA	$M.system_config.data.sub_channel_vol_struc
        002E06 002E06 080000 000000 
        000000 

0x002DDF	$M.main.cbuffers_latency_measure
        0000A5 FF680E 002F70 0000AD 
        FF680E 002F70 000095 002F6F 
        002F70 80000C 002F6F FF6810 
        000000 

0x002DEC	$M.system_config.data.stream_map_left_in
        0000A5 000000 000000 000168 
        000BB8 0011E2 001189 000000 
        000000 000000 000000 000000 
        000000 

0x002DF9	$M.system_config.data.stream_map_left_out
        0000AD 000000 000000 000168 
        000BB8 0011AD 001055 000000 
        000000 000000 000000 000000 
        000000 

0x002E06	$M.system_config.data.stream_map_sub_out
        FF67E4 000000 000000 000168 
        000BB8 0011AD 001055 000000 
        000000 000000 000000 000000 
        000000 

0x002E13	$vee.accelerate.neck_protect.angle_x_init_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002E1D	$vee.accelerate.neck_protect.angle_z_init_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002E27	$vee.accelerate.neck_protect.acc_y_value_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002E31	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0x002E3B	$M.system_config.data.mode_table
        0004E5 002CD0 002C58 FF5B9E 
        002D07 FF664A 002BCD FF5AAB 
        000000 

0x002E44	$audio_out_dither_and_shift_op_right
0x002E44	$audio_out_dither_and_shift_op_right.next
        FFFFFF 

0x002E45	$audio_out_dither_and_shift_op_right.func
        FF67F3 

0x002E46	$audio_out_dither_and_shift_op_right.param
        000001 000003 FFFFF8 000000 
        000098 000000 

0x002E4C	$M.downsample_sub_to_1k2.sub_mute_coefs
        000000 F9A97A E7E742 CE3DC9 
        B1C238 9818BF 865687 800000 

0x002E54	$M.cbops.rate_adjustment_and_shift.main.right_channel_info
        000000 000000 000000 000000 
        000000 000000 000000 

0x002E5B	$dac_resampler.mono_copy_switch_op
0x002E5B	$dac_resampler.mono_copy_switch_op.next
        FF5BFC 

0x002E5C	$dac_resampler.mono_copy_switch_op.func
        002F65 

0x002E5D	$dac_resampler.mono_copy_switch_op.param
        FF30FF 001FAC 000000 000001 

0x002E61	$stereo_tone_in_copy_op
0x002E61	$stereo_tone_in_copy_op.next
        FFFFFF 

0x002E62	$stereo_tone_in_copy_op.func
        FF6802 

0x002E63	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0x002E67	$signal_detect_op_coefs
        000A5B 000258 000000 000000 
        000001 001019 

0x002E6D	$M.main.rm_mono_switch_op.next
0x002E6D	$M.main.rm_mono_switch_op
        FF65F0 

0x002E6E	$M.main.rm_mono_switch_op.func
        002F65 

0x002E6F	$M.main.rm_mono_switch_op.param
        002F73 FF66DA 000000 000001 

0x002E73	$M.system_config.data.sub_mix_dm1
        002DF9 FF6687 002DF9 002F82 
        002F82 FF6821 

0x002E79	$vee.heartrate.hb_smooth.hb_origin_data
        000000 000000 000000 000000 
        000000 000000 

0x002E7F	$vee.accelerate.acc_calc_buf
        000000 000000 000000 000000 
        000000 000000 

0x002E85	$analogue_in_left_copy_op
0x002E85	$analogue_in_left_copy_op.next
        FF671B 

0x002E86	$analogue_in_left_copy_op.func
        FF67F9 

0x002E87	$analogue_in_left_copy_op.param
        000000 000002 000008 

0x002E8A	$codec_in_copy_struc
        FF674A 000001 800000 000001 
        FF67C6 

0x002E8F	$tone_in_copy_op.next
0x002E8F	$tone_in_copy_op
        FFFFFF 

0x002E90	$tone_in_copy_op.func
        FF67F9 

0x002E91	$tone_in_copy_op.param
        000000 000001 00000B 

0x002E94	$M.main.audio_out_dc_remove_op_right.next
0x002E94	$audio_out_dc_remove_op_right
        FF6703 

0x002E95	$M.main.audio_out_dc_remove_op_right.func
        002F56 

0x002E96	$M.main.audio_out_dc_remove_op_right.param
        000001 000001 000000 

0x002E99	$signal_detect_op_mono.next
0x002E99	$signal_detect_op_mono
        000579 

0x002E9A	$signal_detect_op_mono.func
        002F62 

0x002E9B	$signal_detect_op_mono.param
        002E67 000001 000000 

0x002E9E	$music_example.SpiSysControl
0x002E9E	$music_example.SysControl
        000000 

0x002E9F	$music_example.OvrMasterSystemVolume
        000009 

0x002EA0	$music_example.OvrCallState
        000000 

0x002EA1	$music_example.OvrMode
        000000 

0x002EA2	$music_example.OvrTrimVolumes
        000000 

0x002EA3	$sub_l2cap_out_copy_struc
        002EE5 000001 002F47 000001 
        94600F 

0x002EA8	$output_buffers
        0000AD 00005E 000095 00005E 
        000000 

0x002EAD	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x002EB1	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x002EB5	$audio_out_timer_struc
        000000 000000 000000 000000 

0x002EB9	$signal_detect_timer_struc
        000000 000000 000000 000000 

0x002EBD	$M.main.samples_latency_measure
        000000 FF680E 002F70 000000 

0x002EC1	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0x002EC5	$M.music_example_message.volume_message_struc
        000000 000000 000000 000000 

0x002EC9	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0x002ECD	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0x002ED1	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0x002ED5	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x002ED9	$M.system_config.data.left_headroom_obj
        002DEC 002DEC 002F83 FF6821 

0x002EDD	$M.system_config.data.mono_headroom_obj
        002DF9 002DF9 002F83 FF6821 

0x002EE1	$M.system_config.data.delay_left
        002DF9 002DF9 FF67E1 000BCC 

0x002EE5	$codec_out_copy_op.next
0x002EE5	$codec_out_copy_op
        FFFFFF 

0x002EE6	$codec_out_copy_op.func
        FF67F0 

0x002EE7	$codec_out_copy_op.param
        000000 000001 

0x002EE9	$sub_l2cap_header_out_copy_op.next
0x002EE9	$sub_l2cap_header_out_copy_op
        FFFFFF 

0x002EEA	$sub_l2cap_header_out_copy_op.func
        FF67F0 

0x002EEB	$sub_l2cap_header_out_copy_op.param
        000000 000001 

0x002EED	$sco_params_message_struc
        000000 000000 000000 000000 

0x002EF1	$sco_timer_struc
        000000 000000 000000 000000 

0x002EF5	$bdaddr_struc
        000000 000000 000000 000000 

0x002EF9	$M.Subwoofer.write_port_disconnected_function_table
        001C60 001C60 001C61 001C67 

0x002EFD	$M.report_latency_to_vm.timer_struc
        000000 000000 000000 000000 

0x002F01	$vee.heartrate.hb_enable_from_vm_message_struc
        000000 000000 000000 000000 

0x002F05	$vee.heartrate.time_value_from_vm_message_struc
        000000 000000 000000 000000 

0x002F09	$vee.heartrate.sample_timer_struc
        000000 000000 000000 000000 

0x002F0D	$vee.accelerate.acc_sample_enable_from_vm_message_struc
        000000 000000 000000 000000 

0x002F11	$vee.accelerate.step_value_enable_from_vm_message_struc
        000000 000000 000000 000000 

0x002F15	$vee.accelerate.safe_driver_enable_from_vm_message_struc
        000000 000000 000000 000000 

0x002F19	$vee.accelerate.acc_timer_struc
        000000 000000 000000 000000 

0x002F1D	$vee.accelerate.neck_protect.neck_timer_struc
        000000 000000 000000 000000 

0x002F21	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0x002F25	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x002F29	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x002F2D	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x002F31	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0x002F35	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0x002F38	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0x002F3B	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0x002F3E	$M.sra_calcrate.mode_funtion_table
        0004E4 0004EA 0004FC 

0x002F41	$stereo_3d_enhancement_delay1_cbuffer_struc
        0008A0 FF5000 FF526A 

0x002F44	$M.system_config.data.delay_buf_right_cbuffer_struc
        000BCD 001000 001000 

0x002F47	$sub_codec_out_cbuffer_struc
        000032 FF35C0 FF35C0 

0x002F4A	$sub_out_1k2_cbuffer_struc
        00003C 000600 000600 

0x002F4D	$vee.heartrate.sample_cbuffer_struc
        000079 000500 000500 

0x002F50	$vee.accelerate.acc_origin_data
        000000 000000 000000 

0x002F53	$M.cbops.av_copy.right_silence_cbuffer_struc
        000079 FF3700 FF3700 

0x002F56	$cbops.dc_remove
        001246 000000 000F35 

0x002F59	$M.cbops.dither_and_shift.main.dither_func
        0008D8 0008E5 0008F4 

0x002F5C	$cbops.rate_adjustment_and_shift
        000000 001196 000049 

0x002F5F	$cbops_iir_resamplev2
        000000 000E12 0009B1 

0x002F62	$cbops.signal_detect_op
        000000 000000 0025A8 

0x002F65	$cbops.switch_op
        00123C 00123E 001240 

0x002F68	$M.system_config.data.dac_r_pk_dtct
        FF6687 000000 

0x002F6A	$cbuffer.tmp
        000000 000000 

0x002F6C	$local_encoded_play_back
        000000 

0x002F6D	$audio_if_mode
        000000 

0x002F6E	$long_term_mismatch
        000000 

0x002F6F	$inv_dac_fs
        14D555 

0x002F70	$latency_calc_current_warp
        002D3F 

0x002F71	$codec_type
        FFFFFF 

0x002F72	$tmr_period_con_copy
        000000 

0x002F73	$rate_match_disable
        000000 

0x002F74	$mono_copy_struc_ptr
        FF672A 

0x002F75	$mono_stereo_mode
        000000 

0x002F76	$codec_level
        000000 

0x002F77	$M.av_audio_out_silence_insert.left_zero_samples
        000000 

0x002F78	$music_example.Version
        000001 

0x002F79	$music_example.reinit
        000001 

0x002F7A	$music_example.sync_flag_ptr
        FF686D 

0x002F7B	$music_example.SystemVolume
        00000B 

0x002F7C	$music_example.ToneVolume
        000000 

0x002F7D	$music_example.RightTrimVolume
        000000 

0x002F7E	$M.music_example.LoadParams.paramoffset
        000000 

0x002F7F	$M.music_example.LoadParams.Last_PsKey
        000000 

0x002F80	$usb_pause_period_count
        000000 

0x002F81	$usb_pause_silence_insertion_time
        00C49C 

0x002F82	$M.system_config.data.HalfValue
        400000 

0x002F83	$M.system_config.data.headroom_mant
        200000 

0x002F84	$sub_link_port
        000000 

0x002F85	$left_port
        80000C 

0x002F86	$M.Subwoofer.playback_time
        000000 

0x002F87	$wall_clock_lsw
        000000 

0x002F88	$sco_param_tesco
        000000 

0x002F89	$sco_param_clock_lsw
        000000 

0x002F8A	$sco_param_from_air_size
        000000 

0x002F8B	$sco_param_from_air_time
        000000 

0x002F8C	$bass_timer_id
        000000 

0x002F8D	$sub_app_esco_func
        000000 

0x002F8E	$min_port_space
        0003E8 

0x002F8F	$max_late_write
        000000 

0x002F90	$min_early_write
        FFEC78 

0x002F91	$M.downsample_sub_to_1k2.mute_direction
        000001 

0x002F92	$M.downsample_sub_to_1k2.mute_index
        000000 

0x002F93	$esco_write_deadline
        000000 

0x002F94	$time_before_fp
        000000 

0x002F95	$M.create_sub_packet.packet_counter
        000001 

0x002F96	$subwoofer.sco_offset
        000000 

0x002F97	$warp_timer_id
        000000 

0x002F98	$codec_packets_info_last_timer_time
        000000 

0x002F99	$first_packet_received
        000000 

0x002F9A	$M.report_latency_to_vm.reported_latency
        000000 

0x002F9B	$M.configure_latency_reporting.report_period
        000000 

0x002F9C	$M.configure_latency_reporting.average_latency
        FFFFFF 

0x002F9D	$vee.heartrate.hb_time_enable
        000000 

0x002F9E	$vee.heartrate.time_value
        000000 

0x002F9F	$vee.heartrate.value_msb
        000000 

0x002FA0	$vee.heartrate.hb_calc.max_flag
        000001 

0x002FA1	$vee.heartrate.hb_calc.max_index
        000000 

0x002FA2	$vee.heartrate.hb_calc.max_value
        000000 

0x002FA3	$vee.heartrate.hb_smooth.p_smooth_value
        000000 

0x002FA4	$vee.heartrate.hb_smooth.p_yzero
        000000 

0x002FA5	$vee.accelerate.step_value
        000000 

0x002FA6	$vee.accelerate.step_value_enable
        000000 

0x002FA7	$vee.accelerate.neck_protect_enable
        000000 

0x002FA8	$vee.accelerate.acc_valid
        000000 

0x002FA9	$vee.accelerate.angle_y_int
        000000 

0x002FAA	$vee.accelerate.acc_axis_x
        000000 

0x002FAB	$vee.accelerate.acc_axis_z
        000000 

0x002FAC	$vee.accelerate.const_seat.seat_timer_count
        000000 

0x002FAD	$vee.accelerate.const_seat.stable_count
        000000 

0x002FAE	$vee.accelerate.const_seat.status
        000000 

0x002FAF	$vee.accelerate.const_seat.max_value
        000000 

0x002FB0	$vee.accelerate.safe_driver.nod_action_flag
        000000 

0x002FB1	$vee.accelerate.neck_protect.acc_count
        000000 

0x002FB2	$vee.accelerate.neck_protect.angle_x_init
        000000 

0x002FB3	$vee.accelerate.neck_protect.angle_z_init
        000000 

0x002FB4	$vee.accelerate.neck_protect.neck_timer_count
        000000 

0x002FB5	$vee.accelerate.step_count.index_curr
        000000 

0x002FB6	$vee.accelerate.step_count.index_max
        000000 

0x002FB7	$vee.accelerate.step_count.min_flag
        000001 

0x002FB8	$cbuffer.write_port_connect_address
        000000 

0x002FB9	$cbuffer.read_port_connect_address
        000000 

0x002FBA	$cbuffer.auto_mcu_message
        000001 000000 

0x002FBC	$interrupt.total_time
        000000 

0x002FBD	$message.queue_read_ptr
        000000 

0x002FBE	$message.last_seq_sent
        000000 

0x002FBF	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0x002FC0	$pskey.last_addr
        FFFFFF 

0x002FC1	$timer.last_addr
        FFFFFF 

0x002FC2	$cbops.struc_ptr
        000000 

0x002FC3	$cbops.amount_written
        000000 

0x002FC4	$M.cbops.av_copy.control_cbuffer
        000000 

0x002FC5	$M.cbops.dac_av_copy.port_mnt_data_avg
        0016A8 

0x002FC6	$M.cbops.dac_av_copy.prev_buffer_read_addr
        000000 

0x002FC7	$M.cbops.dac_av_copy.buffer_level
        000000 

0x002FC8	$M.cbops.dither_and_shift.main.rand_num
        005555 

0x002FC9	$M.cbops.rate_adjustment_and_shift.main.n_samples
        000000 

0x002FCA	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0x002FCB	$M.cbops.rate_adjustment_and_shift.main.temp_r4
        000000 

0x002FCC	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0x002FCD	$master_reset_needed
        000001 

0x002FCE	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0x002FCF	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0x002FD0	$M.cmpd100.analysis.inst_gain
        000000 

0x002FD1	$M.spi_comm.last_addr
        FFFFFF 

0x002FD2	$i2c.pio_sda_mask
        000040 

0x003000	$stereo_3d_enhancement.delay2
	-------- [0x19E0 octets]


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m4_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30F0	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF30FF	$dac_resampler.resampler_active
        000000 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3260	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF32E0	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF335E	$M.system_config.data.ParameterMap
        000DDC FF344F 000EC5 FF344D 
        000EC6 FF344E 000EB9 FF5FD2 
        000EC4 FF5FD8 000EBA FF5FD3 
        000EBB FF5FD4 000EBC FF5FD5 
        000EBD FF5FD6 000EBE FF5FD7 
        000DDC FF5F80 000DDC FF5F9E 
        000EC7 FF5F8A 000EC8 FF5F8B 
        000EC9 FF5F8C 000ECA FF5F8D 
        000ECB FF5F8E 000ECC FF5F8F 
        000ECD FF5F90 000ECE FF5F91 
        000ECF FF5F95 000ED0 FF5F96 
        000ED1 FF5F97 000ED2 FF5F98 
        000ED3 FF5F99 000ED4 FF5F9A 
        000ED5 FF5F9B 000ED6 FF5F9C 
        000ED7 FF5F86 000ED8 FF5FA8 
        000ED9 FF5FA9 000EDA FF5FAA 
        000EDB FF5FAB 000EDC FF5FAC 
        000EDD FF5FAD 000EDE FF5FAE 
        000EDF FF5FAF 000EE0 FF5FB3 
        000EE1 FF5FB4 000EE2 FF5FB5 
        000EE3 FF5FB6 000EE4 FF5FB7 
        000EE5 FF5FB8 000EE6 FF5FB9 
        000EE7 FF5FBA 000EE8 FF5FA4 
        000EE9 002E67 000EEA 002E68 
        000EEB FF6823 000DDC 002D59 
        000DDC 002DC1 000DDC 002DD0 
        000000 

0xFF33C7	$M.system_config.data.spkr_eq_left_dm2
        002DF9 002DF9 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF33DC	$M.system_config.data.spkr_eq_right_dm2
        FF6687 FF6687 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF33F1	$M.system_config.data.user_eq_left_dm2
        002DF9 002DF9 000005 002C8F 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3406	$M.system_config.data.user_eq_right_dm2
        FF6687 FF6687 000005 002C8F 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF341B	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF342C	$M.system_config.data.boost_eq_left_dm2
        002DF9 002DF9 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3439	$M.system_config.data.boost_eq_right_dm2
        FF6687 FF6687 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3446	$M.system_config.data.stereo_3d_obj
        002DEC FF667A 002DF9 FF6687 
        002F41 FF67DE 0004CF 00026A 
        000000 000000 000040 

0xFF3451	$M.system_config.data.user_eq_bank_select
        000007 000000 000E32 000E48 
        000E5E 000E74 000E8A 000EA0 

0xFF3459	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3460	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3467	$M.system_config.data.spkr_eq_bank_select
        000001 000DDD 000DFE 

0xFF346A	$M.system_config.data.boost_eq_bank_select
        000001 000E1F 000E28 

0xFF346D	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF347C	$dac_resampler.stereo_left_copy_op.next
0xFF347C	$dac_resampler.stereo_left_copy_op
        00063C 

0xFF347D	$dac_resampler.stereo_left_copy_op.func
        FF67F0 

0xFF347E	$dac_resampler.stereo_left_copy_op.param
        000000 000002 

0xFF3480	$vee.heartrate.calc_cbuffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF34F9	$dac_out_resampler_stereo_copy_struc
        FF36FA 000002 0000AD FF67CC 
        000002 000095 00009D 

0xFF3500	$dac_resampler.dac_out_temp_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3591	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF35A0	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF35BE	$M.sra_tagtimes.mode_funtion_table
        0003B5 0003C4 

0xFF35C0	$sub_codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF35F2	$encoded_latency_struct
        0000FE FF67E7 FF67C6 0000A5 
        FF680E 002F70 000003 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3600	$dac_resampler.dac_out_temp_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3691	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF36FA	$dac_resampler.stereo_copy_switch_op.next
0xFF36FA	$dac_resampler.stereo_copy_switch_op
        FF347C 

0xFF36FB	$dac_resampler.stereo_copy_switch_op.func
        002F65 

0xFF36FC	$dac_resampler.stereo_copy_switch_op.param
        FF30FF 001F60 000000 000001 

0xFF3700	$M.cbops.av_copy.right_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3779	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF37F1	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0xFF37FF	$app_config.io
        FFFFFF 

0xFF3800	$sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F08	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF3F47	$M.iir_resamplev2.Up_160_Down_147.filter
0xFF3F47	$M.iir_resamplev2.Up_160_Down_147.int_ratio
        000000 

0xFF3F48	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF3F49	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF3F4A	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF3F4B	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000D06 

0xFF3F4C	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF3F4D	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF3F4E	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF3F4F	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF3F50	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF3779 

0xFF3F51	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF3F52	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        000964 

0xFF3F53	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF3F54	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF3F55	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF3F56	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF3F57	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF3F58	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF5911 

0xFF3F59	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF3F5A	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF3F5B	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        000FA4 

0xFF3F5C	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF3F67	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF3F68	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF3F72	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF3F73	$M.iir_resamplev2.Up_147_Down_160.int_ratio
0xFF3F73	$M.iir_resamplev2.Up_147_Down_160.filter
        000001 

0xFF3F74	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF3F75	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF3F76	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3F77	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000D06 

0xFF3F78	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF3F79	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF3F7A	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF3F7B	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF3F7C	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF3F08 

0xFF3F7D	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF3F7E	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        000964 

0xFF3F7F	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF3F80	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF3F81	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF3F82	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF3F83	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF3F84	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF58EE 

0xFF3F85	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF3F86	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF3F87	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        000FA4 

0xFF3F88	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF3F93	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF3F94	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF3F9E	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF3F9F	$M.iir_resamplev2.Up_441_Down_320.int_ratio
0xFF3F9F	$M.iir_resamplev2.Up_441_Down_320.filter
        000000 

0xFF3FA0	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF3FA1	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF3FA2	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF3FA3	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000D06 

0xFF3FA4	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF3FA5	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF3FA6	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF3FA7	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF3FA8	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF3F08 

0xFF3FA9	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF3FAA	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        000964 

0xFF3FAB	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF3FAC	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF3FAD	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF3FAE	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF3FAF	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF3FB0	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF3691 

0xFF3FB1	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF3FB2	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF3FB3	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        000FA4 

0xFF3FB4	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF3FBF	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF3FC0	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF3FCA	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF3FCB	$M.iir_resamplev2.Up_441_Down_160.int_ratio
0xFF3FCB	$M.iir_resamplev2.Up_441_Down_160.filter
        000000 

0xFF3FCC	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF3FCD	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF3FCE	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3FCF	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000D06 

0xFF3FD0	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF3FD1	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF3FD2	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF3FD3	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF3FD4	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF3F08 

0xFF3FD5	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF3FD6	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000A38 

0xFF3FD7	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF3FD8	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF3FD9	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF3FDA	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF3FDB	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF3FDC	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF3691 

0xFF3FDD	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF3FDE	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF3FDF	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        000FBF 

0xFF3FE0	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF3FE7	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF3FE8	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF3FEE	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF3FEF	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF3FF4	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF3FF5	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3FFF	$current_codec_sampling_rate
        000000 

0xFF4000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5000	$stereo_3d_enhancement.delay1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF58A0	$M.iir_resamplev2.Up_3_Down_1.filter
0xFF58A0	$M.iir_resamplev2.Up_3_Down_1.int_ratio
        000000 

0xFF58A1	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF58A2	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF58A3	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF58A4	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF58A5	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000A38 

0xFF58A6	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF58A7	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF58A8	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF58A9	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF58AA	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF58AB	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF346D 

0xFF58AC	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF58AD	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF58AE	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        000F54 

0xFF58AF	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF58B7	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF58B8	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF58BF	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF58C0	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF58C7	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF58C8	$M.iir_resamplev2.Up_3_Down_2.filter
0xFF58C8	$M.iir_resamplev2.Up_3_Down_2.int_ratio
        000000 

0xFF58C9	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF58CA	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF58CB	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF58CC	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s1
        000000 

0xFF58CD	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000A38 

0xFF58CE	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF58CF	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF58D0	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF58D1	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF58D2	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF58D3	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF3591 

0xFF58D4	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF58D5	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF58D6	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        000FA4 

0xFF58D7	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF58E2	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF58E3	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF58ED	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF58EE	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF5911	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF5925	$dac_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5A07	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5A5F	$dac_resampler.stereo_right_resampler_op
0xFF5A5F	$dac_resampler.stereo_right_resampler_op.next
        FFFFFF 

0xFF5A60	$dac_resampler.stereo_right_resampler_op.func
        002F5F 

0xFF5A61	$dac_resampler.stereo_right_resampler_op.param
        000001 000003 000000 FFFFF8 
        000008 FF5925 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5AAB	$M.system_config.data.soundbar_2_1_mono_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001128 000FFE 
        000000 000AEC 002ED9 000000 
        000AEC FF676A 000000 000E7D 
        FF6766 000000 003455 FF33C7 
        000400 003455 FF33DC 000400 
        003455 FF342C 000080 003455 
        FF3439 000080 003455 FF33F1 
        000100 003455 FF3406 000100 
        0001F5 FF6694 000000 003461 
        FF5F80 FF5F9E 003467 FF5F80 
        FF5F9E 000D5C 000000 002EE1 
        000D5C 000000 FF676E 000EDF 
        002E73 000000 001107 00007C 
        000000 0005A6 002DC1 000000 
        0005A6 002DD0 000000 001128 
        FF6807 000000 001128 FF6809 
        000000 000FD6 FF670F 000000 
        000000 

0xFF5AF4	$M.music_example.power_up_reset.message_handlers
        002EC1 001020 0024C5 0027FF 
        FF6752 001001 0033C7 0027FF 
        FF6756 00100E 0025D6 0027FF 
        002EC5 001002 003349 0027FF 
        002EC9 001012 0033EA 0027FF 
        FF675A 001018 002741 0027FF 
        002ECD 00101A 002696 0027FF 
        FF678E 001027 00101A 0027FF 
        FF675E 00121A 0026A4 0027FF 
        002ED1 00129A 0026CA 0027FF 
        FF6762 00121B 0026D5 0027FF 
        002ED5 00129B 002669 0027FF 
        002F35 001007 00342E 002832 
        FF67D2 00100A 00348C 002832 
        002F3B 00100B 0033A4 002832 
        002F38 001009 0034AB 002832 
        FF67D5 001008 00349C 002832 
        000000 

0xFF5B39	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5B79	$dac_resampler.filter_spec_lookup_table
        00BB80 00BB80 000000 00AC44 
        00AC44 000000 007D00 007D00 
        000000 005622 005622 000000 
        003E80 003E80 000000 001F40 
        001F40 000000 003E80 00BB80 
        FF58A0 007D00 00BB80 FF58C8 
        00AC44 00BB80 FF3F47 003E80 
        00AC44 FF3FCB 007D00 00AC44 
        FF3F9F 00BB80 00AC44 FF3F73 
        000000 

0xFF5B9E	$M.system_config.data.mono_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 000EDF FF6709 
        000000 000AEC 002EDD 000000 
        003455 FF33C7 000400 003455 
        FF342C 000080 003455 FF33F1 
        000100 003461 FF5F80 FF5F9E 
        003467 FF5F80 FF5F9E 0005A6 
        002DC1 000000 001128 FF6807 
        000000 000FD6 FF670F 000000 
        000000 

0xFF5BC3	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0xFF5BE4	$cbuffer.read_port_offset_addr
0xFF5BE4	$cbuffer.port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5BF0	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5BFC	$dac_resampler.mono_copy_op.next
0xFF5BFC	$dac_resampler.mono_copy_op
        FFFFFF 

0xFF5BFD	$dac_resampler.mono_copy_op.func
        FF67F0 

0xFF5BFE	$dac_resampler.mono_copy_op.param
        000000 000001 

0xFF5C00	$dac_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5F60	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0xFF5F80	$M.system_config.data.cmpd100_obj_44kHz
        000040 000020 002DF9 FF6687 
        002DF9 FF6687 080000 FF6822 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF5F9E	$M.system_config.data.cmpd100_obj_48kHz
        000040 000020 002DF9 FF6687 
        002DF9 FF6687 080000 FF6822 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 3E4859 02D026 3E4859 
        00D9BA 5E4273 009150 7B6F09 
        006D0B 020000 

0xFF5FBC	$M.system_config.data.filter_reset_table
        0034EC FF33C7 000000 0034EC 
        FF33DC 000000 0034EC FF342C 
        000000 0034EC FF3439 000000 
        0034EC FF33F1 000000 0034EC 
        FF3406 000000 0001E8 FF6694 
        000000 000000 

0xFF5FD2	$M.system_config.data.bass_manager_coefs
        000003 100000 200000 000000 
        000000 200000 000050 015725 
        000005 000006 7BA375 5A827A 
        2120FC 7BA375 2120FC 7BA375 
        5A827A 2120FC 7BA375 5A827A 
        2120FC 

0xFF5FE7	$audio_out_tone_right_upsample_stereo_mix
0xFF5FE7	$audio_out_tone_right_upsample_stereo_mix.next
        FF66FD 

0xFF5FE8	$audio_out_tone_right_upsample_stereo_mix.func
        FF67FC 

0xFF5FE9	$audio_out_tone_right_upsample_stereo_mix.param
        000001 FFFFFF FF67CF FF32E0 
        00008F 000060 001BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5FFB	$dac_out_resampler_mono_copy_struc
        002E5B 000001 0000AD 000001 
        000095 

0xFF6000	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF65DC	$audio_out_tone_upsample_mono_mix
0xFF65DC	$audio_out_tone_upsample_mono_mix.next
        002D45 

0xFF65DD	$audio_out_tone_upsample_mono_mix.func
        FF67FC 

0xFF65DE	$audio_out_tone_upsample_mono_mix.param
        000000 FFFFFF 0007FD FF32E0 
        00008F 000050 001BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF65F0	$audio_out_rate_adjustment_and_shift_op_mono.next
0xFF65F0	$audio_out_rate_adjustment_and_shift_op_mono
        FFFFFF 

0xFF65F1	$audio_out_rate_adjustment_and_shift_op_mono.func
        002F5C 

0xFF65F2	$audio_out_rate_adjustment_and_shift_op_mono.param
        000000 000001 FFFFFF FFFFFF 
        FFFFF8 FF32E0 000070 000000 
        FF5B4A 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF6604	$usb_rate_candidates
        00BB80 0000C0 000000 001F40 
        000020 000000 003E80 000040 
        000000 005622 00005C 000014 
        007D00 000080 000000 00AC44 
        0000B4 00000A 000000 

0xFF6617	$vee.heartrate.hb_addr_max
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF6629	$usb_stats
        FF6751 FF6821 FF6821 FF6821 
        FF6821 FF6821 FF6821 FF6821 
        FF6821 FF6821 FF6821 FF6821 
        FF6821 002F6D FF6751 00008F 
        FF3FFF 

0xFF663A	$M.music_example_process.mono_mode_conversion_table
        000005 000001 000004 000001 
        000003 000001 000003 000000 
        000004 000000 000005 000000 
        000007 000001 000007 000000 

0xFF664A	$M.system_config.data.mono_StandBy_proc_funcs
        001041 FF670F 000000 001128 
        FF6805 000000 001107 00006C 
        000000 001128 FF6807 000000 
        000FD6 FF670F 000000 000000 

0xFF665A	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF666A	$flash.code.address
	-------- [0x000C octets]

0xFF666E	$flash.data16.address
	-------- [0x000C octets]

0xFF6672	$flash.data24.address
	-------- [0x000C octets]

0xFF6676	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF667A	$M.system_config.data.stream_map_right_in
        FF67C9 000000 000000 000168 
        000BB8 0011E2 001189 000000 
        000000 000000 000000 000000 
        000000 

0xFF6687	$M.system_config.data.stream_map_right_out
        FF67CC 000000 000000 000168 
        000BB8 0011AD 001055 000000 
        000000 000000 000000 000000 
        000000 

0xFF6694	$M.system_config.data.bass_manager_struct
        002DF9 FF6687 002DF9 FF6687 
        000000 002E06 000672 FF5FD2 
        002CB0 000DDC 000800 FF3FFF 

0xFF66A0	$vee.heartrate.hb_smooth.hb_smooth_buff
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF66AA	$vee.accelerate.neck_protect.angle_y_init_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF66B4	$vee.accelerate.neck_protect.acc_x_value_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF66BE	$vee.accelerate.neck_protect.acc_z_value_buf
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF66C8	$audio_mute_op_stereo.next
0xFF66C8	$audio_mute_op_stereo
        FF6725 

0xFF66C9	$audio_mute_op_stereo.func
        FF67FF 

0xFF66CA	$audio_mute_op_stereo.param
        000001 000000 000002 000000 
        000000 000001 000001 

0xFF66D1	$interrupt.isr_call_table
        000FEC 0034FE 000918 0034FE 
        0034FE 0034FE 0034FE 0034FE 
        0034FE 

0xFF66DA	$audio_out_dither_and_shift_op_mono.next
0xFF66DA	$audio_out_dither_and_shift_op_mono
        FFFFFF 

0xFF66DB	$audio_out_dither_and_shift_op_mono.func
        FF67F3 

0xFF66DC	$audio_out_dither_and_shift_op_mono.param
        000000 000001 FFFFF8 000000 
        000090 000000 

0xFF66E2	$stereo_out_copy_struc
        002D1D 000002 000095 00009D 
        000002 80000C 80000D 

0xFF66E9	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
0xFF66E9	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
        00FEEB 

0xFF66EA	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0xFF66EB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0xFF66EC	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BF00 

0xFF66ED	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0xFF66EE	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0xFF66EF	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0xFF66F0	$M.cbops.av_copy.silence_buffer_struc
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF66F7	$stereo_tone_in_copy_struc
        002E61 000001 946003 000002 
        0007FD FF67CF 

0xFF66FD	$signal_detect_op_stereo
0xFF66FD	$signal_detect_op_stereo.next
        FF66C8 

0xFF66FE	$signal_detect_op_stereo.func
        002F62 

0xFF66FF	$signal_detect_op_stereo.param
        002E67 000002 000000 000001 

0xFF6703	$M.main.rm_stereo_switch_op.next
0xFF6703	$M.main.rm_stereo_switch_op
        002D31 

0xFF6704	$M.main.rm_stereo_switch_op.func
        002F65 

0xFF6705	$M.main.rm_stereo_switch_op.param
        002F73 001FF8 000000 000001 

0xFF6709	$M.system_config.data.mix_dm1
        002DEC FF667A 002DF9 002F82 
        002F82 FF6821 

0xFF670F	$M.system_config.data.rcv_process_streams
        002DEC FF667A 002DF9 FF6687 
        002E06 000000 

0xFF6715	$vee.accelerate.acc_read_buf
        000000 000000 000000 000000 
        000000 000000 

0xFF671B	$analogue_in_right_copy_op
0xFF671B	$analogue_in_right_copy_op.next
        FFFFFF 

0xFF671C	$analogue_in_right_copy_op.func
        FF67F9 

0xFF671D	$analogue_in_right_copy_op.param
        000001 000003 000008 

0xFF6720	$tone_in_copy_struc
        002E8F 000001 946003 000001 
        0007FD 

0xFF6725	$M.main.audio_out_dc_remove_op_left.next
0xFF6725	$audio_out_dc_remove_op_left
        002E94 

0xFF6726	$M.main.audio_out_dc_remove_op_left.func
        002F56 

0xFF6727	$M.main.audio_out_dc_remove_op_left.param
        000000 000000 000000 

0xFF672A	$mono_out_copy_struc
        FF65DC 000001 000095 000001 
        80000C 

0xFF672F	$audio_out_dc_remove_op_mono
0xFF672F	$M.main.audio_out_dc_remove_op_mono.next
        002E6D 

0xFF6730	$M.main.audio_out_dc_remove_op_mono.func
        002F56 

0xFF6731	$M.main.audio_out_dc_remove_op_mono.param
        000000 000000 000000 

0xFF6734	$sub_esco_out_copy_struc
        002EE5 000001 002F47 000001 
        91A00E 

0xFF6739	$sub_l2cap_header_out_copy_struc
        FF6776 000001 002F47 000001 
        9D800F 

0xFF673E	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF6742	$con_in_timer_struc
        000000 000000 000000 000000 

0xFF6746	$tone_copy_timer_struc
        000000 000000 000000 000000 

0xFF674A	$codec_in_copy_op.next
0xFF674A	$codec_in_copy_op
        FFFFFF 

0xFF674B	$codec_in_copy_op.func
        FF67F0 

0xFF674C	$codec_in_copy_op.param
        000000 000001 

0xFF674E	$music_example.Statistics
0xFF674E	$music_example.CurMode
        000000 

0xFF674F	$music_example.PeakMipsFunc
        000000 

0xFF6750	$music_example.PeakMipsDecoder
        000000 

0xFF6751	$music_example.SamplingRate
        000000 

0xFF6752	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0xFF6756	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0xFF675A	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0xFF675E	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF6762	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF6766	$M.system_config.data.pass_thru_obj
        002DEC FF667A 002DF9 FF6687 

0xFF676A	$M.system_config.data.right_headroom_obj
        FF667A FF667A 002F83 FF6821 

0xFF676E	$M.system_config.data.delay_right
        FF6687 FF6687 002F44 000BCC 

0xFF6772	$set_synchronized_warp_message_struc
        000000 000000 000000 000000 

0xFF6776	$sub_l2cap_header_limit_op
0xFF6776	$sub_l2cap_header_limit_op.next
        002EE9 

0xFF6777	$sub_l2cap_header_limit_op.func
        FF67F6 

0xFF6778	$sub_l2cap_header_limit_op.mono
        FFFFFF 000007 

0xFF677A	$bdaddr_message_struc
        000000 000000 000000 000000 

0xFF677E	$wall_clock_message_struc
        000000 000000 000000 000000 

0xFF6782	$wall_clock_timer_struc
        000000 000000 000000 000000 

0xFF6786	$M.Subwoofer.write_port_function_table
        001C1B 001C1B 001C1C 001C2E 

0xFF678A	$bass_timer_struc
        000000 000000 000000 000000 

0xFF678E	$M.configure_latency_reporting.message_struct
        000000 000000 000000 000000 

0xFF6792	$vee.heartrate.hb_disable_from_vm_message_struc
        000000 000000 000000 000000 

0xFF6796	$vee.heartrate.recover_hb_value_from_vm_message_struc
        000000 000000 000000 000000 

0xFF679A	$vee.heartrate.sport_time_timer_struc
        000000 000000 000000 000000 

0xFF679E	$vee.accelerate.acc_sample_disable_from_vm_message_struc
        000000 000000 000000 000000 

0xFF67A2	$vee.accelerate.neck_protect_enable_from_vm_message_struc
        000000 000000 000000 000000 

0xFF67A6	$vee.accelerate.const_seat_enable_from_vm_message_struc
        000000 000000 000000 000000 

0xFF67AA	$vee.accelerate.const_seat.seat_timer_struc
        000000 000000 000000 000000 

0xFF67AE	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0xFF67B2	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0xFF67B6	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF67BA	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF67BE	$M.cbops.rate_adjustment_and_shift.main.temp_vars
        000000 000000 000000 000000 

0xFF67C2	$M.frame_sync.usb_in_stereo_audio_copy.usb_in_state_fn
        000661 000674 000674 00069E 

0xFF67C6	$codec_in_cbuffer_struc
        001000 FF4000 FF4000 

0xFF67C9	$audio_out_right_cbuffer_struc
        0005DC 000800 000800 

0xFF67CC	$dac_out_right_cbuffer_struc
        000360 001C00 001C00 

0xFF67CF	$tone_in_right_cbuffer_struc
        000100 000200 000200 

0xFF67D2	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0xFF67D5	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0xFF67D8	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0xFF67DB	$usb_fn_table
        002387 002391 0023A1 

0xFF67DE	$stereo_3d_enhancement_delay2_cbuffer_struc
        0008A0 003000 00326A 

0xFF67E1	$M.system_config.data.delay_buf_left_cbuffer_struc
        000BCD 002000 002000 

0xFF67E4	$sub_out_cbuffer_struc
        000708 FF3800 FF3800 

0xFF67E7	$codec_packets_info_cbuffer_struc
        000032 000640 000640 

0xFF67EA	$vee.heartrate.calc_cbuffer_struc
        000079 FF3480 FF3480 

0xFF67ED	$M.cbops.av_copy.left_silence_cbuffer_struc
        000079 000580 000580 

0xFF67F0	$cbops.copy_op
        000000 000000 000EFD 

0xFF67F3	$cbops.dither_and_shift
        000000 000000 0008C2 

0xFF67F6	$cbops.limited_copy
        000000 001150 000000 

0xFF67F9	$cbops.shift
        000000 000000 000E9D 

0xFF67FC	$cbops.auto_upsample_and_mix
        000000 000000 0003E3 

0xFF67FF	$cbops.soft_mute
        000000 000000 00249F 

0xFF6802	$cbops.deinterleave
        000000 001229 000F6F 

0xFF6805	$M.system_config.data.pcmin_l_pk_dtct
        002DEC 000000 

0xFF6807	$M.system_config.data.dac_l_pk_dtct
        002DF9 000000 

0xFF6809	$M.system_config.data.sub_pk_dtct
        002E06 000000 

0xFF680B	$stereo_tone
        000000 

0xFF680C	$aux_input_stream_available
        000000 

0xFF680D	$max_clock_mismatch
        000000 

0xFF680E	$inv_codec_fs
        14D555 

0xFF680F	$M.main.zero
        000000 

0xFF6810	$latency_calc_port_warp
        FF680F 

0xFF6811	$codec_config
        FFFFFF 

0xFF6812	$tmr_period_tone_copy
        003E80 

0xFF6813	$sra_rate_addr
        FF5B4A 

0xFF6814	$stereo_copy_struc_ptr
        FF66E2 

0xFF6815	$no_tone_timer
        000000 

0xFF6816	$M.jitter_buffering.is_buffering
        000001 

0xFF6817	$M.av_audio_out_silence_insert.right_zero_samples
        000000 

0xFF6818	$music_example.sys_mode
        000002 

0xFF6819	$music_example.stereo_processing
        000000 

0xFF681A	$music_example.frame_processing_size
        000168 

0xFF681B	$music_example.MasterVolume
        000000 

0xFF681C	$music_example.LeftTrimVolume
        000000 

0xFF681D	$M.mips_profile.evalinterval_us
        0186A0 

0xFF681E	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0xFF681F	$usb_state
        000000 

0xFF6820	$usb_pause_period_thresh
        000003 

0xFF6821	$M.system_config.data.ZeroValue
        000000 

0xFF6822	$cmpd_gain
        000000 

0xFF6823	$M.system_config.data.dithertype
        000000 

0xFF6824	$warp_amount
        000000 

0xFF6825	$right_port
        80000D 

0xFF6826	$wall_clock_msw
        000000 

0xFF6827	$wall_clock_time
        000000 

0xFF6828	$sco_param_clock_msw
        000000 

0xFF6829	$sco_param_to_air_size
        000000 

0xFF682A	$sco_param_to_air_time
        000000 

0xFF682B	$sco_timer_id
        000000 

0xFF682C	$subwoofer_temp
        000000 

0xFF682D	$queue_another_bass_packet
        000000 

0xFF682E	$late_write_counter
        000000 

0xFF682F	$early_write_counter
        000000 

0xFF6830	$max_early_write
        000000 

0xFF6831	$M.downsample_sub_to_1k2.residual
        000000 

0xFF6832	$wall_clock_adjustment
        000000 

0xFF6833	$sub_sra_ratio
        000000 

0xFF6834	$wall_clock_timer_id
        000000 

0xFF6835	$subwoofer.running
        000000 

0xFF6836	$synchronized_rate
        000000 

0xFF6837	$codec_packets_info_last_write_address
        FF4000 

0xFF6838	$codec_packets_info_timer_gap
        001388 

0xFF6839	$alpha
        066666 

0xFF683A	$M.configure_latency_reporting.enabled
        000000 

0xFF683B	$M.configure_latency_reporting.min_change
        000000 

0xFF683C	$vee.heartrate.hb_sample_enable
        000000 

0xFF683D	$vee.heartrate.heartrate
        000000 

0xFF683E	$vee.heartrate.value_lsb
        000000 

0xFF683F	$vee.heartrate.hb_calc.status
        000000 

0xFF6840	$vee.heartrate.hb_calc.min_flag
        000001 

0xFF6841	$vee.heartrate.hb_calc.min_index
        000000 

0xFF6842	$vee.heartrate.hb_calc.min_value
        0007D0 

0xFF6843	$vee.heartrate.hb_smooth.p_hb_value
        000000 

0xFF6844	$vee.heartrate.hb_smooth.hb_smooth_status
        000000 

0xFF6845	$vee.accelerate.acc_sample_enable
        000000 

0xFF6846	$vee.accelerate.safe_driver_enable
        000000 

0xFF6847	$vee.accelerate.const_seat_enable
        000000 

0xFF6848	$vee.accelerate.angle_x_int
        000000 

0xFF6849	$vee.accelerate.angle_z_int
        000000 

0xFF684A	$vee.accelerate.acc_axis_y
        000000 

0xFF684B	$vee.accelerate.const_seat.seat_timer_enable
        000000 

0xFF684C	$vee.accelerate.const_seat.move_timer_count
        000000 

0xFF684D	$vee.accelerate.const_seat.p_value
        000000 

0xFF684E	$vee.accelerate.const_seat.max_flag
        000000 

0xFF684F	$vee.accelerate.const_seat.stable_status
        000000 

0xFF6850	$vee.accelerate.safe_driver.shake_action_flag
        000000 

0xFF6851	$vee.accelerate.neck_protect.angle_count
        000000 

0xFF6852	$vee.accelerate.neck_protect.angle_y_init
        000000 

0xFF6853	$vee.accelerate.neck_protect.neck_timer_enable
        000000 

0xFF6854	$vee.accelerate.step_count.p_value
        000000 

0xFF6855	$vee.accelerate.step_count.status
        000000 

0xFF6856	$vee.accelerate.step_count.max_flag
        000001 

0xFF6857	$vee.accelerate.step_count.min_value
        000000 

0xFF6858	$cbuffer.write_port_disconnect_address
        000000 

0xFF6859	$cbuffer.read_port_disconnect_address
        000000 

0xFF685A	$error.handler
        000000 

0xFF685B	$interrupt.block_count
        000000 

0xFF685C	$message.last_addr
        FFFFFF 

0xFF685D	$message.queue_write_ptr
        000000 

0xFF685E	$message.long_message_size
        000000 

0xFF685F	$pskey.request_in_progress
        000000 

0xFF6860	$timer.id
        000001 

0xFF6861	$wall_clock.last_addr
        FFFFFF 

0xFF6862	$cbops.amount_to_use
        000000 

0xFF6863	$M.cbops.av_copy.control_port
        000000 

0xFF6864	$M.cbops.av_copy.right_channel
        000000 

0xFF6865	$M.cbops.dac_av_copy.prev_port_mnt_space
        000000 

0xFF6866	$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter
        000000 

0xFF6867	$M.cbops.dac_av_copy.port_amount_written
        000000 

0xFF6868	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0xFF6869	$M.cbops.rate_adjustment_and_shift.main.chn_no
        000000 

0xFF686A	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0xFF686B	$M.cbops.iir_resamplev2.amount_used
        000000 

0xFF686C	$M.codec_av_decode.data_ptr
        000000 

0xFF686D	$frame_sync.sync_flag
        000000 

0xFF686E	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0xFF686F	$M.cmpd100.analysis.region
        000000 

0xFF6870	$M.cmpd100.applygain.lin_gain
        000000 

0xFF6871	$i2c.pio_sclk_mask
        000080 

0xFF6872	$i2c.send_ack
        000000 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000003 00E000 000000 000000 
        000140 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000001 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000001 004000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000100 000000 
        000000 000000 000000 000000 
        000000 000401 000000 000140 
        000000 003B0B 001B85 002809 
        004000 00003B 000B1B 008528 
        000900 000001 000004 000100 
        000001 004000 00003B 006E6E 
        0084BC 00E040 000000 003B6E 
        006E84 00BCE0 000000 000100 
        000006 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000500 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000500 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 00000F 000000 000F00 
        000003 001000 000020 000000 
        000000 000000 000000 002000 
        000010 000000 002000 000065 
        003161 000000 000020 000000 
        000000 005000 00026A 007FFF 
        00FFF9 00B037 00FA05 0042FE 
        0056CC 00FF80 007110 000000 
        000800 000001 005555 0000CC 
        00CC42 000B8B 00030F 001042 
        000B8B 0000EC 00E962 00032E 
        00009E 00217C 00997B 000076 
        00AB08 000000 00F9B0 0037FA 
        000542 00FE56 00CCFF 008071 
        001000 000008 000000 000155 
        005500 00CCCC 003E48 005902 
        00D025 003E48 005900 00D9BA 
        005E42 007200 00914F 007B6F 
        000800 006D0B 000800 000000 
        000A5D 000002 005800 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x000138	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000174	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x0001A4	$sbc.loudness_offset
0x0001A4	$sbc.loudness_offset_m4
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x0001B4	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x0001D4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0001EE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 14496 of 32768 words used, 18272 words available in 1 blocks
  DM2_REGION: 14451 of 32768 words used, 18317 words available in 1 blocks
  flash.data16: 438 of 1048576 words used, 1048138 words available in 1 blocks
  flash.windowed_data16: 517 of 16777216 words used, 16776699 words available in 1 blocks
TOTAL: 29902 of 17891328 words used, 17861426 words available in 4 blocks

CODE:
  PM_REGION: 10297 of 11264 words used, 967 words available in 1 blocks
  flash.code: 1290 of 16764928 words used, 16763638 words available in 1 blocks
TOTAL: 11587 of 16776192 words used, 16764605 words available in 2 blocks

