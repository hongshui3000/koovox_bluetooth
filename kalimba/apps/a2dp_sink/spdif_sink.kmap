
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00047                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920004E                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        FD0000FF D1545F1D        r3 = M[r2 + -41187];
0x00001F        01E00080                 rFlags = Null + 128;
0x000020        E420002F                 r0 = Null + 1;
0x000021        09003919                 Null = Null + M[$interrupt.block_count];
0x000022        00200001                 if NE r0 = Null + Null;
0x000023        1920FE12                 M[0xfffe12] = r0 + Null;
0x000024        E005000F                 call r3;
0x000025        01E00000                 rFlags = Null + 0;
0x000026        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000027        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000028        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000029        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002A        85334000                 r1 = r1 OR 0x4000;
0x00002B        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002C        FD0000FF 09306919        r1 = Null + M[$interrupt.total_time];
0x00002E        2933004E                 r1 = r1 - M[$interrupt.start_time];
0x00002F        0933FE71                 r1 = r1 + M[0xfffe71];
0x000030        FD0000FF 19306919        M[$interrupt.total_time] = r1 + Null;
0x000032        F104000C                 popm <r0, r1>;
0x000033        1930FE93                 M[0xfffe93] = r1 + Null;
0x000034        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000035        F104001C                 popm <r0, r1, r2>;
0x000036        DC0E000F                 rti;

 <$flash.init_pm>
0x000037        FD0000FF 09205EC9        r0 = Null + M[$flash.code.address];
0x000039        1920FE83                 M[0xfffe83] = r0 + Null;
0x00003A        FD000004 85200000        r0 = Null OR 0x40000;
0x00003C        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003D        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003E        FD0000FF 09205ED1        r0 = Null + M[$flash.data24.address];
0x000040        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x000041        01200002                 r0 = Null + 2;
0x000042        1920FE62                 M[0xfffe62] = r0 + Null;
0x000043        FD0000FF 09205ECD        r0 = Null + M[$flash.data16.address];
0x000045        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000046        1900FE61                 M[0xfffe61] = Null + Null;
0x000047        DC0D000F                 rts;

 <$pre_main>
0x000048        E1F0FFEF                 call $flash.init_pm;
0x000049        DDF03165                 jump $main;

 <$spdif.frame_copy>
0x00004A        F3D00000                 push rLink;
0x00004B        D1070008                 Null = M[r5 + 8];
0x00004C        E1100436                 if NE call $spdif.frame_copy.reset;
0x00004D        00A7000F                 r8 = r5 + Null;
0x00004E        E1F00237                 call $spdif.frame_copy.open_buffers;
0x00004F        01600000                 r4 = Null + 0;
0x000050        01300002                 r1 = Null + 2;
0x000051        E440002F                 r2 = Null + 1;
0x000052        21090080                 Null = r7 - 128;
0x000053        00640004                 if NEG r4 = r2 + Null;
0x000054        21080080                 Null = r6 - 128;
0x000055        00630004                 if NEG r4 = r1 + Null;
0x000056        D56A0007                 M[r8 + 7] = r4;

 <$M.spdif.frame_copy.procecssing_loop_start_point>
0x000057        D13A0009                 r1 = M[r8 + 9];
0x000058        9C28009F                 r0 = r6 * r7 (int) (sat);
0x000059        DD000004                 if EQ jump $M.spdif.frame_copy.end_process;
0x00005A        FD0000FF D1235F44        r0 = M[r1 + -41148];
0x00005C        DC02000F                 jump r0;

 <$M.spdif.frame_copy.end_process>
0x00005D        E1F00342                 call $spdif.frame_copy.close_buffers;
0x00005E        DDF01479                 jump $pop_rLink_and_rts;

 <$M.spdif.frame_copy.handle_pcm>
0x00005F        02006200                 Null = Null + Null, r4 = M[I0,M2];
0x000060        66987600                 r7 = r7 - M0, r5 = M[I1,M2];
0x000061        8426427F                 r0 = r4 OR r5, r2 = M[I0,M2];
0x000062        86245600                 r0 = r0 OR r2, r3 = M[I1,M2];
0x000063        86251300                 r0 = r0 OR r3, rMAC = M[I0,M3];
0x000064        86211700                 r0 = r0 OR rMAC, rMAC = M[I1,M3];
0x000065        87210000                 r0 = r0 OR rMAC;
0x000066        DD000014                 if EQ jump $M.spdif.frame_copy.reset_pcm_counter;
0x000067        FD000000 2104F872        Null = r2 - 63602;
0x000069        DD00003E                 if EQ jump $M.spdif.frame_copy.IEC_61937_Pa_Px_found;
0x00006A        FD000000 2105F872        Null = r3 - 63602;
0x00006C        DD000034                 if EQ jump $M.spdif.frame_copy.IEC_61937_Px_Pa_found;

 <$M.spdif.frame_copy.jump_to_pcm_handler>
0x00006D        D13338DC                 r1 = M[r1 + 14556];
0x00006E        DC03000F                 jump r1;

 <$M.spdif.frame_copy.handle_pcm_mute>
0x00006F        01200000                 r0 = Null + 0;
0x000070        D13A001C                 r1 = M[r8 + 28];
0x000071        DD100009                 if NE jump $M.spdif.frame_copy.reset_pcm_counter;
0x000072        5F280000                 I2 = I2 + M0;
0x000073        69020800                 Null = I2 - 2048;
0x000074        DD400007                 if NEG jump $M.spdif.frame_copy.write_pcm_silence;
0x000075        E450002F                 r3 = Null + 1;
0x000076        E1F003EC                 call $spdif.frame_copy.set_codec_type;
0x000077        01300003                 r1 = Null + 3;
0x000078        D53A0009                 M[r8 + 9] = r1;
0x000079        D50A0017                 M[r8 + 23] = Null;

 <$M.spdif.frame_copy.reset_pcm_counter>
0x00007A        5020000F                 I2 = Null + Null;

 <$M.spdif.frame_copy.write_pcm_silence>
0x00007B        020000A0                 Null = Null + Null, M[I4,M0] = r0;
0x00007C        668800A4                 r6 = r6 - M0, M[I5,M0] = r0;
0x00007D        DDF0FFDA                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.handle_pcm_fade_in>
0x00007E        D12A0017                 r0 = M[r8 + 23];
0x00007F        FD000000 9D328000        r1 = r0 * 32768 (int) (sat);
0x000081        8D440008                 r2 = r2 LSHIFT 8;
0x000082        8D550008                 r3 = r3 LSHIFT 8;
0x000083        97430000                 r2 = r2 * r1 (frac);
0x000084        97530000                 r3 = r3 * r1 (frac);
0x000085        462800C0                 r0 = r0 + M0, M[I4,M0] = r2;
0x000086        668800D4                 r6 = r6 - M0, M[I5,M0] = r3;
0x000087        D52A0017                 M[r8 + 23] = r0;
0x000088        21020100                 Null = r0 - 256;
0x000089        DD40FFCE                 if NEG jump $M.spdif.frame_copy.procecssing_loop_start_point;
0x00008A        01200002                 r0 = Null + 2;
0x00008B        D52A0009                 M[r8 + 9] = r0;
0x00008C        DDF0FFCB                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.handle_pcm_unmute>
0x00008D        8D440008                 r2 = r2 LSHIFT 8;
0x00008E        8D550008                 r3 = r3 LSHIFT 8;
0x00008F        020000C0                 Null = Null + Null, M[I4,M0] = r2;
0x000090        668800D4                 r6 = r6 - M0, M[I5,M0] = r3;
0x000091        DDF0FFC6                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.looking_for_sync_info>
0x000092        02006200                 Null = Null + Null, r4 = M[I0,M2];
0x000093        02007600                 Null = Null + Null, r5 = M[I1,M2];
0x000094        02004200                 Null = Null + Null, r2 = M[I0,M2];
0x000095        02005600                 Null = Null + Null, r3 = M[I1,M2];
0x000096        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x000097        66983700                 r7 = r7 - M0, r1 = M[I1,M3];
0x000098        8432003F                 r1 = r0 OR r1;
0x000099        DD100017                 if NE jump $M.spdif.frame_copy.check_switch_to_pcm_time;
0x00009A        FD000000 2104F872        Null = r2 - 63602;
0x00009C        DD00000B                 if EQ jump $M.spdif.frame_copy.IEC_61937_Pa_Px_found;
0x00009D        FD000000 2105F872        Null = r3 - 63602;
0x00009F        DD100011                 if NE jump $M.spdif.frame_copy.check_switch_to_pcm_time;

 <$M.spdif.frame_copy.IEC_61937_Px_Pa_found>
0x0000A0        0025000F                 r0 = r3 + Null;
0x0000A1        0034000F                 r1 = r2 + Null;
0x0000A2        8B670000                 r4 = r4 XOR r5;
0x0000A3        8876007F                 r5 = r4 XOR r5;
0x0000A4        8B670000                 r4 = r4 XOR r5;
0x0000A5        51600001                 I6 = Null + 1;
0x0000A6        DDF00004                 jump $M.spdif.frame_copy.IEC_61937_Pa_found;

 <$M.spdif.frame_copy.IEC_61937_Pa_Px_found>
0x0000A7        51600000                 I6 = Null + 0;
0x0000A8        0024000F                 r0 = r2 + Null;
0x0000A9        0035000F                 r1 = r3 + Null;

 <$M.spdif.frame_copy.IEC_61937_Pa_found>
0x0000AA        21034E1F                 Null = r1 - 19999;
0x0000AB        DD00001D                 if EQ jump $M.spdif.frame_copy.IEC_61937_Pa_Pb_found;

 <$M.spdif.frame_copy.IEC_61937_Pa_Pz_found>
0x0000AC        21074E1F                 Null = r5 - 19999;
0x0000AD        DD000019                 if EQ jump $M.spdif.frame_copy.IEC_61937_Pb_Pa_found;

 <$M.spdif.frame_copy.looking_for_sync_info_done>
0x0000AE        D13A0009                 r1 = M[r8 + 9];
0x0000AF        DD10FFBE                 if NE jump $M.spdif.frame_copy.jump_to_pcm_handler;

 <$M.spdif.frame_copy.check_switch_to_pcm_time>
0x0000B0        D15A0013                 r3 = M[r8 + 19];
0x0000B1        E455002F                 r3 = r3 + 1;
0x0000B2        D55A0013                 M[r8 + 19] = r3;
0x0000B3        2105000A                 Null = r3 - 10;
0x0000B4        DD400009                 if NEG jump $M.spdif.frame_copy.pcm_switch_done;
0x0000B5        01500000                 r3 = Null + 0;
0x0000B6        E1F003AC                 call $spdif.frame_copy.set_codec_type;
0x0000B7        D50A0013                 M[r8 + 19] = Null;
0x0000B8        E420002F                 r0 = Null + 1;
0x0000B9        D52A0009                 M[r8 + 9] = r0;
0x0000BA        51200000                 I2 = Null + 0;
0x0000BB        D50A0014                 M[r8 + 20] = Null;
0x0000BC        D50A0012                 M[r8 + 18] = Null;

 <$M.spdif.frame_copy.pcm_switch_done>
0x0000BD        DDF0FF9A                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.invalid_pa_found>
0x0000BE        0130000A                 r1 = Null + 10;
0x0000BF        D53A0013                 M[r8 + 19] = r1;
0x0000C0        51200000                 I2 = Null + 0;
0x0000C1        D12A0009                 r0 = M[r8 + 9];
0x0000C2        DD00FFEE                 if EQ jump $M.spdif.frame_copy.check_switch_to_pcm_time;
0x0000C3        E420002F                 r0 = Null + 1;
0x0000C4        D52A0009                 M[r8 + 9] = r0;
0x0000C5        DDF0FFE9                 jump $M.spdif.frame_copy.looking_for_sync_info_done;

 <$M.spdif.frame_copy.IEC_61937_Pb_Pa_found>
0x0000C6        51700001                 I7 = Null + 1;
0x0000C7        DDF00006                 jump $M.spdif.frame_copy.get_codec_type;

 <$M.spdif.frame_copy.IEC_61937_Pa_Pb_found>
0x0000C8        51700000                 I7 = Null + 0;
0x0000C9        0137000F                 r1 = r5 + 15;
0x0000CA        8D33007C                 r1 = r1 LSHIFT -4;
0x0000CB        D53A0010                 M[r8 + 16] = r1;
0x0000CC        D53A0012                 M[r8 + 18] = r1;

 <$M.spdif.frame_copy.get_codec_type>
0x0000CD        5020000F                 I2 = Null + Null;
0x0000CE        81360080                 r1 = r4 AND 0x80;
0x0000CF        DD100020                 if NE jump $M.spdif.frame_copy.invalid_burst_found;
0x0000D0        8136001F                 r1 = r4 AND 0x1f;
0x0000D1        21030018                 Null = r1 - 24;
0x0000D2        DD500029                 if POS jump $M.spdif.frame_copy.reserved_burst_found;
0x0000D3        D12A0006                 r0 = M[r8 + 6];
0x0000D4        85220009                 r0 = r0 OR 0x9;
0x0000D5        E9430001                 r2 = 0x1 LSHIFT r1;
0x0000D6        83420000                 r2 = r2 AND r0;
0x0000D7        DD000024                 if EQ jump $M.spdif.frame_copy.reserved_burst_found;
0x0000D8        FD0000FF D1235E3E        r0 = M[r1 + -41410];
0x0000DA        DC02000F                 jump r0;

 <$M.spdif.frame_copy.ac3_burst_found>
0x0000DB        01200600                 r0 = Null + 1536;
0x0000DC        01300002                 r1 = Null + 2;
0x0000DD        DDF00007                 jump $M.spdif.frame_copy.supported_coded_burst;

 <$M.spdif.frame_copy.mpeg1_layer23_burst_found>
0x0000DE        01200480                 r0 = Null + 1152;
0x0000DF        01300004                 r1 = Null + 4;
0x0000E0        DDF00004                 jump $M.spdif.frame_copy.supported_coded_burst;

 <$M.spdif.frame_copy.mpeg2_aac_burst_found>
0x0000E1        01200400                 r0 = Null + 1024;
0x0000E2        01300009                 r1 = Null + 9;
0x0000E3        DDF00001                 jump $M.spdif.frame_copy.supported_coded_burst;

 <$M.spdif.frame_copy.supported_coded_burst>
0x0000E4        D52A0020                 M[r8 + 32] = r0;
0x0000E5        D53A001F                 M[r8 + 31] = r1;
0x0000E6        D50A0013                 M[r8 + 19] = Null;
0x0000E7        4420006F                 r0 = Null + I6;
0x0000E8        D52A0011                 M[r8 + 17] = r0;
0x0000E9        4430007F                 r1 = Null + I7;
0x0000EA        D53A000C                 M[r8 + 12] = r1;
0x0000EB        DD000014                 if EQ jump $M.spdif.frame_copy.switch_to_loading_coded_data;

 <$M.spdif.frame_copy.supported_unaligned>
0x0000EC        01400005                 r2 = Null + 5;
0x0000ED        D54A0009                 M[r8 + 9] = r2;
0x0000EE        DDF0FF69                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.invalid_burst_found>
0x0000EF        D13A000D                 r1 = M[r8 + 13];
0x0000F0        E433002F                 r1 = r1 + 1;
0x0000F1        D53A000D                 M[r8 + 13] = r1;
0x0000F2        DDF0FFCC                 jump $M.spdif.frame_copy.invalid_pa_found;

 <$M.spdif.frame_copy.null_burst_found>
0x0000F3        D13A000E                 r1 = M[r8 + 14];
0x0000F4        E433002F                 r1 = r1 + 1;
0x0000F5        D53A000E                 M[r8 + 14] = r1;
0x0000F6        DDF0FFC8                 jump $M.spdif.frame_copy.invalid_pa_found;

 <$M.spdif.frame_copy.pause_burst_found>
0x0000F7        D13A000F                 r1 = M[r8 + 15];
0x0000F8        E433002F                 r1 = r1 + 1;
0x0000F9        D53A000F                 M[r8 + 15] = r1;
0x0000FA        DDF0FFC4                 jump $M.spdif.frame_copy.invalid_pa_found;

 <$M.spdif.frame_copy.reserved_burst_found>
0x0000FB        D13A0015                 r1 = M[r8 + 21];
0x0000FC        E433002F                 r1 = r1 + 1;
0x0000FD        D53A0015                 M[r8 + 21] = r1;
0x0000FE        DDF0FFC0                 jump $M.spdif.frame_copy.invalid_pa_found;

 <$M.spdif.frame_copy.switch_to_loading_coded_data>
0x0000FF        01400004                 r2 = Null + 4;
0x000100        D54A0009                 M[r8 + 9] = r2;
0x000101        D12A0020                 r0 = M[r8 + 32];
0x000102        D52A0016                 M[r8 + 22] = r0;
0x000103        D15A001F                 r3 = M[r8 + 31];
0x000104        E1F0035E                 call $spdif.frame_copy.set_codec_type;
0x000105        D14A0010                 r2 = M[r8 + 16];
0x000106        D15A0016                 r3 = M[r8 + 22];
0x000107        8D44007F                 r2 = r2 LSHIFT -1;
0x000108        2045004F                 r2 = r3 - r2;
0x000109        21440003                 r2 = r2 - 3;
0x00010A        00400004                 if NEG r2 = Null + Null;
0x00010B        D54A0014                 M[r8 + 20] = r2;
0x00010C        E460002F                 r4 = Null + 1;
0x00010D        E1F00348                 call $spdif.latency_measurement;
0x00010E        DDF0FF49                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.handle_IEC_61937_Pa_Pz>
0x00010F        02006100                 Null = Null + Null, r4 = M[I0,M1];
0x000110        66987500                 r7 = r7 - M0, r5 = M[I1,M1];
0x000111        D10A0011                 Null = M[r8 + 17];
0x000112        DD000004                 if EQ jump $M.spdif.frame_copy.calc_payload_len;
0x000113        0026000F                 r0 = r4 + Null;
0x000114        0067000F                 r4 = r5 + Null;
0x000115        0072000F                 r5 = r0 + Null;

 <$M.spdif.frame_copy.calc_payload_len>
0x000116        D56A0018                 M[r8 + 24] = r4;
0x000117        0147000F                 r2 = r5 + 15;
0x000118        8D44007C                 r2 = r2 LSHIFT -4;
0x000119        D54A0010                 M[r8 + 16] = r2;
0x00011A        D54A0012                 M[r8 + 18] = r2;
0x00011B        DDF0FFE4                 jump $M.spdif.frame_copy.switch_to_loading_coded_data;

 <$M.spdif.frame_copy.loading_codec_data>
0x00011C        D14A0012                 r2 = M[r8 + 18];
0x00011D        0039000F                 r1 = r7 + Null;
0x00011E        E438005F                 r1 = MIN r6;
0x00011F        03330000                 r1 = r1 + r1;
0x000120        E434005F                 r1 = MIN r2;
0x000121        23430000                 r2 = r2 - r1;
0x000122        D54A0012                 M[r8 + 18] = r2;
0x000123        DD100003                 if NE jump $M.spdif.frame_copy.loading_proc;
0x000124        01400006                 r2 = Null + 6;
0x000125        D54A0009                 M[r8 + 9] = r2;

 <$M.spdif.frame_copy.loading_proc>
0x000126        D10A0011                 Null = M[r8 + 17];
0x000127        DD000004                 if EQ jump $M.spdif.frame_copy.start_loading;
0x000128        4420000F                 r0 = Null + I0;
0x000129        5801000F                 I0 = I1 + Null;
0x00012A        5010002F                 I1 = Null + r0;

 <$M.spdif.frame_copy.start_loading>
0x00012B        D10A000C                 Null = M[r8 + 12];
0x00012C        DD000013                 if EQ jump $M.spdif.frame_copy.align_load;

 <$M.spdif.frame_copy.unalign_load>
0x00012D        D15A0018                 r3 = M[r8 + 24];
0x00012E        8DC3007F                 r10 = r1 LSHIFT -1;
0x00012F        DD00000B                 if EQ jump $M.spdif.frame_copy.write_single_word_unalign;
0x000130        228C6100                 r6 = r6 - r10, r4 = M[I0,M1];
0x000131        229C7500                 r7 = r7 - r10, r5 = M[I1,M1];
0x000132        E4CC003F                 r10 = r10 - 1;
0x000133        030000D1                 Null = Null + Null, M[I4,1] = r3;
0x000134        E5F00003                 do $M.spdif.frame_copy.unalgined_loop;
0x000135        030076F1                 Null = Null + Null, r5 = M[I1,2], M[I4,1] = r5;
0x000136        030062E1                 Null = Null + Null, r4 = M[I0,2], M[I4,1] = r4;

 <$M.spdif.frame_copy.unalgined_loop>
0x000137        030000F1                 Null = Null + Null, M[I4,1] = r5;
0x000138        0056000F                 r3 = r4 + Null;
0x000139        D55A0018                 M[r8 + 24] = r3;

 <$M.spdif.frame_copy.write_single_word_unalign>
0x00013A        81330001                 r1 = r1 AND 0x1;
0x00013B        DD000014                 if EQ jump $M.spdif.frame_copy.end_loading;
0x00013C        030000D1                 Null = Null + Null, M[I4,1] = r3;
0x00013D        E488003F                 r6 = r6 - 1;
0x00013E        DDF00011                 jump $M.spdif.frame_copy.end_loading;

 <$M.spdif.frame_copy.align_load>
0x00013F        8DC3007F                 r10 = r1 LSHIFT -1;
0x000140        DD000009                 if EQ jump $M.spdif.frame_copy.write_single_word_align;
0x000141        228C6100                 r6 = r6 - r10, r4 = M[I0,M1];
0x000142        229C7500                 r7 = r7 - r10, r5 = M[I1,M1];
0x000143        E4CC003F                 r10 = r10 - 1;
0x000144        E5F00003                 do $M.spdif.frame_copy.algined_loop;
0x000145        030062E1                 Null = Null + Null, r4 = M[I0,2], M[I4,1] = r4;
0x000146        030076F1                 Null = Null + Null, r5 = M[I1,2], M[I4,1] = r5;

 <$M.spdif.frame_copy.algined_loop>
0x000147        030000E1                 Null = Null + Null, M[I4,1] = r4;
0x000148        030000F1                 Null = Null + Null, M[I4,1] = r5;

 <$M.spdif.frame_copy.write_single_word_align>
0x000149        81330001                 r1 = r1 AND 0x1;
0x00014A        DD000005                 if EQ jump $M.spdif.frame_copy.end_loading;
0x00014B        03006200                 Null = Null + Null, r4 = M[I0,2];
0x00014C        030076E1                 Null = Null + Null, r5 = M[I1,2], M[I4,1] = r4;
0x00014D        E488003F                 r6 = r6 - 1;
0x00014E        E499003F                 r7 = r7 - 1;

 <$M.spdif.frame_copy.end_loading>
0x00014F        D10A0011                 Null = M[r8 + 17];
0x000150        DD00FF07                 if EQ jump $M.spdif.frame_copy.procecssing_loop_start_point;
0x000151        4420000F                 r0 = Null + I0;
0x000152        5801000F                 I0 = I1 + Null;
0x000153        5010002F                 I1 = Null + r0;
0x000154        DDF0FF03                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$M.spdif.frame_copy.read_stuffing_data>
0x000155        D14A0014                 r2 = M[r8 + 20];
0x000156        00C9000F                 r10 = r7 + Null;
0x000157        E4C4005F                 r10 = MIN r2;
0x000158        234C0000                 r2 = r2 - r10;
0x000159        D54A0014                 M[r8 + 20] = r2;
0x00015A        DD100003                 if NE jump $M.spdif.frame_copy.continue_skipping_stuffing_data;
0x00015B        01400000                 r2 = Null + 0;
0x00015C        D54A0009                 M[r8 + 9] = r2;

 <$M.spdif.frame_copy.continue_skipping_stuffing_data>
0x00015D        239C0000                 r7 = r7 - r10;
0x00015E        50BC00CF                 M3 = r10 + r10;
0x00015F        02006300                 Null = Null + Null, r4 = M[I0,M3];
0x000160        02007700                 Null = Null + Null, r5 = M[I1,M3];
0x000161        51B00006                 M3 = Null + 6;
0x000162        DDF0FEF5                 jump $M.spdif.frame_copy.procecssing_loop_start_point;

 <$spdif.output_interface_control.event_process>
0x000163        F3D00000                 push rLink;
0x000164        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x000165        D19A0000                 r7 = M[r8 + 0];
0x000166        D10A0014                 Null = M[r8 + 20];
0x000167        DD101370                 if NE jump $pop_rLink_and_rts;
0x000168        D10A0003                 Null = M[r8 + 3];
0x000169        DD10000B                 if NE jump $M.spdif.output_interface_control.event_process.valid_output_interface;

 <$M.spdif.output_interface_control.event_process.output_interface_none>
0x00016A        D1590019                 r3 = M[r7 + 25];
0x00016B        81050004                 Null = r3 AND 0x4;
0x00016C        DD100005                 if NE jump $M.spdif.output_interface_control.event_process.switching_from_none;

 <$M.spdif.output_interface_control.event_process.force_full_active>
0x00016D        01200003                 r0 = Null + 3;
0x00016E        D52A0010                 M[r8 + 16] = r0;
0x00016F        01500003                 r3 = Null + 3;
0x000170        DDF00065                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.switching_from_none>
0x000171        01200008                 r0 = Null + 8;
0x000172        D52A0010                 M[r8 + 16] = r0;
0x000173        DDF00052                 jump $M.spdif.output_interface_control.event_process.switch_to_new_interface;

 <$M.spdif.output_interface_control.event_process.valid_output_interface>
0x000174        D1290019                 r0 = M[r7 + 25];
0x000175        D13A0010                 r1 = M[r8 + 16];
0x000176        FD0000FF 8122FFFE        r0 = r0 AND 0xfffffe;
0x000178        DD10002B                 if NE jump $M.spdif.output_interface_control.event_process.stream_is_invalid;

 <$M.spdif.output_interface_control.event_process.stream_is_valid>
0x000179        81030004                 Null = r1 AND 0x4;
0x00017A        DD10135D                 if NE jump $pop_rLink_and_rts;

 <$M.spdif.output_interface_control.event_process.check_output_rate>
0x00017B        FD000000 0150BB80        r3 = Null + 48000;
0x00017D        D149001A                 r2 = M[r7 + 26];
0x00017E        FD000000 2104AC44        Null = r2 - 44100;
0x000180        00450004                 if NEG r2 = r3 + Null;
0x000181        D15A0007                 r3 = M[r8 + 7];
0x000182        00450001                 if NE r2 = r3 + Null;
0x000183        D54A0012                 M[r8 + 18] = r2;
0x000184        D15A0013                 r3 = M[r8 + 19];
0x000185        2005004F                 Null = r3 - r2;
0x000186        DD100013                 if NE jump $M.spdif.output_interface_control.event_process.start_config_rates;

 <$M.spdif.output_interface_control.event_process.stream_valide_rates_fine>
0x000187        81030001                 Null = r1 AND 0x1;
0x000188        DD00000D                 if EQ jump $M.spdif.output_interface_control.event_process.start_activating_output_interface;

 <$M.spdif.output_interface_control.event_process.stream_valid_output_interface_active>
0x000189        81030002                 Null = r1 AND 0x2;
0x00018A        DD000006                 if EQ jump $M.spdif.output_interface_control.event_process.start_unmting_output_interface;
0x00018B        E450002F                 r3 = Null + 1;
0x00018C        D14A0006                 r2 = M[r8 + 6];
0x00018D        18450001                 if NE M[r2] = r3 + Null;
0x00018E        01500003                 r3 = Null + 3;
0x00018F        DDF00046                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.start_unmting_output_interface>
0x000190        01600700                 r4 = Null + 1792;
0x000191        01700000                 r5 = Null + 0;
0x000192        E1F0025B                 call $spdif.output_interface_control.configure_interface;
0x000193        01500007                 r3 = Null + 7;
0x000194        DDF00041                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.start_activating_output_interface>
0x000195        E460002F                 r4 = Null + 1;
0x000196        E1F00223                 call $spdif.output_interface_control.activate_interface;
0x000197        01500002                 r3 = Null + 2;
0x000198        DDF0003D                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.start_config_rates>
0x000199        81030001                 Null = r1 AND 0x1;
0x00019A        DD10000E                 if NE jump $M.spdif.output_interface_control.event_process.stream_is_invalid_output_interface_active;
0x00019B        D17A0012                 r5 = M[r8 + 18];
0x00019C        D16A0003                 r4 = M[r8 + 3];
0x00019D        FD0000FF D1665F86        r4 = M[r4 + -41082];
0x00019F        E1001E4D                 if EQ call $error;
0x0001A0        E1F0024D                 call $spdif.output_interface_control.configure_interface;
0x0001A1        E450002F                 r3 = Null + 1;
0x0001A2        DDF00033                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.stream_is_invalid>
0x0001A3        E450003F                 r3 = Null - 1;
0x0001A4        D14A0006                 r2 = M[r8 + 6];
0x0001A5        18450001                 if NE M[r2] = r3 + Null;
0x0001A6        81030001                 Null = r1 AND 0x1;
0x0001A7        DD00001B                 if EQ jump $M.spdif.output_interface_control.event_process.go_idle;

 <$M.spdif.output_interface_control.event_process.stream_is_invalid_output_interface_active>
0x0001A8        81030008                 Null = r1 AND 0x8;
0x0001A9        DD00000C                 if EQ jump $M.spdif.output_interface_control.event_process.start_fading_process;

 <$M.spdif.output_interface_control.event_process.stream_is_invalid_output_interface_fading_done>
0x0001AA        81030002                 Null = r1 AND 0x2;
0x0001AB        DD100005                 if NE jump $M.spdif.output_interface_control.event_process.start_muting_process;

 <$M.spdif.output_interface_control.event_process.start_deactivating_output_interface>
0x0001AC        01600000                 r4 = Null + 0;
0x0001AD        E1F0020C                 call $spdif.output_interface_control.activate_interface;
0x0001AE        01500005                 r3 = Null + 5;
0x0001AF        DDF00026                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.start_muting_process>
0x0001B0        01600700                 r4 = Null + 1792;
0x0001B1        E470002F                 r5 = Null + 1;
0x0001B2        E1F0023B                 call $spdif.output_interface_control.configure_interface;
0x0001B3        01500006                 r3 = Null + 6;
0x0001B4        DDF00021                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.start_fading_process>
0x0001B5        81030004                 Null = r1 AND 0x4;
0x0001B6        DD10000A                 if NE jump $M.spdif.output_interface_control.event_process.set_fading_state;
0x0001B7        85330004                 r1 = r1 OR 0x4;
0x0001B8        D53A0010                 M[r8 + 16] = r1;
0x0001B9        013038AC                 r1 = Null + 14508;
0x0001BA        01401388                 r2 = Null + 5000;
0x0001BB        01500379                 r3 = Null + 889;
0x0001BC        E1F01311                 call $timer.schedule_event_in;
0x0001BD        E450003F                 r3 = Null - 1;
0x0001BE        D14A0006                 r2 = M[r8 + 6];
0x0001BF        18450001                 if NE M[r2] = r3 + Null;

 <$M.spdif.output_interface_control.event_process.set_fading_state>
0x0001C0        01500004                 r3 = Null + 4;
0x0001C1        DDF00014                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.go_idle>
0x0001C2        D1590019                 r3 = M[r7 + 25];
0x0001C3        81050004                 Null = r3 AND 0x4;
0x0001C4        DD00000F                 if EQ jump $M.spdif.output_interface_control.event_process.switch_done;

 <$M.spdif.output_interface_control.event_process.switch_to_new_interface>
0x0001C5        D14A0015                 r2 = M[r8 + 21];
0x0001C6        D54A0003                 M[r8 + 3] = r2;
0x0001C7        D14A0016                 r2 = M[r8 + 22];
0x0001C8        D54A0004                 M[r8 + 4] = r2;
0x0001C9        D14A0017                 r2 = M[r8 + 23];
0x0001CA        D54A0005                 M[r8 + 5] = r2;
0x0001CB        FD0000FF 8155FFFB        r3 = r3 AND 0xfffffb;
0x0001CD        D5590019                 M[r7 + 25] = r3;
0x0001CE        D50A0013                 M[r8 + 19] = Null;
0x0001CF        013038AC                 r1 = Null + 14508;
0x0001D0        01400000                 r2 = Null + 0;
0x0001D1        01500163                 r3 = Null + 355;
0x0001D2        E1F012FB                 call $timer.schedule_event_in;

 <$M.spdif.output_interface_control.event_process.switch_done>
0x0001D3        01500000                 r3 = Null + 0;
0x0001D4        DDF00001                 jump $M.spdif.output_interface_control.event_process.end;

 <$M.spdif.output_interface_control.event_process.end>
0x0001D5        D55A0011                 M[r8 + 17] = r3;
0x0001D6        DDF01301                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.rate_detect>
0x0001D7        F3D00000                 push rLink;
0x0001D8        0970FE71                 r5 = Null + M[0xfffe71];
0x0001D9        D16A002D                 r4 = M[r8 + 45];
0x0001DA        D57A002D                 M[r8 + 45] = r5;
0x0001DB        D12A002E                 r0 = M[r8 + 46];
0x0001DC        D50A002E                 M[r8 + 46] = Null;
0x0001DD        0002000F                 Null = r0 + Null;
0x0001DE        DD1012F9                 if NE jump $pop_rLink_and_rts;
0x0001DF        512A002F                 I2 = r8 + 47;
0x0001E0        013000FF                 r1 = Null + 255;
0x0001E1        E439005F                 r1 = MIN r7;
0x0001E2        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0001E3        03005B00                 Null = Null + Null, r3 = M[I2,-1];
0x0001E4        815500FF                 r3 = r3 AND 0xff;
0x0001E5        814200FF                 r2 = r0 AND 0xff;
0x0001E6        03450000                 r2 = r2 + r3;
0x0001E7        0043004F                 r2 = r1 + r2;
0x0001E8        DD100005                 if NE jump $M.spdif.frame_copy.rate_detect.input_received;
0x0001E9        D50A002B                 M[r8 + 43] = Null;
0x0001EA        D50A002C                 M[r8 + 44] = Null;
0x0001EB        01600000                 r4 = Null + 0;
0x0001EC        DDF0004D                 jump $M.spdif.frame_copy.rate_detect.fs_found;

 <$M.spdif.frame_copy.rate_detect.input_received>
0x0001ED        D10A002C                 Null = M[r8 + 44];
0x0001EE        DD100006                 if NE jump $M.spdif.frame_copy.rate_detect.reset_done;
0x0001EF        01400000                 r2 = Null + 0;
0x0001F0        512A002F                 I2 = r8 + 47;
0x0001F1        01C00037                 r10 = Null + 55;
0x0001F2        E5F00002                 do $M.spdif.frame_copy.rate_detect.reset_done;
0x0001F3        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.spdif.frame_copy.rate_detect.reset_done>
0x0001F4        23670000                 r4 = r4 - r5;
0x0001F5        20600064                 if NEG r4 = Null - r4;
0x0001F6        512A002F                 I2 = r8 + 47;
0x0001F7        D1CA002C                 r10 = M[r8 + 44];
0x0001F8        01400000                 r2 = Null + 0;
0x0001F9        51800001                 M0 = Null + 1;
0x0001FA        8D560008                 r3 = r4 LSHIFT 8;
0x0001FB        87530000                 r3 = r3 OR r1;
0x0001FC        01700000                 r5 = Null + 0;
0x0001FD        E5F00006                 do $M.spdif.frame_copy.rate_detect.calc_total_loop;
0x0001FE        0052D80F                 r3 = r0 + Null, M[I2,M0] = r3;
0x0001FF        03432800                 r2 = r2 + r1, r0 = M[I2,0];
0x000200        03760000                 r5 = r5 + r4;
0x000201        813500FF                 r1 = r3 AND 0xff;
0x000202        8D650078                 r4 = r3 LSHIFT -8;

 <$M.spdif.frame_copy.rate_detect.calc_total_loop>
0x000203        D13A002C                 r1 = M[r8 + 44];
0x000204        21030028                 Null = r1 - 40;
0x000205        DD500003                 if POS jump $M.spdif.frame_copy.rate_detect.calc_total_done;
0x000206        E433D82F                 r1 = r1 + 1, M[I2,M0] = r3;
0x000207        D53A002C                 M[r8 + 44] = r1;

 <$M.spdif.frame_copy.rate_detect.calc_total_done>
0x000208        0037000F                 r1 = r5 + Null;
0x000209        E4330020                 if EQ r1 = r1 + 1;
0x00020A        FD00001E CD148480        rMAC = r2 * 0.2384185791015625 (SS);
0x00020C        FD000000 AD130001        rMAC = rMAC + r1 * 1.1920928955078125e-007 (SS);
0x00020E        8D330002                 r1 = r1 LSHIFT 2;
0x00020F        D9030000                 Div = rMAC / r1;
0x000210        D9400001                 r2 = DivResult;
0x000211        D54A002B                 M[r8 + 43] = r2;
0x000212        D17A002A                 r5 = M[r8 + 42];
0x000213        FD0000FF 512068DF        I2 = Null + -38689;
0x000215        01C00003                 r10 = Null + 3;
0x000216        E450002F                 r3 = Null + 1;
0x000217        E5F0000B                 do $M.spdif.frame_copy.rate_detect.find_nearest_loop;
0x000218        03003900                 Null = Null + Null, r1 = M[I2,1];
0x000219        2024003F                 r0 = r2 - r1;
0x00021A        E422004F                 r0 = ABS r0;
0x00021B        FD000000 9563A3D7        r4 = r1 * 0.004999995231628418 (frac);
0x00021D        2007003F                 Null = r5 - r1;
0x00021E        00660060                 if EQ r4 = r4 + r4;
0x00021F        2002006F                 Null = r0 - r4;
0x000220        DDD00003                 if LE jump $M.spdif.frame_copy.rate_detect.fs_calculated;
0x000221        8D550008                 r3 = r3 LSHIFT 8;

 <$M.spdif.frame_copy.rate_detect.find_nearest_loop>
0x000222        01500000                 r3 = Null + 0;

 <$M.spdif.frame_copy.rate_detect.fs_calculated>
0x000223        512A0057                 I2 = r8 + 87;
0x000224        01C0000E                 r10 = Null + 14;
0x000225        03002800                 Null = Null + Null, r0 = M[I2,0];
0x000226        0035000F                 r1 = r3 + Null;
0x000227        E5F00003                 do $M.spdif.frame_copy.rate_detect.find_mod_loop;
0x000228        0032B80F                 r1 = r0 + Null, M[I2,M0] = r1;
0x000229        03532800                 r3 = r3 + r1, r0 = M[I2,0];

 <$M.spdif.frame_copy.rate_detect.find_mod_loop>
0x00022A        0200B800                 Null = Null + Null, M[I2,M0] = r1;
0x00022B        01400006                 r2 = Null + 6;
0x00022C        FD0000FF 512068DF        I2 = Null + -38689;
0x00022E        01C00003                 r10 = Null + 3;
0x00022F        E5F00009                 do $M.spdif.frame_copy.rate_detect.rate_decision_loop;
0x000230        0120000B                 r0 = Null + 11;
0x000231        03006900                 Null = Null + Null, r4 = M[I2,1];
0x000232        2006007F                 Null = r4 - r5;
0x000233        00240000                 if EQ r0 = r2 + Null;
0x000234        813500FF                 r1 = r3 AND 0xff;
0x000235        2003002F                 Null = r1 - r0;
0x000236        DD500003                 if POS jump $M.spdif.frame_copy.rate_detect.fs_found;
0x000237        8D550078                 r3 = r3 LSHIFT -8;

 <$M.spdif.frame_copy.rate_detect.rate_decision_loop>
0x000238        01600000                 r4 = Null + 0;

 <$M.spdif.frame_copy.rate_detect.fs_found>
0x000239        D15A002A                 r3 = M[r8 + 42];
0x00023A        2005006F                 Null = r3 - r4;
0x00023B        DD00129C                 if EQ jump $pop_rLink_and_rts;
0x00023C        D56A002A                 M[r8 + 42] = r4;
0x00023D        F3900000                 push r7;
0x00023E        F3A00000                 push r8;
0x00023F        E1F00122                 call $spdif.frame_copy.process_valid_rate_message;
0x000240        F3A40000                 pop r8;
0x000241        F3940000                 pop r7;
0x000242        DDF01295                 jump $pop_rLink_and_rts;

 <$spdif.copy_raw_data>
0x000243        F3D00000                 push rLink;
0x000244        D12A0000                 r0 = M[r8 + 0];
0x000245        E1F01238                 call $cbuffer.calc_amount_data;
0x000246        0092000F                 r7 = r0 + Null;
0x000247        D12A0001                 r0 = M[r8 + 1];
0x000248        E1F01235                 call $cbuffer.calc_amount_data;
0x000249        E492005F                 r7 = MIN r0;
0x00024A        E1F0FF8D                 call $spdif.frame_copy.rate_detect;
0x00024B        0009000F                 Null = r7 + Null;
0x00024C        DD000036                 if EQ jump $M.spdif.frame_copy.copy_raw_data.end;
0x00024D        D12A0000                 r0 = M[r8 + 0];
0x00024E        E1F01253                 call $cbuffer.get_read_address_and_size;
0x00024F        5000002F                 I0 = Null + r0;
0x000250        50C0003F                 L0 = Null + r1;
0x000251        D12A0001                 r0 = M[r8 + 1];
0x000252        E1F0124F                 call $cbuffer.get_read_address_and_size;
0x000253        5010002F                 I1 = Null + r0;
0x000254        50D0003F                 L1 = Null + r1;
0x000255        D12A0002                 r0 = M[r8 + 2];
0x000256        E1F0120F                 call $cbuffer.calc_amount_space;
0x000257        8D82007F                 r6 = r0 LSHIFT -1;
0x000258        21880002                 r6 = r6 - 2;
0x000259        00800004                 if NEG r6 = Null + Null;
0x00025A        D10A0019                 Null = M[r8 + 25];
0x00025B        00800001                 if NE r6 = Null + Null;
0x00025C        2029008F                 r0 = r7 - r6;
0x00025D        DDD00007                 if LE jump $M.spdif.frame_copy.copy_raw_data.read_data;
0x00025E        00C2000F                 r10 = r0 + Null;
0x00025F        E5F00003                 do $M.spdif.frame_copy.copy_raw_data.trash_loop;
0x000260        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000261        03003500                 Null = Null + Null, r1 = M[I1,1];

 <$M.spdif.frame_copy.copy_raw_data.trash_loop>
0x000262        0058000F                 r3 = r6 + Null;
0x000263        0069000F                 r4 = r7 + Null;

 <$M.spdif.frame_copy.copy_raw_data.read_data>
0x000264        E489005F                 r6 = MIN r7;
0x000265        DD000015                 if EQ jump $M.spdif.frame_copy.copy_raw_data.end_reading_input;
0x000266        D12A0002                 r0 = M[r8 + 2];
0x000267        E1F0123F                 call $cbuffer.get_write_address_and_size;
0x000268        5040002F                 I4 = Null + r0;
0x000269        50E0003F                 L4 = Null + r1;
0x00026A        E4C8003F                 r10 = r6 - 1;
0x00026B        5834000F                 I3 = I4 + Null;
0x00026C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00026D        E5F00002                 do $M.spdif.frame_copy.copy_raw_data.read_left_raw_data_loop;
0x00026E        030021A2                 Null = Null + Null, r0 = M[I0,1], M[I4,2] = r0;

 <$M.spdif.frame_copy.copy_raw_data.read_left_raw_data_loop>
0x00026F        030000A2                 Null = Null + Null, M[I4,2] = r0;
0x000270        E4C8003F                 r10 = r6 - 1;
0x000271        5843000F                 I4 = I3 + Null;
0x000272        03002531                 Null = Null + Null, r0 = M[I1,1], r1 = M[I4,1];
0x000273        E5F00002                 do $M.spdif.frame_copy.copy_raw_data.read_right_raw_data_loop;
0x000274        030025A2                 Null = Null + Null, r0 = M[I1,1], M[I4,2] = r0;

 <$M.spdif.frame_copy.copy_raw_data.read_right_raw_data_loop>
0x000275        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000276        D12A0002                 r0 = M[r8 + 2];
0x000277        4430004F                 r1 = Null + I4;
0x000278        E1F01241                 call $cbuffer.set_write_address;
0x000279        51E00000                 L4 = Null + 0;

 <$M.spdif.frame_copy.copy_raw_data.end_reading_input>
0x00027A        D12A0000                 r0 = M[r8 + 0];
0x00027B        4430000F                 r1 = Null + I0;
0x00027C        E1F01239                 call $cbuffer.set_read_address;
0x00027D        51C00000                 L0 = Null + 0;
0x00027E        D12A0001                 r0 = M[r8 + 1];
0x00027F        4430001F                 r1 = Null + I1;
0x000280        E1F01235                 call $cbuffer.set_read_address;
0x000281        51D00000                 L1 = Null + 0;

 <$M.spdif.frame_copy.copy_raw_data.end>
0x000282        D10A0019                 Null = M[r8 + 25];
0x000283        00900001                 if NE r7 = Null + Null;
0x000284        DDF01253                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.open_buffers>
0x000285        F3D00000                 push rLink;
0x000286        51A00090                 M2 = Null + 144;
0x000287        D12A0002                 r0 = M[r8 + 2];
0x000288        E1F011DD                 call $cbuffer.calc_amount_space;
0x000289        640200AF                 Null = r0 - M2;
0x00028A        50A00005                 if POS M2 = Null + Null;
0x00028B        D12A0002                 r0 = M[r8 + 2];
0x00028C        E1F01215                 call $cbuffer.get_read_address_and_size;
0x00028D        5000002F                 I0 = Null + r0;
0x00028E        50C0003F                 L0 = Null + r1;
0x00028F        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x000290        5810000F                 I1 = I0 + Null;
0x000291        58DC000F                 L1 = L0 + Null;
0x000292        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000293        D12A0002                 r0 = M[r8 + 2];
0x000294        E1F011E9                 call $cbuffer.calc_amount_data;
0x000295        672A0000                 r0 = r0 - M2;
0x000296        8D92007F                 r7 = r0 LSHIFT -1;
0x000297        D12A000B                 r0 = M[r8 + 11];
0x000298        E402003F                 Null = r0 - 1;
0x000299        DDD00009                 if LE jump $M.spdif.frame_copy.open_buffers.set_pcm_buffers;
0x00029A        D12A0005                 r0 = M[r8 + 5];
0x00029B        E1F011CA                 call $cbuffer.calc_amount_space;
0x00029C        8D82007F                 r6 = r0 LSHIFT -1;
0x00029D        D12A0005                 r0 = M[r8 + 5];
0x00029E        E1F01208                 call $cbuffer.get_write_address_and_size;
0x00029F        5040002F                 I4 = Null + r0;
0x0002A0        50E0003F                 L4 = Null + r1;
0x0002A1        DDF0000F                 jump $M.spdif.frame_copy.open_buffers.end;

 <$M.spdif.frame_copy.open_buffers.set_pcm_buffers>
0x0002A2        D12A0003                 r0 = M[r8 + 3];
0x0002A3        E1F011C2                 call $cbuffer.calc_amount_space;
0x0002A4        0082000F                 r6 = r0 + Null;
0x0002A5        D12A0003                 r0 = M[r8 + 3];
0x0002A6        E1F01200                 call $cbuffer.get_write_address_and_size;
0x0002A7        5040002F                 I4 = Null + r0;
0x0002A8        50E0003F                 L4 = Null + r1;
0x0002A9        D12A0004                 r0 = M[r8 + 4];
0x0002AA        E1F011BB                 call $cbuffer.calc_amount_space;
0x0002AB        E482005F                 r6 = MIN r0;
0x0002AC        D12A0004                 r0 = M[r8 + 4];
0x0002AD        E1F011F9                 call $cbuffer.get_write_address_and_size;
0x0002AE        5050002F                 I5 = Null + r0;
0x0002AF        50F0003F                 L5 = Null + r1;

 <$M.spdif.frame_copy.open_buffers.end>
0x0002B0        51A0FFFE                 M2 = Null + -2;
0x0002B1        51900002                 M1 = Null + 2;
0x0002B2        51800001                 M0 = Null + 1;
0x0002B3        51B00006                 M3 = Null + 6;
0x0002B4        D12A000A                 r0 = M[r8 + 10];
0x0002B5        5020002F                 I2 = Null + r0;
0x0002B6        DDF01221                 jump $pop_rLink_and_rts;

 <$spdif.decode>
0x0002B7        F3D00000                 push rLink;
0x0002B8        1970392A                 M[$spdif.stream_decode.stream_decode_struct] = r5 + Null;
0x0002B9        00A7000F                 r8 = r5 + Null;

 <$M.spdif.stream_decode.retry_copy>
0x0002BA        D17A0000                 r5 = M[r8 + 0];
0x0002BB        E420002F                 r0 = Null + 1;
0x0002BC        D5270007                 M[r5 + 7] = r0;
0x0002BD        D10A000F                 Null = M[r8 + 15];
0x0002BE        E100FD8C                 if EQ call $spdif.frame_copy;
0x0002BF        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x0002C0        D17A0000                 r5 = M[r8 + 0];
0x0002C1        D1270007                 r0 = M[r5 + 7];
0x0002C2        D52A0009                 M[r8 + 9] = r0;
0x0002C3        D12A000A                 r0 = M[r8 + 10];
0x0002C4        E402003F                 Null = r0 - 1;
0x0002C5        E1C00154                 if GT call $spdif.stream_decode.run_decoder;
0x0002C6        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x0002C7        D17A0000                 r5 = M[r8 + 0];
0x0002C8        D137000B                 r1 = M[r5 + 11];
0x0002C9        D12A000A                 r0 = M[r8 + 10];
0x0002CA        2002003F                 Null = r0 - r1;
0x0002CB        DD000013                 if EQ jump $M.spdif.stream_decode.continue_normally;
0x0002CC        D12A000E                 r0 = M[r8 + 14];
0x0002CD        DD10000E                 if NE jump $M.spdif.stream_decode.stall_copying;

 <$M.spdif.stream_decode.switch_now>
0x0002CE        D53A000A                 M[r8 + 10] = r1;
0x0002CF        E403003F                 Null = r1 - 1;
0x0002D0        E1C00178                 if GT call $spdif.stream_decode.get_new_decoder;
0x0002D1        D12A0002                 r0 = M[r8 + 2];
0x0002D2        E0020001                 if NE call r0;
0x0002D3        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x0002D4        01600000                 r4 = Null + 0;
0x0002D5        E1F00180                 call $spdif.latency_measurement;
0x0002D6        E1F00057                 call $spdif.report_event;
0x0002D7        D10A000F                 Null = M[r8 + 15];
0x0002D8        DD000007                 if EQ jump $M.spdif.stream_decode.switch_done;
0x0002D9        D50A000F                 M[r8 + 15] = Null;
0x0002DA        DDF0FFE0                 jump $M.spdif.stream_decode.retry_copy;

 <$M.spdif.stream_decode.stall_copying>
0x0002DB        E420002F                 r0 = Null + 1;
0x0002DC        D52A000F                 M[r8 + 15] = r0;
0x0002DD        DDF00002                 jump $M.spdif.stream_decode.switch_done;

 <$M.spdif.stream_decode.continue_normally>
0x0002DE        D50A000F                 M[r8 + 15] = Null;

 <$M.spdif.stream_decode.switch_done>
0x0002DF        01600002                 r4 = Null + 2;
0x0002E0        E1F00175                 call $spdif.latency_measurement;
0x0002E1        DDF011F6                 jump $pop_rLink_and_rts;

 <$spdif.latency_measurement.identify_packet_boundary>
0x0002E2        F3D00000                 push rLink;
0x0002E3        D1290001                 r0 = M[r7 + 1];
0x0002E4        E1F011C2                 call $cbuffer.get_write_address_and_size;
0x0002E5        50F0003F                 L5 = Null + r1;
0x0002E6        5050002F                 I5 = Null + r0;
0x0002E7        D1290001                 r0 = M[r7 + 1];
0x0002E8        E1F0117D                 call $cbuffer.calc_amount_space;
0x0002E9        21020002                 Null = r0 - 2;
0x0002EA        DD500003                 if POS jump $M.spdif.latency_measurement.identify_packet_boundary.buffer_full_check_done;
0x0002EB        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0002EC        03000027                 Null = Null + Null, r0 = M[I5,-1];

 <$M.spdif.latency_measurement.identify_packet_boundary.buffer_full_check_done>
0x0002ED        E1F011A0                 call $block_interrupts;
0x0002EE        D1270000                 r0 = M[r5 + 0];
0x0002EF        E1F0118E                 call $cbuffer.calc_amount_data;
0x0002F0        0062000F                 r4 = r0 + Null;
0x0002F1        D1270002                 r0 = M[r5 + 2];
0x0002F2        D1320002                 r1 = M[r0 + 2];
0x0002F3        6423000F                 r0 = r1 - I0;
0x0002F4        442200C4                 if NEG r0 = r0 + L0;
0x0002F5        8D22007F                 r0 = r0 LSHIFT -1;
0x0002F6        0026002F                 r0 = r4 + r0;
0x0002F7        D137001B                 r1 = M[r5 + 27];
0x0002F8        CC12003F                 rMAC = r0 * r1 (SS);
0x0002F9        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0002FA        D1290005                 r0 = M[r7 + 5];
0x0002FB        D0220001                 if NE r0 = M[r0 + Null];
0x0002FC        9431002F                 r1 = rMAC * r0 (frac);
0x0002FD        9423002F                 r0 = r1 * r0 (frac);
0x0002FE        03130000                 rMAC = rMAC + r1;
0x0002FF        03120000                 rMAC = rMAC + r0;
0x000300        0920FE71                 r0 = Null + M[0xfffe71];
0x000301        2062001F                 r4 = r0 - rMAC;
0x000302        4420004F                 r0 = Null + I4;
0x000303        030000A5                 Null = Null + Null, M[I5,1] = r0;
0x000304        030000E5                 Null = Null + Null, M[I5,1] = r4;
0x000305        E1F01180                 call $interrupt.unblock;
0x000306        4430005F                 r1 = Null + I5;
0x000307        D1290001                 r0 = M[r7 + 1];
0x000308        E1F011B1                 call $cbuffer.set_write_address;
0x000309        51F00000                 L5 = Null + 0;
0x00030A        DDF011CD                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.init>
0x00030B        F3D00000                 push rLink;
0x00030C        E1F01181                 call $block_interrupts;
0x00030D        013038A8                 r1 = Null + 14504;
0x00030E        FD000000 0140802E        r2 = Null + 32814;
0x000310        0150046B                 r3 = Null + 1131;
0x000311        E1F01C6E                 call $message.register_handler;
0x000312        FD0000FF 01305FF7        r1 = Null + -40969;
0x000314        FD000000 01408030        r2 = Null + 32816;
0x000316        0150046B                 r3 = Null + 1131;
0x000317        E1F01C68                 call $message.register_handler;
0x000318        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x000319        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x00031A        D10A0019                 Null = M[r8 + 25];
0x00031B        DD000010                 if EQ jump $M.spdif.output_interface_control.init.done;

 <$M.spdif.output_interface_control.init.output_already_active>
0x00031C        01500003                 r3 = Null + 3;
0x00031D        D55A0011                 M[r8 + 17] = r3;
0x00031E        01300003                 r1 = Null + 3;
0x00031F        D53A0010                 M[r8 + 16] = r1;
0x000320        FD000000 0130BB80        r1 = Null + 48000;
0x000322        D53A0013                 M[r8 + 19] = r1;
0x000323        E1F0FE40                 call $spdif.output_interface_control.event_process;
0x000324        DDF00007                 jump $M.spdif.output_interface_control.init.done;

 <$M.spdif.output_interface_control.init.deactivate>
0x000325        01500005                 r3 = Null + 5;
0x000326        D55A0011                 M[r8 + 17] = r3;
0x000327        E430002F                 r1 = Null + 1;
0x000328        D53A0010                 M[r8 + 16] = r1;
0x000329        01600000                 r4 = Null + 0;
0x00032A        E1F0008F                 call $spdif.output_interface_control.activate_interface;

 <$M.spdif.output_interface_control.init.done>
0x00032B        E1F0115A                 call $interrupt.unblock;
0x00032C        DDF011AB                 jump $pop_rLink_and_rts;

 <$spdif.report_event>
0x00032D        F3D00000                 push rLink;
0x00032E        F3A00000                 push r8;
0x00032F        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x000330        D19A0000                 r7 = M[r8 + 0];
0x000331        D1090023                 Null = M[r7 + 35];
0x000332        DD000021                 if EQ jump $M.spdif.report_event.end;
0x000333        01700000                 r5 = Null + 0;
0x000334        01800000                 r6 = Null + 0;
0x000335        01600000                 r4 = Null + 0;
0x000336        01401075                 r2 = Null + 4213;
0x000337        D1590019                 r3 = M[r7 + 25];
0x000338        81550001                 r3 = r3 AND 0x1;
0x000339        DD100007                 if NE jump $M.spdif.report_event.send_message;
0x00033A        D169001A                 r4 = M[r7 + 26];
0x00033B        DD000018                 if EQ jump $M.spdif.report_event.end;
0x00033C        D189000B                 r6 = M[r7 + 11];
0x00033D        818800FF                 r6 = r6 AND 0xff;
0x00033E        D1790024                 r5 = M[r7 + 36];
0x00033F        817700FF                 r5 = r5 AND 0xff;

 <$M.spdif.report_event.send_message>
0x000340        E430002F                 r1 = Null + 1;
0x000341        D1290025                 r0 = M[r7 + 37];
0x000342        D5590025                 M[r7 + 37] = r3;
0x000343        2005002F                 Null = r3 - r0;
0x000344        00300001                 if NE r1 = Null + Null;
0x000345        D1290026                 r0 = M[r7 + 38];
0x000346        D5690026                 M[r7 + 38] = r4;
0x000347        2006002F                 Null = r4 - r0;
0x000348        00300001                 if NE r1 = Null + Null;
0x000349        D1290027                 r0 = M[r7 + 39];
0x00034A        D5790027                 M[r7 + 39] = r5;
0x00034B        2007002F                 Null = r5 - r0;
0x00034C        00300001                 if NE r1 = Null + Null;
0x00034D        D1290028                 r0 = M[r7 + 40];
0x00034E        D5890028                 M[r7 + 40] = r6;
0x00034F        2008002F                 Null = r6 - r0;
0x000350        00300001                 if NE r1 = Null + Null;
0x000351        0003000F                 Null = r1 + Null;
0x000352        E1000F95                 if EQ call $message.send_short;

 <$M.spdif.report_event.end>
0x000353        F3A40000                 pop r8;
0x000354        DDF01183                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.valid_stream_event_message_handler>
0x000355        F3D00000                 push rLink;
0x000356        FD0000FF 09A0692A        r8 = Null + M[$spdif.frame_copy.frame_copy_struct];
0x000358        D1250003                 r0 = M[r3 + 3];
0x000359        8122FFFF                 r0 = r0 AND 0xffff;
0x00035A        D1350004                 r1 = M[r3 + 4];
0x00035B        8D330010                 r1 = r1 LSHIFT 16;
0x00035C        0053002F                 r3 = r1 + r0;
0x00035D        D55A0029                 M[r8 + 41] = r3;
0x00035E        D55A002E                 M[r8 + 46] = r3;
0x00035F        E1F00002                 call $spdif.frame_copy.process_valid_rate_message;
0x000360        DDF01177                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.process_valid_rate_message>
0x000361        F3D00000                 push rLink;
0x000362        D15A0029                 r3 = M[r8 + 41];
0x000363        D12A002A                 r0 = M[r8 + 42];
0x000364        2002005F                 Null = r0 - r3;
0x000365        00500001                 if NE r3 = Null + Null;
0x000366        0005000F                 Null = r3 + Null;
0x000367        DD00000A                 if EQ jump $M.spdif.frame_copy.valid_stream_event_message_handler.is_invalid;
0x000368        D55A001A                 M[r8 + 26] = r3;
0x000369        0025000F                 r0 = r3 + Null;
0x00036A        E1F0115B                 call $latency.calc_inv_fs;
0x00036B        D52A001B                 M[r8 + 27] = r0;
0x00036C        D16A0019                 r4 = M[r8 + 25];
0x00036D        FD0000FF 8166FFFE        r4 = r4 AND 0xfffffe;
0x00036F        D56A0019                 M[r8 + 25] = r4;
0x000370        DDF00006                 jump $M.spdif.frame_copy.valid_stream_event_message_handler.message_process_done;

 <$M.spdif.frame_copy.valid_stream_event_message_handler.is_invalid>
0x000371        E460002F                 r4 = Null + 1;
0x000372        D56A0008                 M[r8 + 8] = r4;
0x000373        D16A0019                 r4 = M[r8 + 25];
0x000374        85660001                 r4 = r4 OR 0x1;
0x000375        D56A0019                 M[r8 + 25] = r4;

 <$M.spdif.frame_copy.valid_stream_event_message_handler.message_process_done>
0x000376        E1F0FFB7                 call $spdif.report_event;
0x000377        E1F0FDEC                 call $spdif.output_interface_control.event_process;
0x000378        DDF0115F                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.all_confirms_received>
0x000379        F3D00000                 push rLink;
0x00037A        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x00037B        D13A0011                 r1 = M[r8 + 17];
0x00037C        D16A0010                 r4 = M[r8 + 16];
0x00037D        FD0000FF D1335F2E        r1 = M[r1 + -41170];
0x00037F        DC03000F                 jump r1;

 <$M.spdif.output_interface_control.all_confirms_received.confirm_error>
0x000380        E1F01C6C                 call $error;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_rate_done>
0x000381        D12A0012                 r0 = M[r8 + 18];
0x000382        D52A0013                 M[r8 + 19] = r0;
0x000383        DDF00011                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_activation_done>
0x000384        85660001                 r4 = r4 OR 0x1;
0x000385        FD0000FF 8166FFF7        r4 = r4 AND 0xfffff7;
0x000387        DDF0000D                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_fading_done>
0x000388        85660008                 r4 = r4 OR 0x8;
0x000389        FD0000FF 8166FFFB        r4 = r4 AND 0xfffffb;
0x00038B        DDF00009                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_deactivation_done>
0x00038C        FD0000FF 8166FFFE        r4 = r4 AND 0xfffffe;
0x00038E        DDF00006                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_mute_done>
0x00038F        FD0000FF 8166FFFD        r4 = r4 AND 0xfffffd;
0x000391        DDF00003                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.output_interface_unmute_done>
0x000392        85660002                 r4 = r4 OR 0x2;
0x000393        DDF00001                 jump $M.spdif.output_interface_control.all_confirms_received.end_confirm;

 <$M.spdif.output_interface_control.all_confirms_received.end_confirm>
0x000394        D56A0010                 M[r8 + 16] = r4;
0x000395        E1F0FDCE                 call $spdif.output_interface_control.event_process;
0x000396        DDF01141                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.increment_pending_confirms>
0x000397        D12A0014                 r0 = M[r8 + 20];
0x000398        E422002F                 r0 = r0 + 1;
0x000399        D52A0014                 M[r8 + 20] = r0;
0x00039A        DC0D000F                 rts;

 <$spdif.output_interface_control.decrement_pending_confirms>
0x00039B        D12A0014                 r0 = M[r8 + 20];
0x00039C        E422003F                 r0 = r0 - 1;
0x00039D        D52A0014                 M[r8 + 20] = r0;
0x00039E        DC0D000F                 rts;

 <$spdif.frame_copy.close_buffers>
0x00039F        F3D00000                 push rLink;
0x0003A0        4430000F                 r1 = Null + I0;
0x0003A1        D12A0002                 r0 = M[r8 + 2];
0x0003A2        E1F01113                 call $cbuffer.set_read_address;
0x0003A3        51C00000                 L0 = Null + 0;
0x0003A4        51D00000                 L1 = Null + 0;
0x0003A5        4420002F                 r0 = Null + I2;
0x0003A6        D52A000A                 M[r8 + 10] = r0;
0x0003A7        470F0000                 Null = Null + L5;
0x0003A8        DD100008                 if NE jump $M.spdif.frame_copy.close_buffers.close_pcm_buffers;
0x0003A9        470E0000                 Null = Null + L4;
0x0003AA        DD00112D                 if EQ jump $pop_rLink_and_rts;
0x0003AB        D12A0005                 r0 = M[r8 + 5];
0x0003AC        4430004F                 r1 = Null + I4;
0x0003AD        E1F0110C                 call $cbuffer.set_write_address;
0x0003AE        51E00000                 L4 = Null + 0;
0x0003AF        DDF01128                 jump $pop_rLink_and_rts;

 <$M.spdif.frame_copy.close_buffers.close_pcm_buffers>
0x0003B0        D12A0003                 r0 = M[r8 + 3];
0x0003B1        4430004F                 r1 = Null + I4;
0x0003B2        E1F01107                 call $cbuffer.set_write_address;
0x0003B3        51E00000                 L4 = Null + 0;
0x0003B4        D12A0004                 r0 = M[r8 + 4];
0x0003B5        4430005F                 r1 = Null + I5;
0x0003B6        E1F01103                 call $cbuffer.set_write_address;
0x0003B7        51F00000                 L5 = Null + 0;
0x0003B8        DDF0111F                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.activate_interface>
0x0003B9        F3D00000                 push rLink;
0x0003BA        F3A00000                 push r8;
0x0003BB        E1F010D2                 call $block_interrupts;
0x0003BC        FD000000 0140802F        r2 = Null + 32815;
0x0003BE        D15A0004                 r3 = M[r8 + 4];
0x0003BF        8155001F                 r3 = r3 AND 0x1f;
0x0003C0        01700000                 r5 = Null + 0;
0x0003C1        01800000                 r6 = Null + 0;
0x0003C2        F3600000                 push r4;
0x0003C3        E1F00F24                 call $message.send_short;
0x0003C4        F3640000                 pop r4;
0x0003C5        E1F0FFD2                 call $spdif.output_interface_control.increment_pending_confirms;
0x0003C6        D15A0005                 r3 = M[r8 + 5];
0x0003C7        DD000009                 if EQ jump $M.spdif.output_interface_control.activate_interface.end;
0x0003C8        FD000000 0140802F        r2 = Null + 32815;
0x0003CA        D15A0005                 r3 = M[r8 + 5];
0x0003CB        8155001F                 r3 = r3 AND 0x1f;
0x0003CC        01700000                 r5 = Null + 0;
0x0003CD        01800000                 r6 = Null + 0;
0x0003CE        E1F00F19                 call $message.send_short;
0x0003CF        E1F0FFC8                 call $spdif.output_interface_control.increment_pending_confirms;

 <$M.spdif.output_interface_control.activate_interface.end>
0x0003D0        E1F010B5                 call $interrupt.unblock;
0x0003D1        F3A40000                 pop r8;
0x0003D2        DDF01105                 jump $pop_rLink_and_rts;

 <$spdif.latency_measurement.update_latency>
0x0003D3        F3D00000                 push rLink;
0x0003D4        D12A000A                 r0 = M[r8 + 10];
0x0003D5        E402003F                 Null = r0 - 1;
0x0003D6        DDC00015                 if GT jump $M.spdif.latency_measurement.update_latency.is_coded;
0x0003D7        E1F010B6                 call $block_interrupts;
0x0003D8        F3900000                 push r7;
0x0003D9        F3700000                 push r5;
0x0003DA        F3A00000                 push r8;
0x0003DB        D1990000                 r7 = M[r7 + 0];
0x0003DC        E1F00AA4                 call $latency.calc_pcm_latency;
0x0003DD        F3A40000                 pop r8;
0x0003DE        F3740000                 pop r5;
0x0003DF        F3940000                 pop r7;
0x0003E0        E1F0004B                 call $spdif.latency_measurement.calc_spdif_input_latency;
0x0003E1        D1290005                 r0 = M[r7 + 5];
0x0003E2        D0220001                 if NE r0 = M[r0 + Null];
0x0003E3        9431002F                 r1 = rMAC * r0 (frac);
0x0003E4        9423002F                 r0 = r1 * r0 (frac);
0x0003E5        03130000                 rMAC = rMAC + r1;
0x0003E6        03120000                 rMAC = rMAC + r0;
0x0003E7        03180000                 rMAC = rMAC + r6;
0x0003E8        E1F0109D                 call $interrupt.unblock;
0x0003E9        D5190009                 M[r7 + 9] = rMAC;
0x0003EA        DDF010ED                 jump $pop_rLink_and_rts;

 <$M.spdif.latency_measurement.update_latency.is_coded>
0x0003EB        E1F0056F                 call $latency.calc_encoded_latency;
0x0003EC        DDF010EB                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.configure_interface>
0x0003ED        F3D00000                 push rLink;
0x0003EE        F3A00000                 push r8;
0x0003EF        E1F0109E                 call $block_interrupts;
0x0003F0        FD000000 0140802D        r2 = Null + 32813;
0x0003F2        D15A0004                 r3 = M[r8 + 4];
0x0003F3        8155001F                 r3 = r3 AND 0x1f;
0x0003F4        01800000                 r6 = Null + 0;
0x0003F5        F3600000                 push r4;
0x0003F6        F3700000                 push r5;
0x0003F7        E1F00EF0                 call $message.send_short;
0x0003F8        F3740000                 pop r5;
0x0003F9        F3640000                 pop r4;
0x0003FA        E1F0FF9D                 call $spdif.output_interface_control.increment_pending_confirms;
0x0003FB        D15A0005                 r3 = M[r8 + 5];
0x0003FC        DD000007                 if EQ jump $M.spdif.output_interface_control.configure_interface.end;
0x0003FD        FD000000 0140802D        r2 = Null + 32813;
0x0003FF        8155001F                 r3 = r3 AND 0x1f;
0x000400        01800000                 r6 = Null + 0;
0x000401        E1F00EE6                 call $message.send_short;
0x000402        E1F0FF95                 call $spdif.output_interface_control.increment_pending_confirms;

 <$M.spdif.output_interface_control.configure_interface.end>
0x000403        E1F01082                 call $interrupt.unblock;
0x000404        F3A40000                 pop r8;
0x000405        DDF010D2                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.register_spdif_stream_messages_handlers>
0x000406        F3D00000                 push rLink;
0x000407        FD0000FF 01305FEF        r1 = Null + -40977;
0x000409        FD000000 0140802C        r2 = Null + 32812;
0x00040B        01500439                 r3 = Null + 1081;
0x00040C        E1F01B73                 call $message.register_handler;
0x00040D        FD0000FF 01305FF3        r1 = Null + -40973;
0x00040F        FD000000 0140802B        r2 = Null + 32811;
0x000411        01500355                 r3 = Null + 853;
0x000412        E1F01B6D                 call $message.register_handler;
0x000413        013038A4                 r1 = Null + 14500;
0x000414        FD000000 01408031        r2 = Null + 32817;
0x000416        0150048C                 r3 = Null + 1164;
0x000417        E1F01B68                 call $message.register_handler;
0x000418        DDF010BF                 jump $pop_rLink_and_rts;

 <$spdif.stream_decode.run_decoder>
0x000419        F3D00000                 push rLink;
0x00041A        F3A00000                 push r8;
0x00041B        D17A000B                 r5 = M[r8 + 11];
0x00041C        D12A000C                 r0 = M[r8 + 12];
0x00041D        01300000                 r1 = Null + 0;
0x00041E        D5370003                 M[r5 + 3] = r1;
0x00041F        E002000F                 call r0;
0x000420        F3A40000                 pop r8;
0x000421        D17A000B                 r5 = M[r8 + 11];
0x000422        D1270003                 r0 = M[r5 + 3];
0x000423        E430002F                 r1 = Null + 1;
0x000424        E402003F                 Null = r0 - 1;
0x000425        00300000                 if EQ r1 = Null + Null;
0x000426        D53A000E                 M[r8 + 14] = r1;
0x000427        D13A0009                 r1 = M[r8 + 9];
0x000428        00320001                 if NE r1 = r0 + Null;
0x000429        D53A0009                 M[r8 + 9] = r1;
0x00042A        DDF010AD                 jump $pop_rLink_and_rts;

 <$spdif.latency_measurement.calc_spdif_input_latency>
0x00042B        F3D00000                 push rLink;
0x00042C        E1F01061                 call $block_interrupts;
0x00042D        D1270000                 r0 = M[r5 + 0];
0x00042E        E1F0104F                 call $cbuffer.calc_amount_data;
0x00042F        0012000F                 rMAC = r0 + Null;
0x000430        D1270002                 r0 = M[r5 + 2];
0x000431        E1F0104C                 call $cbuffer.calc_amount_data;
0x000432        8D22007F                 r0 = r0 LSHIFT -1;
0x000433        0021002F                 r0 = rMAC + r0;
0x000434        D137001B                 r1 = M[r5 + 27];
0x000435        CC12003F                 rMAC = r0 * r1 (SS);
0x000436        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000437        E1F0104E                 call $interrupt.unblock;
0x000438        DDF0109F                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.chnl_sts_event_message_handler>
0x000439        F3D00000                 push rLink;
0x00043A        FD0000FF 09A0692A        r8 = Null + M[$spdif.frame_copy.frame_copy_struct];
0x00043C        D1250003                 r0 = M[r3 + 3];
0x00043D        D52A0024                 M[r8 + 36] = r0;
0x00043E        81220002                 r0 = r0 AND 0x2;
0x00043F        D1650004                 r4 = M[r3 + 4];
0x000440        8D660078                 r4 = r4 LSHIFT -8;
0x000441        81660003                 r4 = r4 AND 0x3;
0x000442        D16638A0                 r4 = M[r4 + 14496];
0x000443        8D52007F                 r3 = r0 LSHIFT -1;
0x000444        D55A001C                 M[r8 + 28] = r3;
0x000445        D56A001D                 M[r8 + 29] = r4;
0x000446        E1F0FEE7                 call $spdif.report_event;
0x000447        DDF01090                 jump $pop_rLink_and_rts;

 <$spdif.stream_decode.get_new_decoder>
0x000448        F3D00000                 push rLink;
0x000449        D12A0001                 r0 = M[r8 + 1];
0x00044A        E1001BA2                 if EQ call $error;
0x00044B        E002000F                 call r0;
0x00044C        D52A000B                 M[r8 + 11] = r0;
0x00044D        D53A000C                 M[r8 + 12] = r1;
0x00044E        D54A000D                 M[r8 + 13] = r2;
0x00044F        F3A00000                 push r8;
0x000450        D17A000B                 r5 = M[r8 + 11];
0x000451        D12A000D                 r0 = M[r8 + 13];
0x000452        E0020001                 if NE call r0;
0x000453        F3A40000                 pop r8;
0x000454        DDF01083                 jump $pop_rLink_and_rts;

 <$spdif.latency_measurement>
0x000455        F3D00000                 push rLink;
0x000456        F3A00000                 push r8;
0x000457        F3900000                 push r7;
0x000458        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x000459        D19A0008                 r7 = M[r8 + 8];
0x00045A        DD000005                 if EQ jump $M.spdif.latency_measurement.end;
0x00045B        D17A0000                 r5 = M[r8 + 0];
0x00045C        FD0000FF D16668E2        r4 = M[r4 + -38686];
0x00045E        E006000F                 call r4;

 <$M.spdif.latency_measurement.end>
0x00045F        F3940000                 pop r7;
0x000460        F3A40000                 pop r8;
0x000461        DDF01076                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.set_codec_type>
0x000462        D16A000B                 r4 = M[r8 + 11];
0x000463        D55A000B                 M[r8 + 11] = r3;
0x000464        2006005F                 Null = r4 - r3;
0x000465        DC0D0000                 if EQ rts;
0x000466        F3D00000                 push rLink;
0x000467        E1F0FF38                 call $spdif.frame_copy.close_buffers;
0x000468        E1F0FE1D                 call $spdif.frame_copy.open_buffers;
0x000469        01900000                 r7 = Null + 0;
0x00046A        DDF0106D                 jump $pop_rLink_and_rts;

 <$spdif.output_interface_control.activate_audio_response_message_handler>
0x00046B        F3D00000                 push rLink;
0x00046C        09A0392A                 r8 = Null + M[$spdif.stream_decode.stream_decode_struct];
0x00046D        E1F0FF2E                 call $spdif.output_interface_control.decrement_pending_confirms;
0x00046E        0004000F                 Null = r2 + Null;
0x00046F        E1001B7D                 if EQ call $error;
0x000470        D10A0014                 Null = M[r8 + 20];
0x000471        E100FF08                 if EQ call $spdif.output_interface_control.all_confirms_received;
0x000472        DDF01065                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.init>
0x000473        F3D00000                 push rLink;
0x000474        FD0000FF 1970692A        M[$spdif.frame_copy.frame_copy_struct] = r5 + Null;
0x000476        E420002F                 r0 = Null + 1;
0x000477        D5270008                 M[r5 + 8] = r0;
0x000478        E420002F                 r0 = Null + 1;
0x000479        D5270019                 M[r5 + 25] = r0;
0x00047A        E1F0FF8C                 call $spdif.frame_copy.register_spdif_stream_messages_handlers;
0x00047B        DDF0105C                 jump $pop_rLink_and_rts;

 <$spdif.init>
0x00047C        F3D00000                 push rLink;
0x00047D        1970392A                 M[$spdif.stream_decode.stream_decode_struct] = r5 + Null;
0x00047E        D1770000                 r5 = M[r5 + 0];
0x00047F        E1F0FFF4                 call $spdif.frame_copy.init;
0x000480        E1F0FE8B                 call $spdif.output_interface_control.init;
0x000481        DDF01056                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.reset>
0x000482        FD0000FF 1970692A        M[$spdif.frame_copy.frame_copy_struct] = r5 + Null;
0x000484        D5070009                 M[r5 + 9] = Null;
0x000485        D507000A                 M[r5 + 10] = Null;
0x000486        D5070013                 M[r5 + 19] = Null;
0x000487        D5070008                 M[r5 + 8] = Null;
0x000488        DC0D000F                 rts;

 <$spdif.latency_measurement.reset>
0x000489        F3D00000                 push rLink;
0x00048A        E1F00EB5                 call $latency.reset_encoded_latency;
0x00048B        DDF0104C                 jump $pop_rLink_and_rts;

 <$spdif.frame_copy.block_start_message_handler>
0x00048C        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.main>
0x00048D        F3D00000                 push rLink;
0x00048E        D14A0000                 r2 = M[r8 + 0];
0x00048F        D058004F                 r3 = M[r6 + r2];
0x000490        5040005F                 I4 = Null + r3;
0x000491        D069004F                 r4 = M[r7 + r2];
0x000492        50E0006F                 L4 = Null + r4;
0x000493        D14A0001                 r2 = M[r8 + 1];
0x000494        D058004F                 r3 = M[r6 + r2];
0x000495        5050005F                 I5 = Null + r3;
0x000496        D069004F                 r4 = M[r7 + r2];
0x000497        50F0006F                 L5 = Null + r4;
0x000498        D14A0002                 r2 = M[r8 + 2];
0x000499        19402F5A                 M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info] = r2 + Null;
0x00049A        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x00049B        D058004F                 r3 = M[r6 + r2];
0x00049C        19502F5B                 M[0x2f5b] = r3 + Null;
0x00049D        D069004F                 r4 = M[r7 + r2];
0x00049E        19602F5C                 M[0x2f5c] = r4 + Null;
0x00049F        D14A0003                 r2 = M[r8 + 3];
0x0004A0        D058004F                 r3 = M[r6 + r2];
0x0004A1        19502F5E                 M[0x2f5e] = r3 + Null;
0x0004A2        D069004F                 r4 = M[r7 + r2];
0x0004A3        19602F5F                 M[0x2f5f] = r4 + Null;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x0004A4        D19A0004                 r7 = M[r8 + 4];
0x0004A5        FD0000FF 19905FEB        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = r7 + Null;
0x0004A7        D12A0006                 r0 = M[r8 + 6];
0x0004A8        5000002F                 I0 = Null + r0;
0x0004A9        0120000C                 r0 = Null + 12;
0x0004AA        D13A000B                 r1 = M[r8 + 11];
0x0004AB        00320000                 if EQ r1 = r0 + Null;
0x0004AC        50C0003F                 L0 = Null + r1;
0x0004AD        50D0003F                 L1 = Null + r1;
0x0004AE        D12A0005                 r0 = M[r8 + 5];
0x0004AF        99330015                 r1 = r1 * 21 (int);
0x0004B0        8D33007F                 r1 = r1 LSHIFT -1;
0x0004B1        5032003F                 I3 = r0 + r1;
0x0004B2        D12A0008                 r0 = M[r8 + 8];
0x0004B3        D062000F                 r4 = M[r0 + Null];
0x0004B4        D17A000C                 r5 = M[r8 + 12];
0x0004B5        E430002F                 r1 = Null + 1;
0x0004B6        2027006F                 r0 = r5 - r4;
0x0004B7        20200024                 if NEG r0 = Null - r0;
0x0004B8        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x0004BA        21023127                 Null = r0 - 12583;
0x0004BB        00430004                 if NEG r2 = r1 + Null;
0x0004BC        21340026                 r1 = r2 - 38;
0x0004BD        20440035                 if POS r2 = r2 - r1;
0x0004BE        2037006F                 r1 = r5 - r4;
0x0004BF        2023004F                 r0 = r1 - r2;
0x0004C0        20330025                 if POS r1 = r1 - r0;
0x0004C1        0023004F                 r0 = r1 + r2;
0x0004C2        20330024                 if NEG r1 = r1 - r0;
0x0004C3        23730000                 r5 = r5 - r1;
0x0004C4        D57A000C                 M[r8 + 12] = r5;
0x0004C5        013005CD                 r1 = Null + 1485;
0x0004C6        014005DE                 r2 = Null + 1502;
0x0004C7        01500000                 r3 = Null + 0;
0x0004C8        D12A0009                 r0 = M[r8 + 9];
0x0004C9        E402003F                 Null = r0 - 1;
0x0004CA        00530000                 if EQ r3 = r1 + Null;
0x0004CB        21020002                 Null = r0 - 2;
0x0004CC        00540000                 if EQ r3 = r2 + Null;
0x0004CD        4420004F                 r0 = Null + I4;
0x0004CE        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x0004D0        FD0000FF 21023780        Null = r0 - -51328;
0x0004D2        00500000                 if EQ r3 = Null + Null;
0x0004D3        FD0000FF 19506927        M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x0004D5        FD0000FF 19C06926        M[$M.cbops.rate_adjustment_and_shift.main.n_samples] = r10 + Null;
0x0004D7        19C03926                 M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x0004D8        19003927                 M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = Null + Null;
0x0004D9        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x0004DA        FD0000FF 09206927        r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x0004DC        E11000D4                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x0004DD        E1F0002A                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x0004DE        509000CF                 M1 = Null + r10;
0x0004DF        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0004E0        095A3927                 r3 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0004E1        4430000F                 r1 = Null + I0;
0x0004E2        D5350006                 M[r3 + 6] = r1;
0x0004E3        FD0000FF 09206927        r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x0004E5        E11000D7                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x0004E6        09303927                 r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0004E7        DD100010                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0004E8        09302F5A                 r1 = Null + M[$M.cbops.rate_adjustment_and_shift.main.right_channel_info];
0x0004E9        DD40000E                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0004EA        D13A0007                 r1 = M[r8 + 7];
0x0004EB        5000003F                 I0 = Null + r1;
0x0004EC        09302F5B                 r1 = Null + M[0x2f5b];
0x0004ED        5040003F                 I4 = Null + r1;
0x0004EE        09302F5C                 r1 = Null + M[0x2f5c];
0x0004EF        50E0003F                 L4 = Null + r1;
0x0004F0        09302F5E                 r1 = Null + M[0x2f5e];
0x0004F1        5050003F                 I5 = Null + r1;
0x0004F2        09302F5F                 r1 = Null + M[0x2f5f];
0x0004F3        50F0003F                 L5 = Null + r1;
0x0004F4        E430002F                 r1 = Null + 1;
0x0004F5        19303927                 M[$M.cbops.rate_adjustment_and_shift.main.chn_no] = r1 + Null;
0x0004F6        DDF0FFE4                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0004F7        D56A000D                 M[r8 + 13] = r4;
0x0004F8        6420009F                 r0 = Null - M1;
0x0004F9        D52A000E                 M[r8 + 14] = r0;
0x0004FA        51F00000                 L5 = Null + 0;
0x0004FB        51E00000                 L4 = Null + 0;
0x0004FC        51C00000                 L0 = Null + 0;
0x0004FD        51D00000                 L1 = Null + 0;
0x0004FE        4420007F                 r0 = Null + I7;
0x0004FF        FD0000FF 19206920        M[$cbops.amount_written] = r0 + Null;
0x000501        09403920                 r2 = Null + M[$cbops.amount_to_use];
0x000502        D13AFFFE                 r1 = M[r8 + -2];
0x000503        E403002F                 Null = r1 + 1;
0x000504        00420001                 if NE r2 = r0 + Null;
0x000505        19403920                 M[$cbops.amount_to_use] = r2 + Null;
0x000506        DDF00FD1                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x000507        D17A000C                 r5 = M[r8 + 12];
0x000508        FD0000FF 51205FEC        I2 = Null + -40980;
0x00050A        D16A000D                 r4 = M[r8 + 13];
0x00050B        01800015                 r6 = Null + 21;
0x00050C        70A0008F                 M2 = Null - r6;
0x00050D        5080008F                 M0 = Null + r6;
0x00050E        FD0000FF 09C06926        r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x000510        CC16008F                 rMAC = r4 * r6 (SS);
0x000511        FD0000FF 09C06926        r10 = Null + M[$M.cbops.rate_adjustment_and_shift.main.n_samples];
0x000513        51700000                 I7 = Null + 0;
0x000514        D12A000E                 r0 = M[r8 + 14];
0x000515        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x000516        03000031                 Null = Null + Null, r1 = M[I4,1];
0x000517        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x000518        690C0024                 Null = L0 - 36;
0x000519        DD00003E                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x00051A        E5F0003A                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x00051B        8D510018                 r3 = rMAC LSHIFT 24;
0x00051C        8D55007F                 r3 = r3 LSHIFT -1;
0x00051D        8D410000                 r2 = rMAC LSHIFT 0;
0x00051E        5863004F                 I6 = I3 + r2;
0x00051F        6524FFEA                 r0 = -22 - r2;
0x000520        7092004F                 M1 = r0 - r2;
0x000521        5810000F                 I1 = I0 + Null;
0x000522        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000523        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000524        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000525        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000526        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000527        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000528        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000529        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00052A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00052B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00052C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00052D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00052E        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x00052F        79990002                 M1 = M1 - 2;
0x000530        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x000531        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x000532        71980001                 M1 = r6 - 1;
0x000533        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x000534        5863004F                 I6 = I3 + r2;
0x000535        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x000536        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000537        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000538        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000539        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00053A        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x00053B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00053C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00053D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00053E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00053F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000540        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000541        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x000542        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x000543        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x000545        01400000                 r2 = Null + 0;
0x000546        20312B4F                 r1 = rMAC - r2, r0 = M[I2,M3];
0x000547        93320000                 r1 = r1 ASHIFT r0;
0x000548        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x000549        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x00054A        FD000080 01660000        r4 = r4 + -8388608;
0x00054C        0007000F                 Null = r5 + Null;
0x00054D        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x00054E        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x00054F        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x000550        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x000551        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x000552        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x000553        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x000554        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x000555        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x000556        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x000557        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x000558        8D510018                 r3 = rMAC LSHIFT 24;
0x000559        8D55007F                 r3 = r3 LSHIFT -1;
0x00055A        8D410000                 r2 = rMAC LSHIFT 0;
0x00055B        5863004F                 I6 = I3 + r2;
0x00055C        6524FFEA                 r0 = -22 - r2;
0x00055D        7092004F                 M1 = r0 - r2;
0x00055E        5810000F                 I1 = I0 + Null;
0x00055F        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000560        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000561        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000562        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000563        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000564        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000565        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000566        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000567        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000568        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000569        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00056F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000570        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000571        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000572        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000573        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000574        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000575        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000576        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000577        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000578        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000579        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00057F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000580        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000581        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000582        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000583        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x000584        79990002                 M1 = M1 - 2;
0x000585        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x000586        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x000587        71980001                 M1 = r6 - 1;
0x000588        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x000589        5863004F                 I6 = I3 + r2;
0x00058A        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x00058B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00058C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00058D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00058E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00058F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000590        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000591        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000592        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000593        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000594        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000595        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000596        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000597        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000598        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000599        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00059A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00059B        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x00059C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00059D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00059E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00059F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005A9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005AA        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005AB        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005AC        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005AD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0005AE        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x0005AF        DDF0FF93                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x0005B0        4420005F                 r0 = Null + I5;
0x0005B1        FD0000FF 19205FED        M[0xff5fed] = r0 + Null;
0x0005B3        442000FF                 r0 = Null + L5;
0x0005B4        FD0000FF 19205FEE        M[0xff5fee] = r0 + Null;
0x0005B6        51F00000                 L5 = Null + 0;
0x0005B7        FD0000FF 51503780        I5 = Null + -51328;
0x0005B9        FD0000FF 19005FEB        M[$M.cbops.rate_adjustment_and_shift.main.temp_vars] = Null + Null;
0x0005BB        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x0005BC        09403928                 r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x0005BD        FD0000FF 51203780        I2 = Null + -51328;
0x0005BF        44C0007F                 r10 = Null + I7;
0x0005C0        FD0000FF 09305FED        r1 = Null + M[0xff5fed];
0x0005C2        5050003F                 I5 = Null + r1;
0x0005C3        FD0000FF 09305FEE        r1 = Null + M[0xff5fee];
0x0005C5        50F0003F                 L5 = Null + r1;
0x0005C6        D19A0004                 r7 = M[r8 + 4];
0x0005C7        FD00007F 0170FFFF        r5 = Null + 8388607;
0x0005C9        6589FFE8                 r6 = -24 - r7;
0x0005CA        9087008F                 r6 = r5 ASHIFT r6;
0x0005CB        51A00011                 M2 = Null + 17;
0x0005CC        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x0005CD        01503555                 r3 = Null + 13653;
0x0005CE        FD0000FF 516033A8        I6 = Null + -52312;
0x0005D0        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x0005D1        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0005D2        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x0005D3        9B450000                 r2 = r2 * r3 (int);
0x0005D4        474A0000                 r2 = r2 + M2;
0x0005D5        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0005D6        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x0005D7        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x0005D8        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x0005D9        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x0005DA        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x0005DB        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x0005DC        19403928                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0005DD        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x0005DE        FD0000FF 19606928        M[$M.cbops.rate_adjustment_and_shift.main.temp_r4] = r4 + Null;
0x0005E0        092A3927                 r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0005E1        FD0000FF 198033AF        M[0xff33af] = r6 + Null;
0x0005E3        D1220010                 r0 = M[r0 + 16];
0x0005E4        511200B0                 I1 = r0 + 176;
0x0005E5        013200B8                 r1 = r0 + 184;
0x0005E6        09003927                 Null = Null + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x0005E7        50100031                 if NE I1 = Null + r1;
0x0005E8        51D00005                 L1 = Null + 5;
0x0005E9        FD0000FF 516033A9        I6 = Null + -52311;
0x0005EB        5180FFFA                 M0 = Null + -6;
0x0005EC        01603555                 r4 = Null + 13653;
0x0005ED        FD0000FF 198033A8        M[0xff33a8] = r6 + Null;
0x0005EF        95886000                 r6 = r6 * 0.75 (frac);
0x0005F0        E450003F                 r3 = Null - 1;
0x0005F1        2020009F                 r0 = Null - r7;
0x0005F2        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0005F3        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0005F4        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0005F5        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0005F6        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0005F7        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0005F8        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0005F9        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0005FA        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0005FB        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0005FC        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0005FD        474A0000                 r2 = r2 + M2;
0x0005FE        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0005FF        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x000600        8031005F                 r1 = rMAC AND r3;
0x000601        90E3009F                 rMAC = r1 ASHIFT r7;
0x000602        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x000603        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x000604        19403928                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x000605        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x000606        092A3927                 r0 = r8 + M[$M.cbops.rate_adjustment_and_shift.main.chn_no];
0x000607        4430001F                 r1 = Null + I1;
0x000608        81330007                 r1 = r1 AND 0x7;
0x000609        D5320010                 M[r0 + 16] = r1;
0x00060A        58DC000F                 L1 = L0 + Null;
0x00060B        FD0000FF 09606928        r4 = Null + M[$M.cbops.rate_adjustment_and_shift.main.temp_r4];
0x00060D        DC0D000F                 rts;

 <$bass_management.initialize>
0x00060E        23A00000                 r8 = r8 - Null;
0x00060F        DD000008                 if EQ jump $M.bass_management.clear_buffer;
0x000610        D12A0001                 r0 = M[r8 + 1];
0x000611        5000002F                 I0 = Null + r0;
0x000612        D1CA0000                 r10 = M[r8 + 0];
0x000613        50C000CF                 L0 = Null + r10;
0x000614        01200000                 r0 = Null + 0;
0x000615        E5F00002                 do $M.bass_management.clear_buffer;
0x000616        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_buffer>
0x000617        D1A90007                 r8 = M[r7 + 7];
0x000618        FD000011 01402844        r2 = Null + 1124420;
0x00061A        D129000B                 r0 = M[r7 + 11];
0x00061B        D3200000                 r0 = M[r0 + Null];
0x00061C        FD000019 0130BC66        r1 = Null + 1686630;
0x00061E        21027D00                 Null = r0 - 32000;
0x00061F        00430000                 if EQ r2 = r1 + Null;
0x000620        FD000012 0130ACB2        r1 = Null + 1223858;
0x000622        FD000000 2102AC44        Null = r0 - 44100;
0x000624        00430000                 if EQ r2 = r1 + Null;
0x000625        D16A0006                 r4 = M[r8 + 6];
0x000626        9166000D                 r4 = r4 ASHIFT 13;
0x000627        CC16004F                 rMAC = r4 * r2 (SS);
0x000628        D51A0007                 M[r8 + 7] = rMAC;
0x000629        51C00000                 L0 = Null + 0;
0x00062A        DC0D000F                 rts;

 <$bass_management.zero_data>
0x00062B        D1A90007                 r8 = M[r7 + 7];
0x00062C        D12A0009                 r0 = M[r8 + 9];
0x00062D        D13A0008                 r1 = M[r8 + 8];
0x00062E        03330000                 r1 = r1 + r1;
0x00062F        03230000                 r0 = r0 + r1;
0x000630        00C2002F                 r10 = r0 + r0;
0x000631        D1290008                 r0 = M[r7 + 8];
0x000632        5000002F                 I0 = Null + r0;
0x000633        51C00000                 L0 = Null + 0;
0x000634        01200000                 r0 = Null + 0;
0x000635        E5F00002                 do $M.bass_management.clear_data_memory;
0x000636        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.bass_management.clear_data_memory>
0x000637        DC0D000F                 rts;

 <$bass_management>
0x000638        F3D00000                 push rLink;
0x000639        D1290009                 r0 = M[r7 + 9];
0x00063A        D3200000                 r0 = M[r0 + Null];
0x00063B        D139000A                 r1 = M[r7 + 10];
0x00063C        8002003F                 Null = r0 AND r1;
0x00063D        DD1000D9                 if NE jump $M.bass_management.bypass;
0x00063E        D1A90007                 r8 = M[r7 + 7];
0x00063F        D1290000                 r0 = M[r7 + 0];
0x000640        E1F000EE                 call $M.bass_management.get_ptrs;
0x000641        00C5000F                 r10 = r3 + Null;
0x000642        D1290006                 r0 = M[r7 + 6];
0x000643        5020002F                 I2 = Null + r0;
0x000644        D1290004                 r0 = M[r7 + 4];
0x000645        DD000008                 if EQ jump $M.bass_management.clearBassBuffer;
0x000646        E1F000E8                 call $M.bass_management.get_ptrs;
0x000647        5000002F                 I0 = Null + r0;
0x000648        50C0003F                 L0 = Null + r1;
0x000649        E5F00003                 do $M.bass_management.inputLFEcopyLoop;
0x00064A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00064B        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.inputLFEcopyLoop>
0x00064C        DDF00004                 jump $M.bass_management.bassChannelReadyForMixingLR;

 <$M.bass_management.clearBassBuffer>
0x00064D        01200000                 r0 = Null + 0;
0x00064E        E5F00002                 do $M.bass_management.bassChannelReadyForMixingLR;
0x00064F        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.bassChannelReadyForMixingLR>
0x000650        D1290000                 r0 = M[r7 + 0];
0x000651        E1F000DD                 call $M.bass_management.get_ptrs;
0x000652        5000002F                 I0 = Null + r0;
0x000653        50C0003F                 L0 = Null + r1;
0x000654        00C5000F                 r10 = r3 + Null;
0x000655        D1290001                 r0 = M[r7 + 1];
0x000656        E1F000D8                 call $M.bass_management.get_ptrs;
0x000657        5040002F                 I4 = Null + r0;
0x000658        50E0003F                 L4 = Null + r1;
0x000659        D1290006                 r0 = M[r7 + 6];
0x00065A        5020002F                 I2 = Null + r0;
0x00065B        D16A0001                 r4 = M[r8 + 1];
0x00065C        D17A0003                 r5 = M[r8 + 3];
0x00065D        E5F00008                 do $M.bass_management.mixToBassBufferLoop;
0x00065E        03003141                 Null = Null + Null, r1 = M[I0,1], r2 = M[I4,1];
0x00065F        23112800                 rMAC = rMAC - rMAC, r0 = M[I2,0];
0x000660        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000661        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000662        AC14006F                 rMAC = rMAC + r2 * r4 (SS);
0x000663        91210002                 r0 = rMAC ASHIFT 2;
0x000664        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.bass_management.mixToBassBufferLoop>
0x000665        E1F00094                 call $M.bass_management.copyLRinToLRout;
0x000666        D12A0000                 r0 = M[r8 + 0];
0x000667        81020001                 Null = r0 AND 0x1;
0x000668        DD000017                 if EQ jump $M.bass_management.dontFilterLeftRight;
0x000669        D1290002                 r0 = M[r7 + 2];
0x00066A        E1F000C4                 call $M.bass_management.get_ptrs;
0x00066B        D1690008                 r4 = M[r7 + 8];
0x00066C        5040006F                 I4 = Null + r4;
0x00066D        51E00000                 L4 = Null + 0;
0x00066E        D16A0007                 r4 = M[r8 + 7];
0x00066F        018A000A                 r6 = r8 + 10;
0x000670        5020008F                 I2 = Null + r6;
0x000671        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.leftHPFloop>
0x000672        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000673        E1F00051                 call $M.bass_management.HighPassFilter;
0x000674        E488003F                 r6 = r6 - 1;
0x000675        DD10FFFD                 if NE jump $M.bass_management.leftHPFloop;
0x000676        D1290003                 r0 = M[r7 + 3];
0x000677        E1F000B7                 call $M.bass_management.get_ptrs;
0x000678        018A000A                 r6 = r8 + 10;
0x000679        5020008F                 I2 = Null + r6;
0x00067A        D18A0008                 r6 = M[r8 + 8];

 <$M.bass_management.rightHPFloop>
0x00067B        03007900                 Null = Null + Null, r5 = M[I2,1];
0x00067C        E1F00048                 call $M.bass_management.HighPassFilter;
0x00067D        E488003F                 r6 = r6 - 1;
0x00067E        DD10FFFD                 if NE jump $M.bass_management.rightHPFloop;

 <$M.bass_management.dontFilterLeftRight>
0x00067F        D12A0000                 r0 = M[r8 + 0];
0x000680        81020002                 Null = r0 AND 0x2;
0x000681        DD000015                 if EQ jump $M.bass_management.dontFilterBassChannel;
0x000682        D1290000                 r0 = M[r7 + 0];
0x000683        E1F000AB                 call $M.bass_management.get_ptrs;
0x000684        D1290006                 r0 = M[r7 + 6];
0x000685        01300000                 r1 = Null + 0;
0x000686        D1690008                 r4 = M[r7 + 8];
0x000687        D17A0008                 r5 = M[r8 + 8];
0x000688        99770004                 r5 = r5 * 4 (int);
0x000689        03670000                 r4 = r4 + r5;
0x00068A        5040006F                 I4 = Null + r4;
0x00068B        51E00000                 L4 = Null + 0;
0x00068C        D16A0007                 r4 = M[r8 + 7];
0x00068D        018A000A                 r6 = r8 + 10;
0x00068E        D17A0008                 r5 = M[r8 + 8];
0x00068F        0087008F                 r6 = r5 + r6;
0x000690        5020008F                 I2 = Null + r6;
0x000691        D18A0009                 r6 = M[r8 + 9];

 <$M.bass_management.subLPFloop>
0x000692        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000693        E1F00050                 call $M.bass_management.LowPassFilter;
0x000694        E488003F                 r6 = r6 - 1;
0x000695        DD10FFFD                 if NE jump $M.bass_management.subLPFloop;

 <$M.bass_management.dontFilterBassChannel>
0x000696        D1290002                 r0 = M[r7 + 2];
0x000697        E1F00097                 call $M.bass_management.get_ptrs;
0x000698        5000002F                 I0 = Null + r0;
0x000699        50C0003F                 L0 = Null + r1;
0x00069A        00C5000F                 r10 = r3 + Null;
0x00069B        D1290003                 r0 = M[r7 + 3];
0x00069C        E1F00092                 call $M.bass_management.get_ptrs;
0x00069D        5040002F                 I4 = Null + r0;
0x00069E        50E0003F                 L4 = Null + r1;
0x00069F        D1290006                 r0 = M[r7 + 6];
0x0006A0        5020002F                 I2 = Null + r0;
0x0006A1        D16A0002                 r4 = M[r8 + 2];
0x0006A2        D17A0004                 r5 = M[r8 + 4];
0x0006A3        E5F0000B                 do $M.bass_management.mixBassBufferToLeftRightLoop;
0x0006A4        03004900                 Null = Null + Null, r2 = M[I2,1];
0x0006A5        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0006A6        AC12006F                 rMAC = rMAC + r0 * r4 (SS);
0x0006A7        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x0006A8        91210002                 r0 = rMAC ASHIFT 2;
0x0006A9        23110030                 rMAC = rMAC - rMAC, r1 = M[I4,0];
0x0006AA        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x0006AB        AC14007F                 rMAC = rMAC + r2 * r5 (SS);
0x0006AC        91310002                 r1 = rMAC ASHIFT 2;
0x0006AD        0300A1B1                 Null = Null + Null, M[I0,1] = r0, M[I4,1] = r1;

 <$M.bass_management.mixBassBufferToLeftRightLoop>
0x0006AE        D1290006                 r0 = M[r7 + 6];
0x0006AF        5020002F                 I2 = Null + r0;
0x0006B0        D1290005                 r0 = M[r7 + 5];
0x0006B1        E1F0007D                 call $M.bass_management.get_ptrs;
0x0006B2        5010002F                 I1 = Null + r0;
0x0006B3        50D0003F                 L1 = Null + r1;
0x0006B4        47010000                 Null = Null + I1;
0x0006B5        DD00000A                 if EQ jump $M.bass_management.dontCopyBassToSub;
0x0006B6        D1290000                 r0 = M[r7 + 0];
0x0006B7        E1F00077                 call $M.bass_management.get_ptrs;
0x0006B8        00C5000F                 r10 = r3 + Null;
0x0006B9        D17A0005                 r5 = M[r8 + 5];
0x0006BA        E5F00005                 do $M.bass_management.dontCopyBassToSub;
0x0006BB        23112900                 rMAC = rMAC - rMAC, r0 = M[I2,1];
0x0006BC        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x0006BD        91210002                 r0 = rMAC ASHIFT 2;
0x0006BE        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.dontCopyBassToSub>
0x0006BF        51C00000                 L0 = Null + 0;
0x0006C0        51D00000                 L1 = Null + 0;
0x0006C1        51E00000                 L4 = Null + 0;
0x0006C2        51F00000                 L5 = Null + 0;
0x0006C3        DDF00E14                 jump $pop_rLink_and_rts;

 <$M.bass_management.HighPassFilter>
0x0006C4        F100102C                 pushm <r0, r1, r3, r10>;
0x0006C5        5000002F                 I0 = Null + r0;
0x0006C6        50C0003F                 L0 = Null + r1;
0x0006C7        00C5000F                 r10 = r3 + Null;
0x0006C8        CC16006F                 rMAC = r4 * r4 (SS);
0x0006C9        0031000F                 r1 = rMAC + Null;
0x0006CA        FD000020 01500000        r3 = Null + 2097152;
0x0006CC        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x0006CE        BC13005F                 rMAC = rMAC - r1 * r3 (SS);
0x0006CF        BC16007F                 rMAC = rMAC - r4 * r5 (SS);
0x0006D0        0051000F                 r3 = rMAC + Null;
0x0006D1        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0006D2        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x0006D3        E5F0000C                 do $M.bass_management.highPassFilterLoop;
0x0006D4        0014000F                 rMAC = r2 + Null;
0x0006D5        AF362000                 rMAC = rMAC + r1 * r4 (SS), r0 = M[I0,0];
0x0006D6        0041000F                 r2 = rMAC + Null;
0x0006D7        CC12005F                 rMAC = r0 * r3 (SS);
0x0006D8        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x0006D9        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0006DA        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0006DB        0021000F                 r0 = rMAC + Null;
0x0006DC        0013000F                 rMAC = r1 + Null;
0x0006DD        AF26A100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r0;
0x0006DE        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.highPassFilterLoop>
0x0006DF        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0006E0        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x0006E1        F104102C                 popm <r0, r1, r3, r10>;
0x0006E2        DC0D000F                 rts;

 <$M.bass_management.LowPassFilter>
0x0006E3        F100102C                 pushm <r0, r1, r3, r10>;
0x0006E4        5000002F                 I0 = Null + r0;
0x0006E5        50C0003F                 L0 = Null + r1;
0x0006E6        00C5000F                 r10 = r3 + Null;
0x0006E7        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0006E8        03000043                 Null = Null + Null, r2 = M[I4,-1];
0x0006E9        E5F0000C                 do $M.bass_management.lowPassFilterLoop;
0x0006EA        0014000F                 rMAC = r2 + Null;
0x0006EB        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x0006EC        0041000F                 r2 = rMAC + Null;
0x0006ED        03001000                 Null = Null + Null, rMAC = M[I0,0];
0x0006EE        AD148000                 rMAC = rMAC + r2 * -1 (SS);
0x0006EF        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0006F0        BC13007F                 rMAC = rMAC - r1 * r5 (SS);
0x0006F1        0021000F                 r0 = rMAC + Null;
0x0006F2        0013000F                 rMAC = r1 + Null;
0x0006F3        AF26C100                 rMAC = rMAC + r0 * r4 (SS), M[I0,1] = r2;
0x0006F4        0031000F                 r1 = rMAC + Null;

 <$M.bass_management.lowPassFilterLoop>
0x0006F5        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0006F6        030000C1                 Null = Null + Null, M[I4,1] = r2;
0x0006F7        F104102C                 popm <r0, r1, r3, r10>;
0x0006F8        DC0D000F                 rts;

 <$M.bass_management.copyLRinToLRout>
0x0006F9        F3D00000                 push rLink;
0x0006FA        D1290000                 r0 = M[r7 + 0];
0x0006FB        E1F00033                 call $M.bass_management.get_ptrs;
0x0006FC        5000002F                 I0 = Null + r0;
0x0006FD        50C0003F                 L0 = Null + r1;
0x0006FE        00C5000F                 r10 = r3 + Null;
0x0006FF        D1290001                 r0 = M[r7 + 1];
0x000700        E1F0002E                 call $M.bass_management.get_ptrs;
0x000701        5040002F                 I4 = Null + r0;
0x000702        50E0003F                 L4 = Null + r1;
0x000703        D1290002                 r0 = M[r7 + 2];
0x000704        005C000F                 r3 = r10 + Null;
0x000705        E1F00DD0                 call $frmbuffer.set_frame_size;
0x000706        E1F00028                 call $M.bass_management.get_ptrs;
0x000707        5010002F                 I1 = Null + r0;
0x000708        50D0003F                 L1 = Null + r1;
0x000709        D1290003                 r0 = M[r7 + 3];
0x00070A        005C000F                 r3 = r10 + Null;
0x00070B        E1F00DCA                 call $frmbuffer.set_frame_size;
0x00070C        E1F00022                 call $M.bass_management.get_ptrs;
0x00070D        5050002F                 I5 = Null + r0;
0x00070E        50F0003F                 L5 = Null + r1;
0x00070F        D1290005                 r0 = M[r7 + 5];
0x000710        005C000F                 r3 = r10 + Null;
0x000711        E1F00DC4                 call $frmbuffer.set_frame_size;
0x000712        E5F00003                 do $M.bass_management.copyLRinToLRoutLoop;
0x000713        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000714        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.bass_management.copyLRinToLRoutLoop>
0x000715        DDF00DC2                 jump $pop_rLink_and_rts;

 <$M.bass_management.bypass>
0x000716        E1F0FFE3                 call $M.bass_management.copyLRinToLRout;
0x000717        D1290005                 r0 = M[r7 + 5];
0x000718        DD000011                 if EQ jump $M.bass_management.bypassClearSubOutputLoop;
0x000719        E1F00015                 call $M.bass_management.get_ptrs;
0x00071A        00C5000F                 r10 = r3 + Null;
0x00071B        5010002F                 I1 = Null + r0;
0x00071C        50D0003F                 L1 = Null + r1;
0x00071D        D1290004                 r0 = M[r7 + 4];
0x00071E        DD000008                 if EQ jump $M.bass_management.bypassClearSubOutput;
0x00071F        E1F0000F                 call $M.bass_management.get_ptrs;
0x000720        5000002F                 I0 = Null + r0;
0x000721        50C0003F                 L0 = Null + r1;
0x000722        E5F00003                 do $M.bass_management.bypassLFEcopyLoop;
0x000723        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000724        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassLFEcopyLoop>
0x000725        DDF00004                 jump $M.bass_management.bypassClearSubOutputLoop;

 <$M.bass_management.bypassClearSubOutput>
0x000726        01200000                 r0 = Null + 0;
0x000727        E5F00002                 do $M.bass_management.bypassClearSubOutputLoop;
0x000728        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.bass_management.bypassClearSubOutputLoop>
0x000729        51C00000                 L0 = Null + 0;
0x00072A        51D00000                 L1 = Null + 0;
0x00072B        51E00000                 L4 = Null + 0;
0x00072C        51F00000                 L5 = Null + 0;
0x00072D        DDF00DAA                 jump $pop_rLink_and_rts;

 <$M.bass_management.get_ptrs>
0x00072E        F3D00000                 push rLink;
0x00072F        E1F00D81                 call $frmbuffer.get_buffer;
0x000730        DDF00DA7                 jump $pop_rLink_and_rts;

 <$cbops.auto_upsample_and_mix.main>
0x000731        F3D00000                 push rLink;
0x000732        FD000000 0150BB80        r3 = Null + 48000;
0x000734        01601F40                 r4 = Null + 8000;
0x000735        D13A0006                 r1 = M[r8 + 6];
0x000736        D0330001                 if NE r1 = M[r1 + Null];
0x000737        00360000                 if EQ r1 = r4 + Null;
0x000738        D14A0004                 r2 = M[r8 + 4];
0x000739        D0440001                 if NE r2 = M[r2 + Null];
0x00073A        00450000                 if EQ r2 = r3 + Null;
0x00073B        D12A000B                 r0 = M[r8 + 11];
0x00073C        2002003F                 Null = r0 - r1;
0x00073D        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x00073E        D12A000A                 r0 = M[r8 + 10];
0x00073F        2002004F                 Null = r0 - r2;
0x000740        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x000741        D53A000B                 M[r8 + 11] = r1;
0x000742        D54A000A                 M[r8 + 10] = r2;
0x000743        D50A000C                 M[r8 + 12] = Null;
0x000744        FD00007F 0120FFFF        r0 = Null + 8388607;
0x000746        D52A0009                 M[r8 + 9] = r0;
0x000747        E460002F                 r4 = Null + 1;
0x000748        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x00074A        2004002F                 Null = r2 - r0;
0x00074B        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x00074C        01600002                 r4 = Null + 2;
0x00074D        E450002F                 r3 = Null + 1;
0x00074E        2003004F                 Null = r1 - r2;
0x00074F        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000750        00500004                 if NEG r3 = Null + Null;
0x000751        2033004C                 if GT r1 = r1 - r2;
0x000752        D55A000C                 M[r8 + 12] = r3;
0x000753        0013000F                 rMAC = r1 + Null;
0x000754        91340001                 r1 = r2 ASHIFT 1;
0x000755        D9030000                 Div = rMAC / r1;
0x000756        D9200001                 r0 = DivResult;
0x000757        D9300002                 r1 = DivRemainder;
0x000758        E450002F                 r3 = Null + 1;
0x000759        2003004F                 Null = r1 - r2;
0x00075A        00220055                 if POS r0 = r0 + r3;
0x00075B        D52A0009                 M[r8 + 9] = r0;
0x00075C        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x00075D        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x00075E        D12A0002                 r0 = M[r8 + 2];
0x00075F        E1F00D1E                 call $cbuffer.calc_amount_data;
0x000760        D13A0009                 r1 = M[r8 + 9];
0x000761        D15A000C                 r3 = M[r8 + 12];
0x000762        9B5C0000                 r3 = r3 * r10 (int);
0x000763        973C0000                 r1 = r1 * r10 (frac);
0x000764        E433002F                 r1 = r1 + 1;
0x000765        03350000                 r1 = r1 + r3;
0x000766        D14A0010                 r2 = M[r8 + 16];
0x000767        E444002F                 r2 = r2 + 1;
0x000768        D16A000F                 r4 = M[r8 + 15];
0x000769        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x00076A        0002000F                 Null = r0 + Null;
0x00076B        00400001                 if NE r2 = Null + Null;
0x00076C        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x00076D        2002003F                 Null = r0 - r1;
0x00076E        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x00076F        0026000F                 r0 = r4 + Null;
0x000770        E450002F                 r3 = Null + 1;
0x000771        21040003                 Null = r2 - 3;
0x000772        88660055                 if POS r4 = r4 XOR r3;
0x000773        FD00007F 0130FFFF        r1 = Null + 8388607;
0x000775        D15A000E                 r3 = M[r8 + 14];
0x000776        2006002F                 Null = r4 - r0;
0x000777        00530001                 if NE r3 = r1 + Null;
0x000778        D54A0010                 M[r8 + 16] = r2;
0x000779        D55A000E                 M[r8 + 14] = r3;
0x00077A        D56A000F                 M[r8 + 15] = r4;
0x00077B        8406005F                 Null = r4 OR r3;
0x00077C        DD000D5B                 if EQ jump $pop_rLink_and_rts;
0x00077D        D12A0002                 r0 = M[r8 + 2];
0x00077E        E1F00D23                 call $cbuffer.get_read_address_and_size;
0x00077F        5000002F                 I0 = Null + r0;
0x000780        50C0003F                 L0 = Null + r1;
0x000781        51D0000C                 L1 = Null + 12;
0x000782        D12A0005                 r0 = M[r8 + 5];
0x000783        5010002F                 I1 = Null + r0;
0x000784        D12A0000                 r0 = M[r8 + 0];
0x000785        D038002F                 r1 = M[r6 + r0];
0x000786        5040003F                 I4 = Null + r1;
0x000787        D039002F                 r1 = M[r7 + r0];
0x000788        50E0003F                 L4 = Null + r1;
0x000789        FD0000FF 51506929        I5 = Null + -38615;
0x00078B        51F00001                 L5 = Null + 1;
0x00078C        D12A0001                 r0 = M[r8 + 1];
0x00078D        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_cahnnel;
0x00078E        D038002F                 r1 = M[r6 + r0];
0x00078F        5050003F                 I5 = Null + r1;
0x000790        D039002F                 r1 = M[r7 + r0];
0x000791        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_cahnnel>
0x000792        D16A0008                 r4 = M[r8 + 8];
0x000793        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000795        D14A000E                 r2 = M[r8 + 14];
0x000796        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x000797        D10A000F                 Null = M[r8 + 15];
0x000798        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x000799        FD00007F 0160FFFF        r4 = Null + 8388607;
0x00079B        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x00079C        23560000                 r3 = r3 - r4;
0x00079D        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00079F        FD000002 0170AAAB        r5 = Null + 174763;
0x0007A1        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x0007A2        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x0007A3        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x0007A4        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x0007A5        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x0007A6        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x0007A7        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x0007A8        D54A000E                 M[r8 + 14] = r2;
0x0007A9        DDF00D2E                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x0007AA        01400000                 r2 = Null + 0;
0x0007AB        D54A000E                 M[r8 + 14] = r2;
0x0007AC        DDF00D2B                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x0007AD        D12A0011                 r0 = M[r8 + 17];
0x0007AE        21020000                 Null = r0 - 0;
0x0007AF        DD000013                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x0007B0        21020002                 Null = r0 - 2;
0x0007B1        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x0007B2        009C000F                 r7 = r10 + Null;
0x0007B3        DDF00061                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x0007B4        D16A0007                 r4 = M[r8 + 7];
0x0007B5        D17A0008                 r5 = M[r8 + 8];
0x0007B6        009C000F                 r7 = r10 + Null;
0x0007B7        23442000                 r2 = r2 - r2, r0 = M[I0,0];
0x0007B8        FD00007F 0180FFFF        r6 = Null + 8388607;
0x0007BA        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x0007BB        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x0007BC        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x0007BD        AF28C100                 rMAC = rMAC + r0 * r6 (SS), M[I0,1] = r2;
0x0007BE        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x0007BF        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x0007C0        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x0007C1        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x0007C2        D17A0003                 r5 = M[r8 + 3];
0x0007C3        5137007E                 I3 = r5 + 126;
0x0007C4        D17A0009                 r5 = M[r8 + 9];
0x0007C5        D16A000D                 r4 = M[r8 + 13];
0x0007C6        51B00001                 M3 = Null + 1;
0x0007C7        01800015                 r6 = Null + 21;
0x0007C8        70A0008F                 M2 = Null - r6;
0x0007C9        5080008F                 M0 = Null + r6;
0x0007CA        01900000                 r7 = Null + 0;
0x0007CB        D10A000C                 Null = M[r8 + 12];
0x0007CC        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x0007CD        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x0007CE        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0007CF        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0007D0        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x0007D1        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x0007D2        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x0007D3        03670000                 r4 = r4 + r5;
0x0007D4        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x0007D5        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0007D6        FD000080 21660000        r4 = r4 - -8388608;
0x0007D8        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0007D9        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x0007DA        CC16008F                 rMAC = r4 * r6 (SS);
0x0007DB        8D510018                 r3 = rMAC LSHIFT 24;
0x0007DC        8D55007F                 r3 = r3 LSHIFT -1;
0x0007DD        8D410000                 r2 = rMAC LSHIFT 0;
0x0007DE        5863004F                 I6 = I3 + r2;
0x0007DF        6524FFEA                 r0 = -22 - r2;
0x0007E0        7092004F                 M1 = r0 - r2;
0x0007E1        5871000F                 I7 = I1 + Null;
0x0007E2        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0007E3        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007E4        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007E5        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007E6        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007E7        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0007E8        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007E9        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007EA        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007EB        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007EC        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007ED        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007EE        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0007EF        79990002                 M1 = M1 - 2;
0x0007F0        474B0000                 r2 = r2 + M3;
0x0007F1        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0007F2        71980001                 M1 = r6 - 1;
0x0007F3        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0007F4        5863004F                 I6 = I3 + r2;
0x0007F5        0041000F                 r2 = rMAC + Null;
0x0007F6        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0007F7        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007F8        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007F9        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007FA        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0007FB        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0007FC        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007FD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007FE        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0007FF        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000800        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000801        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000802        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000803        5817000F                 I1 = I7 + Null;
0x000804        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x000805        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x000807        D14A0007                 r2 = M[r8 + 7];
0x000808        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x000809        D12A0008                 r0 = M[r8 + 8];
0x00080A        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x00080B        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x00080D        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x00080E        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x000810        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x000811        4420001F                 r0 = Null + I1;
0x000812        D52A0005                 M[r8 + 5] = r0;
0x000813        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x000814        D12A0002                 r0 = M[r8 + 2];
0x000815        E1F00C68                 call $cbuffer.calc_amount_data;
0x000816        2039002F                 r1 = r7 - r0;
0x000817        20990035                 if POS r7 = r7 - r1;
0x000818        D12A0002                 r0 = M[r8 + 2];
0x000819        E1F00C88                 call $cbuffer.get_read_address_and_size;
0x00081A        5000002F                 I0 = Null + r0;
0x00081B        50C0003F                 L0 = Null + r1;
0x00081C        5080009F                 M0 = Null + r7;
0x00081D        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00081E        4430000F                 r1 = Null + I0;
0x00081F        D12A0002                 r0 = M[r8 + 2];
0x000820        E1F00C95                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x000821        51E00000                 L4 = Null + 0;
0x000822        51D00000                 L1 = Null + 0;
0x000823        51C00000                 L0 = Null + 0;
0x000824        51F00000                 L5 = Null + 0;
0x000825        DDF00CB2                 jump $pop_rLink_and_rts;

 <$volume_and_limit.apply_volume>
0x000826        F3D00000                 push rLink;
0x000827        00A9000F                 r8 = r7 + Null;
0x000828        D12A0003                 r0 = M[r8 + 3];
0x000829        D3200000                 r0 = M[r0 + Null];
0x00082A        01100200                 rMAC = Null + 512;
0x00082B        D9020000                 Div = rMAC / r0;
0x00082C        D1CA0002                 r10 = M[r8 + 2];
0x00082D        DDD00CAA                 if LE jump $pop_rLink_and_rts;
0x00082E        018A000A                 r6 = r8 + 10;
0x00082F        FD00007F 0140FFFF        r2 = Null + 8388607;
0x000831        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x000832        D1280000                 r0 = M[r6 + 0];
0x000833        D1520002                 r3 = M[r0 + 2];
0x000834        2004005F                 Null = r2 - r3;
0x000835        00450005                 if POS r2 = r3 + Null;
0x000836        D1280001                 r0 = M[r6 + 1];
0x000837        D1520002                 r3 = M[r0 + 2];
0x000838        2004005F                 Null = r2 - r3;
0x000839        00450005                 if POS r2 = r3 + Null;
0x00083A        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x00083B        00C4000F                 r10 = r2 + Null;
0x00083C        DDD00C9B                 if LE jump $pop_rLink_and_rts;
0x00083D        0920FE93                 r0 = Null + M[0xfffe93];
0x00083E        F3200000                 push r0;
0x00083F        D9200001                 r0 = DivResult;
0x000840        CC12004F                 rMAC = r0 * r2 (SS);
0x000841        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x000842        F3C00000                 push r10;
0x000843        F3100000                 push rMAC;
0x000844        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x000845        9D710017                 r5 = rMAC * 23 (int) (sat);
0x000846        E420002F                 r0 = Null + 1;
0x000847        1920FE93                 M[0xfffe93] = r0 + Null;
0x000848        D1CA0002                 r10 = M[r8 + 2];
0x000849        018A000A                 r6 = r8 + 10;
0x00084A        51A00034                 M2 = Null + 52;
0x00084B        D15A0004                 r3 = M[r8 + 4];
0x00084C        01600000                 r4 = Null + 0;
0x00084D        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x00084E        D1280002                 r0 = M[r6 + 2];
0x00084F        CC15002F                 rMAC = r3 * r0 (SS);
0x000850        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x000851        D1380003                 r1 = M[r6 + 3];
0x000852        2021003F                 r0 = rMAC - r1;
0x000853        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x000854        20200024                 if NEG r0 = Null - r0;
0x000855        9443007F                 r2 = r1 * r5 (frac);
0x000856        474A0000                 r2 = r2 + M2;
0x000857        E442005F                 r2 = MIN r0;
0x000858        2001003F                 Null = rMAC - r1;
0x000859        20400044                 if NEG r2 = Null - r2;
0x00085A        03340000                 r1 = r1 + r2;
0x00085B        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x00085C        E463006F                 r4 = MAX r1;
0x00085D        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x00085E        1900FE93                 M[0xfffe93] = Null + Null;
0x00085F        01500000                 r3 = Null + 0;
0x000860        D12A0000                 r0 = M[r8 + 0];
0x000861        D13A0001                 r1 = M[r8 + 1];
0x000862        8002003F                 Null = r0 AND r1;
0x000863        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000864        FD000008 21060000        Null = r4 - 524288;
0x000866        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000867        018A000A                 r6 = r8 + 10;
0x000868        D12A0002                 r0 = M[r8 + 2];
0x000869        5090002F                 M1 = Null + r0;
0x00086A        01600000                 r4 = Null + 0;
0x00086B        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x00086C        D1380003                 r1 = M[r6 + 3];
0x00086D        FD000008 21030000        Null = r1 - 524288;
0x00086F        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x000870        F1C8FFFE                 r10 = M[SP + -0x2];
0x000871        D1280000                 r0 = M[r6 + 0];
0x000872        E1F00C3E                 call $frmbuffer.get_buffer;
0x000873        5000002F                 I0 = Null + r0;
0x000874        50C0003F                 L0 = Null + r1;
0x000875        E4CC003F                 r10 = r10 - 1;
0x000876        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x000877        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x000878        E444004F                 r2 = ABS r2;
0x000879        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x00087A        E444004F                 r2 = ABS r2;
0x00087B        E474006F                 r5 = MAX r2;
0x00087C        D1380003                 r1 = M[r6 + 3];
0x00087D        97730000                 r5 = r5 * r1 (frac);
0x00087E        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x00087F        01880005                 r6 = r6 + 5;
0x000880        79990001                 M1 = M1 - 1;
0x000881        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x000882        51C00000                 L0 = Null + 0;
0x000883        01500000                 r3 = Null + 0;
0x000884        D14A0006                 r2 = M[r8 + 6];
0x000885        2006004F                 Null = r4 - r2;
0x000886        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000887        0016000F                 rMAC = r4 + Null;
0x000888        E1F00AF8                 call $math.log2_table;
0x000889        D15A0005                 r3 = M[r8 + 5];
0x00088A        D13A0007                 r1 = M[r8 + 7];
0x00088B        2025002F                 r0 = r3 - r0;
0x00088C        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x00088D        F128FFFF                 r0 = M[SP + -0x1];
0x00088E        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x000890        E1F00B25                 call $math.pow2_table;
0x000891        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x000893        9432002F                 r1 = r0 * r0 (frac);
0x000894        97330000                 r1 = r1 * r1 (frac);
0x000895        9432003F                 r1 = r0 * r1 (frac);
0x000896        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x000898        D12A0008                 r0 = M[r8 + 8];
0x000899        2075002F                 r5 = r3 - r0;
0x00089A        00460005                 if POS r2 = r4 + Null;
0x00089B        97740000                 r5 = r5 * r2 (frac);
0x00089C        03270000                 r0 = r0 + r5;
0x00089D        00200005                 if POS r0 = Null + Null;
0x00089E        2042005F                 r2 = r0 - r3;
0x00089F        20400044                 if NEG r2 = Null - r2;
0x0008A0        21040054                 Null = r2 - 84;
0x0008A1        00250004                 if NEG r0 = r3 + Null;
0x0008A2        D52A0008                 M[r8 + 8] = r0;
0x0008A3        E1F00B12                 call $math.pow2_table;
0x0008A4        D16A0009                 r4 = M[r8 + 9];
0x0008A5        D52A0009                 M[r8 + 9] = r0;
0x0008A6        018A000A                 r6 = r8 + 10;
0x0008A7        D12A0002                 r0 = M[r8 + 2];
0x0008A8        5090002F                 M1 = Null + r0;
0x0008A9        E420002F                 r0 = Null + 1;
0x0008AA        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x0008AB        D1280000                 r0 = M[r6 + 0];
0x0008AC        E1F00C04                 call $frmbuffer.get_buffer;
0x0008AD        5000002F                 I0 = Null + r0;
0x0008AE        50C0003F                 L0 = Null + r1;
0x0008AF        D1280001                 r0 = M[r6 + 1];
0x0008B0        E1F00C00                 call $frmbuffer.get_buffer;
0x0008B1        5040002F                 I4 = Null + r0;
0x0008B2        50E0003F                 L4 = Null + r1;
0x0008B3        D1380003                 r1 = M[r6 + 3];
0x0008B4        D12A0009                 r0 = M[r8 + 9];
0x0008B5        9443002F                 r2 = r1 * r0 (frac);
0x0008B6        D1380004                 r1 = M[r6 + 4];
0x0008B7        23430000                 r2 = r2 - r1;
0x0008B8        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x0008B9        F1C8FFFE                 r10 = M[SP + -0x2];
0x0008BA        D90C0000                 Div = rMAC / r10;
0x0008BB        E4CC003F                 r10 = r10 - 1;
0x0008BC        01500004                 r3 = Null + 4;
0x0008BD        D9700001                 r5 = DivResult;
0x0008BE        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x0008BF        CC14003F                 rMAC = r2 * r1 (SS);
0x0008C0        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x0008C1        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x0008C2        03370000                 r1 = r1 + r5;
0x0008C3        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x0008C4        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x0008C5        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0008C6        D5380004                 M[r6 + 4] = r1;
0x0008C7        01880005                 r6 = r6 + 5;
0x0008C8        79990001                 M1 = M1 - 1;
0x0008C9        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x0008CA        51C00000                 L0 = Null + 0;
0x0008CB        51E00000                 L4 = Null + 0;
0x0008CC        F3240000                 pop r0;
0x0008CD        F3240000                 pop r0;
0x0008CE        F3240000                 pop r0;
0x0008CF        1920FE93                 M[0xfffe93] = r0 + Null;
0x0008D0        DDF00C07                 jump $pop_rLink_and_rts;

 <$stereo_3d_enhancement.initialize>
0x0008D1        F3D00000                 push rLink;
0x0008D2        D12A0004                 r0 = M[r8 + 4];
0x0008D3        E1F00BCE                 call $cbuffer.get_read_address_and_size;
0x0008D4        5010002F                 I1 = Null + r0;
0x0008D5        50D0003F                 L1 = Null + r1;
0x0008D6        5000002F                 I0 = Null + r0;
0x0008D7        50C0003F                 L0 = Null + r1;
0x0008D8        D12A0005                 r0 = M[r8 + 5];
0x0008D9        E1F00BC8                 call $cbuffer.get_read_address_and_size;
0x0008DA        5040002F                 I4 = Null + r0;
0x0008DB        50E0003F                 L4 = Null + r1;
0x0008DC        5050002F                 I5 = Null + r0;
0x0008DD        50F0003F                 L5 = Null + r1;
0x0008DE        01C008A0                 r10 = Null + 2208;
0x0008DF        0020000F                 r0 = Null + Null;
0x0008E0        E5F00002                 do $M.stereo_3d_enhancement.loop_clear_buffers;
0x0008E1        0300A5A5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r0;

 <$M.stereo_3d_enhancement.loop_clear_buffers>
0x0008E2        D14A0007                 r2 = M[r8 + 7];
0x0008E3        5080004F                 M0 = Null + r2;
0x0008E4        02002030                 Null = Null + Null, r0 = M[I0,M0], r1 = M[I4,M0];
0x0008E5        D12A0004                 r0 = M[r8 + 4];
0x0008E6        4430000F                 r1 = Null + I0;
0x0008E7        E1F00BD2                 call $cbuffer.set_write_address;
0x0008E8        D12A0005                 r0 = M[r8 + 5];
0x0008E9        4430004F                 r1 = Null + I4;
0x0008EA        E1F00BCF                 call $cbuffer.set_write_address;
0x0008EB        51C00000                 L0 = Null + 0;
0x0008EC        51D00000                 L1 = Null + 0;
0x0008ED        51E00000                 L4 = Null + 0;
0x0008EE        51F00000                 L5 = Null + 0;
0x0008EF        DDF00BE8                 jump $pop_rLink_and_rts;
0x0008F0        DC0D000F                 rts;

 <$stereo_3d_enhancement>
0x0008F1        D12A0009                 r0 = M[r8 + 9];
0x0008F2        D13A000A                 r1 = M[r8 + 10];
0x0008F3        009A000F                 r7 = r8 + Null;
0x0008F4        83320000                 r1 = r1 AND r0;
0x0008F5        DD1007FA                 if NE jump $M.audio_proc.stereo_copy.Process.func;
0x0008F6        F3D00000                 push rLink;
0x0008F7        D12A0000                 r0 = M[r8 + 0];
0x0008F8        E1F00BB8                 call $frmbuffer.get_buffer;
0x0008F9        5000002F                 I0 = Null + r0;
0x0008FA        50C0003F                 L0 = Null + r1;
0x0008FB        D12A0001                 r0 = M[r8 + 1];
0x0008FC        E1F00BB4                 call $frmbuffer.get_buffer;
0x0008FD        5040002F                 I4 = Null + r0;
0x0008FE        50E0003F                 L4 = Null + r1;
0x0008FF        00C5000F                 r10 = r3 + Null;
0x000900        D12A0004                 r0 = M[r8 + 4];
0x000901        E1F00BA5                 call $cbuffer.get_write_address_and_size;
0x000902        5010002F                 I1 = Null + r0;
0x000903        50D0003F                 L1 = Null + r1;
0x000904        D12A0005                 r0 = M[r8 + 5];
0x000905        E1F00BA1                 call $cbuffer.get_write_address_and_size;
0x000906        5050002F                 I5 = Null + r0;
0x000907        50F0003F                 L5 = Null + r1;
0x000908        007C000F                 r5 = r10 + Null;
0x000909        E5F00003                 do $M.stereo_3d_enhancement.loop_copy;
0x00090A        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x00090B        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.stereo_3d_enhancement.loop_copy>
0x00090C        D12A0004                 r0 = M[r8 + 4];
0x00090D        4430001F                 r1 = Null + I1;
0x00090E        E1F00BAB                 call $cbuffer.set_write_address;
0x00090F        D12A0005                 r0 = M[r8 + 5];
0x000910        4430005F                 r1 = Null + I5;
0x000911        E1F00BA8                 call $cbuffer.set_write_address;
0x000912        51C00000                 L0 = Null + 0;
0x000913        51E00000                 L4 = Null + 0;
0x000914        51D00000                 L1 = Null + 0;
0x000915        51F00000                 L5 = Null + 0;
0x000916        E4C7003F                 r10 = r5 - 1;
0x000917        D12A0007                 r0 = M[r8 + 7];
0x000918        E430002F                 r1 = Null + 1;
0x000919        7083002F                 M0 = r1 - r0;
0x00091A        5090002F                 M1 = Null + r0;
0x00091B        50A0003F                 M2 = Null + r1;
0x00091C        51B0FFF9                 M3 = Null + -7;
0x00091D        D12A0006                 r0 = M[r8 + 6];
0x00091E        5020002F                 I2 = Null + r0;
0x00091F        D12A0004                 r0 = M[r8 + 4];
0x000920        E1F00B81                 call $cbuffer.get_read_address_and_size;
0x000921        5010002F                 I1 = Null + r0;
0x000922        50D0003F                 L1 = Null + r1;
0x000923        D12A0005                 r0 = M[r8 + 5];
0x000924        E1F00B7D                 call $cbuffer.get_read_address_and_size;
0x000925        5050002F                 I5 = Null + r0;
0x000926        50F0003F                 L5 = Null + r1;
0x000927        D12A0002                 r0 = M[r8 + 2];
0x000928        0057000F                 r3 = r5 + Null;
0x000929        E1F00BAC                 call $frmbuffer.set_frame_size;
0x00092A        E1F00B86                 call $frmbuffer.get_buffer;
0x00092B        5000002F                 I0 = Null + r0;
0x00092C        50C0003F                 L0 = Null + r1;
0x00092D        D12A0003                 r0 = M[r8 + 3];
0x00092E        0057000F                 r3 = r5 + Null;
0x00092F        E1F00BA6                 call $frmbuffer.set_frame_size;
0x000930        E1F00B80                 call $frmbuffer.get_buffer;
0x000931        50407A2F                 I4 = Null + r0, r5 = M[I2,M2];
0x000932        50E0553F                 L4 = Null + r1, r3 = M[I1,M1];
0x000933        FD000080 01800000        r6 = Null + -8388608;
0x000935        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000936        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x000937        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x000938        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x000939        AC127A7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M2];
0x00093A        0062001F                 r4 = r0 + rMAC;
0x00093B        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x00093C        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x00093D        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x00093E        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x00093F        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x000940        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x000941        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];
0x000942        E5F0000D                 do $M.stereo_3d_enhancement.loop_dsp;
0x000943        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x000944        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x000945        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x000946        AC12E27F                 rMAC = rMAC + r0 * r5 (SS), M[I0,M2] = r4;
0x000947        00627A1F                 r4 = r0 + rMAC, r5 = M[I2,M2];
0x000948        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x000949        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x00094A        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x00094B        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x00094C        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x00094D        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x00094E        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];

 <$M.stereo_3d_enhancement.loop_dsp>
0x00094F        50E0E20F                 L4 = Null + Null, M[I0,M2] = r4;
0x000950        7FCC3700                 L0 = L0 - L0, r1 = M[I1,-1];
0x000951        D12A0005                 r0 = M[r8 + 5];
0x000952        4430005F                 r1 = Null + I5;
0x000953        E1F00B62                 call $cbuffer.set_read_address;
0x000954        D12A0004                 r0 = M[r8 + 4];
0x000955        4430001F                 r1 = Null + I1;
0x000956        E1F00B5F                 call $cbuffer.set_read_address;
0x000957        51F00000                 L5 = Null + 0;
0x000958        51D00000                 L1 = Null + 0;
0x000959        DDF00B7E                 jump $pop_rLink_and_rts;

 <$latency.calc_encoded_latency>
0x00095A        F3D00000                 push rLink;
0x00095B        D1290001                 r0 = M[r7 + 1];
0x00095C        DD000B7B                 if EQ jump $pop_rLink_and_rts;
0x00095D        D1290001                 r0 = M[r7 + 1];
0x00095E        E1F00B07                 call $cbuffer.calc_amount_space;
0x00095F        21020002                 Null = r0 - 2;
0x000960        DD50000D                 if POS jump $M.latency_measure.calc_encoded_latency.buffer_full_check_done;
0x000961        E1F00B2C                 call $block_interrupts;
0x000962        D1290001                 r0 = M[r7 + 1];
0x000963        E1F00B43                 call $cbuffer.get_write_address_and_size;
0x000964        50F0003F                 L5 = Null + r1;
0x000965        5050002F                 I5 = Null + r0;
0x000966        5180FFFC                 M0 = Null + -4;
0x000967        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x000968        4430005F                 r1 = Null + I5;
0x000969        D1290001                 r0 = M[r7 + 1];
0x00096A        E1F00B4F                 call $cbuffer.set_write_address;
0x00096B        51F00000                 L5 = Null + 0;
0x00096C        E1F00B19                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.buffer_full_check_done>
0x00096D        D1290003                 r0 = M[r7 + 3];
0x00096E        D1490008                 r2 = M[r7 + 8];
0x00096F        D1320002                 r1 = M[r0 + 2];
0x000970        2043004F                 r2 = r1 - r2;
0x000971        DD000B66                 if EQ jump $pop_rLink_and_rts;
0x000972        D1290002                 r0 = M[r7 + 2];
0x000973        D1520001                 r3 = M[r0 + 1];
0x000974        D1290007                 r0 = M[r7 + 7];
0x000975        2002005F                 Null = r0 - r3;
0x000976        DD000B61                 if EQ jump $pop_rLink_and_rts;
0x000977        D1290001                 r0 = M[r7 + 1];
0x000978        E1F00B05                 call $cbuffer.calc_amount_data;
0x000979        91C2007F                 r10 = r0 ASHIFT -1;
0x00097A        DD000049                 if EQ jump $M.latency_measure.calc_encoded_latency.end;
0x00097B        212C0003                 r0 = r10 - 3;
0x00097C        20CC0025                 if POS r10 = r10 - r0;
0x00097D        D1290001                 r0 = M[r7 + 1];
0x00097E        E1F00B23                 call $cbuffer.get_read_address_and_size;
0x00097F        5050002F                 I5 = Null + r0;
0x000980        50F0003F                 L5 = Null + r1;
0x000981        D1290002                 r0 = M[r7 + 2];
0x000982        D1220001                 r0 = M[r0 + 1];
0x000983        D1390007                 r1 = M[r7 + 7];
0x000984        E5F00006                 do $M.latency_measure.calc_encoded_latency.search_loop;
0x000985        03000045                 Null = Null + Null, r2 = M[I5,1];
0x000986        03000065                 Null = Null + Null, r4 = M[I5,1];
0x000987        E1F00043                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x000988        0005000F                 Null = r3 + Null;
0x000989        DD100003                 if NE jump $M.latency_measure.calc_encoded_latency.entry_found;

 <$M.latency_measure.calc_encoded_latency.search_loop>
0x00098A        51F00000                 L5 = Null + 0;
0x00098B        DDF00038                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.entry_found>
0x00098C        4430005F                 r1 = Null + I5;
0x00098D        D1290001                 r0 = M[r7 + 1];
0x00098E        E1F00B27                 call $cbuffer.set_read_address;
0x00098F        51F00000                 L5 = Null + 0;
0x000990        E1F00AFD                 call $block_interrupts;
0x000991        F3600000                 push r4;
0x000992        F3900000                 push r7;
0x000993        D1990000                 r7 = M[r7 + 0];
0x000994        E1F004EC                 call $latency.calc_pcm_latency;
0x000995        F3940000                 pop r7;
0x000996        F3640000                 pop r4;
0x000997        0950FE71                 r3 = Null + M[0xfffe71];
0x000998        2065006F                 r4 = r3 - r4;
0x000999        20600064                 if NEG r4 = Null - r4;
0x00099A        03680000                 r4 = r4 + r6;
0x00099B        DD400027                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x00099C        D1290003                 r0 = M[r7 + 3];
0x00099D        E1F00B09                 call $cbuffer.get_write_address_and_size;
0x00099E        D1490008                 r2 = M[r7 + 8];
0x00099F        23240000                 r0 = r0 - r2;
0x0009A0        00220034                 if NEG r0 = r0 + r1;
0x0009A1        D1390004                 r1 = M[r7 + 4];
0x0009A2        D3300000                 r1 = M[r1 + Null];
0x0009A3        D1490005                 r2 = M[r7 + 5];
0x0009A4        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0009A5        D3400000                 r2 = M[r2 + Null];
0x0009A6        DD000002                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0009A7        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_encoded_latency.no_warp>
0x0009A8        9453004F                 r3 = r1 * r2 (frac);
0x0009A9        9445004F                 r2 = r3 * r2 (frac);
0x0009AA        0053005F                 r3 = r1 + r3;
0x0009AB        0035004F                 r1 = r3 + r2;
0x0009AC        CC12003F                 rMAC = r0 * r1 (SS);
0x0009AD        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0009AE        8D310000                 r1 = rMAC LSHIFT 0;
0x0009AF        23630000                 r4 = r4 - r1;
0x0009B0        DD400012                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0009B1        D1C90006                 r10 = M[r7 + 6];
0x0009B2        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.min_done;
0x0009B3        212C0004                 r0 = r10 - 4;
0x0009B4        20CC0025                 if POS r10 = r10 - r0;
0x0009B5        E4CC003F                 r10 = r10 - 1;
0x0009B6        5159000A                 I5 = r7 + 10;
0x0009B7        03000035                 Null = Null + Null, r1 = M[I5,1];
0x0009B8        E5F00005                 do $M.latency_measure.calc_encoded_latency.loop_min;
0x0009B9        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0009BA        2002003F                 Null = r0 - r1;
0x0009BB        00320004                 if NEG r1 = r0 + Null;
0x0009BC        030000A6                 Null = Null + Null, M[I5,2] = r0;

 <$M.latency_measure.calc_encoded_latency.loop_min>
0x0009BD        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x0009BE        030000E4                 Null = Null + Null, M[I5,0] = r4;
0x0009BF        2006003F                 Null = r4 - r1;
0x0009C0        00630005                 if POS r4 = r1 + Null;

 <$M.latency_measure.calc_encoded_latency.min_done>
0x0009C1        D5690009                 M[r7 + 9] = r4;

 <$M.latency_measure.calc_encoded_latency.end_calc>
0x0009C2        E1F00AC3                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.end>
0x0009C3        D1290002                 r0 = M[r7 + 2];
0x0009C4        D1220001                 r0 = M[r0 + 1];
0x0009C5        D5290007                 M[r7 + 7] = r0;
0x0009C6        D1290003                 r0 = M[r7 + 3];
0x0009C7        D1220002                 r0 = M[r0 + 2];
0x0009C8        D5290008                 M[r7 + 8] = r0;
0x0009C9        DDF00B0E                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_encoded_latency.is_address_within_range>
0x0009CA        E450002F                 r3 = Null + 1;
0x0009CB        2002003F                 Null = r0 - r1;
0x0009CC        DD400006                 if NEG jump $M.latency_measure.calc_encoded_latency.neg_part;

 <$M.latency_measure.calc_encoded_latency.pos_part>
0x0009CD        2004002F                 Null = r2 - r0;
0x0009CE        00500005                 if POS r3 = Null + Null;
0x0009CF        2004003F                 Null = r2 - r1;
0x0009D0        00500004                 if NEG r3 = Null + Null;
0x0009D1        DC0D000F                 rts;

 <$M.latency_measure.calc_encoded_latency.neg_part>
0x0009D2        2004003F                 Null = r2 - r1;
0x0009D3        DC0D0005                 if POS rts;
0x0009D4        2004002F                 Null = r2 - r0;
0x0009D5        00500005                 if POS r3 = Null + Null;
0x0009D6        DC0D000F                 rts;

 <$cmpd100.analysis>
0x0009D7        D12A0000                 r0 = M[r8 + 0];
0x0009D8        D13A0001                 r1 = M[r8 + 1];
0x0009D9        83320000                 r1 = r1 AND r0;
0x0009DA        DC0D0001                 if NE rts;
0x0009DB        F3D00000                 push rLink;
0x0009DC        D12A0002                 r0 = M[r8 + 2];
0x0009DD        E1F00AD3                 call $frmbuffer.get_buffer;
0x0009DE        5000002F                 I0 = Null + r0;
0x0009DF        50C0003F                 L0 = Null + r1;
0x0009E0        D12A0003                 r0 = M[r8 + 3];
0x0009E1        E1F00ACF                 call $frmbuffer.get_buffer;
0x0009E2        5040002F                 I4 = Null + r0;
0x0009E3        50E0003F                 L4 = Null + r1;
0x0009E4        00C5000F                 r10 = r3 + Null;
0x0009E5        01400000                 r2 = Null + 0;
0x0009E6        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x0009E7        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0009E8        2002000F                 Null = r0 - Null;
0x0009E9        20200024                 if NEG r0 = Null - r0;
0x0009EA        2003000F                 Null = r1 - Null;
0x0009EB        20300034                 if NEG r1 = Null - r1;
0x0009EC        2002003F                 Null = r0 - r1;
0x0009ED        00230004                 if NEG r0 = r1 + Null;
0x0009EE        2004002F                 Null = r2 - r0;
0x0009EF        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x0009F0        1940392C                 M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x0009F1        0014000F                 rMAC = r2 + Null;
0x0009F2        E1F0098E                 call $math.log2_table;
0x0009F3        FD0000FF 1920692C        M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x0009F5        D14A001D                 r2 = M[r8 + 29];
0x0009F6        0042004F                 r2 = r0 + r2;
0x0009F7        51C00000                 L0 = Null + 0;
0x0009F8        51E00000                 L4 = Null + 0;
0x0009F9        513A0008                 I3 = r8 + 8;
0x0009FA        514A0012                 I4 = r8 + 18;
0x0009FB        51900001                 M1 = Null + 1;
0x0009FC        D15A000D                 r3 = M[r8 + 13];
0x0009FD        D16A000C                 r4 = M[r8 + 12];
0x0009FE        D17A000B                 r5 = M[r8 + 11];
0x0009FF        D18A000A                 r6 = M[r8 + 10];
0x000A00        2024005F                 r0 = r2 - r3;
0x000A01        DD40000E                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x000A02        D13A0011                 r1 = M[r8 + 17];
0x000A03        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000A04        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000A05        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000A06        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000A07        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000A08        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000A09        510A001B                 I0 = r8 + 27;
0x000A0A        FD0000FF 1910692D        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000A0C        01300005                 r1 = Null + 5;
0x000A0D        1930392D                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x000A0E        DDF0002F                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x000A0F        2024006F                 r0 = r2 - r4;
0x000A10        DD40000D                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x000A11        D13A0010                 r1 = M[r8 + 16];
0x000A12        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000A13        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000A14        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000A15        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000A16        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000A17        510A0019                 I0 = r8 + 25;
0x000A18        FD0000FF 1910692D        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000A1A        01300004                 r1 = Null + 4;
0x000A1B        1930392D                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x000A1C        DDF00021                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x000A1D        2024007F                 r0 = r2 - r5;
0x000A1E        DD40000C                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x000A1F        D13A000F                 r1 = M[r8 + 15];
0x000A20        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000A21        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000A22        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000A23        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000A24        510A0017                 I0 = r8 + 23;
0x000A25        FD0000FF 1910692D        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000A27        01300003                 r1 = Null + 3;
0x000A28        1930392D                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x000A29        DDF00014                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x000A2A        2024008F                 r0 = r2 - r6;
0x000A2B        DD40000C                 if NEG jump $M.cmpd100.analysis.gain_one;
0x000A2C        D13A000E                 r1 = M[r8 + 14];
0x000A2D        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x000A2E        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x000A2F        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000A30        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000A31        510A0015                 I0 = r8 + 21;
0x000A32        FD0000FF 1910692D        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000A34        01300002                 r1 = Null + 2;
0x000A35        1930392D                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x000A36        DDF00007                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x000A37        510A0017                 I0 = r8 + 23;
0x000A38        01100000                 rMAC = Null + 0;
0x000A39        FD0000FF 1910692D        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000A3B        E430002F                 r1 = Null + 1;
0x000A3C        1930392D                 M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x000A3D        D16A0007                 r4 = M[r8 + 7];
0x000A3E        5040006F                 I4 = Null + r4;
0x000A3F        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x000A40        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x000A41        00540004                 if NEG r3 = r2 + Null;
0x000A42        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x000A43        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x000A44        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x000A45        DDF00A92                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x000A46        F3D00000                 push rLink;
0x000A47        51900001                 M1 = Null + 1;
0x000A48        510A0001                 I0 = r8 + 1;
0x000A49        01807FFF                 r6 = Null + 32767;
0x000A4A        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x000A4B        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A4C        51102EC3                 I1 = Null + 11971;
0x000A4D        FD0000FF 19A0691F        M[$cbops.struc_ptr] = r8 + Null;
0x000A4F        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x000A50        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000A51        E1F00A2C                 call $cbuffer.calc_amount_data;
0x000A52        2002008F                 Null = r0 - r6;
0x000A53        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x000A54        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A55        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x000A56        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000A57        E1F00A0E                 call $cbuffer.calc_amount_space;
0x000A58        2002009F                 Null = r0 - r7;
0x000A59        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x000A5A        0078000F                 r5 = r6 + Null;
0x000A5B        2007009F                 Null = r5 - r7;
0x000A5C        00790005                 if POS r5 = r7 + Null;
0x000A5D        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x000A5E        D12A0001                 r0 = M[r8 + 1];
0x000A5F        01AA0002                 r8 = r8 + 2;
0x000A60        D1220001                 r0 = M[r0 + 1];
0x000A61        E0020001                 if NE call r0;
0x000A62        D1AAFFFE                 r8 = M[r8 + -2];
0x000A63        E40A002F                 Null = r8 + 1;
0x000A64        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x000A65        21270200                 r0 = r5 - 512;
0x000A66        20770025                 if POS r5 = r5 - r0;
0x000A67        FD0000FF 09A0691F        r8 = Null + M[$cbops.struc_ptr];
0x000A69        19703920                 M[$cbops.amount_to_use] = r5 + Null;
0x000A6A        DD000042                 if EQ jump $M.cbops.copy.done;
0x000A6B        FD0000FF 19706920        M[$cbops.amount_written] = r5 + Null;
0x000A6D        510A0001                 I0 = r8 + 1;
0x000A6E        FD0000FF 51405EB9        I4 = Null + -41287;
0x000A70        51102EB3                 I1 = Null + 11955;
0x000A71        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000A72        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A73        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x000A74        E1F00A2D                 call $cbuffer.get_read_address_and_size;
0x000A75        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A76        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x000A77        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A78        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x000A79        E1F00A2D                 call $cbuffer.get_write_address_and_size;
0x000A7A        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A7B        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x000A7C        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x000A7D        FD0000FF 01805EB9        r6 = Null + -41287;
0x000A7F        01902EB3                 r7 = Null + 11955;
0x000A80        09C03920                 r10 = Null + M[$cbops.amount_to_use];
0x000A81        D12A0001                 r0 = M[r8 + 1];
0x000A82        01AA0002                 r8 = r8 + 2;
0x000A83        D1220002                 r0 = M[r0 + 2];
0x000A84        E0020001                 if NE call r0;
0x000A85        D1AAFFFE                 r8 = M[r8 + -2];
0x000A86        E40A002F                 Null = r8 + 1;
0x000A87        DD10FFF6                 if NE jump $M.cbops.copy.operator_functions_loop;
0x000A88        FD0000FF 09A0691F        r8 = Null + M[$cbops.struc_ptr];
0x000A8A        511A0001                 I1 = r8 + 1;
0x000A8B        FD0000FF 51205EB9        I2 = Null + -41287;
0x000A8D        51302EB3                 I3 = Null + 11955;
0x000A8E        51900001                 M1 = Null + 1;
0x000A8F        09203920                 r0 = Null + M[$cbops.amount_to_use];
0x000A90        50A0002F                 M2 = Null + r0;
0x000A91        FD0000FF 09206920        r0 = Null + M[$cbops.amount_written];
0x000A93        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x000A94        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x000A95        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000A96        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000A97        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x000A98        5000003F                 I0 = Null + r1;
0x000A99        50C0004F                 L0 = Null + r2;
0x000A9A        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x000A9B        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x000A9C        E1F00A19                 call $cbuffer.set_read_address;
0x000A9D        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000A9E        79770001                 I7 = I7 - 1;
0x000A9F        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x000AA0        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x000AA1        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000AA2        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000AA3        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x000AA4        5000003F                 I0 = Null + r1;
0x000AA5        50C0004F                 L0 = Null + r2;
0x000AA6        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x000AA7        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x000AA8        E1F00A11                 call $cbuffer.set_write_address;
0x000AA9        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000AAA        79770001                 I7 = I7 - 1;
0x000AAB        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x000AAC        DDF00A2B                 jump $pop_rLink_and_rts;

 <$spdif_sra.calc_rate>
0x000AAD        F3D00000                 push rLink;
0x000AAE        01A02F17                 r8 = Null + 12055;
0x000AAF        09000F5D                 Null = Null + M[0xf5d];
0x000AB0        DD000006                 if EQ jump $M.spdif_sra_calc_rate.calc_sra_rate;
0x000AB1        D50A000A                 M[r8 + 10] = Null;
0x000AB2        D13A0005                 r1 = M[r8 + 5];
0x000AB3        9133007F                 r1 = r1 ASHIFT -1;
0x000AB4        D53A0005                 M[r8 + 5] = r1;
0x000AB5        DDF00052                 jump $M.spdif_sra_calc_rate.rate_calc_done;

 <$M.spdif_sra_calc_rate.calc_sra_rate>
0x000AB6        D16A0002                 r4 = M[r8 + 2];
0x000AB7        D13A0007                 r1 = M[r8 + 7];
0x000AB8        D3600000                 r4 = M[r4 + Null];
0x000AB9        FD000026 CD166666        rMAC = r4 * 0.29999995231628418 (SS);
0x000ABB        FD000059 AD13999A        rMAC = rMAC + r1 * 0.70000004768371582 (SS);
0x000ABD        D51A0007                 M[r8 + 7] = rMAC;
0x000ABE        012000B5                 r0 = Null + 181;
0x000ABF        E1F009A6                 call $cbuffer.calc_amount_space;
0x000AC0        09400F5F                 r2 = Null + M[0xf5f];
0x000AC1        CC12004F                 rMAC = r0 * r2 (SS);
0x000AC2        91E10006                 rMAC = rMAC ASHIFT 6 (MI);
0x000AC3        0021000F                 r0 = rMAC + Null;
0x000AC4        D13A0008                 r1 = M[r8 + 8];
0x000AC5        FD00007E 0140B852        r2 = Null + 8304722;
0x000AC7        FD000001 015047AE        r3 = Null + 83886;
0x000AC9        2003002F                 Null = r1 - r0;
0x000ACA        00540005                 if POS r3 = r2 + Null;
0x000ACB        FD00007F 6545FFFF        r2 = 8388607 - r3;
0x000ACD        CC12005F                 rMAC = r0 * r3 (SS);
0x000ACE        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000ACF        D51A0008                 M[r8 + 8] = rMAC;
0x000AD0        D12A0007                 r0 = M[r8 + 7];
0x000AD1        03210000                 r0 = r0 + rMAC;
0x000AD2        21622710                 r4 = r0 - 10000;
0x000AD3        D15A0001                 r3 = M[r8 + 1];
0x000AD4        995503E8                 r3 = r3 * 1000 (int);
0x000AD5        2005006F                 Null = r3 - r4;
0x000AD6        00560005                 if POS r3 = r4 + Null;
0x000AD7        D11A0007                 rMAC = M[r8 + 7];
0x000AD8        2025001F                 r0 = r3 - rMAC;
0x000AD9        E442004F                 r2 = ABS r0;
0x000ADA        9D2200C8                 r0 = r0 * 200 (int) (sat);
0x000ADB        9122007F                 r0 = r0 ASHIFT -1;
0x000ADC        D10A0009                 Null = M[r8 + 9];
0x000ADD        DD000009                 if EQ jump $M.spdif_sra_calc_rate.not_converged;

 <$M.spdif_sra_calc_rate.converged>
0x000ADE        210401C2                 Null = r2 - 450;
0x000ADF        DD500007                 if POS jump $M.spdif_sra_calc_rate.not_converged;
0x000AE0        99220005                 r0 = r0 * 5 (int);
0x000AE1        9482002F                 r6 = r0 * r0 (frac);
0x000AE2        97280000                 r0 = r0 * r6 (frac);
0x000AE3        E440002F                 r2 = Null + 1;
0x000AE4        D54A0009                 M[r8 + 9] = r2;
0x000AE5        DDF00007                 jump $M.spdif_sra_calc_rate.converge_check_done;

 <$M.spdif_sra_calc_rate.not_converged>
0x000AE6        21040096                 Null = r2 - 150;
0x000AE7        DD40FFF7                 if NEG jump $M.spdif_sra_calc_rate.converged;
0x000AE8        91820018                 r6 = r0 ASHIFT 24;
0x000AE9        97220000                 r0 = r0 * r0 (frac);
0x000AEA        97280000                 r0 = r0 * r6 (frac);
0x000AEB        D50A0009                 M[r8 + 9] = Null;

 <$M.spdif_sra_calc_rate.converge_check_done>
0x000AEC        FD000001 213247AE        r1 = r0 - 83886;
0x000AEE        20220035                 if POS r0 = r0 - r1;
0x000AEF        FD000001 013247AE        r1 = r0 + 83886;
0x000AF1        20220034                 if NEG r0 = r0 - r1;
0x000AF2        D13A0005                 r1 = M[r8 + 5];
0x000AF3        2062003F                 r4 = r0 - r1;
0x000AF4        95660400                 r4 = r4 * 0.03125 (frac);
0x000AF5        03360000                 r1 = r1 + r4;
0x000AF6        0006000F                 Null = r4 + Null;
0x000AF7        00320000                 if EQ r1 = r0 + Null;
0x000AF8        D53A0005                 M[r8 + 5] = r1;
0x000AF9        09200F6F                 r0 = Null + M[0xf6f];
0x000AFA        09100F5E                 rMAC = Null + M[0xf5e];
0x000AFB        23120000                 rMAC = rMAC - r0;
0x000AFC        09200F5F                 r0 = Null + M[0xf5f];
0x000AFD        CC11002F                 rMAC = rMAC * r0 (SS);
0x000AFE        9111000F                 rMAC = rMAC ASHIFT 15 (56bit);
0x000AFF        FD000043 95211BDF        r0 = rMAC * 0.52428805828094482 (frac);
0x000B01        D16A000A                 r4 = M[r8 + 10];
0x000B02        FD000000 CD12A3D7        rMAC = r0 * 0.004999995231628418 (SS);
0x000B04        FD00007F AD165C29        rMAC = rMAC + r4 * 0.99500000476837158 (SS);
0x000B06        D51A000A                 M[r8 + 10] = rMAC;

 <$M.spdif_sra_calc_rate.rate_calc_done>
0x000B07        D16A000A                 r4 = M[r8 + 10];
0x000B08        95660800                 r4 = r4 * 0.0625 (frac);
0x000B09        D15A0005                 r3 = M[r8 + 5];
0x000B0A        03650000                 r4 = r4 + r3;
0x000B0B        D12A0000                 r0 = M[r8 + 0];
0x000B0C        2056002F                 r3 = r4 - r0;
0x000B0D        20660055                 if POS r4 = r4 - r3;
0x000B0E        0056002F                 r3 = r4 + r0;
0x000B0F        20660054                 if NEG r4 = r4 - r3;
0x000B10        D56A0004                 M[r8 + 4] = r4;
0x000B11        DDF009C6                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x000B12        F3D00000                 push rLink;
0x000B13        D12A0000                 r0 = M[r8 + 0];
0x000B14        D038002F                 r1 = M[r6 + r0];
0x000B15        5000003F                 I0 = Null + r1;
0x000B16        D039002F                 r1 = M[r7 + r0];
0x000B17        50C0003F                 L0 = Null + r1;
0x000B18        D12A0001                 r0 = M[r8 + 1];
0x000B19        D038002F                 r1 = M[r6 + r0];
0x000B1A        5040003F                 I4 = Null + r1;
0x000B1B        D039002F                 r1 = M[r7 + r0];
0x000B1C        50E0003F                 L4 = Null + r1;
0x000B1D        FD0000FF 09406925        r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x000B1F        D15A0003                 r3 = M[r8 + 3];
0x000B20        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000B22        FD0000FF D12568D0        r0 = M[r3 + -38704];
0x000B24        D19A0002                 r7 = M[r8 + 2];
0x000B25        6589FFE8                 r6 = -24 - r7;
0x000B26        9087008F                 r6 = r5 ASHIFT r6;
0x000B27        51900011                 M1 = Null + 17;
0x000B28        01603555                 r4 = Null + 13653;
0x000B29        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x000B2A        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000B2C        9065009F                 r4 = r3 ASHIFT r7;
0x000B2D        E4CC003F                 r10 = r10 - 1;
0x000B2E        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B2F        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B30        E416005F                 rMAC = MIN r4;
0x000B31        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x000B32        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x000B33        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B34        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x000B35        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x000B36        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x000B37        FD0000FF 515033A8        I5 = Null + -52312;
0x000B39        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B3A        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B3B        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x000B3C        9B460000                 r2 = r2 * r4 (int);
0x000B3D        47490000                 r2 = r2 + M1;
0x000B3E        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B3F        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000B40        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x000B41        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x000B42        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x000B43        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x000B44        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000B45        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x000B46        51D00005                 L1 = Null + 5;
0x000B47        D12A0004                 r0 = M[r8 + 4];
0x000B48        5010002F                 I1 = Null + r0;
0x000B49        FD0000FF 515033A2        I5 = Null + -52318;
0x000B4B        5180FFFA                 M0 = Null + -6;
0x000B4C        FD0000FF 198033A8        M[0xff33a8] = r6 + Null;
0x000B4E        95886000                 r6 = r6 * 0.75 (frac);
0x000B4F        E450003F                 r3 = Null - 1;
0x000B50        2020009F                 r0 = Null - r7;
0x000B51        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x000B52        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x000B53        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x000B54        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x000B55        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B56        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B57        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B58        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x000B59        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x000B5A        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x000B5B        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x000B5C        47490000                 r2 = r2 + M1;
0x000B5D        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x000B5E        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x000B5F        8031005F                 r1 = rMAC AND r3;
0x000B60        90E3009F                 rMAC = r1 ASHIFT r7;
0x000B61        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x000B62        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x000B63        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x000B64        4420001F                 r0 = Null + I1;
0x000B65        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000B66        51C00000                 L0 = Null + 0;
0x000B67        51E00000                 L4 = Null + 0;
0x000B68        FD0000FF 19406925        M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000B6A        DDF0096D                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x000B6B        F3D00000                 push rLink;
0x000B6C        5F380000                 I3 = I3 + M0;
0x000B6D        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000B6E        F3E20000                 push FP;
0x000B6F        F3A60000                 pop B0;
0x000B70        F107000A                 FP = FP + 10;
0x000B71        F3E20000                 push FP;
0x000B72        F3C60000                 pop B4;
0x000B73        F007003F                 FP = FP + r1;
0x000B74        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000B75        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000B76        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000B77        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000B78        5060003F                 I6 = Null + r1;
0x000B79        F3210000                 push I2;
0x000B7A        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x000B7B        9946000A                 r2 = r4 * 10 (int);
0x000B7C        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000B7D        5FB60000                 M3 = M3 + I6;
0x000B7E        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000B7F        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000B80        5040002F                 I4 = Null + r0;
0x000B81        51C0000A                 L0 = Null + 10;
0x000B82        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000B83        2055005A                 if GE r3 = r3 - r3;
0x000B84        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000B85        004400B4                 if NEG r2 = r2 + r9;
0x000B86        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000B87        4422008C                 if GT r0 = r0 + M0;
0x000B88        0003000F                 Null = r1 + Null;
0x000B89        00230001                 if NE r0 = r1 + Null;
0x000B8A        23C20000                 r10 = r10 - r0;
0x000B8B        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x000B8C        9434006F                 r1 = r2 * r4 (frac);
0x000B8D        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x000B8E        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000B8F        E007000F                 call r5;
0x000B90        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000B91        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x000B92        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000B93        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B94        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B95        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B96        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B97        7C7B007F                 I7 = M3 - I7;
0x000B98        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B99        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B9A        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B9B        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B9C        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B9D        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000B9E        903100AF                 r1 = rMAC ASHIFT r8;
0x000B9F        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000BA0        79330003                 I3 = I3 - 3;
0x000BA1        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000BA2        2055005A                 if GE r3 = r3 - r3;
0x000BA3        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000BA4        004400B4                 if NEG r2 = r2 + r9;
0x000BA5        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000BA6        4422008C                 if GT r0 = r0 + M0;
0x000BA7        23C20000                 r10 = r10 - r0;
0x000BA8        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x000BA9        006200CF                 r4 = r0 + r10;
0x000BAA        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x000BAB        0026000F                 r0 = r4 + Null;
0x000BAC        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x000BAD        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000BAE        E007000F                 call r5;
0x000BAF        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000BB0        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x000BB1        5832000F                 I3 = I2 + Null;
0x000BB2        F3250000                 pop I2;
0x000BB3        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x000BB4        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000BB5        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000BB6        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x000BB7        DDF00920                 jump $pop_rLink_and_rts;

 <$adjust_initial_latency>
0x000BB8        F3D00000                 push rLink;
0x000BB9        FD0000FF 098068F5        r6 = Null + M[$init_latency_state];
0x000BBB        FD0000FF D1285F93        r0 = M[r6 + -41069];
0x000BBD        DC02000F                 jump r0;

 <$M.adjust_initial_latency.il_idle>
0x000BBE        01800000                 r6 = Null + 0;
0x000BBF        01A02F45                 r8 = Null + 12101;
0x000BC0        01902F88                 r7 = Null + 12168;
0x000BC1        090038F3                 Null = Null + M[$first_audio_received];
0x000BC2        DD000037                 if EQ jump $M.adjust_initial_latency.init_latency_done;

 <$M.adjust_initial_latency.il_wait>
0x000BC3        E480002F                 r6 = Null + 1;
0x000BC4        01A02F45                 r8 = Null + 12101;
0x000BC5        01902F88                 r7 = Null + 12168;
0x000BC6        012000B5                 r0 = Null + 181;
0x000BC7        E1F0089E                 call $cbuffer.calc_amount_space;
0x000BC8        21020200                 Null = r0 - 512;
0x000BC9        DD400011                 if NEG jump $M.adjust_initial_latency.il_play;
0x000BCA        FD0000FF 092068F3        r0 = Null + M[$first_audio_time];
0x000BCC        0930FE71                 r1 = Null + M[0xfffe71];
0x000BCD        23320000                 r1 = r1 - r0;
0x000BCE        20300034                 if NEG r1 = Null - r1;
0x000BCF        093338F4                 r1 = r1 + M[$first_audio_init_latency_offset];
0x000BD0        213305DC                 r1 = r1 - 1500;
0x000BD1        09402EEB                 r2 = Null + M[0x2eeb];
0x000BD2        E434006F                 r1 = MAX r2;
0x000BD3        FD000000 953320C5        r1 = r1 * 0.0010000467300415039 (frac);
0x000BD5        09202F18                 r0 = Null + M[0x2f18];
0x000BD6        23230000                 r0 = r0 - r1;
0x000BD7        FD0000FF 192068F6        M[$time_left_to_play] = r0 + Null;
0x000BD9        DD500020                 if POS jump $M.adjust_initial_latency.init_latency_done;

 <$M.adjust_initial_latency.il_play>
0x000BDA        01800002                 r6 = Null + 2;
0x000BDB        01A00FF9                 r8 = Null + 4089;
0x000BDC        01902F7E                 r7 = Null + 12158;
0x000BDD        190038F6                 M[$no_audio_counter] = Null + Null;
0x000BDE        09000F5D                 Null = Null + M[0xf5d];
0x000BDF        DD00001A                 if EQ jump $M.adjust_initial_latency.init_latency_done;
0x000BE0        190038F3                 M[$first_audio_received] = Null + Null;

 <$M.adjust_initial_latency.il_pause>
0x000BE1        01800003                 r6 = Null + 3;
0x000BE2        01A00FF9                 r8 = Null + 4089;
0x000BE3        01902F7E                 r7 = Null + 12158;
0x000BE4        09000F5D                 Null = Null + M[0xf5d];
0x000BE5        DD00FFF5                 if EQ jump $M.adjust_initial_latency.il_play;
0x000BE6        FD0000FF 012068BB        r0 = Null + -38725;
0x000BE8        E1F00895                 call $cbuffer.calc_amount_data;
0x000BE9        093038F6                 r1 = Null + M[$no_audio_counter];
0x000BEA        E433002F                 r1 = r1 + 1;
0x000BEB        21020002                 Null = r0 - 2;
0x000BEC        00300005                 if POS r1 = Null + Null;
0x000BED        193038F6                 M[$no_audio_counter] = r1 + Null;
0x000BEE        21030002                 Null = r1 - 2;
0x000BEF        DD40000A                 if NEG jump $M.adjust_initial_latency.init_latency_done;
0x000BF0        FD0000FF 01205FFB        r0 = Null + -40965;
0x000BF2        E1F00719                 call $cbuffer.empty_buffer;
0x000BF3        FD0000FF 012068A0        r0 = Null + -38752;
0x000BF5        E1F00716                 call $cbuffer.empty_buffer;
0x000BF6        01200075                 r0 = Null + 117;
0x000BF7        E1F00714                 call $cbuffer.empty_buffer;
0x000BF8        DDF0FFC6                 jump $M.adjust_initial_latency.il_idle;

 <$M.adjust_initial_latency.init_latency_done>
0x000BF9        19A038F1                 M[$stereo_copy_struc_ptr] = r8 + Null;
0x000BFA        FD0000FF 199068F0        M[$mono_copy_struc_ptr] = r7 + Null;
0x000BFC        FD0000FF 198068F5        M[$init_latency_state] = r6 + Null;
0x000BFE        DDF008D9                 jump $pop_rLink_and_rts;

 <$message.received_service_routine>
0x000BFF        F3D00000                 push rLink;
0x000C00        51800000                 M0 = Null + 0;
0x000C01        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000C02        8132FFF0                 r1 = r0 AND 0xfff0;
0x000C03        8903FFF0                 Null = r1 XOR 0xfff0;
0x000C04        DD100020                 if NE jump $M.message.received_service_routine.non_long_message;
0x000C05        81020001                 Null = r0 AND 0x1;
0x000C06        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000C07        1900391C                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x000C08        0930391C                 r1 = Null + M[$message.long_message_size];
0x000C09        21030052                 Null = r1 - 82;
0x000C0A        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x000C0B        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000C0C        0940E006                 r2 = Null + M[0xffe006];
0x000C0D        FD0000FF D5434F4A        M[r1 + -45238] = r2;
0x000C0F        0940E007                 r2 = Null + M[0xffe007];
0x000C10        FD0000FF D5434F4B        M[r1 + -45237] = r2;
0x000C12        0940E008                 r2 = Null + M[0xffe008];
0x000C13        FD0000FF D5434F4C        M[r1 + -45236] = r2;
0x000C15        0940E009                 r2 = Null + M[0xffe009];
0x000C16        FD0000FF D5434F4D        M[r1 + -45235] = r2;
0x000C18        01330004                 r1 = r1 + 4;
0x000C19        1930391C                 M[$message.long_message_size] = r1 + Null;
0x000C1A        81020002                 Null = r0 AND 0x2;
0x000C1B        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x000C1C        0970E001                 r5 = Null + M[0xffe001];
0x000C1D        E477002F                 r5 = r5 + 1;
0x000C1E        1970E001                 M[0xffe001] = r5 + Null;
0x000C1F        DDF008B8                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x000C20        FD0000FF 09204F4A        r0 = Null + M[$message.long_message_data];
0x000C22        8122FFFF                 r0 = r0 AND 0xffff;
0x000C23        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000C24        01C00032                 r10 = Null + 50;
0x000C25        0930391A                 r1 = Null + M[$message.last_addr];
0x000C26        E5F00009                 do $M.message.received_service_routine.loop;
0x000C27        E403002F                 Null = r1 + 1;
0x000C28        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000C29        D1430003                 r2 = M[r1 + 3];
0x000C2A        8052004F                 r3 = r0 AND r2;
0x000C2B        D1430001                 r2 = M[r1 + 1];
0x000C2C        2005004F                 Null = r3 - r2;
0x000C2D        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x000C2E        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000C2F        E1F013BD                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000C30        0970E001                 r5 = Null + M[0xffe001];
0x000C31        E477002F                 r5 = r5 + 1;
0x000C32        1970E001                 M[0xffe001] = r5 + Null;
0x000C33        DDF008A4                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000C34        D1D30002                 rLink = M[r1 + 2];
0x000C35        47080000                 Null = Null + M0;
0x000C36        DD000008                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000C37        0032000F                 r1 = r0 + Null;
0x000C38        FD0000FF 09404F4B        r2 = Null + M[0xff4f4b];
0x000C3A        FD0000FF 01504F4C        r3 = Null + -45236;
0x000C3C        0120FFFE                 r0 = Null + -2;
0x000C3D        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x000C3E        0930E006                 r1 = Null + M[0xffe006];
0x000C3F        0940E007                 r2 = Null + M[0xffe007];
0x000C40        0950E008                 r3 = Null + M[0xffe008];
0x000C41        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000C42        0970E001                 r5 = Null + M[0xffe001];
0x000C43        E477002F                 r5 = r5 + 1;
0x000C44        1970E001                 M[0xffe001] = r5 + Null;
0x000C45        E00D000F                 call rLink;
0x000C46        DDF00891                 jump $pop_rLink_and_rts;

 <$audio_out_copy_handler>
0x000C47        F3D00000                 push rLink;
0x000C48        1900392B                 M[$frame_sync.sync_flag] = Null + Null;
0x000C49        FD000080 0120000D        r0 = Null + -8388595;
0x000C4B        E440002F                 r2 = Null + 1;
0x000C4C        E1F0084F                 call $cbuffer.is_it_enabled;
0x000C4D        00400000                 if EQ r2 = Null + Null;
0x000C4E        FD0000FF 194068F1        M[$mono_stereo_mode] = r2 + Null;
0x000C50        FD000000 0150BB80        r3 = Null + 48000;
0x000C52        FD0000FF 09205E1F        r0 = Null + M[0xff5e1f];
0x000C54        00250000                 if EQ r0 = r3 + Null;
0x000C55        093038E8                 r1 = Null + M[$current_dac_sampling_rate];
0x000C56        192038E8                 M[$current_dac_sampling_rate] = r0 + Null;
0x000C57        23320000                 r1 = r1 - r0;
0x000C58        09200F5E                 r0 = Null + M[0xf5e];
0x000C59        00250000                 if EQ r0 = r3 + Null;
0x000C5A        FD0000FF 094068E8        r2 = Null + M[$current_codec_sampling_rate];
0x000C5C        FD0000FF 192068E8        M[$current_codec_sampling_rate] = r0 + Null;
0x000C5E        23420000                 r2 = r2 - r0;
0x000C5F        87430000                 r2 = r2 OR r1;
0x000C60        DD000005                 if EQ jump $M.audio_out_copy_handler.resmaple_config_done;
0x000C61        092038E8                 r0 = Null + M[$current_dac_sampling_rate];
0x000C62        E1F00863                 call $latency.calc_inv_fs;
0x000C63        192038F0                 M[$inv_dac_fs] = r0 + Null;
0x000C64        E1F0266A                 call $config_resampler;

 <$M.audio_out_copy_handler.resmaple_config_done>
0x000C65        E1F026C7                 call $config_rate_matching;
0x000C66        01A02E64                 r8 = Null + 11876;
0x000C67        FD0000FF 01905EA0        r7 = Null + -41312;
0x000C69        FD0000FF 090068F1        Null = Null + M[$mono_stereo_mode];
0x000C6B        00A90000                 if EQ r8 = r7 + Null;
0x000C6C        FD0000FF 01905F76        r7 = Null + -41098;
0x000C6E        090038ED                 Null = Null + M[$hw_rate_match_disable];
0x000C6F        00A90000                 if EQ r8 = r7 + Null;
0x000C70        FD0000FF 19A068EF        M[$latency_calc_current_warp] = r8 + Null;
0x000C72        01A02F4C                 r8 = Null + 12108;
0x000C73        01902F8D                 r7 = Null + 12173;
0x000C74        FD0000FF 090068F1        Null = Null + M[$mono_stereo_mode];
0x000C76        00A90000                 if EQ r8 = r7 + Null;
0x000C77        E1F0FDCF                 call $cbops.copy;
0x000C78        E1F0FF40                 call $adjust_initial_latency;
0x000C79        09A038F1                 r8 = Null + M[$stereo_copy_struc_ptr];
0x000C7A        FD0000FF 099068F0        r7 = Null + M[$mono_copy_struc_ptr];
0x000C7C        FD0000FF 090068F1        Null = Null + M[$mono_stereo_mode];
0x000C7E        00A90000                 if EQ r8 = r7 + Null;
0x000C7F        E1F00EA6                 call $cbops.dac_av_copy;
0x000C80        FD0000FF 01305F8B        r1 = Null + -41077;
0x000C82        014005DC                 r2 = Null + 1500;
0x000C83        01500C47                 r3 = Null + 3143;
0x000C84        E1F00846                 call $timer.schedule_event_in_period;
0x000C85        DDF00852                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x000C86        F3D00000                 push rLink;
0x000C87        F3E20000                 push FP;
0x000C88        51800001                 M0 = Null + 1;
0x000C89        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x000C8B        500000AF                 I0 = Null + r8;
0x000C8C        F2A02000                 push r8, r0 = M[I0,M0];
0x000C8D        D038002F                 r1 = M[r6 + r0];
0x000C8E        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x000C8F        D039002F                 r1 = M[r7 + r0];
0x000C90        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x000C91        D038006F                 r1 = M[r6 + r4];
0x000C92        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x000C93        D039006F                 r1 = M[r7 + r4];
0x000C94        50F0003F                 L5 = Null + r1;
0x000C95        09303929                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000C96        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x000C97        19C03929                 M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x000C98        0005000F                 Null = r3 + Null;
0x000C99        DD00002A                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x000C9A        016A0010                 r4 = r8 + 16;
0x000C9B        F3600000                 push r4;
0x000C9C        F3E60000                 pop FP;
0x000C9D        512A000B                 I2 = r8 + 11;
0x000C9E        51350005                 I3 = r3 + 5;
0x000C9F        D1950004                 r7 = M[r3 + 4];
0x000CA0        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x000CA1        D12A0005                 r0 = M[r8 + 5];
0x000CA2        F1000084                 pushm <r0, r5>;
0x000CA3        F1018020                 pushm <I5, L5>;
0x000CA4        5050002F                 I5 = Null + r0;
0x000CA5        50F0000F                 L5 = Null + Null;
0x000CA6        0070000F                 r5 = Null + Null;
0x000CA7        512A0007                 I2 = r8 + 7;
0x000CA8        E009000F                 call r7;
0x000CA9        50D0000F                 L1 = Null + Null;
0x000CAA        00C9000F                 r10 = r7 + Null;
0x000CAB        0040000F                 r2 = Null + Null;
0x000CAC        F1058020                 popm <I5, L5>;
0x000CAD        F1040084                 popm <r0, r5>;
0x000CAE        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x000CAF        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000CB0        03000000                 Null = Null + Null;
0x000CB1        E002000F                 call r0;
0x000CB2        FD0000FF 19906920        M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x000CB4        F3A40000                 pop r8;
0x000CB5        50D0000F                 L1 = Null + Null;
0x000CB6        50F0000F                 L5 = Null + Null;
0x000CB7        F3000000                 push Null;
0x000CB8        F1AAFFFF                 B0 = M[SP + -0x1];
0x000CB9        F1BAFFFF                 B1 = M[SP + -0x1];
0x000CBA        F1CAFFFF                 B4 = M[SP + -0x1];
0x000CBB        F3D60000                 pop B5;
0x000CBC        09303929                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000CBD        D12AFFFE                 r0 = M[r8 + -2];
0x000CBE        E402002F                 Null = r0 + 1;
0x000CBF        00930000                 if EQ r7 = r1 + Null;
0x000CC0        19903920                 M[$cbops.amount_to_use] = r7 + Null;
0x000CC1        F3E60000                 pop FP;
0x000CC2        DDF00815                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x000CC3        009C000F                 r7 = r10 + Null;
0x000CC4        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x000CC5        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000CC6        93E40000                 rMAC = rMAC ASHIFT r2;
0x000CC7        93E70000                 rMAC = rMAC ASHIFT r5;
0x000CC8        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x000CC9        DDF0FFEB                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x000CCA        F3D00000                 push rLink;
0x000CCB        2103000C                 Null = r1 - 12;
0x000CCC        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x000CCD        D5532E29                 M[r1 + 11817] = r3;
0x000CCE        FD0000FF D5435E26        M[r1 + -41434] = r2;
0x000CD0        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x000CD1        09203917                 r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x000CD2        E0020001                 if NE call r0;
0x000CD3        DDF00804                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000CD4        0023000F                 r0 = r1 + Null;
0x000CD5        D144FFFF                 r2 = M[r2 + -1];
0x000CD6        01300040                 r1 = Null + 64;
0x000CD7        8D440078                 r2 = r2 LSHIFT -8;
0x000CD8        8C43004F                 r2 = r1 LSHIFT r2;
0x000CD9        D5422E11                 M[r0 + 11793] = r2;
0x000CDA        E430002F                 r1 = Null + 1;
0x000CDB        0140000D                 r2 = Null + 13;
0x000CDC        2105F000                 Null = r3 - -4096;
0x000CDD        00340004                 if NEG r1 = r2 + Null;
0x000CDE        F3200000                 push r0;
0x000CDF        F3400000                 push r2;
0x000CE0        01400062                 r2 = Null + 98;
0x000CE1        65020007                 Null = 7 - r0;
0x000CE2        00220044                 if NEG r0 = r0 + r2;
0x000CE3        D532FE7B                 M[r0 + -389] = r1;
0x000CE4        F3440000                 pop r2;
0x000CE5        F3240000                 pop r0;
0x000CE6        0032000F                 r1 = r0 + Null;
0x000CE7        FD0000FF 09206916        r0 = Null + M[$cbuffer.read_port_connect_address];
0x000CE9        E0020001                 if NE call r0;
0x000CEA        DDF007ED                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000CEB        D5532E29                 M[r1 + 11817] = r3;
0x000CEC        FD0000FF D5435E26        M[r1 + -41434] = r2;
0x000CEE        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000CEF        09203916                 r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000CF0        E0020001                 if NE call r0;
0x000CF1        DDF007E6                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000CF2        0023000F                 r0 = r1 + Null;
0x000CF3        D144FFFF                 r2 = M[r2 + -1];
0x000CF4        01300040                 r1 = Null + 64;
0x000CF5        8D440078                 r2 = r2 LSHIFT -8;
0x000CF6        8C43004F                 r2 = r1 LSHIFT r2;
0x000CF7        D5422E11                 M[r0 + 11793] = r2;
0x000CF8        01300009                 r1 = Null + 9;
0x000CF9        01400005                 r2 = Null + 5;
0x000CFA        2105F000                 Null = r3 - -4096;
0x000CFB        00340004                 if NEG r1 = r2 + Null;
0x000CFC        F3200000                 push r0;
0x000CFD        F3400000                 push r2;
0x000CFE        2122000C                 r0 = r0 - 12;
0x000CFF        01400066                 r2 = Null + 102;
0x000D00        65020007                 Null = 7 - r0;
0x000D01        00220044                 if NEG r0 = r0 + r2;
0x000D02        D532FE73                 M[r0 + -397] = r1;
0x000D03        F3440000                 pop r2;
0x000D04        F3240000                 pop r0;
0x000D05        0032000F                 r1 = r0 + Null;
0x000D06        FD0000FF 09206915        r0 = Null + M[$cbuffer.write_port_connect_address];
0x000D08        E0020001                 if NE call r0;
0x000D09        DDF007CE                 jump $pop_rLink_and_rts;

 <$apply_hardware_warp_rate>
0x000D0A        F3D00000                 push rLink;
0x000D0B        0920FE71                 r0 = Null + M[0xfffe71];
0x000D0C        FD0000FF 09305F75        r1 = Null + M[0xff5f75];
0x000D0E        2042003F                 r2 = r0 - r1;
0x000D0F        20400044                 if NEG r2 = Null - r2;
0x000D10        FD0000FF 09505F72        r3 = Null + M[$hw_warp_struct];
0x000D12        2004005F                 Null = r2 - r3;
0x000D13        DD4007C4                 if NEG jump $pop_rLink_and_rts;
0x000D14        03350000                 r1 = r1 + r3;
0x000D15        2043002F                 r2 = r1 - r0;
0x000D16        20400044                 if NEG r2 = Null - r2;
0x000D17        210407D0                 Null = r2 - 2000;
0x000D18        00320005                 if POS r1 = r0 + Null;
0x000D19        FD0000FF 19305F75        M[0xff5f75] = r1 + Null;
0x000D1B        FD0000FF 09605F73        r4 = Null + M[0xff5f73];
0x000D1D        FD0000FF 09705F76        r5 = Null + M[0xff5f76];
0x000D1F        D3600000                 r4 = M[r4 + Null];
0x000D20        090038ED                 Null = Null + M[$hw_rate_match_disable];
0x000D21        00600001                 if NE r4 = Null + Null;
0x000D22        2027006F                 r0 = r5 - r4;
0x000D23        DD0007B4                 if EQ jump $pop_rLink_and_rts;
0x000D24        20200024                 if NEG r0 = Null - r0;
0x000D25        FD0000FF 09305F74        r1 = Null + M[0xff5f74];
0x000D27        FD000004 CD1531BE        rMAC = r3 * 0.032768011093139648 (SS);
0x000D29        91510008                 r3 = rMAC ASHIFT 8;
0x000D2A        9442005F                 r2 = r0 * r3 (frac);
0x000D2B        21023127                 Null = r0 - 12583;
0x000D2C        00430004                 if NEG r2 = r1 + Null;
0x000D2D        99530014                 r3 = r1 * 20 (int);
0x000D2E        2034005F                 r1 = r2 - r3;
0x000D2F        20440035                 if POS r2 = r2 - r1;
0x000D30        2037006F                 r1 = r5 - r4;
0x000D31        2023004F                 r0 = r1 - r2;
0x000D32        20330025                 if POS r1 = r1 - r0;
0x000D33        0023004F                 r0 = r1 + r2;
0x000D34        20330024                 if NEG r1 = r1 - r0;
0x000D35        23730000                 r5 = r5 - r1;
0x000D36        9167007A                 r4 = r5 ASHIFT -6;
0x000D37        91760006                 r5 = r4 ASHIFT 6;
0x000D38        FD0000FF 09205F76        r0 = Null + M[0xff5f76];
0x000D3A        2037002F                 r1 = r5 - r0;
0x000D3B        DD000008                 if EQ jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x000D3C        FD0000FF 19705F76        M[0xff5f76] = r5 + Null;
0x000D3E        2060006F                 r4 = Null - r4;
0x000D3F        FD000000 01408004        r2 = Null + 32772;
0x000D41        01500003                 r3 = Null + 3;
0x000D42        E1F005A5                 call $message.send_short;

 <$M.apply_hardware_warp_rate.end_hw_rate_apply>
0x000D43        DDF00794                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000D44        F3D00000                 push rLink;
0x000D45        5F380000                 I3 = I3 + M0;
0x000D46        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000D47        F3E20000                 push FP;
0x000D48        F3A60000                 pop B0;
0x000D49        F107000A                 FP = FP + 10;
0x000D4A        F3E20000                 push FP;
0x000D4B        F3C60000                 pop B4;
0x000D4C        F007003F                 FP = FP + r1;
0x000D4D        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000D4E        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000D4F        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000D50        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000D51        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000D52        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000D53        9946000A                 r2 = r4 * 10 (int);
0x000D54        F3210000                 push I2;
0x000D55        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000D56        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000D57        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000D58        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000D59        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000D5A        51C0000A                 L0 = Null + 10;
0x000D5B        9845007F                 r2 = r3 * r5 (int);
0x000D5C        004400B4                 if NEG r2 = r2 + r9;
0x000D5D        9434006F                 r1 = r2 * r4 (frac);
0x000D5E        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x000D5F        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000D60        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000D61        5876003F                 I7 = I6 + r1;
0x000D62        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000D63        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D64        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D65        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D66        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000D67        7C7B007F                 I7 = M3 - I7;
0x000D68        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D69        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D6A        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D6B        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D6C        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000D6D        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000D6E        5823000F                 I2 = I3 + Null;
0x000D6F        E002000F                 call r0;
0x000D70        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000D71        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000D72        2005006F                 Null = r3 - r4;
0x000D73        2055005A                 if GE r3 = r3 - r3;
0x000D74        9845007F                 r2 = r3 * r5 (int);
0x000D75        004400B4                 if NEG r2 = r2 + r9;
0x000D76        9434006F                 r1 = r2 * r4 (frac);
0x000D77        2007004F                 Null = r5 - r2;
0x000D78        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000D79        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000D7A        5832000F                 I3 = I2 + Null;
0x000D7B        F3250000                 pop I2;
0x000D7C        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000D7D        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000D7E        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000D7F        50E0000F                 L4 = Null + Null;
0x000D80        DDF00757                 jump $pop_rLink_and_rts;

 <$audio_proc.peq.process>
0x000D81        F3D00000                 push rLink;
0x000D82        D1290000                 r0 = M[r7 + 0];
0x000D83        E1F0072D                 call $frmbuffer.get_buffer;
0x000D84        5040002F                 I4 = Null + r0;
0x000D85        50E0003F                 L4 = Null + r1;
0x000D86        0065000F                 r4 = r3 + Null;
0x000D87        D1290001                 r0 = M[r7 + 1];
0x000D88        E1F0074D                 call $frmbuffer.set_frame_size;
0x000D89        E1F00727                 call $frmbuffer.get_buffer;
0x000D8A        5000002F                 I0 = Null + r0;
0x000D8B        50C0003F                 L0 = Null + r1;
0x000D8C        F3D40000                 pop rLink;

 <$audio_proc.peq.process_op>
0x000D8D        51900001                 M1 = Null + 1;
0x000D8E        51390003                 I3 = r7 + 3;
0x000D8F        5180FFFF                 M0 = Null + -1;
0x000D90        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000D91        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000D92        F3200000                 push r0;
0x000D93        F3D60000                 pop B5;
0x000D94        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000D95        F3200000                 push r0;
0x000D96        F3B60000                 pop B1;
0x000D97        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000D98        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000D99        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000D9A        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x000D9B        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x000D9C        21830002                 r6 = r1 - 2;
0x000D9D        D1490002                 r2 = M[r7 + 2];
0x000D9E        99440005                 r2 = r2 * 5 (int);
0x000D9F        5B240000                 I2 = I2 + r2;
0x000DA0        5F2A0000                 I2 = I2 + M2;
0x000DA1        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.peq.process.peq_block_loop>
0x000DA2        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000DA3        CE272A55                 rMAC = r0 * r5 (SS), r0 = M[I2,M2], r3 = M[I5,M1];
0x000DA4        9021458F                 r0 = rMAC ASHIFT r6, r2 = M[I1,M1];
0x000DA5        E5F00009                 do $M.audio_proc.peq.process.biquad_loop;
0x000DA6        CE544534                 rMAC = r3 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000DA7        AE3445B5                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I1,M1], M[I5,M1] = r1;
0x000DA8        AE2400A5                 rMAC = rMAC + r0 * r2 (SS), M[I5,M1] = r0;
0x000DA9        02004535                 Null = Null + Null, r2 = M[I1,M1], r1 = M[I5,M1];
0x000DAA        BE344534                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000DAB        BE344955                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I2,M1], r3 = M[I5,M1];
0x000DAC        0021000F                 r0 = rMAC + Null;
0x000DAD        92244500                 r0 = r0 ASHIFT r2, r2 = M[I1,M1];

 <$M.audio_proc.peq.process.biquad_loop>
0x000DAE        02000054                 Null = Null + Null, r3 = M[I5,M0];
0x000DAF        020044B5                 Null = Null + Null, r2 = M[I1,M0], M[I5,M1] = r1;
0x000DB0        91520002                 r3 = r0 ASHIFT 2;
0x000DB1        6669D1A5                 r4 = r4 - M1, M[I0,M1] = r3, M[I5,M1] = r0;
0x000DB2        DD10FFF0                 if NE jump $M.audio_proc.peq.process.peq_block_loop;
0x000DB3        50C0000F                 L0 = Null + Null;
0x000DB4        50E0000F                 L4 = Null + Null;
0x000DB5        50D0000F                 L1 = Null + Null;
0x000DB6        50F0000F                 L5 = Null + Null;
0x000DB7        F3000000                 push Null;
0x000DB8        F1BAFFFF                 B1 = M[SP + -0x1];
0x000DB9        F3D60000                 pop B5;
0x000DBA        DC0D000F                 rts;

 <$M.audio_proc.stream_gain.Process.func>
0x000DBB        F3D00000                 push rLink;
0x000DBC        D1290000                 r0 = M[r7 + 0];
0x000DBD        E1F006F3                 call $frmbuffer.get_buffer;
0x000DBE        5000002F                 I0 = Null + r0;
0x000DBF        50C0003F                 L0 = Null + r1;
0x000DC0        00C5000F                 r10 = r3 + Null;
0x000DC1        D1290001                 r0 = M[r7 + 1];
0x000DC2        E1F00713                 call $frmbuffer.set_frame_size;
0x000DC3        E1F006ED                 call $frmbuffer.get_buffer;
0x000DC4        5040002F                 I4 = Null + r0;
0x000DC5        50E0003F                 L4 = Null + r1;
0x000DC6        F3D40000                 pop rLink;
0x000DC7        D1390002                 r1 = M[r7 + 2];
0x000DC8        D1490003                 r2 = M[r7 + 3];
0x000DC9        D3300000                 r1 = M[r1 + Null];
0x000DCA        D3400000                 r2 = M[r2 + Null];
0x000DCB        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000DCC        210A0000                 Null = r8 - 0;
0x000DCD        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000DCE        D15A0002                 r3 = M[r8 + 2];
0x000DCF        D16A0003                 r4 = M[r8 + 3];
0x000DD0        2003005F                 Null = r1 - r3;
0x000DD1        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000DD2        2004006F                 Null = r2 - r4;
0x000DD3        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000DD4        D17A0001                 r5 = M[r8 + 1];
0x000DD5        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000DD6        D18A0000                 r6 = M[r8 + 0];
0x000DD7        03780000                 r5 = r5 + r6;
0x000DD8        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000DDA        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000DDB        CC12003F                 rMAC = r0 * r1 (SS);
0x000DDC        9081004F                 r6 = rMAC ASHIFT r2;
0x000DDD        97870000                 r6 = r6 * r5 (frac);
0x000DDE        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000DE0        CC12005F                 rMAC = r0 * r3 (SS);
0x000DE1        9021006F                 r0 = rMAC ASHIFT r4;
0x000DE2        97290000                 r0 = r0 * r7 (frac);
0x000DE3        03280000                 r0 = r0 + r6;
0x000DE4        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000DE5        D57A0001                 M[r8 + 1] = r5;
0x000DE6        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000DE7        D53A0002                 M[r8 + 2] = r1;
0x000DE8        D54A0003                 M[r8 + 3] = r2;
0x000DE9        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000DEA        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000DEB        CC12003F                 rMAC = r0 * r1 (SS);
0x000DEC        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000DED        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000DEE        50C0000F                 L0 = Null + Null;
0x000DEF        50E0000F                 L4 = Null + Null;
0x000DF0        DC0D000F                 rts;

 <$cmpd100.applygain>
0x000DF1        D12A0000                 r0 = M[r8 + 0];
0x000DF2        D13A0001                 r1 = M[r8 + 1];
0x000DF3        83320000                 r1 = r1 AND r0;
0x000DF4        DC0D0001                 if NE rts;
0x000DF5        F3D00000                 push rLink;
0x000DF6        D12A0002                 r0 = M[r8 + 2];
0x000DF7        E1F006B9                 call $frmbuffer.get_buffer;
0x000DF8        5000002F                 I0 = Null + r0;
0x000DF9        50C0003F                 L0 = Null + r1;
0x000DFA        D12A0003                 r0 = M[r8 + 3];
0x000DFB        E1F006B5                 call $frmbuffer.get_buffer;
0x000DFC        5040002F                 I4 = Null + r0;
0x000DFD        50E0003F                 L4 = Null + r1;
0x000DFE        00C5000F                 r10 = r3 + Null;
0x000DFF        D12A0004                 r0 = M[r8 + 4];
0x000E00        E1F006D5                 call $frmbuffer.set_frame_size;
0x000E01        E1F006AF                 call $frmbuffer.get_buffer;
0x000E02        5010002F                 I1 = Null + r0;
0x000E03        50D0003F                 L1 = Null + r1;
0x000E04        D12A0005                 r0 = M[r8 + 5];
0x000E05        005C000F                 r3 = r10 + Null;
0x000E06        E1F006CF                 call $frmbuffer.set_frame_size;
0x000E07        E1F006A9                 call $frmbuffer.get_buffer;
0x000E08        5050002F                 I5 = Null + r0;
0x000E09        50F0003F                 L5 = Null + r1;
0x000E0A        D14A0006                 r2 = M[r8 + 6];
0x000E0B        D15A0007                 r3 = M[r8 + 7];
0x000E0C        D025000F                 r0 = M[r3 + Null];
0x000E0D        91220004                 r0 = r0 ASHIFT 4;
0x000E0E        FD000003 21220000        r0 = r0 - 196608;
0x000E10        E1F005A5                 call $math.pow2_table;
0x000E11        1920392E                 M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000E12        9462004F                 r4 = r0 * r2 (frac);
0x000E13        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000E14        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000E15        CC12006F                 rMAC = r0 * r4 (SS);
0x000E16        91210007                 r0 = rMAC ASHIFT 7;
0x000E17        9413006F                 rMAC = r1 * r4 (frac);
0x000E18        91310007                 r1 = rMAC ASHIFT 7;
0x000E19        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000E1A        51C00000                 L0 = Null + 0;
0x000E1B        51D00000                 L1 = Null + 0;
0x000E1C        51E00000                 L4 = Null + 0;
0x000E1D        51F00000                 L5 = Null + 0;
0x000E1E        DDF006B9                 jump $pop_rLink_and_rts;

 <$config_spdif_sink_message_handler>
0x000E1F        F3D00000                 push rLink;
0x000E20        8133FFFF                 r1 = r1 AND 0xffff;
0x000E21        01700000                 r5 = Null + 0;
0x000E22        19700F4A                 M[0xf4a] = r5 + Null;
0x000E23        81230060                 r0 = r1 AND 0x60;
0x000E24        8D22007B                 r0 = r0 LSHIFT -5;
0x000E25        FD0000FF 19205E0F        M[0xff5e0f] = r0 + Null;
0x000E27        FD0000FF 192068EA        M[$audio_if_mode] = r0 + Null;
0x000E29        FD000000 0120BB80        r0 = Null + 48000;
0x000E2B        81030080                 Null = r1 AND 0x80;
0x000E2C        00200000                 if EQ r0 = Null + Null;
0x000E2D        FD0000FF 19205E13        M[0xff5e13] = r0 + Null;
0x000E2F        8D230078                 r0 = r1 LSHIFT -8;
0x000E30        192038EA                 M[$spdif_target_latency_setting] = r0 + Null;
0x000E31        81240001                 r0 = r2 AND 0x1;
0x000E32        19200F67                 M[0xf67] = r0 + Null;
0x000E33        8D24007F                 r0 = r2 LSHIFT -1;
0x000E34        8122003F                 r0 = r0 AND 0x3f;
0x000E35        19200F66                 M[0xf66] = r0 + Null;
0x000E36        8D240078                 r0 = r2 LSHIFT -8;
0x000E37        81220001                 r0 = r0 AND 0x1;
0x000E38        FD0000FF 192068ED        M[$rate_match_disable] = r0 + Null;
0x000E3A        01200009                 r0 = Null + 9;
0x000E3B        1920006F                 M[$app_config.io] = r0 + Null;
0x000E3C        51002E92                 I0 = Null + 11922;
0x000E3D        E1F025D1                 call $copy_codec_stats_pointers;
0x000E3E        E420002F                 r0 = Null + 1;
0x000E3F        FD0000FF 19205E25        M[0xff5e25] = r0 + Null;
0x000E41        FD000080 0120000D        r0 = Null + -8388595;
0x000E43        0032000F                 r1 = r0 + Null;
0x000E44        E1F00657                 call $cbuffer.is_it_enabled;
0x000E45        00300000                 if EQ r1 = Null + Null;
0x000E46        FD0000FF 19305E11        M[0xff5e11] = r1 + Null;
0x000E48        E1F00663                 call $spdif_update_config_word;
0x000E49        FD0000FF 01705E0C        r5 = Null + -41460;
0x000E4B        E1F0F631                 call $spdif.init;
0x000E4C        DDF0068B                 jump $pop_rLink_and_rts;

 <$M.mips_profile.mainstart>
0x000E4D        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E4E        D52A0001                 M[r8 + 1] = r0;
0x000E4F        D50A0005                 M[r8 + 5] = Null;
0x000E50        D12A0000                 r0 = M[r8 + 0];
0x000E51        DD000002                 if EQ jump $M.mips_profile.init;
0x000E52        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000E53        0920FE71                 r0 = Null + M[0xfffe71];
0x000E54        D52A0009                 M[r8 + 9] = r0;
0x000E55        E420002F                 r0 = Null + 1;
0x000E56        D52A0000                 M[r8 + 0] = r0;
0x000E57        D50A0002                 M[r8 + 2] = Null;
0x000E58        D50A0004                 M[r8 + 4] = Null;
0x000E59        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x000E5A        D12A0000                 r0 = M[r8 + 0];
0x000E5B        DC0D0000                 if EQ rts;
0x000E5C        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E5D        D13A0001                 r1 = M[r8 + 1];
0x000E5E        23230000                 r0 = r0 - r1;
0x000E5F        D13A0005                 r1 = M[r8 + 5];
0x000E60        23230000                 r0 = r0 - r1;
0x000E61        D13A0002                 r1 = M[r8 + 2];
0x000E62        03230000                 r0 = r0 + r1;
0x000E63        D52A0002                 M[r8 + 2] = r0;
0x000E64        0920FE71                 r0 = Null + M[0xfffe71];
0x000E65        D13A0009                 r1 = M[r8 + 9];
0x000E66        23230000                 r0 = r0 - r1;
0x000E67        FD0000FF 093068FC        r1 = Null + M[$M.mips_profile.evalinterval_us];
0x000E69        2002003F                 Null = r0 - r1;
0x000E6A        DC0D0004                 if NEG rts;
0x000E6B        D12A0002                 r0 = M[r8 + 2];
0x000E6C        D52A0006                 M[r8 + 6] = r0;
0x000E6D        D13A0004                 r1 = M[r8 + 4];
0x000E6E        D53A0007                 M[r8 + 7] = r1;
0x000E6F        03230000                 r0 = r0 + r1;
0x000E70        D52A0008                 M[r8 + 8] = r0;
0x000E71        D50A0000                 M[r8 + 0] = Null;
0x000E72        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000E73        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E74        D52A0003                 M[r8 + 3] = r0;
0x000E75        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x000E76        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E77        D13A0003                 r1 = M[r8 + 3];
0x000E78        23230000                 r0 = r0 - r1;
0x000E79        D13A0004                 r1 = M[r8 + 4];
0x000E7A        0032003F                 r1 = r0 + r1;
0x000E7B        D53A0004                 M[r8 + 4] = r1;
0x000E7C        D13A0005                 r1 = M[r8 + 5];
0x000E7D        0032003F                 r1 = r0 + r1;
0x000E7E        D53A0005                 M[r8 + 5] = r1;
0x000E7F        DC0D000F                 rts;

 <$latency.calc_pcm_latency>
0x000E80        F3D00000                 push rLink;
0x000E81        E1F0060C                 call $block_interrupts;
0x000E82        D1A90000                 r8 = M[r7 + 0];
0x000E83        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000E84        D02A000F                 r0 = M[r8 + Null];
0x000E85        DD000010                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000E86        D802000F                 Null = SIGNDET r0;
0x000E87        DD10000A                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000E88        0900FE33                 Null = Null + M[0xfffe33];
0x000E89        8132001F                 r1 = r0 AND 0x1f;
0x000E8A        2103000C                 Null = r1 - 12;
0x000E8B        DD400006                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000E8C        E1F005D9                 call $cbuffer.calc_amount_space;
0x000E8D        E422002F                 r0 = r0 + 1;
0x000E8E        9144007F                 r2 = r2 ASHIFT -1;
0x000E8F        2024002F                 r0 = r2 - r0;
0x000E90        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000E91        E1F005EC                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000E92        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000E93        01AA0003                 r8 = r8 + 3;
0x000E94        DDF0FFF0                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000E95        D1A90001                 r8 = M[r7 + 1];
0x000E96        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000E97        D02A000F                 r0 = M[r8 + Null];
0x000E98        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000E99        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000E9A        01AA0003                 r8 = r8 + 3;
0x000E9B        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000E9C        E1F005E9                 call $interrupt.unblock;
0x000E9D        DDF0063A                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000E9E        D13A0001                 r1 = M[r8 + 1];
0x000E9F        D3300000                 r1 = M[r1 + Null];
0x000EA0        D14A0002                 r2 = M[r8 + 2];
0x000EA1        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000EA2        D3400000                 r2 = M[r2 + Null];
0x000EA3        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000EA4        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000EA5        9453004F                 r3 = r1 * r2 (frac);
0x000EA6        9445004F                 r2 = r3 * r2 (frac);
0x000EA7        0053005F                 r3 = r1 + r3;
0x000EA8        0035004F                 r1 = r3 + r2;
0x000EA9        CC12003F                 rMAC = r0 * r1 (SS);
0x000EAA        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000EAB        8D310000                 r1 = rMAC LSHIFT 0;
0x000EAC        03830000                 r6 = r6 + r1;
0x000EAD        DC0D000F                 rts;

 <$set_tone_rate_from_vm>
0x000EAE        8133FFFF                 r1 = r1 AND 0xffff;
0x000EAF        01100FA0                 rMAC = Null + 4000;
0x000EB0        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x000EB2        D9030000                 Div = rMAC / r1;
0x000EB3        193038E9                 M[$current_tone_sampling_rate] = r1 + Null;
0x000EB4        01200003                 r0 = Null + 3;
0x000EB5        81040002                 Null = r2 AND 0x2;
0x000EB6        00200001                 if NE r0 = Null + Null;
0x000EB7        01220008                 r0 = r0 + 8;
0x000EB8        FD0000FF 19205F67        M[0xff5f67] = r0 + Null;
0x000EBA        FD0000FF 19204CFF        M[0xff4cff] = r0 + Null;
0x000EBC        D9500001                 r3 = DivResult;
0x000EBD        81240001                 r0 = r2 AND 0x1;
0x000EBE        00550050                 if EQ r3 = r3 + r3;
0x000EBF        FD0000FF 195068E7        M[$tmr_period_tone_copy] = r3 + Null;
0x000EC1        FD0000FF 192068E9        M[$stereo_tone] = r0 + Null;
0x000EC3        DD000007                 if EQ jump $M.set_tone_rate_from_vm.mono_tone;

 <$M.set_tone_rate_from_vm.stereo_tone>
0x000EC4        E420003F                 r0 = Null - 1;
0x000EC5        FD0000FF 09305E5F        r1 = Null + M[0xff5e5f];
0x000EC7        9143007F                 r2 = r1 ASHIFT -1;
0x000EC8        0054000F                 r3 = r2 + Null;
0x000EC9        DDF00006                 jump $M.set_tone_rate_from_vm.set_op;

 <$M.set_tone_rate_from_vm.mono_tone>
0x000ECA        E420002F                 r0 = Null + 1;
0x000ECB        01300000                 r1 = Null + 0;
0x000ECC        FD0000FF 09405E5F        r2 = Null + M[0xff5e5f];
0x000ECE        01500000                 r3 = Null + 0;

 <$M.set_tone_rate_from_vm.set_op>
0x000ECF        FD0000FF 19205E59        M[0xff5e59] = r0 + Null;
0x000ED1        FD0000FF 19305E73        M[0xff5e73] = r1 + Null;
0x000ED3        FD0000FF 19405E87        M[0xff5e87] = r2 + Null;
0x000ED5        19502E73                 M[0x2e73] = r3 + Null;
0x000ED6        092000AF                 r0 = Null + M[0xaf];
0x000ED7        192000AE                 M[0xae] = r0 + Null;
0x000ED8        FD0000FF 092068AB        r0 = Null + M[0xff68ab];
0x000EDA        FD0000FF 192068AA        M[0xff68aa] = r0 + Null;
0x000EDC        E420002F                 r0 = Null + 1;
0x000EDD        192038EB                 M[$aux_input_stream_available] = r0 + Null;
0x000EDE        DC0D000F                 rts;

 <$wall_clock.message_handler>
0x000EDF        F3D00000                 push rLink;
0x000EE0        E455002F                 r3 = r3 + 1;
0x000EE1        01C00007                 r10 = Null + 7;
0x000EE2        0980391F                 r6 = Null + M[$wall_clock.last_addr];
0x000EE3        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000EE4        E408002F                 Null = r6 + 1;
0x000EE5        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000EE6        D1280001                 r0 = M[r6 + 1];
0x000EE7        D135FFFF                 r1 = M[r3 + -1];
0x000EE8        813300FF                 r1 = r1 AND 0xff;
0x000EE9        2002003F                 Null = r0 - r1;
0x000EEA        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x000EEB        D1280002                 r0 = M[r6 + 2];
0x000EEC        2802005F                 Null = r0 - M[r3];
0x000EED        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000EEE        D1280003                 r0 = M[r6 + 3];
0x000EEF        D1350001                 r1 = M[r3 + 1];
0x000EF0        2002003F                 Null = r0 - r1;
0x000EF1        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000EF2        D1280004                 r0 = M[r6 + 4];
0x000EF3        D1350002                 r1 = M[r3 + 2];
0x000EF4        2002003F                 Null = r0 - r1;
0x000EF5        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000EF6        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000EF7        E1F010F5                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000EF8        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000EF9        D1350003                 r1 = M[r3 + 3];
0x000EFA        D1450004                 r2 = M[r3 + 4];
0x000EFB        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000EFC        811100FF                 rMAC = rMAC AND 0xff;
0x000EFD        991104E2                 rMAC = rMAC * 1250 (int);
0x000EFE        8D330010                 r1 = r1 LSHIFT 16;
0x000EFF        8144FFFF                 r2 = r2 AND 0xffff;
0x000F00        03430000                 r2 = r2 + r1;
0x000F01        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000F03        8D410016                 r2 = rMAC LSHIFT 22;
0x000F04        D1650006                 r4 = M[r3 + 6];
0x000F05        D1550005                 r3 = M[r3 + 5];
0x000F06        8D550010                 r3 = r3 LSHIFT 16;
0x000F07        8166FFFF                 r4 = r4 AND 0xffff;
0x000F08        03650000                 r4 = r4 + r3;
0x000F09        23460000                 r2 = r2 - r4;
0x000F0A        D5480005                 M[r6 + 5] = r2;
0x000F0B        D1280006                 r0 = M[r6 + 6];
0x000F0C        E0020001                 if NE call r0;
0x000F0D        DDF005CA                 jump $pop_rLink_and_rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000F0E        8132001F                 r1 = r0 AND 0x1f;
0x000F0F        2133000C                 r1 = r1 - 12;
0x000F10        FD0000FF 194068E5        M[$cbuffer.tmp] = r2 + Null;
0x000F12        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000F14        DD00001E                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000F15        FD0000FF 195068E6        M[0xff68e6] = r3 + Null;
0x000F17        01400066                 r2 = Null + 102;
0x000F18        65030007                 Null = 7 - r1;
0x000F19        00330044                 if NEG r1 = r1 + r2;
0x000F1A        D153FE73                 r3 = M[r1 + -397];
0x000F1B        FD000030 81420000        r2 = r0 AND 0x300000;
0x000F1D        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000F1E        8155FFFB                 r3 = r3 AND 0xfffb;
0x000F1F        8D44006B                 r2 = r2 LSHIFT -21;
0x000F20        8D440002                 r2 = r2 LSHIFT 2;
0x000F21        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000F22        FD000003 81428000        r2 = r0 AND 0x38000;
0x000F24        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000F25        8155FFFC                 r3 = r3 AND 0xfffc;
0x000F26        8D440070                 r2 = r2 LSHIFT -16;
0x000F27        8D440000                 r2 = r2 LSHIFT 0;
0x000F28        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000F29        81426000                 r2 = r0 AND 0x6000;
0x000F2A        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000F2B        8155FFF7                 r3 = r3 AND 0xfff7;
0x000F2C        8D440072                 r2 = r2 LSHIFT -14;
0x000F2D        8D440003                 r2 = r2 LSHIFT 3;
0x000F2E        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000F2F        D553FE73                 M[r1 + -397] = r3;
0x000F30        FD0000FF 095068E6        r3 = Null + M[0xff68e6];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000F32        8132001F                 r1 = r0 AND 0x1f;
0x000F33        2133000C                 r1 = r1 - 12;
0x000F34        01400009                 r2 = Null + 9;
0x000F35        65030007                 Null = 7 - r1;
0x000F36        00330044                 if NEG r1 = r1 + r2;
0x000F37        FD0000FF 094068E5        r2 = Null + M[$cbuffer.tmp];
0x000F39        0123FE23                 r0 = r1 + -477;
0x000F3A        E430002F                 r1 = Null + 1;
0x000F3B        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000F3C        8132001F                 r1 = r0 AND 0x1f;
0x000F3D        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000F3F        DD000023                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x000F40        FD0000FF 194068E5        M[$cbuffer.tmp] = r2 + Null;
0x000F42        FD0000FF 195068E6        M[0xff68e6] = r3 + Null;
0x000F44        01400062                 r2 = Null + 98;
0x000F45        65030007                 Null = 7 - r1;
0x000F46        00330044                 if NEG r1 = r1 + r2;
0x000F47        D153FE7B                 r3 = M[r1 + -389];
0x000F48        FD000030 81420000        r2 = r0 AND 0x300000;
0x000F4A        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000F4B        8155FFFB                 r3 = r3 AND 0xfffb;
0x000F4C        8D44006B                 r2 = r2 LSHIFT -21;
0x000F4D        8D440002                 r2 = r2 LSHIFT 2;
0x000F4E        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000F4F        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000F51        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000F52        8155FFF7                 r3 = r3 AND 0xfff7;
0x000F53        8D44006D                 r2 = r2 LSHIFT -19;
0x000F54        8D440003                 r2 = r2 LSHIFT 3;
0x000F55        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x000F56        FD000003 81428000        r2 = r0 AND 0x38000;
0x000F58        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000F59        8155FFFC                 r3 = r3 AND 0xfffc;
0x000F5A        8D440070                 r2 = r2 LSHIFT -16;
0x000F5B        8D440000                 r2 = r2 LSHIFT 0;
0x000F5C        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000F5D        D553FE7B                 M[r1 + -389] = r3;
0x000F5E        FD0000FF 094068E5        r2 = Null + M[$cbuffer.tmp];
0x000F60        FD0000FF 095068E6        r3 = Null + M[0xff68e6];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000F62        8122001F                 r0 = r0 AND 0x1f;
0x000F63        01300005                 r1 = Null + 5;
0x000F64        65020007                 Null = 7 - r0;
0x000F65        00220034                 if NEG r0 = r0 + r1;
0x000F66        0122FE2B                 r0 = r0 + -469;
0x000F67        E430002F                 r1 = Null + 1;
0x000F68        DC0D000F                 rts;

 <$message.private.try_to_send_message>
0x000F69        F3D00000                 push rLink;
0x000F6A        E1F00523                 call $block_interrupts;
0x000F6B        0920E000                 r0 = Null + M[0xffe000];
0x000F6C        FD0000FF 2922691B        r0 = r0 - M[$message.last_seq_sent];
0x000F6E        8102FFFF                 Null = r0 AND 0xffff;
0x000F6F        DD100019                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x000F70        FD0000FF 0930691A        r1 = Null + M[$message.queue_read_ptr];
0x000F72        D1230761                 r0 = M[r1 + 1889];
0x000F73        1920E002                 M[0xffe002] = r0 + Null;
0x000F74        D1230762                 r0 = M[r1 + 1890];
0x000F75        1920E003                 M[0xffe003] = r0 + Null;
0x000F76        D1230763                 r0 = M[r1 + 1891];
0x000F77        1920E004                 M[0xffe004] = r0 + Null;
0x000F78        D1230764                 r0 = M[r1 + 1892];
0x000F79        1920E005                 M[0xffe005] = r0 + Null;
0x000F7A        FD0000FF 0920691B        r0 = Null + M[$message.last_seq_sent];
0x000F7C        E422002F                 r0 = r0 + 1;
0x000F7D        FD0000FF 1920691B        M[$message.last_seq_sent] = r0 + Null;
0x000F7F        D1230760                 r0 = M[r1 + 1888];
0x000F80        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x000F81        01330005                 r1 = r1 + 5;
0x000F82        2103006E                 Null = r1 - 110;
0x000F83        00300000                 if EQ r1 = Null + Null;
0x000F84        FD0000FF 1930691A        M[$message.queue_read_ptr] = r1 + Null;
0x000F86        2903391B                 Null = r1 - M[$message.queue_write_ptr];
0x000F87        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x000F88        09402FF3                 r2 = Null + M[0x2ff3];
0x000F89        E1F002F1                 call $timer.cancel_event;
0x000F8A        01302FF0                 r1 = Null + 12272;
0x000F8B        014003E8                 r2 = Null + 1000;
0x000F8C        01500F69                 r3 = Null + 3945;
0x000F8D        E1F00540                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x000F8E        E1F004F7                 call $interrupt.unblock;
0x000F8F        DDF00548                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x000F90        59330002                 I3 = I3 + 2;
0x000F91        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x000F92        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000F93        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x000F94        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000F95        70A0006F                 M2 = Null - r4;
0x000F96        99460006                 r2 = r4 * 6 (int);
0x000F97        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000F98        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000F99        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000F9A        5000002F                 I0 = Null + r0;
0x000F9B        51C00006                 L0 = Null + 6;
0x000F9C        F3E20000                 push FP;
0x000F9D        F3A60000                 pop B0;
0x000F9E        F1070006                 FP = FP + 6;
0x000F9F        9845007F                 r2 = r3 * r5 (int);
0x000FA0        004400B4                 if NEG r2 = r2 + r9;
0x000FA1        9434006F                 r1 = r2 * r4 (frac);
0x000FA2        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x000FA3        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000FA4        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x000FA5        5876003F                 I7 = I6 + r1;
0x000FA6        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000FA7        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000FA8        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000FA9        7C7B007F                 I7 = M3 - I7;
0x000FAA        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000FAB        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000FAC        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000FAD        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000FAE        903100AF                 r1 = rMAC ASHIFT r8;
0x000FAF        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000FB0        2005006F                 Null = r3 - r4;
0x000FB1        2055005A                 if GE r3 = r3 - r3;
0x000FB2        9845007F                 r2 = r3 * r5 (int);
0x000FB3        004400B4                 if NEG r2 = r2 + r9;
0x000FB4        9434006F                 r1 = r2 * r4 (frac);
0x000FB5        2007004F                 Null = r5 - r2;
0x000FB6        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000FB7        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000FB8        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000FB9        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000FBA        5F280000                 I2 = I2 + M0;
0x000FBB        DC0D000F                 rts;

 <$message.send_long>
0x000FBC        F3D00000                 push rLink;
0x000FBD        E1F004D0                 call $block_interrupts;
0x000FBE        0140FFFE                 r2 = Null + -2;
0x000FBF        01C60005                 r10 = r4 + 5;
0x000FC0        8DCC007E                 r10 = r10 LSHIFT -2;
0x000FC1        0930391B                 r1 = Null + M[$message.queue_write_ptr];
0x000FC2        8580FFF1                 r6 = Null OR 0xfff1;
0x000FC3        E5F0001C                 do $M.message.send_long.long_message_loop;
0x000FC4        01230005                 r0 = r1 + 5;
0x000FC5        2102006E                 Null = r0 - 110;
0x000FC6        00200000                 if EQ r0 = Null + Null;
0x000FC7        FD0000FF 2902691A        Null = r0 - M[$message.queue_read_ptr];
0x000FC9        DD000018                 if EQ jump $M.message.send_long.all_done;
0x000FCA        E40C003F                 Null = r10 - 1;
0x000FCB        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x000FCC        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x000FCD        D5830760                 M[r1 + 1888] = r6;
0x000FCE        81080001                 Null = r6 AND 0x1;
0x000FCF        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x000FD0        E488003F                 r6 = r6 - 1;
0x000FD1        D5530761                 M[r1 + 1889] = r3;
0x000FD2        D5630762                 M[r1 + 1890] = r4;
0x000FD3        21770002                 r5 = r5 - 2;
0x000FD4        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x000FD5        D047000F                 r2 = M[r5 + Null];
0x000FD6        D5430761                 M[r1 + 1889] = r2;
0x000FD7        D1470001                 r2 = M[r5 + 1];
0x000FD8        D5430762                 M[r1 + 1890] = r2;

 <$M.message.send_long.last_two_words>
0x000FD9        D1470002                 r2 = M[r5 + 2];
0x000FDA        D5430763                 M[r1 + 1891] = r2;
0x000FDB        D1470003                 r2 = M[r5 + 3];
0x000FDC        D5430764                 M[r1 + 1892] = r2;
0x000FDD        01770004                 r5 = r5 + 4;
0x000FDE        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x000FDF        1920391B                 M[$message.queue_write_ptr] = r0 + Null;
0x000FE0        E1F0FF89                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x000FE1        E1F004A4                 call $interrupt.unblock;
0x000FE2        DDF004F5                 jump $pop_rLink_and_rts;

 <$audio_proc.delay.process>
0x000FE3        F3D00000                 push rLink;
0x000FE4        D12A0000                 r0 = M[r8 + 0];
0x000FE5        E1F004CB                 call $frmbuffer.get_buffer;
0x000FE6        5040002F                 I4 = Null + r0;
0x000FE7        50E0003F                 L4 = Null + r1;
0x000FE8        00C5000F                 r10 = r3 + Null;
0x000FE9        D12A0001                 r0 = M[r8 + 1];
0x000FEA        E1F004EB                 call $frmbuffer.set_frame_size;
0x000FEB        E1F004C5                 call $frmbuffer.get_buffer;
0x000FEC        5050002F                 I5 = Null + r0;
0x000FED        50F0003F                 L5 = Null + r1;
0x000FEE        D12A0003                 r0 = M[r8 + 3];
0x000FEF        70A0002F                 M2 = Null - r0;
0x000FF0        DD000013                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000FF1        D12A0002                 r0 = M[r8 + 2];
0x000FF2        E1F004B4                 call $cbuffer.get_write_address_and_size;
0x000FF3        5010002F                 I1 = Null + r0;
0x000FF4        50D0003F                 L1 = Null + r1;
0x000FF5        5000002F                 I0 = Null + r0;
0x000FF6        50C0003F                 L0 = Null + r1;
0x000FF7        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000FF8        E5F00003                 do $M.audio_proc.delay.process.loop_delay;
0x000FF9        03003121                 Null = Null + Null, r1 = M[I0,1], r0 = M[I4,1];
0x000FFA        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_delay>
0x000FFB        D12A0002                 r0 = M[r8 + 2];
0x000FFC        4430001F                 r1 = Null + I1;
0x000FFD        E1F004BC                 call $cbuffer.set_write_address;

 <$M.audio_proc.delay.process.jp_done>
0x000FFE        51C00000                 L0 = Null + 0;
0x000FFF        51D00000                 L1 = Null + 0;
0x001000        51E00000                 L4 = Null + 0;
0x001001        51F00000                 L5 = Null + 0;
0x001002        DDF004D5                 jump $pop_rLink_and_rts;

 <$M.audio_proc.delay.process.jp_no_delay>
0x001003        E5F00003                 do $M.audio_proc.delay.process.loop_copy;
0x001004        03000031                 Null = Null + Null, r1 = M[I4,1];
0x001005        030000B5                 Null = Null + Null, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_copy>
0x001006        DDF0FFF8                 jump $M.audio_proc.delay.process.jp_done;

 <$cbops.iir_resamplev2.amount_to_use>
0x001007        19003929                 M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x001008        D14A0002                 r2 = M[r8 + 2];
0x001009        DC0D0000                 if EQ rts;
0x00100A        51800001                 M0 = Null + 1;
0x00100B        5020004F                 I2 = Null + r2;
0x00100C        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x00100D        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x00100E        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x00100F        67180000                 rMAC = rMAC - M0;
0x001010        00100004                 if NEG rMAC = Null + Null;
0x001011        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x001012        00710005                 if POS r5 = rMAC + Null;
0x001013        D16A0006                 r4 = M[r8 + 6];
0x001014        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x001015        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x001016        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x001017        67180000                 rMAC = rMAC - M0;
0x001018        00100004                 if NEG rMAC = Null + Null;
0x001019        2007001F                 Null = r5 - rMAC;
0x00101A        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x00101B        D10A000F                 Null = M[r8 + 15];
0x00101C        DC0D0001                 if NE rts;
0x00101D        F3D00000                 push rLink;
0x00101E        D15A0002                 r3 = M[r8 + 2];
0x00101F        D55A000F                 M[r8 + 15] = r3;
0x001020        016A0010                 r4 = r8 + 16;
0x001021        512A000B                 I2 = r8 + 11;
0x001022        51350005                 I3 = r3 + 5;
0x001023        D1050004                 Null = M[r3 + 4];
0x001024        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x001025        512A0007                 I2 = r8 + 7;
0x001026        E1F002F5                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x001027        5F380000                 I3 = I3 + M0;
0x001028        E1F002F3                 call $reset_iir_resampler;
0x001029        50C0000F                 L0 = Null + Null;
0x00102A        DDF004AD                 jump $pop_rLink_and_rts;

 <$spdif_in_copy_handler>
0x00102B        F3D00000                 push rLink;
0x00102C        01A00F44                 r8 = Null + 3908;
0x00102D        E1F0F216                 call $spdif.copy_raw_data;
0x00102E        090038F3                 Null = Null + M[$first_audio_received];
0x00102F        DD10000A                 if NE jump $M.spdif_in_copy_handler.first_audio_done;
0x001030        0009000F                 Null = r7 + Null;
0x001031        DD000008                 if EQ jump $M.spdif_in_copy_handler.first_audio_done;
0x001032        E420002F                 r0 = Null + 1;
0x001033        192038F3                 M[$first_audio_received] = r0 + Null;
0x001034        0940FE71                 r2 = Null + M[0xfffe71];
0x001035        FD0000FF 194068F3        M[$first_audio_time] = r2 + Null;
0x001037        09402EEB                 r2 = Null + M[0x2eeb];
0x001038        192038F4                 M[$first_audio_init_latency_offset] = r0 + Null;

 <$M.spdif_in_copy_handler.first_audio_done>
0x001039        E1F00D0A                 call $spdif_pause_detect;
0x00103A        E1F0026D                 call $spdif_update_stat_word;
0x00103B        FD0000FF 090068ED        Null = Null + M[$rate_match_disable];
0x00103D        E100FA70                 if EQ call $spdif_sra.calc_rate;
0x00103E        E1F0FCCC                 call $apply_hardware_warp_rate;
0x00103F        FD0000FF 012068A6        r0 = Null + -38746;
0x001041        E1F0043C                 call $cbuffer.calc_amount_data;
0x001042        FD0000FF 192068F4        M[$codec_level] = r0 + Null;
0x001044        01302F9C                 r1 = Null + 12188;
0x001045        014003E8                 r2 = Null + 1000;
0x001046        0150102B                 r3 = Null + 4139;
0x001047        E1F00483                 call $timer.schedule_event_in_period;
0x001048        DDF0048F                 jump $pop_rLink_and_rts;

 <$syncronise_lfe_to_LR_channels>
0x001049        F3D00000                 push rLink;
0x00104A        01200075                 r0 = Null + 117;
0x00104B        E1F00432                 call $cbuffer.calc_amount_data;
0x00104C        0082000F                 r6 = r0 + Null;
0x00104D        FD0000FF 01205FFB        r0 = Null + -40965;
0x00104F        E1F0042E                 call $cbuffer.calc_amount_data;
0x001050        0092000F                 r7 = r0 + Null;
0x001051        FD0000FF 012068A0        r0 = Null + -38752;
0x001053        E1F0042A                 call $cbuffer.calc_amount_data;
0x001054        E492005F                 r7 = MIN r0;
0x001055        20C9008F                 r10 = r7 - r6;
0x001056        DD000481                 if EQ jump $pop_rLink_and_rts;
0x001057        01200075                 r0 = Null + 117;
0x001058        E1F00449                 call $cbuffer.get_read_address_and_size;
0x001059        5000002F                 I0 = Null + r0;
0x00105A        50C0003F                 L0 = Null + r1;
0x00105B        708000CF                 M0 = Null - r10;
0x00105C        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00105D        4480000F                 r6 = Null + I0;
0x00105E        000C000F                 Null = r10 + Null;
0x00105F        DD400004                 if NEG jump $M.syncronise_lfe_to_LR_channels.insert_silence;
0x001060        01200000                 r0 = Null + 0;
0x001061        E5F00002                 do $M.syncronise_lfe_to_LR_channels.insert_silence;
0x001062        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.syncronise_lfe_to_LR_channels.insert_silence>
0x001063        01200075                 r0 = Null + 117;
0x001064        0038000F                 r1 = r6 + Null;
0x001065        E1F00450                 call $cbuffer.set_read_address;
0x001066        51C00000                 L0 = Null + 0;
0x001067        DDF00470                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x001068        8132001F                 r1 = r0 AND 0x1f;
0x001069        2133000C                 r1 = r1 - 12;
0x00106A        D1432E35                 r2 = M[r1 + 11829];
0x00106B        00200000                 if EQ r0 = Null + Null;
0x00106C        DC0D0000                 if EQ rts;
0x00106D        FD0000FF 195068E5        M[$cbuffer.tmp] = r3 + Null;
0x00106F        D054000F                 r3 = M[r2 + Null];
0x001070        FD0000FF D1435E32        r2 = M[r1 + -41422];
0x001072        D3400000                 r2 = M[r2 + Null];
0x001073        23540000                 r3 = r3 - r2;
0x001074        D1432E1D                 r2 = M[r1 + 11805];
0x001075        E434003F                 r1 = r2 - 1;
0x001076        8035003F                 r1 = r3 AND r1;
0x001077        00340000                 if EQ r1 = r2 + Null;
0x001078        E433003F                 r1 = r1 - 1;
0x001079        FD0000FF 095068E5        r3 = Null + M[$cbuffer.tmp];
0x00107B        FD000003 81228000        r0 = r0 AND 0x38000;
0x00107D        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x00107E        FD000001 21028000        Null = r0 - 98304;
0x001080        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x001081        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x001082        FD000002 21028000        Null = r0 - 163840;
0x001084        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x001085        9123007E                 r0 = r1 ASHIFT -2;
0x001086        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x001087        E423003F                 r0 = r1 - 1;
0x001088        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x001089        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x00108A        0023000F                 r0 = r1 + Null;
0x00108B        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x00108C        9123007F                 r0 = r1 ASHIFT -1;
0x00108D        DC0D000F                 rts;

 <$timer.schedule_event_at>
0x00108E        F3D00000                 push rLink;
0x00108F        E1F003FE                 call $block_interrupts;
0x001090        01C00032                 r10 = Null + 50;
0x001091        FD0000FF 0160691E        r4 = Null + -38626;
0x001093        FD0000FF 0920691E        r0 = Null + M[$timer.last_addr];
0x001095        E5F00008                 do $M.timer.schedule_event_at.loop;
0x001096        E402002F                 Null = r0 + 1;
0x001097        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x001098        D1720001                 r5 = M[r0 + 1];
0x001099        2004007F                 Null = r2 - r5;
0x00109A        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x00109B        0062000F                 r4 = r0 + Null;
0x00109C        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x00109D        E1F00F4F                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x00109E        D5360000                 M[r4 + 0] = r1;
0x00109F        D5230000                 M[r1 + 0] = r0;
0x0010A0        D5430001                 M[r1 + 1] = r2;
0x0010A1        D5530002                 M[r1 + 2] = r3;
0x0010A2        0950391E                 r3 = Null + M[$timer.id];
0x0010A3        D5530003                 M[r1 + 3] = r3;
0x0010A4        E425002F                 r0 = r3 + 1;
0x0010A5        20200050                 if EQ r0 = Null - r3;
0x0010A6        1920391E                 M[$timer.id] = r0 + Null;
0x0010A7        0900FE1F                 Null = Null + M[0xfffe1f];
0x0010A8        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x0010A9        2904FE21                 Null = r2 - M[0xfffe21];
0x0010AA        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x0010AB        1940FE21                 M[0xfffe21] = r2 + Null;
0x0010AC        E420002F                 r0 = Null + 1;
0x0010AD        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x0010AE        E1F003D7                 call $interrupt.unblock;
0x0010AF        DDF00428                 jump $pop_rLink_and_rts;

 <$detect_end_of_aux_stream>
0x0010B0        F3D00000                 push rLink;
0x0010B1        095038EB                 r3 = Null + M[$aux_input_stream_available];
0x0010B2        DD000425                 if EQ jump $pop_rLink_and_rts;
0x0010B3        012000AD                 r0 = Null + 173;
0x0010B4        E1F003C9                 call $cbuffer.calc_amount_data;
0x0010B5        81050002                 Null = r3 AND 0x2;
0x0010B6        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x0010B7        0002000F                 Null = r0 + Null;
0x0010B8        DD00041F                 if EQ jump $pop_rLink_and_rts;
0x0010B9        85550002                 r3 = r3 OR 0x2;
0x0010BA        195038EB                 M[$aux_input_stream_available] = r3 + Null;
0x0010BB        190038F5                 M[$no_tone_timer] = Null + Null;
0x0010BC        DDF0041B                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x0010BD        093038F5                 r1 = Null + M[$no_tone_timer];
0x0010BE        FD0000FF 093368E7        r1 = r1 + M[$tmr_period_tone_copy];
0x0010C0        0002000F                 Null = r0 + Null;
0x0010C1        00300001                 if NE r1 = Null + Null;
0x0010C2        193038F5                 M[$no_tone_timer] = r1 + Null;
0x0010C3        21037530                 Null = r1 - 30000;
0x0010C4        DD400413                 if NEG jump $pop_rLink_and_rts;
0x0010C5        01401080                 r2 = Null + 4224;
0x0010C6        01500000                 r3 = Null + 0;
0x0010C7        01600000                 r4 = Null + 0;
0x0010C8        01700000                 r5 = Null + 0;
0x0010C9        01800000                 r6 = Null + 0;
0x0010CA        E1F0021D                 call $message.send_short;
0x0010CB        190038EB                 M[$aux_input_stream_available] = Null + Null;
0x0010CC        190038F5                 M[$no_tone_timer] = Null + Null;
0x0010CD        DDF0040A                 jump $pop_rLink_and_rts;

 <$fade_out_buffer>
0x0010CE        F3D00000                 push rLink;
0x0010CF        0025000F                 r0 = r3 + Null;
0x0010D0        E1F003AD                 call $cbuffer.calc_amount_data;
0x0010D1        0062000F                 r4 = r0 + Null;
0x0010D2        0025000F                 r0 = r3 + Null;
0x0010D3        E1F003D3                 call $cbuffer.get_write_address_and_size;
0x0010D4        5040002F                 I4 = Null + r0;
0x0010D5        50E0003F                 L4 = Null + r1;
0x0010D6        8D46007C                 r2 = r4 LSHIFT -4;
0x0010D7        2134000F                 r1 = r2 - 15;
0x0010D8        20440035                 if POS r2 = r2 - r1;
0x0010D9        21260100                 r0 = r4 - 256;
0x0010DA        20660025                 if POS r4 = r4 - r0;
0x0010DB        00C6000F                 r10 = r4 + Null;
0x0010DC        DD000011                 if EQ jump $M.fade_out_buffer.end_fade;
0x0010DD        7080006F                 M0 = Null - r4;
0x0010DE        02000020                 Null = Null + Null, r0 = M[I4,M0];
0x0010DF        D1442EA3                 r2 = M[r2 + 11939];
0x0010E0        FD00007F 0150FFFF        r3 = Null + 8388607;
0x0010E2        0015000F                 rMAC = r3 + Null;
0x0010E3        0024000F                 r0 = r2 + Null;
0x0010E4        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0010E5        E5F00008                 do $M.fade_out_buffer.end_fade;
0x0010E6        9461001F                 r4 = rMAC * rMAC (frac);
0x0010E7        97360000                 r1 = r1 * r4 (frac);
0x0010E8        0061000F                 r4 = rMAC + Null;
0x0010E9        CF1400B1                 rMAC = rMAC * r2 (SS), M[I4,1] = r1;
0x0010EA        AC11005F                 rMAC = rMAC + rMAC * r3 (SS);
0x0010EB        BF250030                 rMAC = rMAC - r0 * r3 (SS), r1 = M[I4,0];
0x0010EC        0026000F                 r0 = r4 + Null;

 <$M.fade_out_buffer.end_fade>
0x0010ED        51E00000                 L4 = Null + 0;
0x0010EE        DDF003E9                 jump $pop_rLink_and_rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x0010EF        F3D00000                 push rLink;
0x0010F0        D1290000                 r0 = M[r7 + 0];
0x0010F1        E1F003BF                 call $frmbuffer.get_buffer;
0x0010F2        5000002F                 I0 = Null + r0;
0x0010F3        50C0003F                 L0 = Null + r1;
0x0010F4        D1290001                 r0 = M[r7 + 1];
0x0010F5        E1F003BB                 call $frmbuffer.get_buffer;
0x0010F6        5040002F                 I4 = Null + r0;
0x0010F7        50E0003F                 L4 = Null + r1;
0x0010F8        00C5000F                 r10 = r3 + Null;
0x0010F9        D1290002                 r0 = M[r7 + 2];
0x0010FA        E1F003DB                 call $frmbuffer.set_frame_size;
0x0010FB        E1F003B5                 call $frmbuffer.get_buffer;
0x0010FC        5010002F                 I1 = Null + r0;
0x0010FD        50D0003F                 L1 = Null + r1;
0x0010FE        005C000F                 r3 = r10 + Null;
0x0010FF        D1290003                 r0 = M[r7 + 3];
0x001100        E1F003D5                 call $frmbuffer.set_frame_size;
0x001101        E1F003AF                 call $frmbuffer.get_buffer;
0x001102        5050002F                 I5 = Null + r0;
0x001103        50F0003F                 L5 = Null + r1;
0x001104        F3D40000                 pop rLink;
0x001105        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x001106        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x001107        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x001108        50C0000F                 L0 = Null + Null;
0x001109        50D0000F                 L1 = Null + Null;
0x00110A        50E0000F                 L4 = Null + Null;
0x00110B        50F0000F                 L5 = Null + Null;
0x00110C        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x00110D        8132001F                 r1 = r0 AND 0x1f;
0x00110E        D1432E29                 r2 = M[r1 + 11817];
0x00110F        00200000                 if EQ r0 = Null + Null;
0x001110        DC0D0000                 if EQ rts;
0x001111        D3400000                 r2 = M[r2 + Null];
0x001112        FD0000FF 195068E5        M[$cbuffer.tmp] = r3 + Null;
0x001114        FD0000FF D1535E26        r3 = M[r1 + -41434];
0x001116        D3500000                 r3 = M[r3 + Null];
0x001117        2054005F                 r3 = r2 - r3;
0x001118        D1432E11                 r2 = M[r1 + 11793];
0x001119        E434003F                 r1 = r2 - 1;
0x00111A        8035003F                 r1 = r3 AND r1;
0x00111B        FD0000FF 095068E5        r3 = Null + M[$cbuffer.tmp];
0x00111D        FD000003 81228000        r0 = r0 AND 0x38000;
0x00111F        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x001120        FD000001 21028000        Null = r0 - 98304;
0x001122        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x001123        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x001124        FD000002 21028000        Null = r0 - 163840;
0x001126        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x001127        9123007E                 r0 = r1 ASHIFT -2;
0x001128        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x001129        E423003F                 r0 = r1 - 1;
0x00112A        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x00112B        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x00112C        0023000F                 r0 = r1 + Null;
0x00112D        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x00112E        9123007F                 r0 = r1 ASHIFT -1;
0x00112F        DC0D000F                 rts;

 <$cbops.shift_24bit.main>
0x001130        51800001                 M0 = Null + 1;
0x001131        DDF00002                 jump $M.cbops.shift.main.ready;

 <$cbops.shift.main>
0x001132        51800000                 M0 = Null + 0;

 <$M.cbops.shift.main.ready>
0x001133        D12A0000                 r0 = M[r8 + 0];
0x001134        D038002F                 r1 = M[r6 + r0];
0x001135        5000003F                 I0 = Null + r1;
0x001136        D039002F                 r1 = M[r7 + r0];
0x001137        50C0003F                 L0 = Null + r1;
0x001138        D12A0001                 r0 = M[r8 + 1];
0x001139        D038002F                 r1 = M[r6 + r0];
0x00113A        5040003F                 I4 = Null + r1;
0x00113B        D039002F                 r1 = M[r7 + r0];
0x00113C        50E0003F                 L4 = Null + r1;
0x00113D        D14A0002                 r2 = M[r8 + 2];
0x00113E        E4CC003F                 r10 = r10 - 1;
0x00113F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001140        93240000                 r0 = r0 ASHIFT r2;
0x001141        47080000                 Null = Null + M0;
0x001142        DD100005                 if NE jump $M.cbops.shift.main.do_double_write;
0x001143        E5F00003                 do $M.cbops.shift.main.loop;
0x001144        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x001145        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x001146        DDF0000A                 jump $M.cbops.shift.main.done;

 <$M.cbops.shift.main.do_double_write>
0x001147        8D320008                 r1 = r0 LSHIFT 8;
0x001148        8D220078                 r0 = r0 LSHIFT -8;
0x001149        E5F00006                 do $M.cbops.shift.main.two_write_loop;
0x00114A        030051B1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r1;
0x00114B        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x00114C        93540000                 r3 = r3 ASHIFT r2;
0x00114D        8D350008                 r1 = r3 LSHIFT 8;
0x00114E        8D250078                 r0 = r3 LSHIFT -8;

 <$M.cbops.shift.main.two_write_loop>
0x00114F        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.shift.main.done>
0x001150        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x001151        51E00000                 L4 = Null + 0;
0x001152        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x001153        5020009F                 I2 = Null + r7;
0x001154        51900001                 M1 = Null + 1;
0x001155        F3D00000                 push rLink;
0x001156        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x001157        E1F00359                 call $frmbuffer.get_buffer;
0x001158        5000002F                 I0 = Null + r0;
0x001159        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x00115A        E1F00356                 call $frmbuffer.get_buffer;
0x00115B        5010002F                 I1 = Null + r0;
0x00115C        50D0003F                 L1 = Null + r1;
0x00115D        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x00115E        E1F00377                 call $frmbuffer.set_frame_size;
0x00115F        E1F00351                 call $frmbuffer.get_buffer;
0x001160        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x001161        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x001162        F3D40000                 pop rLink;
0x001163        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x001164        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x001165        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x001166        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x001167        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x001168        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x001169        9041008F                 r2 = rMAC ASHIFT r6;
0x00116A        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x00116B        51C00000                 L0 = Null + 0;
0x00116C        51D00000                 L1 = Null + 0;
0x00116D        51E00000                 L4 = Null + 0;
0x00116E        DC0D000F                 rts;

 <$pskey.result_message_handler>
0x00116F        FD000000 21028008        Null = r0 - 32776;
0x001171        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x001172        D035000F                 r1 = M[r3 + Null];
0x001173        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x001174        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x001175        1900391D                 M[$pskey.request_in_progress] = Null + Null;
0x001176        FD0000FF 0170691D        r5 = Null + -38627;
0x001178        FD0000FF 0920691D        r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x00117A        D1620001                 r4 = M[r0 + 1];
0x00117B        2003006F                 Null = r1 - r4;
0x00117C        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x00117D        0072000F                 r5 = r0 + Null;
0x00117E        D1220000                 r0 = M[r0 + 0];
0x00117F        E402002F                 Null = r0 + 1;
0x001180        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x001181        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x001182        F3D00000                 push rLink;
0x001183        D1620000                 r4 = M[r0 + 0];
0x001184        D5670000                 M[r5 + 0] = r4;
0x001185        D1220002                 r0 = M[r0 + 2];
0x001186        E002000F                 call r0;
0x001187        FD0000FF 0930691D        r1 = Null + M[$pskey.last_addr];
0x001189        E403002F                 Null = r1 + 1;
0x00118A        E1100079                 if NE call $pskey.private.send_request;
0x00118B        DDF0034C                 jump $pop_rLink_and_rts;

 <$cbops.copy_op_24bit_audio.main>
0x00118C        51800001                 M0 = Null + 1;
0x00118D        DDF00002                 jump $M.cbops.copy_op.main.ready;

 <$cbops.copy_op.main>
0x00118E        51800000                 M0 = Null + 0;

 <$M.cbops.copy_op.main.ready>
0x00118F        D12A0000                 r0 = M[r8 + 0];
0x001190        D038002F                 r1 = M[r6 + r0];
0x001191        5000003F                 I0 = Null + r1;
0x001192        D039002F                 r1 = M[r7 + r0];
0x001193        50C0003F                 L0 = Null + r1;
0x001194        D12A0001                 r0 = M[r8 + 1];
0x001195        D038002F                 r1 = M[r6 + r0];
0x001196        5040003F                 I4 = Null + r1;
0x001197        D039002F                 r1 = M[r7 + r0];
0x001198        50E0003F                 L4 = Null + r1;
0x001199        E4CC003F                 r10 = r10 - 1;
0x00119A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00119B        47080000                 Null = Null + M0;
0x00119C        DD100004                 if NE jump $M.cbops.copy_op.main.do_double_write;
0x00119D        E5F00002                 do $M.cbops.copy_op.main.loop;
0x00119E        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x00119F        DDF00009                 jump $M.cbops.copy_op.main.done;

 <$M.cbops.copy_op.main.do_double_write>
0x0011A0        8D320008                 r1 = r0 LSHIFT 8;
0x0011A1        8D220078                 r0 = r0 LSHIFT -8;
0x0011A2        E5F00005                 do $M.cbops.copy_op.main.two_write_loop;
0x0011A3        030041B1                 Null = Null + Null, r2 = M[I0,1], M[I4,1] = r1;
0x0011A4        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0011A5        8D340008                 r1 = r2 LSHIFT 8;
0x0011A6        8D240078                 r0 = r2 LSHIFT -8;

 <$M.cbops.copy_op.main.two_write_loop>
0x0011A7        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.copy_op.main.done>
0x0011A8        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x0011A9        51E00000                 L4 = Null + 0;
0x0011AA        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x0011AB        D12A0000                 r0 = M[r8 + 0];
0x0011AC        D038002F                 r1 = M[r6 + r0];
0x0011AD        5000003F                 I0 = Null + r1;
0x0011AE        D039002F                 r1 = M[r7 + r0];
0x0011AF        50C0003F                 L0 = Null + r1;
0x0011B0        D12A0001                 r0 = M[r8 + 1];
0x0011B1        D038002F                 r1 = M[r6 + r0];
0x0011B2        5040003F                 I4 = Null + r1;
0x0011B3        D039002F                 r1 = M[r7 + r0];
0x0011B4        50E0003F                 L4 = Null + r1;
0x0011B5        D12A0002                 r0 = M[r8 + 2];
0x0011B6        D038002F                 r1 = M[r6 + r0];
0x0011B7        5050003F                 I5 = Null + r1;
0x0011B8        D039002F                 r1 = M[r7 + r0];
0x0011B9        50F0003F                 L5 = Null + r1;
0x0011BA        D14A0003                 r2 = M[r8 + 3];
0x0011BB        8DCC007F                 r10 = r10 LSHIFT -1;
0x0011BC        FD0000FF 19C06920        M[$cbops.amount_written] = r10 + Null;
0x0011BE        E4CC003F                 r10 = r10 - 1;
0x0011BF        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0011C0        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x0011C1        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x0011C2        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x0011C3        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x0011C4        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x0011C5        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x0011C6        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x0011C7        51F00000                 L5 = Null + 0;
0x0011C8        DC0D000F                 rts;

 <$cbops.dc_remove.main>
0x0011C9        D12A0000                 r0 = M[r8 + 0];
0x0011CA        D038002F                 r1 = M[r6 + r0];
0x0011CB        5000003F                 I0 = Null + r1;
0x0011CC        D039002F                 r1 = M[r7 + r0];
0x0011CD        50C0003F                 L0 = Null + r1;
0x0011CE        D12A0001                 r0 = M[r8 + 1];
0x0011CF        D038002F                 r1 = M[r6 + r0];
0x0011D0        5040003F                 I4 = Null + r1;
0x0011D1        D039002F                 r1 = M[r7 + r0];
0x0011D2        50E0003F                 L4 = Null + r1;
0x0011D3        D11A0002                 rMAC = M[r8 + 2];
0x0011D4        013009D5                 r1 = Null + 2517;
0x0011D5        FD000080 01500000        r3 = Null + -8388608;
0x0011D7        2045003F                 r2 = r3 - r1;
0x0011D8        E4CC003F                 r10 = r10 - 1;
0x0011D9        CF142100                 rMAC = rMAC * r2 (SS), r0 = M[I0,1];
0x0011DA        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0011DB        23210000                 r0 = r0 - rMAC;
0x0011DC        9C220056                 if V r0 = r0 * r3 (int) (sat);
0x0011DD        E5F00005                 do $M.cbops.dc_remove.main.loop;
0x0011DE        CF1421A1                 rMAC = rMAC * r2 (SS), r0 = M[I0,1], M[I4,1] = r0;
0x0011DF        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0011E0        23210000                 r0 = r0 - rMAC;
0x0011E1        9C220056                 if V r0 = r0 * r3 (int) (sat);

 <$M.cbops.dc_remove.main.loop>
0x0011E2        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x0011E3        51E00000                 L4 = Null + 0;
0x0011E4        D51A0002                 M[r8 + 2] = rMAC;
0x0011E5        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x0011E6        01300019                 r1 = Null + 25;
0x0011E7        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x0011E8        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0011E9        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011ED        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F0        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0011F1        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0011F2        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0011F3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011F8        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0011F9        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0011FA        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0011FB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011FC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011FD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011FE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011FF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001200        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x001201        93E30000                 rMAC = rMAC ASHIFT r1;
0x001202        DC0D000F                 rts;

 <$pskey.private.send_request>
0x001203        0900391D                 Null = Null + M[$pskey.request_in_progress];
0x001204        DC0D0001                 if NE rts;
0x001205        F3D00000                 push rLink;
0x001206        09402FFB                 r2 = Null + M[0x2ffb];
0x001207        E1F00073                 call $timer.cancel_event;
0x001208        E1F0028C                 call $message.send_queue_space;
0x001209        21020005                 Null = r0 - 5;
0x00120A        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x00120B        FD0000FF 0930691D        r1 = Null + M[$pskey.last_addr];
0x00120D        85408006                 r2 = Null OR 0x8006;
0x00120E        D1530001                 r3 = M[r1 + 1];
0x00120F        E1F000D8                 call $message.send_short;
0x001210        E420002F                 r0 = Null + 1;
0x001211        1920391D                 M[$pskey.request_in_progress] = r0 + Null;
0x001212        DDF002C5                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x001213        01302FF8                 r1 = Null + 12280;
0x001214        01402710                 r2 = Null + 10000;
0x001215        01501203                 r3 = Null + 4611;
0x001216        E1F002B7                 call $timer.schedule_event_in;
0x001217        DDF002C0                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x001218        01300017                 r1 = Null + 23;
0x001219        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x00121A        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x00121B        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00121C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00121D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00121E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00121F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001220        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001221        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001222        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001223        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001224        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001225        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001226        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001227        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001228        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001229        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00122F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001230        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x001231        93E30000                 rMAC = rMAC ASHIFT r1;
0x001232        DC0D000F                 rts;

 <$timer.service_routine>
0x001233        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x001234        FD0000FF 0930691E        r1 = Null + M[$timer.last_addr];
0x001236        E403002F                 Null = r1 + 1;
0x001237        DD000012                 if EQ jump $M.timer.service_routine.no_more_timers;
0x001238        D1230001                 r0 = M[r1 + 1];
0x001239        2942FE71                 r2 = r0 - M[0xfffe71];
0x00123A        21040000                 Null = r2 - 0;
0x00123B        DDC00009                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x00123C        D1D30002                 rLink = M[r1 + 2];
0x00123D        D1230003                 r0 = M[r1 + 3];
0x00123E        D5030003                 M[r1 + 3] = Null;
0x00123F        D1430000                 r2 = M[r1 + 0];
0x001240        FD0000FF 1940691E        M[$timer.last_addr] = r2 + Null;
0x001242        E00D000F                 call rLink;
0x001243        DDF0FFF1                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x001244        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001245        1920FE21                 M[0xfffe21] = r0 + Null;
0x001246        E450002F                 r3 = Null + 1;
0x001247        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x001248        DDF0028F                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x001249        1900FE1F                 M[0xfffe1f] = Null + Null;
0x00124A        DDF0028D                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x00124B        01300015                 r1 = Null + 21;
0x00124C        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x00124D        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x00124E        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00124F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001250        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001251        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001252        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001253        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001254        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001255        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001256        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001257        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001258        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001259        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125B        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x00125C        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x00125D        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x00125E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001260        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001261        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x001262        93E30000                 rMAC = rMAC ASHIFT r1;
0x001263        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x001264        F3D00000                 push rLink;
0x001265        51900001                 M1 = Null + 1;
0x001266        E1F00227                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x001267        D0B9000F                 r9 = M[r7 + Null];
0x001268        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x001269        D14B0006                 r2 = M[r9 + 6];
0x00126A        D12B0000                 r0 = M[r9 + 0];
0x00126B        D1320000                 r1 = M[r0 + 0];
0x00126C        D16B0003                 r4 = M[r9 + 3];
0x00126D        50D0003F                 L1 = Null + r1;
0x00126E        E004000F                 call r2;
0x00126F        5080006F                 M0 = Null + r4;
0x001270        D042000F                 r2 = M[r0 + Null];
0x001271        5010004F                 I1 = Null + r2;
0x001272        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x001273        4440001F                 r2 = Null + I1;
0x001274        1824000F                 M[r0] = r2 + Null;
0x001275        E499002F                 r7 = r7 + 1;
0x001276        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x001277        E1F0020E                 call $interrupt.unblock;
0x001278        50D0000F                 L1 = Null + Null;
0x001279        DDF0025E                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x00127A        F3D00000                 push rLink;
0x00127B        E1F00212                 call $block_interrupts;
0x00127C        01C00032                 r10 = Null + 50;
0x00127D        FD0000FF 0160691E        r4 = Null + -38626;
0x00127F        FD0000FF 0920691E        r0 = Null + M[$timer.last_addr];
0x001281        E5F00008                 do $M.timer.cancel_event.loop;
0x001282        E402002F                 Null = r0 + 1;
0x001283        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x001284        D1720003                 r5 = M[r0 + 3];
0x001285        2004007F                 Null = r2 - r5;
0x001286        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x001287        0062000F                 r4 = r0 + Null;
0x001288        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x001289        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x00128A        D1320000                 r1 = M[r0 + 0];
0x00128B        D5360000                 M[r4 + 0] = r1;
0x00128C        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x00128D        E1F001F8                 call $interrupt.unblock;
0x00128E        DDF00249                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x00128F        D5CB0008                 M[r9 + 8] = r10;
0x001290        D14B000A                 r2 = M[r9 + 10];
0x001291        200400CF                 Null = r2 - r10;
0x001292        004C0005                 if POS r2 = r10 + Null;
0x001293        D15B000B                 r3 = M[r9 + 11];
0x001294        200500CF                 Null = r3 - r10;
0x001295        005C0004                 if NEG r3 = r10 + Null;
0x001296        D1CB0007                 r10 = M[r9 + 7];
0x001297        67C90000                 r10 = r10 - M1;
0x001298        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x001299        D54B000A                 M[r9 + 10] = r2;
0x00129A        D55B000B                 M[r9 + 11] = r3;
0x00129B        D5CB0007                 M[r9 + 7] = r10;
0x00129C        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x00129D        D50B000B                 M[r9 + 11] = Null;
0x00129E        D56B000A                 M[r9 + 10] = r4;
0x00129F        D1CB0004                 r10 = M[r9 + 4];
0x0012A0        23540000                 r3 = r3 - r2;
0x0012A1        035C0000                 r3 = r3 + r10;
0x0012A2        00500004                 if NEG r3 = Null + Null;
0x0012A3        D55B0009                 M[r9 + 9] = r3;
0x0012A4        01C00078                 r10 = Null + 120;
0x0012A5        D5CB0007                 M[r9 + 7] = r10;
0x0012A6        DC0D000F                 rts;

 <$spdif_update_stat_word>
0x0012A7        09300F5D                 r1 = Null + M[0xf5d];
0x0012A8        81330001                 r1 = r1 AND 0x1;
0x0012A9        FD0000FF 09205E16        r0 = Null + M[0xff5e16];
0x0012AB        8122007F                 r0 = r0 AND 0x7f;
0x0012AC        8D220001                 r0 = r0 LSHIFT 1;
0x0012AD        87320000                 r1 = r1 OR r0;
0x0012AE        09202EEB                 r0 = Null + M[0x2eeb];
0x0012AF        FD000000 952220C5        r0 = r0 * 0.0010000467300415039 (frac);
0x0012B1        812200FF                 r0 = r0 AND 0xff;
0x0012B2        8D220008                 r0 = r0 LSHIFT 8;
0x0012B3        87320000                 r1 = r1 OR r0;
0x0012B4        09200F68                 r0 = Null + M[0xf68];
0x0012B5        8D420078                 r2 = r0 LSHIFT -8;
0x0012B6        81440080                 r2 = r2 AND 0x80;
0x0012B7        8122007F                 r0 = r0 AND 0x7f;
0x0012B8        87240000                 r0 = r0 OR r2;
0x0012B9        8D220010                 r0 = r0 LSHIFT 16;
0x0012BA        87320000                 r1 = r1 OR r0;
0x0012BB        FD0000FF 193068EE        M[$spdif_stat_word] = r1 + Null;
0x0012BD        DC0D000F                 rts;

 <$frame_sync.distribute_streams_ind>
0x0012BE        F3D00000                 push rLink;
0x0012BF        E1F001CE                 call $block_interrupts;
0x0012C0        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x0012C1        D0B9000F                 r9 = M[r7 + Null];
0x0012C2        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x0012C3        D15B0005                 r3 = M[r9 + 5];
0x0012C4        D12B0000                 r0 = M[r9 + 0];
0x0012C5        D1320000                 r1 = M[r0 + 0];
0x0012C6        D1820001                 r6 = M[r0 + 1];
0x0012C7        D1A20002                 r8 = M[r0 + 2];
0x0012C8        50D0003F                 L1 = Null + r1;
0x0012C9        D16B0003                 r4 = M[r9 + 3];
0x0012CA        D56B0002                 M[r9 + 2] = r4;
0x0012CB        E005000F                 call r3;
0x0012CC        D58B0001                 M[r9 + 1] = r6;
0x0012CD        E499002F                 r7 = r7 + 1;
0x0012CE        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x0012CF        E1F001B6                 call $interrupt.unblock;
0x0012D0        50D0000F                 L1 = Null + Null;
0x0012D1        DDF00206                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x0012D2        F3D00000                 push rLink;
0x0012D3        D1820002                 r6 = M[r0 + 2];
0x0012D4        D1A20001                 r8 = M[r0 + 1];
0x0012D5        20C800AF                 r10 = r6 - r8;
0x0012D6        00CC0034                 if NEG r10 = r10 + r1;
0x0012D7        E1F0FFB8                 call $frame_sync.analyze_stream_ind;
0x0012D8        D15B0008                 r3 = M[r9 + 8];
0x0012D9        D14B0009                 r2 = M[r9 + 9];
0x0012DA        23540000                 r3 = r3 - r2;
0x0012DB        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x0012DC        D14B0004                 r2 = M[r9 + 4];
0x0012DD        9144007F                 r2 = r2 ASHIFT -1;
0x0012DE        03540000                 r3 = r3 + r2;
0x0012DF        2006005F                 Null = r4 - r3;
0x0012E0        00560004                 if NEG r3 = r4 + Null;
0x0012E1        D14B000C                 r2 = M[r9 + 12];
0x0012E2        23450000                 r2 = r2 - r3;
0x0012E3        D54B000C                 M[r9 + 12] = r2;
0x0012E4        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x0012E5        01220002                 r0 = r0 + 2;
0x0012E6        DDF001F1                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x0012E7        F3D00000                 push rLink;
0x0012E8        E1F001A5                 call $block_interrupts;
0x0012E9        0930391B                 r1 = Null + M[$message.queue_write_ptr];
0x0012EA        01230005                 r0 = r1 + 5;
0x0012EB        2102006E                 Null = r0 - 110;
0x0012EC        00200000                 if EQ r0 = Null + Null;
0x0012ED        FD0000FF 2902691A        Null = r0 - M[$message.queue_read_ptr];
0x0012EF        DD000008                 if EQ jump $M.message.send_short.all_done;
0x0012F0        1920391B                 M[$message.queue_write_ptr] = r0 + Null;
0x0012F1        D5430760                 M[r1 + 1888] = r2;
0x0012F2        D5530761                 M[r1 + 1889] = r3;
0x0012F3        D5630762                 M[r1 + 1890] = r4;
0x0012F4        D5730763                 M[r1 + 1891] = r5;
0x0012F5        D5830764                 M[r1 + 1892] = r6;
0x0012F6        E1F0FC73                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x0012F7        E1F0018E                 call $interrupt.unblock;
0x0012F8        DDF001DF                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x0012F9        F3D00000                 push rLink;
0x0012FA        E1F00193                 call $block_interrupts;
0x0012FB        D5430001                 M[r1 + 1] = r2;
0x0012FC        D5530002                 M[r1 + 2] = r3;
0x0012FD        E450003F                 r3 = Null - 1;
0x0012FE        D5530000                 M[r1 + 0] = r3;
0x0012FF        FD0000FF 0120691D        r0 = Null + -38627;

 <$M.pskey.read_key.find_end_of_list>
0x001301        0042000F                 r2 = r0 + Null;
0x001302        D1240000                 r0 = M[r2 + 0];
0x001303        E402002F                 Null = r0 + 1;
0x001304        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x001305        D5340000                 M[r2 + 0] = r1;
0x001306        FD0000FF 2104691D        Null = r2 - -38627;
0x001308        E100FEFB                 if EQ call $pskey.private.send_request;
0x001309        E1F0017C                 call $interrupt.unblock;
0x00130A        DDF001CD                 jump $pop_rLink_and_rts;

 <$cbuffer.empty_buffer>
0x00130B        F3D00000                 push rLink;
0x00130C        0052000F                 r3 = r0 + Null;
0x00130D        D802000F                 Null = SIGNDET r0;
0x00130E        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x00130F        E1F00197                 call $cbuffer.get_write_address_and_size;
0x001310        0032000F                 r1 = r0 + Null;
0x001311        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x001312        E1F0016B                 call $cbuffer.calc_amount_data;
0x001313        00C2000F                 r10 = r0 + Null;
0x001314        0025000F                 r0 = r3 + Null;
0x001315        E1F0018C                 call $cbuffer.get_read_address_and_size;
0x001316        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x001317        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x001318        0025000F                 r0 = r3 + Null;
0x001319        E1F0019C                 call $cbuffer.set_read_address;
0x00131A        DDF001BD                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x00131B        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x00131C        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x00131D        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x00131E        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x00131F        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x001320        03650000                 r4 = r4 + r3;
0x001321        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x001322        03620000                 r4 = r4 + r0;
0x001323        59330004                 I3 = I3 + 4;
0x001324        00C2000F                 r10 = r0 + Null;
0x001325        DC0D0000                 if EQ rts;
0x001326        5000003F                 I0 = Null + r1;
0x001327        59330002                 I3 = I3 + 2;
0x001328        F2D03C00                 push rLink, r1 = M[I3,M0];
0x001329        21330002                 r1 = r1 - 2;
0x00132A        E003000F                 call r1;
0x00132B        5B330000                 I3 = I3 + r1;
0x00132C        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x00132D        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x00132E        DDF001A9                 jump $pop_rLink_and_rts;

 <$spdif_sub_esco_process>
0x00132F        F3D00000                 push rLink;
0x001330        09203902                 r0 = Null + M[$sub_link_port];
0x001331        FD000091 2102A00E        Null = r0 - -7233522;
0x001333        DD10000B                 if NE jump $M.spdif_sub_esco_process.not_esco_sub;
0x001334        FD0000FF 092068F5        r0 = Null + M[$init_latency_state];
0x001336        E402003F                 Null = r0 - 1;
0x001337        DD100005                 if NE jump $M.spdif_sub_esco_process.send_sub;
0x001338        FD0000FF 092068F6        r0 = Null + M[$time_left_to_play];
0x00133A        21020005                 Null = r0 - 5;
0x00133B        DDC00003                 if GT jump $M.spdif_sub_esco_process.not_esco_sub;

 <$M.spdif_sub_esco_process.send_sub>
0x00133C        E1F00733                 call $M.Subwoofer.esco_preprocess;
0x00133D        E1F00736                 call $M.Subwoofer.esco_post_process;

 <$M.spdif_sub_esco_process.not_esco_sub>
0x00133E        DDF00199                 jump $pop_rLink_and_rts;

 <$latency.reset_encoded_latency>
0x00133F        F3D00000                 push rLink;
0x001340        D1290001                 r0 = M[r7 + 1];
0x001341        DD00000E                 if EQ jump $M.latency_measure.reset.encoded_reset_done;
0x001342        E1F0FFC9                 call $cbuffer.empty_buffer;
0x001343        D1290002                 r0 = M[r7 + 2];
0x001344        D1220001                 r0 = M[r0 + 1];
0x001345        D5290007                 M[r7 + 7] = r0;
0x001346        D1290003                 r0 = M[r7 + 3];
0x001347        D1220002                 r0 = M[r0 + 2];
0x001348        D5290008                 M[r7 + 8] = r0;
0x001349        FD00007F 0120FFFF        r0 = Null + 8388607;
0x00134B        D529000A                 M[r7 + 10] = r0;
0x00134C        D529000B                 M[r7 + 11] = r0;
0x00134D        D529000C                 M[r7 + 12] = r0;
0x00134E        D529000D                 M[r7 + 13] = r0;

 <$M.latency_measure.reset.encoded_reset_done>
0x00134F        DDF00188                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x001350        F3D00000                 push rLink;
0x001351        01A000F3                 r8 = Null + 243;
0x001352        01900342                 r7 = Null + 834;
0x001353        FD0000FF 090068E9        Null = Null + M[$stereo_tone];
0x001355        00A90001                 if NE r8 = r7 + Null;
0x001356        E1F0F6F0                 call $cbops.copy;
0x001357        E1F0FD59                 call $detect_end_of_aux_stream;
0x001358        01302FA0                 r1 = Null + 12192;
0x001359        FD0000FF 094068E7        r2 = Null + M[$tmr_period_tone_copy];
0x00135B        01501350                 r3 = Null + 4944;
0x00135C        E1F0016E                 call $timer.schedule_event_in_period;
0x00135D        DDF0017A                 jump $pop_rLink_and_rts;

 <$spdif_codec_change_master_reset>
0x00135E        F3D00000                 push rLink;
0x00135F        E1F0012E                 call $block_interrupts;
0x001360        FD0000FF 01505FFB        r3 = Null + -40965;
0x001362        E1F0FD6C                 call $fade_out_buffer;
0x001363        FD0000FF 015068A0        r3 = Null + -38752;
0x001365        E1F0FD69                 call $fade_out_buffer;
0x001366        01500075                 r3 = Null + 117;
0x001367        E1F0FD67                 call $fade_out_buffer;
0x001368        E1F0011D                 call $interrupt.unblock;
0x001369        DDF0016E                 jump $pop_rLink_and_rts;

 <$cbops.switch_op.helper>
0x00136A        E440002F                 r2 = Null + 1;
0x00136B        D12A0000                 r0 = M[r8 + 0];
0x00136C        D13A0002                 r1 = M[r8 + 2];
0x00136D        00340000                 if EQ r1 = r2 + Null;
0x00136E        D3200000                 r0 = M[r0 + Null];
0x00136F        D14A0003                 r2 = M[r8 + 3];
0x001370        88220031                 if NE r0 = r0 XOR r1;
0x001371        83230000                 r0 = r0 AND r1;
0x001372        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x001373        D12A0001                 r0 = M[r8 + 1];
0x001374        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x001375        21AAFFFD                 r8 = r8 - -3;
0x001376        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x001377        D12AFFFE                 r0 = M[r8 + -2];
0x001378        E402002F                 Null = r0 + 1;
0x001379        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x00137A        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x00137B        DC0D000F                 rts;

 <$math.log2_abs_table>
0x00137C        D881000F                 r6 = SIGNDET rMAC;
0x00137D        93E80000                 rMAC = rMAC ASHIFT r6;
0x00137E        20100014                 if NEG rMAC = Null - rMAC;
0x00137F        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x001380        D881000F                 r6 = SIGNDET rMAC;
0x001381        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x001382        E488002F                 r6 = r6 + 1;
0x001383        91880010                 r6 = r6 ASHIFT 16;
0x001384        8D310002                 r1 = rMAC LSHIFT 2;
0x001385        8D33006D                 r1 = r1 LSHIFT -19;
0x001386        8D210007                 r0 = rMAC LSHIFT 7;
0x001387        8D22007F                 r0 = r0 LSHIFT -1;
0x001388        D1130300                 rMAC = M[r1 + 768];
0x001389        D1330301                 r1 = M[r1 + 769];
0x00138A        23310000                 r1 = r1 - rMAC;
0x00138B        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00138C        2021008F                 r0 = rMAC - r6;
0x00138D        DC0D000F                 rts;

 <$math.pow2_taylor>
0x00138E        F3010000                 push I0;
0x00138F        510000EC                 I0 = Null + 236;
0x001390        91920070                 r7 = r0 ASHIFT -16;
0x001391        8D820008                 r6 = r0 LSHIFT 8;
0x001392        8D88007F                 r6 = r6 LSHIFT -1;
0x001393        F3913100                 push M1, r1 = M[I0,1];
0x001394        51900001                 M1 = Null + 1;
0x001395        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x001396        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x001397        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x001398        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x001399        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x00139A        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x00139B        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x00139C        9023009F                 r0 = r1 ASHIFT r7;
0x00139D        F3950000                 pop M1;
0x00139E        F3050000                 pop I0;
0x00139F        DC0D000F                 rts;

 <$M.MUTE_CONTROL.Process.func>
0x0013A0        F3D00000                 push rLink;
0x0013A1        D1290000                 r0 = M[r7 + 0];
0x0013A2        E1F0010E                 call $frmbuffer.get_buffer;
0x0013A3        F3D40000                 pop rLink;
0x0013A4        D1490001                 r2 = M[r7 + 1];
0x0013A5        D1690002                 r4 = M[r7 + 2];
0x0013A6        D3400000                 r2 = M[r2 + Null];
0x0013A7        23640000                 r4 = r4 - r2;
0x0013A8        DD100006                 if NE jump $M.MUTE_CONTROL.Process.loop_mute;
0x0013A9        00C5000F                 r10 = r3 + Null;
0x0013AA        5000002F                 I0 = Null + r0;
0x0013AB        50C0003F                 L0 = Null + r1;
0x0013AC        E5F00002                 do $M.MUTE_CONTROL.Process.loop_mute;
0x0013AD        0300E100                 Null = Null + Null, M[I0,1] = r4;

 <$M.MUTE_CONTROL.Process.loop_mute>
0x0013AE        51C00000                 L0 = Null + 0;
0x0013AF        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x0013B0        91820070                 r6 = r0 ASHIFT -16;
0x0013B1        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x0013B2        FD00007F 0120FFFE        r0 = Null + 8388606;
0x0013B4        DC0D000F                 rts;

 <$math.pow2_table>
0x0013B5        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x0013B6        8D920008                 r7 = r0 LSHIFT 8;
0x0013B7        8D99006D                 r7 = r7 LSHIFT -19;
0x0013B8        E488002F                 r6 = r6 + 1;
0x0013B9        D1390321                 r1 = M[r7 + 801];
0x0013BA        D1990322                 r7 = M[r7 + 802];
0x0013BB        23930000                 r7 = r7 - r1;
0x0013BC        8D22000D                 r0 = r0 LSHIFT 13;
0x0013BD        8D22007F                 r0 = r0 LSHIFT -1;
0x0013BE        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x0013BF        9023008F                 r0 = r1 ASHIFT r6;
0x0013C0        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x0013C1        F3D00000                 push rLink;
0x0013C2        8122001F                 r0 = r0 AND 0x1f;
0x0013C3        2122000C                 r0 = r0 - 12;
0x0013C4        0900FE33                 Null = Null + M[0xfffe33];
0x0013C5        FD0000FF 09006917        Null = Null + M[$cbuffer.auto_mcu_message];
0x0013C7        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0013C8        D1322E35                 r1 = M[r0 + 11829];
0x0013C9        2103F000                 Null = r1 - -4096;
0x0013CA        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0013CB        85408003                 r2 = Null OR 0x8003;
0x0013CC        ED520001                 r3 = 0x1 ASHIFT r0;
0x0013CD        E1F0FF1A                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x0013CE        DDF00109                 jump $pop_rLink_and_rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x0013CF        F3D00000                 push rLink;
0x0013D0        D1290000                 r0 = M[r7 + 0];
0x0013D1        E1F000DF                 call $frmbuffer.get_buffer;
0x0013D2        5000002F                 I0 = Null + r0;
0x0013D3        50C0003F                 L0 = Null + r1;
0x0013D4        F3D40000                 pop rLink;
0x0013D5        51900001                 M1 = Null + 1;
0x0013D6        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x0013D7        D1590001                 r3 = M[r7 + 1];
0x0013D8        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x0013D9        E466004F                 r4 = ABS r4;
0x0013DA        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x0013DB        50C0000F                 L0 = Null + Null;
0x0013DC        D5590001                 M[r7 + 1] = r3;
0x0013DD        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x0013DE        F3D00000                 push rLink;
0x0013DF        8122001F                 r0 = r0 AND 0x1f;
0x0013E0        0900FE33                 Null = Null + M[0xfffe33];
0x0013E1        FD0000FF 09006917        Null = Null + M[$cbuffer.auto_mcu_message];
0x0013E3        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x0013E4        D1322E29                 r1 = M[r0 + 11817];
0x0013E5        2103F000                 Null = r1 - -4096;
0x0013E6        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x0013E7        85408002                 r2 = Null OR 0x8002;
0x0013E8        ED520001                 r3 = 0x1 ASHIFT r0;
0x0013E9        E1F0FEFE                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x0013EA        DDF000ED                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x0013EB        F3D00000                 push rLink;
0x0013EC        F3200000                 push r0;
0x0013ED        E1F000B4                 call $cbuffer.get_read_address_and_size;
0x0013EE        5000002F                 I0 = Null + r0;
0x0013EF        50C0003F                 L0 = Null + r1;
0x0013F0        50B000CF                 M3 = Null + r10;
0x0013F1        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x0013F2        F3240000                 pop r0;
0x0013F3        4430000F                 r1 = Null + I0;
0x0013F4        E1F000C1                 call $cbuffer.set_read_address;
0x0013F5        51C00000                 L0 = Null + 0;
0x0013F6        DDF000E1                 jump $pop_rLink_and_rts;

 <$cbops.limited_copy.amount_to_use>
0x0013F7        D12A0000                 r0 = M[r8 + 0];
0x0013F8        E402002F                 Null = r0 + 1;
0x0013F9        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_read_limit;
0x0013FA        2028002F                 r0 = r6 - r0;
0x0013FB        00200004                 if NEG r0 = Null + Null;
0x0013FC        2007002F                 Null = r5 - r0;
0x0013FD        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_read_limit>
0x0013FE        D12A0001                 r0 = M[r8 + 1];
0x0013FF        E402002F                 Null = r0 + 1;
0x001400        DD000005                 if EQ jump $M.cbops.limited_copy.amount_to_use.no_write_limit;
0x001401        2029002F                 r0 = r7 - r0;
0x001402        00200004                 if NEG r0 = Null + Null;
0x001403        2007002F                 Null = r5 - r0;
0x001404        00720005                 if POS r5 = r0 + Null;

 <$M.cbops.limited_copy.amount_to_use.no_write_limit>
0x001405        DC0D000F                 rts;

 <$frame_sync.distribute_read_insert_ind>
0x001406        20C000CF                 r10 = Null - r10;
0x001407        D14B0004                 r2 = M[r9 + 4];
0x001408        9144007F                 r2 = r2 ASHIFT -1;
0x001409        03C40000                 r10 = r10 + r2;
0x00140A        D14B000C                 r2 = M[r9 + 12];
0x00140B        034C0000                 r2 = r2 + r10;
0x00140C        D54B000C                 M[r9 + 12] = r2;
0x00140D        5010008F                 I1 = Null + r6;
0x00140E        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x00140F        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x001410        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x001411        03004500                 Null = Null + Null, r2 = M[I1,1];
0x001412        4480001F                 r6 = Null + I1;
0x001413        D5820001                 M[r0 + 1] = r6;
0x001414        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x001415        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x001416        D036000F                 r1 = M[r4 + Null];
0x001417        DD0000C0                 if EQ jump $pop_rLink_and_rts;
0x001418        D1460001                 r2 = M[r4 + 1];
0x001419        D1560002                 r3 = M[r4 + 2];
0x00141A        D1260003                 r0 = M[r4 + 3];
0x00141B        01660004                 r4 = r4 + 4;
0x00141C        FD0000FF 1960692B        M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x00141E        E002000F                 call r0;
0x00141F        FD0000FF 0960692B        r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x001421        DDF0FFF5                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.update_input_streams_ind>
0x001422        D15B0008                 r3 = M[r9 + 8];
0x001423        D14B0009                 r2 = M[r9 + 9];
0x001424        23540000                 r3 = r3 - r2;
0x001425        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x001426        D14B0004                 r2 = M[r9 + 4];
0x001427        9144007F                 r2 = r2 ASHIFT -1;
0x001428        03540000                 r3 = r3 + r2;
0x001429        D14B000C                 r2 = M[r9 + 12];
0x00142A        23450000                 r2 = r2 - r3;
0x00142B        D54B000C                 M[r9 + 12] = r2;
0x00142C        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x00142D        E422002F                 r0 = r0 + 1;
0x00142E        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x00142F        D12A000C                 r0 = M[r8 + 12];
0x001430        9462009F                 r4 = r0 * r7 (frac);
0x001431        2069006F                 r4 = r7 - r4;
0x001432        D10A0009                 Null = M[r8 + 9];
0x001433        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x001434        2126005F                 r0 = r4 - 95;
0x001435        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x001436        21660002                 r4 = r4 - 2;
0x001437        00600004                 if NEG r4 = Null + Null;
0x001438        2006007F                 Null = r4 - r5;
0x001439        00760004                 if NEG r5 = r4 + Null;
0x00143A        DC0D000F                 rts;

 <$frame_sync.distribute_output_stream_ind>
0x00143B        501000AF                 I1 = Null + r8;
0x00143C        238A0000                 r6 = r6 - r8;
0x00143D        0088003D                 if LE r6 = r6 + r1;
0x00143E        67890000                 r6 = r6 - M1;
0x00143F        70A8006F                 M2 = r6 - r4;
0x001440        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x001441        444000AF                 r2 = Null + M2;
0x001442        D54B000C                 M[r9 + 12] = r2;
0x001443        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x001444        4480001F                 r6 = Null + I1;
0x001445        D5820002                 M[r0 + 2] = r6;
0x001446        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x001447        D1C90002                 r10 = M[r7 + 2];
0x001448        0189000A                 r6 = r7 + 10;
0x001449        D1590004                 r3 = M[r7 + 4];
0x00144A        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x00144B        D1280002                 r0 = M[r6 + 2];
0x00144C        CC15002F                 rMAC = r3 * r0 (SS);
0x00144D        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x00144E        D5180003                 M[r6 + 3] = rMAC;
0x00144F        D5180004                 M[r6 + 4] = rMAC;
0x001450        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x001451        D5090008                 M[r7 + 8] = Null;
0x001452        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x001453        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x001454        D076000F                 r5 = M[r4 + Null];
0x001455        DD000082                 if EQ jump $pop_rLink_and_rts;
0x001456        D1960001                 r7 = M[r4 + 1];
0x001457        D1A60002                 r8 = M[r4 + 2];
0x001458        01660003                 r4 = r4 + 3;
0x001459        F3600000                 push r4;
0x00145A        E007000F                 call r5;
0x00145B        F3640000                 pop r4;
0x00145C        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$spdif_apply_realtime_config>
0x00145D        F3D00000                 push rLink;
0x00145E        8D230078                 r0 = r1 LSHIFT -8;
0x00145F        812200FF                 r0 = r0 AND 0xff;
0x001460        192038EA                 M[$spdif_target_latency_setting] = r0 + Null;
0x001461        01700000                 r5 = Null + 0;
0x001462        19700F4A                 M[0xf4a] = r5 + Null;
0x001463        E1F00048                 call $spdif_update_config_word;
0x001464        DDF00073                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space>
0x001465        D802000F                 Null = SIGNDET r0;
0x001466        DD00FC02                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x001467        D1420000                 r2 = M[r0 + 0];
0x001468        D1320002                 r1 = M[r0 + 2];
0x001469        D1220001                 r0 = M[r0 + 1];
0x00146A        23230000                 r0 = r0 - r1;
0x00146B        0022004D                 if LE r0 = r0 + r2;
0x00146C        E422003F                 r0 = r0 - 1;
0x00146D        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x00146E        F3D00000                 push rLink;
0x00146F        23A80000                 r8 = r8 - r6;
0x001470        00AA0034                 if NEG r8 = r8 + r1;
0x001471        20CA006F                 r10 = r8 - r4;
0x001472        E140FF94                 if NEG call $frame_sync.distribute_read_insert_ind;
0x001473        E1F0FE1C                 call $frame_sync.analyze_stream_ind;
0x001474        DDF00063                 jump $pop_rLink_and_rts;

 <$spdif_get_decoder_call_back>
0x001475        E1F00B77                 call $error;

 <$M.spdif_get_decoder_call_back.update_stats>
0x001476        FD0000FF 51605DA4        I6 = Null + -41564;
0x001478        01C00008                 r10 = Null + 8;
0x001479        E5F00003                 do $M.spdif_get_decoder_call_back.update_codec_stars;
0x00147A        03006900                 Null = Null + Null, r4 = M[I2,1];
0x00147B        030000E9                 Null = Null + Null, M[I6,1] = r4;

 <$M.spdif_get_decoder_call_back.update_codec_stars>
0x00147C        DC0D000F                 rts;

 <$cbuffer.calc_amount_data>
0x00147D        D802000F                 Null = SIGNDET r0;
0x00147E        DD00FC8F                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x00147F        D1420000                 r2 = M[r0 + 0];
0x001480        D1320002                 r1 = M[r0 + 2];
0x001481        D1220001                 r0 = M[r0 + 1];
0x001482        2023002F                 r0 = r1 - r0;
0x001483        00220044                 if NEG r0 = r0 + r2;
0x001484        DC0D000F                 rts;

 <$interrupt.unblock>
0x001485        09203919                 r0 = Null + M[$interrupt.block_count];
0x001486        E1000B66                 if EQ call $error;
0x001487        E422003F                 r0 = r0 - 1;
0x001488        19203919                 M[$interrupt.block_count] = r0 + Null;
0x001489        DC0D0001                 if NE rts;
0x00148A        E420002F                 r0 = Null + 1;
0x00148B        1920FE12                 M[0xfffe12] = r0 + Null;
0x00148C        DC0D000F                 rts;

 <$block_interrupts>
0x00148D        09203919                 r0 = Null + M[$interrupt.block_count];
0x00148E        E422002F                 r0 = r0 + 1;
0x00148F        19203919                 M[$interrupt.block_count] = r0 + Null;
0x001490        1900FE12                 M[0xfffe12] = Null + Null;
0x001491        03000000                 Null = Null + Null;
0x001492        03000000                 Null = Null + Null;
0x001493        DC0D000F                 rts;

 <$message.send_queue_space>
0x001494        FD0000FF 0920691A        r0 = Null + M[$message.queue_read_ptr];
0x001496        2922391B                 r0 = r0 - M[$message.queue_write_ptr];
0x001497        E422003F                 r0 = r0 - 1;
0x001498        DC0D0005                 if POS rts;
0x001499        0122006E                 r0 = r0 + 110;
0x00149A        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x00149B        D802000F                 Null = SIGNDET r0;
0x00149C        DC0D0001                 if NE rts;
0x00149D        8122001F                 r0 = r0 AND 0x1f;
0x00149E        FD0000FF D1025E26        Null = M[r0 + -41434];
0x0014A0        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x0014A1        D802000F                 Null = SIGNDET r0;
0x0014A2        DD00FA9A                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x0014A3        D1320000                 r1 = M[r0 + 0];
0x0014A4        D1220001                 r0 = M[r0 + 1];
0x0014A5        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x0014A6        D802000F                 Null = SIGNDET r0;
0x0014A7        DD00FA67                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x0014A8        D1320000                 r1 = M[r0 + 0];
0x0014A9        D1220002                 r0 = M[r0 + 2];
0x0014AA        DC0D000F                 rts;

 <$spdif_update_config_word>
0x0014AB        092038EA                 r0 = Null + M[$spdif_target_latency_setting];
0x0014AC        8D220008                 r0 = r0 LSHIFT 8;
0x0014AD        09400F4A                 r2 = Null + M[0xf4a];
0x0014AE        192038EE                 M[$spdif_config_word] = r0 + Null;
0x0014AF        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x0014B0        D1520002                 r3 = M[r0 + 2];
0x0014B1        D1420000                 r2 = M[r0 + 0];
0x0014B2        D1220001                 r0 = M[r0 + 1];
0x0014B3        D1340000                 r1 = M[r2 + 0];
0x0014B4        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x0014B5        D802000F                 Null = SIGNDET r0;
0x0014B6        DD00FF28                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x0014B7        D5320001                 M[r0 + 1] = r1;
0x0014B8        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x0014B9        D802000F                 Null = SIGNDET r0;
0x0014BA        DD00FF07                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x0014BB        D5320002                 M[r0 + 2] = r1;
0x0014BC        DC0D000F                 rts;

 <$message.send>
0x0014BD        2104FFFE                 Null = r2 - -2;
0x0014BE        DD00FAFE                 if EQ jump $message.send_long;
0x0014BF        DDF0FE28                 jump $message.send_short;

 <$cbops.deinterleave.amount_to_use>
0x0014C0        8D77007F                 r5 = r5 LSHIFT -1;
0x0014C1        2007009F                 Null = r5 - r7;
0x0014C2        00790005                 if POS r5 = r7 + Null;
0x0014C3        8D770001                 r5 = r5 LSHIFT 1;
0x0014C4        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x0014C5        8D220002                 r0 = r0 LSHIFT 2;
0x0014C6        01103D09                 rMAC = Null + 15625;
0x0014C7        D9020000                 Div = rMAC / r0;
0x0014C8        D9200001                 r0 = DivResult;
0x0014C9        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x0014CA        D1230001                 r0 = M[r1 + 1];
0x0014CB        03420000                 r2 = r2 + r0;
0x0014CC        DDF0FBC2                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x0014CD        0944FE71                 r2 = r2 + M[0xfffe71];
0x0014CE        DDF0FBC0                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x0014CF        01500000                 r3 = Null + 0;
0x0014D0        DDF0FE9A                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x0014D1        E450002F                 r3 = Null + 1;
0x0014D2        DDF0FE98                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x0014D3        01500002                 r3 = Null + 2;
0x0014D4        DDF0FE96                 jump $cbops.switch_op.helper;

 <$frmbuffer.set_frame_size>
0x0014D5        D5520002                 M[r0 + 2] = r3;
0x0014D6        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x0014D7        F3D40000                 pop rLink;
0x0014D8        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x0014D9        D50A0002                 M[r8 + 2] = Null;
0x0014DA        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x0014DB        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x0014DC        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x0014DD        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x0014DE        F3010000                 push I0;
0x0014DF        FD0000FF 51005EE8        I0 = Null + -41240;
0x0014E1        E1F0054B                 call $kal_float_lib.div;
0x0014E2        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0014E3        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0014E4        E1F00516                 call $kal_float_lib.mul;
0x0014E5        0042000F                 r2 = r0 + Null;
0x0014E6        0053000F                 r3 = r1 + Null;
0x0014E7        0062000F                 r4 = r0 + Null;
0x0014E8        0073000F                 r5 = r1 + Null;
0x0014E9        E1F00511                 call $kal_float_lib.mul;
0x0014EA        0082000F                 r6 = r0 + Null;
0x0014EB        0093000F                 r7 = r1 + Null;
0x0014EC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0014ED        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0014EE        01C00005                 r10 = Null + 5;
0x0014EF        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x0014F0        0048000F                 r2 = r6 + Null;
0x0014F1        0059000F                 r3 = r7 + Null;
0x0014F2        E1F00508                 call $kal_float_lib.mul;
0x0014F3        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0014F4        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0014F5        E1F004F3                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x0014F6        0046000F                 r2 = r4 + Null;
0x0014F7        0057000F                 r3 = r5 + Null;
0x0014F8        E1F00502                 call $kal_float_lib.mul;
0x0014F9        F3050000                 pop I0;
0x0014FA        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x0014FB        F3D40000                 pop rLink;
0x0014FC        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x0014FD        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x0014FE        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x0014FF        F3010000                 push I0;
0x001500        51002F22                 I0 = Null + 12066;
0x001501        0062000F                 r4 = r0 + Null;
0x001502        0073000F                 r5 = r1 + Null;
0x001503        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001504        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x001505        E1F00527                 call $kal_float_lib.div;
0x001506        0042000F                 r2 = r0 + Null;
0x001507        0053000F                 r3 = r1 + Null;
0x001508        E1F004D3                 call $kal_float_lib.float_to_int;
0x001509        0082000F                 r6 = r0 + Null;
0x00150A        E1F004CB                 call $kal_float_lib.int_to_float;
0x00150B        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00150C        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00150D        E1F004ED                 call $kal_float_lib.mul;
0x00150E        0042000F                 r2 = r0 + Null;
0x00150F        0053000F                 r3 = r1 + Null;
0x001510        0026000F                 r0 = r4 + Null;
0x001511        0037000F                 r1 = r5 + Null;
0x001512        E1F004DF                 call $kal_float_lib.sub;
0x001513        0062000F                 r4 = r0 + Null;
0x001514        0073000F                 r5 = r1 + Null;
0x001515        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001516        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001517        01C00003                 r10 = Null + 3;
0x001518        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x001519        0046000F                 r2 = r4 + Null;
0x00151A        0057000F                 r3 = r5 + Null;
0x00151B        E1F004DF                 call $kal_float_lib.mul;
0x00151C        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00151D        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00151E        E1F004CA                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x00151F        03280000                 r0 = r0 + r6;
0x001520        F3050000                 pop I0;
0x001521        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x001522        F3D40000                 pop rLink;
0x001523        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x001524        F1002001                 pushm <FP(=SP), rLink>;
0x001525        012000FF                 r0 = Null + 255;
0x001526        F1387FF6                 r1 = M[FP + -0xa];
0x001527        83320000                 r1 = r1 AND r0;
0x001528        F1487FF8                 r2 = M[FP + -0x8];
0x001529        83420000                 r2 = r2 AND r0;
0x00152A        E434006F                 r1 = MAX r2;
0x00152B        F1487FFA                 r2 = M[FP + -0x6];
0x00152C        83420000                 r2 = r2 AND r0;
0x00152D        E434006F                 r1 = MAX r2;
0x00152E        F1487FFC                 r2 = M[FP + -0x4];
0x00152F        83420000                 r2 = r2 AND r0;
0x001530        E434006F                 r1 = MAX r2;
0x001531        F1487FFE                 r2 = M[FP + -0x2];
0x001532        83420000                 r2 = r2 AND r0;
0x001533        E434006F                 r1 = MAX r2;
0x001534        2143007F                 r2 = r1 - 127;
0x001535        F1287FF6                 r0 = M[FP + -0xa];
0x001536        F1387FF7                 r1 = M[FP + -0x9];
0x001537        23240000                 r0 = r0 - r2;
0x001538        E1F004A8                 call $kal_float_lib.float_to_frac;
0x001539        F12C7FF0                 M[FP + -0x10] = r0;
0x00153A        F1287FF8                 r0 = M[FP + -0x8];
0x00153B        F1387FF9                 r1 = M[FP + -0x7];
0x00153C        23240000                 r0 = r0 - r2;
0x00153D        E1F004A3                 call $kal_float_lib.float_to_frac;
0x00153E        F12C7FF1                 M[FP + -0xf] = r0;
0x00153F        F1287FFA                 r0 = M[FP + -0x6];
0x001540        F1387FFB                 r1 = M[FP + -0x5];
0x001541        23240000                 r0 = r0 - r2;
0x001542        E1F0049E                 call $kal_float_lib.float_to_frac;
0x001543        F12C7FF2                 M[FP + -0xe] = r0;
0x001544        F1287FFC                 r0 = M[FP + -0x4];
0x001545        F1387FFD                 r1 = M[FP + -0x3];
0x001546        23240000                 r0 = r0 - r2;
0x001547        E1F00499                 call $kal_float_lib.float_to_frac;
0x001548        F12C7FF3                 M[FP + -0xd] = r0;
0x001549        F1287FFE                 r0 = M[FP + -0x2];
0x00154A        F1387FFF                 r1 = M[FP + -0x1];
0x00154B        23240000                 r0 = r0 - r2;
0x00154C        E1F00494                 call $kal_float_lib.float_to_frac;
0x00154D        F12C7FF4                 M[FP + -0xc] = r0;
0x00154E        F14C7FF5                 M[FP + -0xb] = r2;
0x00154F        F1042001                 popm <FP, rLink>;
0x001550        F103FFF6                 SP = SP + -10;
0x001551        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x001552        F1002005                 pushm <FP(=SP), r0, rLink>;
0x001553        E420002F                 r0 = Null + 1;
0x001554        F12C7FFA                 M[FP + -0x6] = r0;
0x001555        01200000                 r0 = Null + 0;
0x001556        F12C7FFC                 M[FP + -0x4] = r0;
0x001557        F12C7FFB                 M[FP + -0x5] = r0;
0x001558        F12C7FFF                 M[FP + -0x1] = r0;
0x001559        F12C7FFE                 M[FP + -0x2] = r0;
0x00155A        FD000040 01200000        r0 = Null + 4194304;
0x00155C        F12C7FFD                 M[FP + -0x3] = r0;
0x00155D        F1042005                 popm <FP, r0, rLink>;
0x00155E        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x00155F        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001560        F1287FFC                 r0 = M[FP + -0x4];
0x001561        F1387FFD                 r1 = M[FP + -0x3];
0x001562        F1487FFE                 r2 = M[FP + -0x2];
0x001563        F1587FFF                 r3 = M[FP + -0x1];
0x001564        E1F0FF78                 call $kal_filter_coef_lib.__warp;
0x001565        0062000F                 r4 = r0 + Null;
0x001566        0073000F                 r5 = r1 + Null;
0x001567        01400080                 r2 = Null + 128;
0x001568        FD000080 01500000        r3 = Null + -8388608;
0x00156A        E1F0047E                 call $kal_float_lib.add;
0x00156B        E1F004A4                 call $kal_float_lib.recip;
0x00156C        0082000F                 r6 = r0 + Null;
0x00156D        0093000F                 r7 = r1 + Null;
0x00156E        0046000F                 r2 = r4 + Null;
0x00156F        0057000F                 r3 = r5 + Null;
0x001570        E1F0048A                 call $kal_float_lib.mul;
0x001571        F1030006                 SP = SP + 6;
0x001572        F100000C                 pushm <r0, r1>;
0x001573        F100000C                 pushm <r0, r1>;
0x001574        01200000                 r0 = Null + 0;
0x001575        01300000                 r1 = Null + 0;
0x001576        F100000C                 pushm <r0, r1>;
0x001577        0026000F                 r0 = r4 + Null;
0x001578        0037000F                 r1 = r5 + Null;
0x001579        01400080                 r2 = Null + 128;
0x00157A        FD000080 01500000        r3 = Null + -8388608;
0x00157C        E1F00475                 call $kal_float_lib.sub;
0x00157D        0048000F                 r2 = r6 + Null;
0x00157E        0059000F                 r3 = r7 + Null;
0x00157F        E1F0047B                 call $kal_float_lib.mul;
0x001580        F100000C                 pushm <r0, r1>;
0x001581        01200000                 r0 = Null + 0;
0x001582        01300000                 r1 = Null + 0;
0x001583        F100000C                 pushm <r0, r1>;
0x001584        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x001585        F3240000                 pop r0;
0x001586        F12C7FF6                 M[FP + -0xa] = r0;
0x001587        F3240000                 pop r0;
0x001588        F12C7FF8                 M[FP + -0x8] = r0;
0x001589        F3240000                 pop r0;
0x00158A        F12C7FF7                 M[FP + -0x9] = r0;
0x00158B        F3240000                 pop r0;
0x00158C        F12C7FFB                 M[FP + -0x5] = r0;
0x00158D        F3240000                 pop r0;
0x00158E        F12C7FFA                 M[FP + -0x6] = r0;
0x00158F        F3240000                 pop r0;
0x001590        F12C7FF9                 M[FP + -0x7] = r0;
0x001591        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001592        F103FFFC                 SP = SP + -4;
0x001593        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x001594        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001595        F1287FFC                 r0 = M[FP + -0x4];
0x001596        F1387FFD                 r1 = M[FP + -0x3];
0x001597        F1487FFE                 r2 = M[FP + -0x2];
0x001598        F1587FFF                 r3 = M[FP + -0x1];
0x001599        E1F0FF43                 call $kal_filter_coef_lib.__warp;
0x00159A        0062000F                 r4 = r0 + Null;
0x00159B        0073000F                 r5 = r1 + Null;
0x00159C        01400080                 r2 = Null + 128;
0x00159D        FD000080 01500000        r3 = Null + -8388608;
0x00159F        E1F00449                 call $kal_float_lib.add;
0x0015A0        E1F0046F                 call $kal_float_lib.recip;
0x0015A1        0082000F                 r6 = r0 + Null;
0x0015A2        0093000F                 r7 = r1 + Null;
0x0015A3        F1030006                 SP = SP + 6;
0x0015A4        F100000C                 pushm <r0, r1>;
0x0015A5        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015A7        F100000C                 pushm <r0, r1>;
0x0015A8        01200000                 r0 = Null + 0;
0x0015A9        01300000                 r1 = Null + 0;
0x0015AA        F100000C                 pushm <r0, r1>;
0x0015AB        0026000F                 r0 = r4 + Null;
0x0015AC        0037000F                 r1 = r5 + Null;
0x0015AD        01400080                 r2 = Null + 128;
0x0015AE        FD000080 01500000        r3 = Null + -8388608;
0x0015B0        E1F00441                 call $kal_float_lib.sub;
0x0015B1        0048000F                 r2 = r6 + Null;
0x0015B2        0059000F                 r3 = r7 + Null;
0x0015B3        E1F00447                 call $kal_float_lib.mul;
0x0015B4        F100000C                 pushm <r0, r1>;
0x0015B5        01200000                 r0 = Null + 0;
0x0015B6        01300000                 r1 = Null + 0;
0x0015B7        F100000C                 pushm <r0, r1>;
0x0015B8        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0015B9        F3240000                 pop r0;
0x0015BA        F12C7FF6                 M[FP + -0xa] = r0;
0x0015BB        F3240000                 pop r0;
0x0015BC        F12C7FF8                 M[FP + -0x8] = r0;
0x0015BD        F3240000                 pop r0;
0x0015BE        F12C7FF7                 M[FP + -0x9] = r0;
0x0015BF        F3240000                 pop r0;
0x0015C0        F12C7FFB                 M[FP + -0x5] = r0;
0x0015C1        F3240000                 pop r0;
0x0015C2        F12C7FFA                 M[FP + -0x6] = r0;
0x0015C3        F3240000                 pop r0;
0x0015C4        F12C7FF9                 M[FP + -0x7] = r0;
0x0015C5        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015C6        F103FFFC                 SP = SP + -4;
0x0015C7        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x0015C8        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015C9        F1287FFC                 r0 = M[FP + -0x4];
0x0015CA        F1387FFD                 r1 = M[FP + -0x3];
0x0015CB        F1487FFE                 r2 = M[FP + -0x2];
0x0015CC        F1587FFF                 r3 = M[FP + -0x1];
0x0015CD        E1F0FF0F                 call $kal_filter_coef_lib.__warp;
0x0015CE        0062000F                 r4 = r0 + Null;
0x0015CF        0073000F                 r5 = r1 + Null;
0x0015D0        01400080                 r2 = Null + 128;
0x0015D1        FD000080 01500000        r3 = Null + -8388608;
0x0015D3        E1F00415                 call $kal_float_lib.add;
0x0015D4        E1F0043B                 call $kal_float_lib.recip;
0x0015D5        0082000F                 r6 = r0 + Null;
0x0015D6        0093000F                 r7 = r1 + Null;
0x0015D7        F1030006                 SP = SP + 6;
0x0015D8        01200080                 r0 = Null + 128;
0x0015D9        FD000080 01300000        r1 = Null + -8388608;
0x0015DB        0046000F                 r2 = r4 + Null;
0x0015DC        0057000F                 r3 = r5 + Null;
0x0015DD        E1F00414                 call $kal_float_lib.sub;
0x0015DE        0048000F                 r2 = r6 + Null;
0x0015DF        0059000F                 r3 = r7 + Null;
0x0015E0        E1F0041A                 call $kal_float_lib.mul;
0x0015E1        F100000C                 pushm <r0, r1>;
0x0015E2        0042000F                 r2 = r0 + Null;
0x0015E3        0053000F                 r3 = r1 + Null;
0x0015E4        01200080                 r0 = Null + 128;
0x0015E5        FD000080 01300000        r1 = Null + -8388608;
0x0015E7        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015E9        F100000C                 pushm <r0, r1>;
0x0015EA        01200000                 r0 = Null + 0;
0x0015EB        01300000                 r1 = Null + 0;
0x0015EC        F100000C                 pushm <r0, r1>;
0x0015ED        0024000F                 r0 = r2 + Null;
0x0015EE        0035000F                 r1 = r3 + Null;
0x0015EF        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015F1        F100000C                 pushm <r0, r1>;
0x0015F2        01200000                 r0 = Null + 0;
0x0015F3        01300000                 r1 = Null + 0;
0x0015F4        F100000C                 pushm <r0, r1>;
0x0015F5        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x0015F6        F3240000                 pop r0;
0x0015F7        F12C7FF6                 M[FP + -0xa] = r0;
0x0015F8        F3240000                 pop r0;
0x0015F9        F12C7FF8                 M[FP + -0x8] = r0;
0x0015FA        F3240000                 pop r0;
0x0015FB        F12C7FF7                 M[FP + -0x9] = r0;
0x0015FC        F3240000                 pop r0;
0x0015FD        F12C7FFB                 M[FP + -0x5] = r0;
0x0015FE        F3240000                 pop r0;
0x0015FF        F12C7FFA                 M[FP + -0x6] = r0;
0x001600        F3240000                 pop r0;
0x001601        F12C7FF9                 M[FP + -0x7] = r0;
0x001602        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001603        F103FFFC                 SP = SP + -4;
0x001604        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x001605        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001606        F1030004                 SP = SP + 4;
0x001607        F1287FF8                 r0 = M[FP + -0x8];
0x001608        F1387FF9                 r1 = M[FP + -0x7];
0x001609        F1487FFE                 r2 = M[FP + -0x2];
0x00160A        F1587FFF                 r3 = M[FP + -0x1];
0x00160B        E1F0FED1                 call $kal_filter_coef_lib.__warp;
0x00160C        0062000F                 r4 = r0 + Null;
0x00160D        0073000F                 r5 = r1 + Null;
0x00160E        F1287FFC                 r0 = M[FP + -0x4];
0x00160F        F1387FFD                 r1 = M[FP + -0x3];
0x001610        E1F0FEED                 call $kal_filter_coef_lib.__db2lin;
0x001611        F12C000C                 M[FP + 0xc] = r0;
0x001612        F13C000D                 M[FP + 0xd] = r1;
0x001613        F1287FFA                 r0 = M[FP + -0x6];
0x001614        F1387FFB                 r1 = M[FP + -0x5];
0x001615        E422003F                 r0 = r0 - 1;
0x001616        E1F0FEE7                 call $kal_filter_coef_lib.__db2lin;
0x001617        0042000F                 r2 = r0 + Null;
0x001618        0053000F                 r3 = r1 + Null;
0x001619        0026000F                 r0 = r4 + Null;
0x00161A        0037000F                 r1 = r5 + Null;
0x00161B        E1F00411                 call $kal_float_lib.div;
0x00161C        0082000F                 r6 = r0 + Null;
0x00161D        0093000F                 r7 = r1 + Null;
0x00161E        0026000F                 r0 = r4 + Null;
0x00161F        0037000F                 r1 = r5 + Null;
0x001620        E1F003DA                 call $kal_float_lib.mul;
0x001621        0062000F                 r4 = r0 + Null;
0x001622        0073000F                 r5 = r1 + Null;
0x001623        0028000F                 r0 = r6 + Null;
0x001624        0039000F                 r1 = r7 + Null;
0x001625        01400080                 r2 = Null + 128;
0x001626        FD000080 01500000        r3 = Null + -8388608;
0x001628        E1F003C0                 call $kal_float_lib.add;
0x001629        E1F003E6                 call $kal_float_lib.recip;
0x00162A        F12C000A                 M[FP + 0xa] = r0;
0x00162B        F13C000B                 M[FP + 0xb] = r1;
0x00162C        F1030006                 SP = SP + 6;
0x00162D        0026000F                 r0 = r4 + Null;
0x00162E        0037000F                 r1 = r5 + Null;
0x00162F        01400080                 r2 = Null + 128;
0x001630        FD000080 01500000        r3 = Null + -8388608;
0x001632        E1F003B6                 call $kal_float_lib.add;
0x001633        F148000A                 r2 = M[FP + 0xa];
0x001634        F158000B                 r3 = M[FP + 0xb];
0x001635        E1F003C5                 call $kal_float_lib.mul;
0x001636        F148000C                 r2 = M[FP + 0xc];
0x001637        F158000D                 r3 = M[FP + 0xd];
0x001638        E1F003C2                 call $kal_float_lib.mul;
0x001639        F100000C                 pushm <r0, r1>;
0x00163A        0026000F                 r0 = r4 + Null;
0x00163B        0037000F                 r1 = r5 + Null;
0x00163C        01400080                 r2 = Null + 128;
0x00163D        FD000080 01500000        r3 = Null + -8388608;
0x00163F        E1F003B2                 call $kal_float_lib.sub;
0x001640        F148000A                 r2 = M[FP + 0xa];
0x001641        F158000B                 r3 = M[FP + 0xb];
0x001642        E1F003B8                 call $kal_float_lib.mul;
0x001643        F148000C                 r2 = M[FP + 0xc];
0x001644        F158000D                 r3 = M[FP + 0xd];
0x001645        E1F003B5                 call $kal_float_lib.mul;
0x001646        F100000C                 pushm <r0, r1>;
0x001647        01200000                 r0 = Null + 0;
0x001648        01300000                 r1 = Null + 0;
0x001649        F100000C                 pushm <r0, r1>;
0x00164A        0028000F                 r0 = r6 + Null;
0x00164B        0039000F                 r1 = r7 + Null;
0x00164C        01400080                 r2 = Null + 128;
0x00164D        FD000080 01500000        r3 = Null + -8388608;
0x00164F        E1F003A2                 call $kal_float_lib.sub;
0x001650        F148000A                 r2 = M[FP + 0xa];
0x001651        F158000B                 r3 = M[FP + 0xb];
0x001652        E1F003A8                 call $kal_float_lib.mul;
0x001653        F100000C                 pushm <r0, r1>;
0x001654        01200000                 r0 = Null + 0;
0x001655        01300000                 r1 = Null + 0;
0x001656        F100000C                 pushm <r0, r1>;
0x001657        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x001658        F3240000                 pop r0;
0x001659        F12C7FF7                 M[FP + -0x9] = r0;
0x00165A        F3240000                 pop r0;
0x00165B        F12C7FF6                 M[FP + -0xa] = r0;
0x00165C        F3240000                 pop r0;
0x00165D        F12C7FF5                 M[FP + -0xb] = r0;
0x00165E        F3240000                 pop r0;
0x00165F        F12C7FF4                 M[FP + -0xc] = r0;
0x001660        F3240000                 pop r0;
0x001661        F12C7FF3                 M[FP + -0xd] = r0;
0x001662        F3240000                 pop r0;
0x001663        F12C7FF2                 M[FP + -0xe] = r0;
0x001664        F103FFFC                 SP = SP + -4;
0x001665        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001666        F103FFF8                 SP = SP + -8;
0x001667        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x001668        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001669        F1030006                 SP = SP + 6;
0x00166A        F1287FFA                 r0 = M[FP + -0x6];
0x00166B        F1387FFB                 r1 = M[FP + -0x5];
0x00166C        F100000C                 pushm <r0, r1>;
0x00166D        F1287FFC                 r0 = M[FP + -0x4];
0x00166E        F1387FFD                 r1 = M[FP + -0x3];
0x00166F        F100000C                 pushm <r0, r1>;
0x001670        01200000                 r0 = Null + 0;
0x001671        01300000                 r1 = Null + 0;
0x001672        F100000C                 pushm <r0, r1>;
0x001673        F1287FFE                 r0 = M[FP + -0x2];
0x001674        F1387FFF                 r1 = M[FP + -0x1];
0x001675        F100000C                 pushm <r0, r1>;
0x001676        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001677        F3240000                 pop r0;
0x001678        F12C7FF4                 M[FP + -0xc] = r0;
0x001679        F3240000                 pop r0;
0x00167A        F12C7FF6                 M[FP + -0xa] = r0;
0x00167B        F3240000                 pop r0;
0x00167C        F12C7FF5                 M[FP + -0xb] = r0;
0x00167D        F3240000                 pop r0;
0x00167E        F12C7FF9                 M[FP + -0x7] = r0;
0x00167F        F3240000                 pop r0;
0x001680        F12C7FF8                 M[FP + -0x8] = r0;
0x001681        F3240000                 pop r0;
0x001682        F12C7FF7                 M[FP + -0x9] = r0;
0x001683        F104200D                 popm <FP, r0, r1, rLink>;
0x001684        F103FFFA                 SP = SP + -6;
0x001685        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x001686        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001687        F1030006                 SP = SP + 6;
0x001688        F1287FFA                 r0 = M[FP + -0x6];
0x001689        F1387FFB                 r1 = M[FP + -0x5];
0x00168A        F100000C                 pushm <r0, r1>;
0x00168B        F1287FFC                 r0 = M[FP + -0x4];
0x00168C        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00168E        F1387FFD                 r1 = M[FP + -0x3];
0x00168F        F100000C                 pushm <r0, r1>;
0x001690        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001692        F100000C                 pushm <r0, r1>;
0x001693        F1287FFE                 r0 = M[FP + -0x2];
0x001694        F1387FFF                 r1 = M[FP + -0x1];
0x001695        F100000C                 pushm <r0, r1>;
0x001696        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001697        F3240000                 pop r0;
0x001698        F12C7FF4                 M[FP + -0xc] = r0;
0x001699        F3240000                 pop r0;
0x00169A        F12C7FF6                 M[FP + -0xa] = r0;
0x00169B        F3240000                 pop r0;
0x00169C        F12C7FF5                 M[FP + -0xb] = r0;
0x00169D        F3240000                 pop r0;
0x00169E        F12C7FF9                 M[FP + -0x7] = r0;
0x00169F        F3240000                 pop r0;
0x0016A0        F12C7FF8                 M[FP + -0x8] = r0;
0x0016A1        F3240000                 pop r0;
0x0016A2        F12C7FF7                 M[FP + -0x9] = r0;
0x0016A3        F104200D                 popm <FP, r0, r1, rLink>;
0x0016A4        F103FFFA                 SP = SP + -6;
0x0016A5        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x0016A6        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0016A7        F1030006                 SP = SP + 6;
0x0016A8        F1287FFA                 r0 = M[FP + -0x6];
0x0016A9        F1387FFB                 r1 = M[FP + -0x5];
0x0016AA        F100000C                 pushm <r0, r1>;
0x0016AB        F1287FFC                 r0 = M[FP + -0x4];
0x0016AC        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0016AE        F1387FFD                 r1 = M[FP + -0x3];
0x0016AF        F100000C                 pushm <r0, r1>;
0x0016B0        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0016B2        E422003F                 r0 = r0 - 1;
0x0016B3        F100000C                 pushm <r0, r1>;
0x0016B4        F1287FFE                 r0 = M[FP + -0x2];
0x0016B5        F1387FFF                 r1 = M[FP + -0x1];
0x0016B6        F100000C                 pushm <r0, r1>;
0x0016B7        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0016B8        F3240000                 pop r0;
0x0016B9        F12C7FF4                 M[FP + -0xc] = r0;
0x0016BA        F3240000                 pop r0;
0x0016BB        F12C7FF6                 M[FP + -0xa] = r0;
0x0016BC        F3240000                 pop r0;
0x0016BD        F12C7FF5                 M[FP + -0xb] = r0;
0x0016BE        F3240000                 pop r0;
0x0016BF        F12C7FF9                 M[FP + -0x7] = r0;
0x0016C0        F3240000                 pop r0;
0x0016C1        F12C7FF8                 M[FP + -0x8] = r0;
0x0016C2        F3240000                 pop r0;
0x0016C3        F12C7FF7                 M[FP + -0x9] = r0;
0x0016C4        F104200D                 popm <FP, r0, r1, rLink>;
0x0016C5        F103FFFA                 SP = SP + -6;
0x0016C6        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x0016C7        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0016C8        F1030002                 SP = SP + 2;
0x0016C9        F1287FFA                 r0 = M[FP + -0x6];
0x0016CA        F1387FFB                 r1 = M[FP + -0x5];
0x0016CB        F1487FFE                 r2 = M[FP + -0x2];
0x0016CC        F1587FFF                 r3 = M[FP + -0x1];
0x0016CD        E1F0FE0F                 call $kal_filter_coef_lib.__warp;
0x0016CE        0042000F                 r2 = r0 + Null;
0x0016CF        0053000F                 r3 = r1 + Null;
0x0016D0        E1F0032A                 call $kal_float_lib.mul;
0x0016D1        0082000F                 r6 = r0 + Null;
0x0016D2        0093000F                 r7 = r1 + Null;
0x0016D3        0024000F                 r0 = r2 + Null;
0x0016D4        0035000F                 r1 = r3 + Null;
0x0016D5        F1487FFC                 r2 = M[FP + -0x4];
0x0016D6        F1587FFD                 r3 = M[FP + -0x3];
0x0016D7        E1F00355                 call $kal_float_lib.div;
0x0016D8        0062000F                 r4 = r0 + Null;
0x0016D9        0073000F                 r5 = r1 + Null;
0x0016DA        0048000F                 r2 = r6 + Null;
0x0016DB        0059000F                 r3 = r7 + Null;
0x0016DC        E1F0030C                 call $kal_float_lib.add;
0x0016DD        01400080                 r2 = Null + 128;
0x0016DE        FD000080 01500000        r3 = Null + -8388608;
0x0016E0        E1F00308                 call $kal_float_lib.add;
0x0016E1        E1F0032E                 call $kal_float_lib.recip;
0x0016E2        F12C000A                 M[FP + 0xa] = r0;
0x0016E3        F13C000B                 M[FP + 0xb] = r1;
0x0016E4        F1030006                 SP = SP + 6;
0x0016E5        0028000F                 r0 = r6 + Null;
0x0016E6        0039000F                 r1 = r7 + Null;
0x0016E7        F148000A                 r2 = M[FP + 0xa];
0x0016E8        F158000B                 r3 = M[FP + 0xb];
0x0016E9        E1F00311                 call $kal_float_lib.mul;
0x0016EA        F100000C                 pushm <r0, r1>;
0x0016EB        E422002F                 r0 = r0 + 1;
0x0016EC        F100000C                 pushm <r0, r1>;
0x0016ED        E422003F                 r0 = r0 - 1;
0x0016EE        F100000C                 pushm <r0, r1>;
0x0016EF        0028000F                 r0 = r6 + Null;
0x0016F0        0039000F                 r1 = r7 + Null;
0x0016F1        01400081                 r2 = Null + 129;
0x0016F2        FD000080 01500000        r3 = Null + -8388608;
0x0016F4        E1F00306                 call $kal_float_lib.mul;
0x0016F5        E1F002FC                 call $kal_float_lib.sub;
0x0016F6        F148000A                 r2 = M[FP + 0xa];
0x0016F7        F158000B                 r3 = M[FP + 0xb];
0x0016F8        E1F00302                 call $kal_float_lib.mul;
0x0016F9        F100000C                 pushm <r0, r1>;
0x0016FA        0028000F                 r0 = r6 + Null;
0x0016FB        0039000F                 r1 = r7 + Null;
0x0016FC        0046000F                 r2 = r4 + Null;
0x0016FD        0057000F                 r3 = r5 + Null;
0x0016FE        E1F002F3                 call $kal_float_lib.sub;
0x0016FF        01400080                 r2 = Null + 128;
0x001700        FD000080 01500000        r3 = Null + -8388608;
0x001702        E1F002E6                 call $kal_float_lib.add;
0x001703        F148000A                 r2 = M[FP + 0xa];
0x001704        F158000B                 r3 = M[FP + 0xb];
0x001705        E1F002F5                 call $kal_float_lib.mul;
0x001706        F100000C                 pushm <r0, r1>;
0x001707        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x001708        F3240000                 pop r0;
0x001709        F12C7FF4                 M[FP + -0xc] = r0;
0x00170A        F3240000                 pop r0;
0x00170B        F12C7FF6                 M[FP + -0xa] = r0;
0x00170C        F3240000                 pop r0;
0x00170D        F12C7FF5                 M[FP + -0xb] = r0;
0x00170E        F3240000                 pop r0;
0x00170F        F12C7FF9                 M[FP + -0x7] = r0;
0x001710        F3240000                 pop r0;
0x001711        F12C7FF8                 M[FP + -0x8] = r0;
0x001712        F3240000                 pop r0;
0x001713        F12C7FF7                 M[FP + -0x9] = r0;
0x001714        F103FFFE                 SP = SP + -2;
0x001715        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001716        F103FFFA                 SP = SP + -6;
0x001717        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x001718        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001719        F1030002                 SP = SP + 2;
0x00171A        F1287FFA                 r0 = M[FP + -0x6];
0x00171B        F1387FFB                 r1 = M[FP + -0x5];
0x00171C        F1487FFE                 r2 = M[FP + -0x2];
0x00171D        F1587FFF                 r3 = M[FP + -0x1];
0x00171E        E1F0FDBE                 call $kal_filter_coef_lib.__warp;
0x00171F        0042000F                 r2 = r0 + Null;
0x001720        0053000F                 r3 = r1 + Null;
0x001721        E1F002D9                 call $kal_float_lib.mul;
0x001722        0082000F                 r6 = r0 + Null;
0x001723        0093000F                 r7 = r1 + Null;
0x001724        0024000F                 r0 = r2 + Null;
0x001725        0035000F                 r1 = r3 + Null;
0x001726        F1487FFC                 r2 = M[FP + -0x4];
0x001727        F1587FFD                 r3 = M[FP + -0x3];
0x001728        E1F00304                 call $kal_float_lib.div;
0x001729        0062000F                 r4 = r0 + Null;
0x00172A        0073000F                 r5 = r1 + Null;
0x00172B        0048000F                 r2 = r6 + Null;
0x00172C        0059000F                 r3 = r7 + Null;
0x00172D        E1F002BB                 call $kal_float_lib.add;
0x00172E        01400080                 r2 = Null + 128;
0x00172F        FD000080 01500000        r3 = Null + -8388608;
0x001731        E1F002B7                 call $kal_float_lib.add;
0x001732        E1F002DD                 call $kal_float_lib.recip;
0x001733        F12C000A                 M[FP + 0xa] = r0;
0x001734        F13C000B                 M[FP + 0xb] = r1;
0x001735        F1030006                 SP = SP + 6;
0x001736        F100000C                 pushm <r0, r1>;
0x001737        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001739        E422002F                 r0 = r0 + 1;
0x00173A        F100000C                 pushm <r0, r1>;
0x00173B        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00173D        E422003F                 r0 = r0 - 1;
0x00173E        F100000C                 pushm <r0, r1>;
0x00173F        0028000F                 r0 = r6 + Null;
0x001740        0039000F                 r1 = r7 + Null;
0x001741        01400081                 r2 = Null + 129;
0x001742        FD000080 01500000        r3 = Null + -8388608;
0x001744        E1F002B6                 call $kal_float_lib.mul;
0x001745        E1F002AC                 call $kal_float_lib.sub;
0x001746        F148000A                 r2 = M[FP + 0xa];
0x001747        F158000B                 r3 = M[FP + 0xb];
0x001748        E1F002B2                 call $kal_float_lib.mul;
0x001749        F100000C                 pushm <r0, r1>;
0x00174A        0028000F                 r0 = r6 + Null;
0x00174B        0039000F                 r1 = r7 + Null;
0x00174C        0046000F                 r2 = r4 + Null;
0x00174D        0057000F                 r3 = r5 + Null;
0x00174E        E1F002A3                 call $kal_float_lib.sub;
0x00174F        01400080                 r2 = Null + 128;
0x001750        FD000080 01500000        r3 = Null + -8388608;
0x001752        E1F00296                 call $kal_float_lib.add;
0x001753        F148000A                 r2 = M[FP + 0xa];
0x001754        F158000B                 r3 = M[FP + 0xb];
0x001755        E1F002A5                 call $kal_float_lib.mul;
0x001756        F100000C                 pushm <r0, r1>;
0x001757        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x001758        F3240000                 pop r0;
0x001759        F12C7FF4                 M[FP + -0xc] = r0;
0x00175A        F3240000                 pop r0;
0x00175B        F12C7FF6                 M[FP + -0xa] = r0;
0x00175C        F3240000                 pop r0;
0x00175D        F12C7FF5                 M[FP + -0xb] = r0;
0x00175E        F3240000                 pop r0;
0x00175F        F12C7FF9                 M[FP + -0x7] = r0;
0x001760        F3240000                 pop r0;
0x001761        F12C7FF8                 M[FP + -0x8] = r0;
0x001762        F3240000                 pop r0;
0x001763        F12C7FF7                 M[FP + -0x9] = r0;
0x001764        F103FFFE                 SP = SP + -2;
0x001765        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001766        F103FFFA                 SP = SP + -6;
0x001767        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x001768        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001769        F1030002                 SP = SP + 2;
0x00176A        F1287FFA                 r0 = M[FP + -0x6];
0x00176B        F1387FFB                 r1 = M[FP + -0x5];
0x00176C        F1487FFE                 r2 = M[FP + -0x2];
0x00176D        F1587FFF                 r3 = M[FP + -0x1];
0x00176E        E1F0FD6E                 call $kal_filter_coef_lib.__warp;
0x00176F        0042000F                 r2 = r0 + Null;
0x001770        0053000F                 r3 = r1 + Null;
0x001771        E1F00289                 call $kal_float_lib.mul;
0x001772        0082000F                 r6 = r0 + Null;
0x001773        0093000F                 r7 = r1 + Null;
0x001774        0024000F                 r0 = r2 + Null;
0x001775        0035000F                 r1 = r3 + Null;
0x001776        F1487FFC                 r2 = M[FP + -0x4];
0x001777        F1587FFD                 r3 = M[FP + -0x3];
0x001778        E1F002B4                 call $kal_float_lib.div;
0x001779        0062000F                 r4 = r0 + Null;
0x00177A        0073000F                 r5 = r1 + Null;
0x00177B        0048000F                 r2 = r6 + Null;
0x00177C        0059000F                 r3 = r7 + Null;
0x00177D        E1F0026B                 call $kal_float_lib.add;
0x00177E        01400080                 r2 = Null + 128;
0x00177F        FD000080 01500000        r3 = Null + -8388608;
0x001781        E1F00267                 call $kal_float_lib.add;
0x001782        E1F0028D                 call $kal_float_lib.recip;
0x001783        F12C000A                 M[FP + 0xa] = r0;
0x001784        F13C000B                 M[FP + 0xb] = r1;
0x001785        F1030006                 SP = SP + 6;
0x001786        0028000F                 r0 = r6 + Null;
0x001787        0039000F                 r1 = r7 + Null;
0x001788        0046000F                 r2 = r4 + Null;
0x001789        0057000F                 r3 = r5 + Null;
0x00178A        E1F00267                 call $kal_float_lib.sub;
0x00178B        01400080                 r2 = Null + 128;
0x00178C        FD000080 01500000        r3 = Null + -8388608;
0x00178E        E1F0025A                 call $kal_float_lib.add;
0x00178F        F148000A                 r2 = M[FP + 0xa];
0x001790        F158000B                 r3 = M[FP + 0xb];
0x001791        E1F00269                 call $kal_float_lib.mul;
0x001792        F100000C                 pushm <r0, r1>;
0x001793        0062000F                 r4 = r0 + Null;
0x001794        0073000F                 r5 = r1 + Null;
0x001795        0028000F                 r0 = r6 + Null;
0x001796        0039000F                 r1 = r7 + Null;
0x001797        01400081                 r2 = Null + 129;
0x001798        FD000080 01500000        r3 = Null + -8388608;
0x00179A        E1F00260                 call $kal_float_lib.mul;
0x00179B        E1F00256                 call $kal_float_lib.sub;
0x00179C        F148000A                 r2 = M[FP + 0xa];
0x00179D        F158000B                 r3 = M[FP + 0xb];
0x00179E        E1F0025C                 call $kal_float_lib.mul;
0x00179F        F100000C                 pushm <r0, r1>;
0x0017A0        0082000F                 r6 = r0 + Null;
0x0017A1        0093000F                 r7 = r1 + Null;
0x0017A2        01200080                 r0 = Null + 128;
0x0017A3        FD000080 01300000        r1 = Null + -8388608;
0x0017A5        F100000C                 pushm <r0, r1>;
0x0017A6        F1000300                 pushm <r6, r7>;
0x0017A7        F10000C0                 pushm <r4, r5>;
0x0017A8        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0017A9        F3240000                 pop r0;
0x0017AA        F12C7FF4                 M[FP + -0xc] = r0;
0x0017AB        F3240000                 pop r0;
0x0017AC        F12C7FF6                 M[FP + -0xa] = r0;
0x0017AD        F3240000                 pop r0;
0x0017AE        F12C7FF5                 M[FP + -0xb] = r0;
0x0017AF        F3240000                 pop r0;
0x0017B0        F12C7FF9                 M[FP + -0x7] = r0;
0x0017B1        F3240000                 pop r0;
0x0017B2        F12C7FF8                 M[FP + -0x8] = r0;
0x0017B3        F3240000                 pop r0;
0x0017B4        F12C7FF7                 M[FP + -0x9] = r0;
0x0017B5        F103FFFE                 SP = SP + -2;
0x0017B6        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017B7        F103FFFA                 SP = SP + -6;
0x0017B8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x0017B9        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017BA        F1030008                 SP = SP + 8;
0x0017BB        F1287FF6                 r0 = M[FP + -0xa];
0x0017BC        F1387FF7                 r1 = M[FP + -0x9];
0x0017BD        F1487FFE                 r2 = M[FP + -0x2];
0x0017BE        F1587FFF                 r3 = M[FP + -0x1];
0x0017BF        E1F0FD1D                 call $kal_filter_coef_lib.__warp;
0x0017C0        0062000F                 r4 = r0 + Null;
0x0017C1        0073000F                 r5 = r1 + Null;
0x0017C2        F1287FFC                 r0 = M[FP + -0x4];
0x0017C3        F1387FFD                 r1 = M[FP + -0x3];
0x0017C4        E1F0FD39                 call $kal_filter_coef_lib.__db2lin;
0x0017C5        F12C000C                 M[FP + 0xc] = r0;
0x0017C6        F13C000D                 M[FP + 0xd] = r1;
0x0017C7        F1287FF8                 r0 = M[FP + -0x8];
0x0017C8        F1387FF9                 r1 = M[FP + -0x7];
0x0017C9        21220002                 r0 = r0 - 2;
0x0017CA        E1F0FD33                 call $kal_filter_coef_lib.__db2lin;
0x0017CB        0042000F                 r2 = r0 + Null;
0x0017CC        0053000F                 r3 = r1 + Null;
0x0017CD        0026000F                 r0 = r4 + Null;
0x0017CE        0037000F                 r1 = r5 + Null;
0x0017CF        E1F0025D                 call $kal_float_lib.div;
0x0017D0        0082000F                 r6 = r0 + Null;
0x0017D1        0093000F                 r7 = r1 + Null;
0x0017D2        0026000F                 r0 = r4 + Null;
0x0017D3        0037000F                 r1 = r5 + Null;
0x0017D4        E1F00226                 call $kal_float_lib.mul;
0x0017D5        0062000F                 r4 = r0 + Null;
0x0017D6        0073000F                 r5 = r1 + Null;
0x0017D7        F1487FFA                 r2 = M[FP + -0x6];
0x0017D8        F1587FFB                 r3 = M[FP + -0x5];
0x0017D9        E1F00253                 call $kal_float_lib.div;
0x0017DA        F12C000E                 M[FP + 0xe] = r0;
0x0017DB        F13C000F                 M[FP + 0xf] = r1;
0x0017DC        0028000F                 r0 = r6 + Null;
0x0017DD        0039000F                 r1 = r7 + Null;
0x0017DE        E1F0024E                 call $kal_float_lib.div;
0x0017DF        F12C0010                 M[FP + 0x10] = r0;
0x0017E0        F13C0011                 M[FP + 0x11] = r1;
0x0017E1        0028000F                 r0 = r6 + Null;
0x0017E2        0039000F                 r1 = r7 + Null;
0x0017E3        0048000F                 r2 = r6 + Null;
0x0017E4        0059000F                 r3 = r7 + Null;
0x0017E5        E1F00215                 call $kal_float_lib.mul;
0x0017E6        0082000F                 r6 = r0 + Null;
0x0017E7        0093000F                 r7 = r1 + Null;
0x0017E8        F1480010                 r2 = M[FP + 0x10];
0x0017E9        F1580011                 r3 = M[FP + 0x11];
0x0017EA        E1F001FE                 call $kal_float_lib.add;
0x0017EB        01400080                 r2 = Null + 128;
0x0017EC        FD000080 01500000        r3 = Null + -8388608;
0x0017EE        E1F001FA                 call $kal_float_lib.add;
0x0017EF        E1F00220                 call $kal_float_lib.recip;
0x0017F0        F12C000A                 M[FP + 0xa] = r0;
0x0017F1        F13C000B                 M[FP + 0xb] = r1;
0x0017F2        F1030006                 SP = SP + 6;
0x0017F3        0026000F                 r0 = r4 + Null;
0x0017F4        0037000F                 r1 = r5 + Null;
0x0017F5        0046000F                 r2 = r4 + Null;
0x0017F6        0057000F                 r3 = r5 + Null;
0x0017F7        E1F00203                 call $kal_float_lib.mul;
0x0017F8        0062000F                 r4 = r0 + Null;
0x0017F9        0073000F                 r5 = r1 + Null;
0x0017FA        F148000E                 r2 = M[FP + 0xe];
0x0017FB        F158000F                 r3 = M[FP + 0xf];
0x0017FC        E1F001EC                 call $kal_float_lib.add;
0x0017FD        01400080                 r2 = Null + 128;
0x0017FE        FD000080 01500000        r3 = Null + -8388608;
0x001800        E1F001E8                 call $kal_float_lib.add;
0x001801        F148000A                 r2 = M[FP + 0xa];
0x001802        F158000B                 r3 = M[FP + 0xb];
0x001803        E1F001F7                 call $kal_float_lib.mul;
0x001804        F148000C                 r2 = M[FP + 0xc];
0x001805        F158000D                 r3 = M[FP + 0xd];
0x001806        E1F001F4                 call $kal_float_lib.mul;
0x001807        F100000C                 pushm <r0, r1>;
0x001808        0026000F                 r0 = r4 + Null;
0x001809        0037000F                 r1 = r5 + Null;
0x00180A        01400081                 r2 = Null + 129;
0x00180B        FD000080 01500000        r3 = Null + -8388608;
0x00180D        E1F001ED                 call $kal_float_lib.mul;
0x00180E        E1F001E3                 call $kal_float_lib.sub;
0x00180F        F148000A                 r2 = M[FP + 0xa];
0x001810        F158000B                 r3 = M[FP + 0xb];
0x001811        E1F001E9                 call $kal_float_lib.mul;
0x001812        F148000C                 r2 = M[FP + 0xc];
0x001813        F158000D                 r3 = M[FP + 0xd];
0x001814        E1F001E6                 call $kal_float_lib.mul;
0x001815        F100000C                 pushm <r0, r1>;
0x001816        0026000F                 r0 = r4 + Null;
0x001817        0037000F                 r1 = r5 + Null;
0x001818        F148000E                 r2 = M[FP + 0xe];
0x001819        F158000F                 r3 = M[FP + 0xf];
0x00181A        E1F001D7                 call $kal_float_lib.sub;
0x00181B        01400080                 r2 = Null + 128;
0x00181C        FD000080 01500000        r3 = Null + -8388608;
0x00181E        E1F001CA                 call $kal_float_lib.add;
0x00181F        F148000A                 r2 = M[FP + 0xa];
0x001820        F158000B                 r3 = M[FP + 0xb];
0x001821        E1F001D9                 call $kal_float_lib.mul;
0x001822        F148000C                 r2 = M[FP + 0xc];
0x001823        F158000D                 r3 = M[FP + 0xd];
0x001824        E1F001D6                 call $kal_float_lib.mul;
0x001825        F100000C                 pushm <r0, r1>;
0x001826        0028000F                 r0 = r6 + Null;
0x001827        0039000F                 r1 = r7 + Null;
0x001828        01400081                 r2 = Null + 129;
0x001829        FD000080 01500000        r3 = Null + -8388608;
0x00182B        E1F001CF                 call $kal_float_lib.mul;
0x00182C        E1F001C5                 call $kal_float_lib.sub;
0x00182D        F148000A                 r2 = M[FP + 0xa];
0x00182E        F158000B                 r3 = M[FP + 0xb];
0x00182F        E1F001CB                 call $kal_float_lib.mul;
0x001830        F100000C                 pushm <r0, r1>;
0x001831        0028000F                 r0 = r6 + Null;
0x001832        0039000F                 r1 = r7 + Null;
0x001833        F1480010                 r2 = M[FP + 0x10];
0x001834        F1580011                 r3 = M[FP + 0x11];
0x001835        E1F001BC                 call $kal_float_lib.sub;
0x001836        01400080                 r2 = Null + 128;
0x001837        FD000080 01500000        r3 = Null + -8388608;
0x001839        E1F001AF                 call $kal_float_lib.add;
0x00183A        F148000A                 r2 = M[FP + 0xa];
0x00183B        F158000B                 r3 = M[FP + 0xb];
0x00183C        E1F001BE                 call $kal_float_lib.mul;
0x00183D        F100000C                 pushm <r0, r1>;
0x00183E        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x00183F        F3240000                 pop r0;
0x001840        F12C7FF5                 M[FP + -0xb] = r0;
0x001841        F3240000                 pop r0;
0x001842        F12C7FF4                 M[FP + -0xc] = r0;
0x001843        F3240000                 pop r0;
0x001844        F12C7FF3                 M[FP + -0xd] = r0;
0x001845        F3240000                 pop r0;
0x001846        F12C7FF2                 M[FP + -0xe] = r0;
0x001847        F3240000                 pop r0;
0x001848        F12C7FF1                 M[FP + -0xf] = r0;
0x001849        F3240000                 pop r0;
0x00184A        F12C7FF0                 M[FP + -0x10] = r0;
0x00184B        F103FFF8                 SP = SP + -8;
0x00184C        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00184D        F103FFF6                 SP = SP + -10;
0x00184E        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x00184F        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001850        F1030006                 SP = SP + 6;
0x001851        F1287FF8                 r0 = M[FP + -0x8];
0x001852        F1387FF9                 r1 = M[FP + -0x7];
0x001853        F100000C                 pushm <r0, r1>;
0x001854        F1287FFA                 r0 = M[FP + -0x6];
0x001855        F1387FFB                 r1 = M[FP + -0x5];
0x001856        F100000C                 pushm <r0, r1>;
0x001857        F1287FFC                 r0 = M[FP + -0x4];
0x001858        F1387FFD                 r1 = M[FP + -0x3];
0x001859        F100000C                 pushm <r0, r1>;
0x00185A        01200000                 r0 = Null + 0;
0x00185B        01300000                 r1 = Null + 0;
0x00185C        F100000C                 pushm <r0, r1>;
0x00185D        F1287FFE                 r0 = M[FP + -0x2];
0x00185E        F1387FFF                 r1 = M[FP + -0x1];
0x00185F        F100000C                 pushm <r0, r1>;
0x001860        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001861        F3240000                 pop r0;
0x001862        F12C7FF2                 M[FP + -0xe] = r0;
0x001863        F3240000                 pop r0;
0x001864        F12C7FF4                 M[FP + -0xc] = r0;
0x001865        F3240000                 pop r0;
0x001866        F12C7FF3                 M[FP + -0xd] = r0;
0x001867        F3240000                 pop r0;
0x001868        F12C7FF7                 M[FP + -0x9] = r0;
0x001869        F3240000                 pop r0;
0x00186A        F12C7FF6                 M[FP + -0xa] = r0;
0x00186B        F3240000                 pop r0;
0x00186C        F12C7FF5                 M[FP + -0xb] = r0;
0x00186D        F104200D                 popm <FP, r0, r1, rLink>;
0x00186E        F103FFF8                 SP = SP + -8;
0x00186F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x001870        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001871        F1030006                 SP = SP + 6;
0x001872        F1287FF8                 r0 = M[FP + -0x8];
0x001873        F1387FF9                 r1 = M[FP + -0x7];
0x001874        F100000C                 pushm <r0, r1>;
0x001875        F1287FFA                 r0 = M[FP + -0x6];
0x001876        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001878        F1387FFB                 r1 = M[FP + -0x5];
0x001879        F100000C                 pushm <r0, r1>;
0x00187A        F1287FFC                 r0 = M[FP + -0x4];
0x00187B        F1387FFD                 r1 = M[FP + -0x3];
0x00187C        F100000C                 pushm <r0, r1>;
0x00187D        F1287FFA                 r0 = M[FP + -0x6];
0x00187E        F1387FFB                 r1 = M[FP + -0x5];
0x00187F        F100000C                 pushm <r0, r1>;
0x001880        F1287FFE                 r0 = M[FP + -0x2];
0x001881        F1387FFF                 r1 = M[FP + -0x1];
0x001882        F100000C                 pushm <r0, r1>;
0x001883        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001884        F3240000                 pop r0;
0x001885        F12C7FF2                 M[FP + -0xe] = r0;
0x001886        F3240000                 pop r0;
0x001887        F12C7FF4                 M[FP + -0xc] = r0;
0x001888        F3240000                 pop r0;
0x001889        F12C7FF3                 M[FP + -0xd] = r0;
0x00188A        F3240000                 pop r0;
0x00188B        F12C7FF7                 M[FP + -0x9] = r0;
0x00188C        F3240000                 pop r0;
0x00188D        F12C7FF6                 M[FP + -0xa] = r0;
0x00188E        F3240000                 pop r0;
0x00188F        F12C7FF5                 M[FP + -0xb] = r0;
0x001890        F104200D                 popm <FP, r0, r1, rLink>;
0x001891        F103FFF8                 SP = SP + -8;
0x001892        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x001893        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001894        F1030006                 SP = SP + 6;
0x001895        F1287FF8                 r0 = M[FP + -0x8];
0x001896        F1387FF9                 r1 = M[FP + -0x7];
0x001897        F100000C                 pushm <r0, r1>;
0x001898        F1287FFA                 r0 = M[FP + -0x6];
0x001899        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00189B        F1387FFB                 r1 = M[FP + -0x5];
0x00189C        F100000C                 pushm <r0, r1>;
0x00189D        F1287FFC                 r0 = M[FP + -0x4];
0x00189E        F1387FFD                 r1 = M[FP + -0x3];
0x00189F        F100000C                 pushm <r0, r1>;
0x0018A0        F1287FFA                 r0 = M[FP + -0x6];
0x0018A1        E422003F                 r0 = r0 - 1;
0x0018A2        F1387FFB                 r1 = M[FP + -0x5];
0x0018A3        F100000C                 pushm <r0, r1>;
0x0018A4        F1287FFE                 r0 = M[FP + -0x2];
0x0018A5        F1387FFF                 r1 = M[FP + -0x1];
0x0018A6        F100000C                 pushm <r0, r1>;
0x0018A7        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0018A8        F3240000                 pop r0;
0x0018A9        F12C7FF2                 M[FP + -0xe] = r0;
0x0018AA        F3240000                 pop r0;
0x0018AB        F12C7FF4                 M[FP + -0xc] = r0;
0x0018AC        F3240000                 pop r0;
0x0018AD        F12C7FF3                 M[FP + -0xd] = r0;
0x0018AE        F3240000                 pop r0;
0x0018AF        F12C7FF7                 M[FP + -0x9] = r0;
0x0018B0        F3240000                 pop r0;
0x0018B1        F12C7FF6                 M[FP + -0xa] = r0;
0x0018B2        F3240000                 pop r0;
0x0018B3        F12C7FF5                 M[FP + -0xb] = r0;
0x0018B4        F104200D                 popm <FP, r0, r1, rLink>;
0x0018B5        F103FFF8                 SP = SP + -8;
0x0018B6        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x0018B7        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0018B8        F1030004                 SP = SP + 4;
0x0018B9        F1287FFC                 r0 = M[FP + -0x4];
0x0018BA        E422002F                 r0 = r0 + 1;
0x0018BB        F1387FFD                 r1 = M[FP + -0x3];
0x0018BC        E1F00153                 call $kal_float_lib.recip;
0x0018BD        FD000080 85220000        r0 = r0 OR 0x800000;
0x0018BF        0042000F                 r2 = r0 + Null;
0x0018C0        0053000F                 r3 = r1 + Null;
0x0018C1        0062000F                 r4 = r0 + Null;
0x0018C2        0073000F                 r5 = r1 + Null;
0x0018C3        E1F00137                 call $kal_float_lib.mul;
0x0018C4        01400080                 r2 = Null + 128;
0x0018C5        FD000080 01500000        r3 = Null + -8388608;
0x0018C7        E1F00121                 call $kal_float_lib.add;
0x0018C8        E1F00170                 call $kal_float_lib.rsqrt;
0x0018C9        E1F00146                 call $kal_float_lib.recip;
0x0018CA        0046000F                 r2 = r4 + Null;
0x0018CB        0057000F                 r3 = r5 + Null;
0x0018CC        E1F0011C                 call $kal_float_lib.add;
0x0018CD        F1487FF8                 r2 = M[FP + -0x8];
0x0018CE        F1587FF9                 r3 = M[FP + -0x7];
0x0018CF        E1F0012B                 call $kal_float_lib.mul;
0x0018D0        F1487FFE                 r2 = M[FP + -0x2];
0x0018D1        F1587FFF                 r3 = M[FP + -0x1];
0x0018D2        E1F0FC0A                 call $kal_filter_coef_lib.__warp;
0x0018D3        0062000F                 r4 = r0 + Null;
0x0018D4        0073000F                 r5 = r1 + Null;
0x0018D5        F1287FF8                 r0 = M[FP + -0x8];
0x0018D6        F1387FF9                 r1 = M[FP + -0x7];
0x0018D7        E1F0FC05                 call $kal_filter_coef_lib.__warp;
0x0018D8        F12C000A                 M[FP + 0xa] = r0;
0x0018D9        F13C000B                 M[FP + 0xb] = r1;
0x0018DA        0042000F                 r2 = r0 + Null;
0x0018DB        0053000F                 r3 = r1 + Null;
0x0018DC        E1F0011E                 call $kal_float_lib.mul;
0x0018DD        F1000030                 pushm <r2, r3>;
0x0018DE        F100000C                 pushm <r0, r1>;
0x0018DF        0026000F                 r0 = r4 + Null;
0x0018E0        0037000F                 r1 = r5 + Null;
0x0018E1        0046000F                 r2 = r4 + Null;
0x0018E2        0057000F                 r3 = r5 + Null;
0x0018E3        E1F00117                 call $kal_float_lib.mul;
0x0018E4        F1040030                 popm <r2, r3>;
0x0018E5        E1F0010C                 call $kal_float_lib.sub;
0x0018E6        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0018E8        E1F00127                 call $kal_float_lib.recip;
0x0018E9        F1040030                 popm <r2, r3>;
0x0018EA        E1F00110                 call $kal_float_lib.mul;
0x0018EB        0046000F                 r2 = r4 + Null;
0x0018EC        0057000F                 r3 = r5 + Null;
0x0018ED        E1F0010D                 call $kal_float_lib.mul;
0x0018EE        0062000F                 r4 = r0 + Null;
0x0018EF        0073000F                 r5 = r1 + Null;
0x0018F0        F1287FFA                 r0 = M[FP + -0x6];
0x0018F1        F1387FFB                 r1 = M[FP + -0x5];
0x0018F2        0140007F                 r2 = Null + 127;
0x0018F3        FD000080 01500000        r3 = Null + -8388608;
0x0018F5        E1F00105                 call $kal_float_lib.mul;
0x0018F6        E1F0FC07                 call $kal_filter_coef_lib.__db2lin;
0x0018F7        0042000F                 r2 = r0 + Null;
0x0018F8        0053000F                 r3 = r1 + Null;
0x0018F9        0026000F                 r0 = r4 + Null;
0x0018FA        0037000F                 r1 = r5 + Null;
0x0018FB        E1F000FF                 call $kal_float_lib.mul;
0x0018FC        0082000F                 r6 = r0 + Null;
0x0018FD        0093000F                 r7 = r1 + Null;
0x0018FE        0026000F                 r0 = r4 + Null;
0x0018FF        0037000F                 r1 = r5 + Null;
0x001900        E1F0012C                 call $kal_float_lib.div;
0x001901        0042000F                 r2 = r0 + Null;
0x001902        0053000F                 r3 = r1 + Null;
0x001903        F128000A                 r0 = M[FP + 0xa];
0x001904        F138000B                 r1 = M[FP + 0xb];
0x001905        E1F00127                 call $kal_float_lib.div;
0x001906        0062000F                 r4 = r0 + Null;
0x001907        0073000F                 r5 = r1 + Null;
0x001908        F128000A                 r0 = M[FP + 0xa];
0x001909        F138000B                 r1 = M[FP + 0xb];
0x00190A        0048000F                 r2 = r6 + Null;
0x00190B        0059000F                 r3 = r7 + Null;
0x00190C        E1F00120                 call $kal_float_lib.div;
0x00190D        0082000F                 r6 = r0 + Null;
0x00190E        0093000F                 r7 = r1 + Null;
0x00190F        F128000A                 r0 = M[FP + 0xa];
0x001910        F138000B                 r1 = M[FP + 0xb];
0x001911        0042000F                 r2 = r0 + Null;
0x001912        0053000F                 r3 = r1 + Null;
0x001913        E1F000E7                 call $kal_float_lib.mul;
0x001914        F12C000A                 M[FP + 0xa] = r0;
0x001915        F13C000B                 M[FP + 0xb] = r1;
0x001916        0048000F                 r2 = r6 + Null;
0x001917        0059000F                 r3 = r7 + Null;
0x001918        E1F000D0                 call $kal_float_lib.add;
0x001919        01400080                 r2 = Null + 128;
0x00191A        FD000080 01500000        r3 = Null + -8388608;
0x00191C        E1F000CC                 call $kal_float_lib.add;
0x00191D        E1F000F2                 call $kal_float_lib.recip;
0x00191E        F12C000C                 M[FP + 0xc] = r0;
0x00191F        F13C000D                 M[FP + 0xd] = r1;
0x001920        F1030006                 SP = SP + 6;
0x001921        F128000A                 r0 = M[FP + 0xa];
0x001922        F138000B                 r1 = M[FP + 0xb];
0x001923        0046000F                 r2 = r4 + Null;
0x001924        0057000F                 r3 = r5 + Null;
0x001925        E1F000C3                 call $kal_float_lib.add;
0x001926        01400080                 r2 = Null + 128;
0x001927        FD000080 01500000        r3 = Null + -8388608;
0x001929        E1F000BF                 call $kal_float_lib.add;
0x00192A        F148000C                 r2 = M[FP + 0xc];
0x00192B        F158000D                 r3 = M[FP + 0xd];
0x00192C        E1F000CE                 call $kal_float_lib.mul;
0x00192D        F100000C                 pushm <r0, r1>;
0x00192E        F128000A                 r0 = M[FP + 0xa];
0x00192F        F138000B                 r1 = M[FP + 0xb];
0x001930        01400081                 r2 = Null + 129;
0x001931        FD000080 01500000        r3 = Null + -8388608;
0x001933        E1F000C7                 call $kal_float_lib.mul;
0x001934        E1F000BD                 call $kal_float_lib.sub;
0x001935        F148000C                 r2 = M[FP + 0xc];
0x001936        F158000D                 r3 = M[FP + 0xd];
0x001937        E1F000C3                 call $kal_float_lib.mul;
0x001938        F100000C                 pushm <r0, r1>;
0x001939        F128000A                 r0 = M[FP + 0xa];
0x00193A        F138000B                 r1 = M[FP + 0xb];
0x00193B        0046000F                 r2 = r4 + Null;
0x00193C        0057000F                 r3 = r5 + Null;
0x00193D        E1F000B4                 call $kal_float_lib.sub;
0x00193E        01400080                 r2 = Null + 128;
0x00193F        FD000080 01500000        r3 = Null + -8388608;
0x001941        E1F000A7                 call $kal_float_lib.add;
0x001942        F148000C                 r2 = M[FP + 0xc];
0x001943        F158000D                 r3 = M[FP + 0xd];
0x001944        E1F000B6                 call $kal_float_lib.mul;
0x001945        F100000C                 pushm <r0, r1>;
0x001946        F128000A                 r0 = M[FP + 0xa];
0x001947        F138000B                 r1 = M[FP + 0xb];
0x001948        01400081                 r2 = Null + 129;
0x001949        FD000080 01500000        r3 = Null + -8388608;
0x00194B        E1F000AF                 call $kal_float_lib.mul;
0x00194C        E1F000A5                 call $kal_float_lib.sub;
0x00194D        F148000C                 r2 = M[FP + 0xc];
0x00194E        F158000D                 r3 = M[FP + 0xd];
0x00194F        E1F000AB                 call $kal_float_lib.mul;
0x001950        F100000C                 pushm <r0, r1>;
0x001951        F128000A                 r0 = M[FP + 0xa];
0x001952        F138000B                 r1 = M[FP + 0xb];
0x001953        0048000F                 r2 = r6 + Null;
0x001954        0059000F                 r3 = r7 + Null;
0x001955        E1F0009C                 call $kal_float_lib.sub;
0x001956        01400080                 r2 = Null + 128;
0x001957        FD000080 01500000        r3 = Null + -8388608;
0x001959        E1F0008F                 call $kal_float_lib.add;
0x00195A        F148000C                 r2 = M[FP + 0xc];
0x00195B        F158000D                 r3 = M[FP + 0xd];
0x00195C        E1F0009E                 call $kal_float_lib.mul;
0x00195D        F100000C                 pushm <r0, r1>;
0x00195E        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x00195F        F3240000                 pop r0;
0x001960        F12C7FF2                 M[FP + -0xe] = r0;
0x001961        F3240000                 pop r0;
0x001962        F12C7FF4                 M[FP + -0xc] = r0;
0x001963        F3240000                 pop r0;
0x001964        F12C7FF3                 M[FP + -0xd] = r0;
0x001965        F3240000                 pop r0;
0x001966        F12C7FF7                 M[FP + -0x9] = r0;
0x001967        F3240000                 pop r0;
0x001968        F12C7FF6                 M[FP + -0xa] = r0;
0x001969        F3240000                 pop r0;
0x00196A        F12C7FF5                 M[FP + -0xb] = r0;
0x00196B        F103FFFC                 SP = SP + -4;
0x00196C        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00196D        F103FFF8                 SP = SP + -8;
0x00196E        DC0D000F                 rts;

 <$kal_float_lib.__zero.call_entry>
0x00196F        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x001970        01200000                 r0 = Null + 0;
0x001971        01300000                 r1 = Null + 0;
0x001972        F3D40000                 pop rLink;
0x001973        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001974        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001975        0003000F                 Null = r1 + Null;
0x001976        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001977        F3600000                 push r4;
0x001978        816200FF                 r4 = r0 AND 0xff;
0x001979        FD000080 81220000        r0 = r0 AND 0x800000;
0x00197B        0003000F                 Null = r1 + Null;
0x00197C        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x00197D        E466003F                 r4 = r4 - 1;
0x00197E        8D330001                 r1 = r1 LSHIFT 1;
0x00197F        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x001980        816600FF                 r4 = r4 AND 0xff;
0x001981        87260000                 r0 = r0 OR r4;
0x001982        F3640000                 pop r4;
0x001983        F3D40000                 pop rLink;
0x001984        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x001985        F1000330                 pushm <r2, r3, r6, r7>;
0x001986        0003000F                 Null = r1 + Null;
0x001987        00240000                 if EQ r0 = r2 + Null;
0x001988        0005000F                 Null = r3 + Null;
0x001989        00420000                 if EQ r2 = r0 + Null;
0x00198A        817200FF                 r5 = r0 AND 0xff;
0x00198B        818400FF                 r6 = r2 AND 0xff;
0x00198C        2097008F                 r7 = r5 - r6;
0x00198D        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x00198E        2090009F                 r7 = Null - r7;
0x00198F        8F590000                 r3 = r3 LSHIFT r7;
0x001990        E427002F                 r0 = r5 + 1;
0x001991        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x001992        8F390000                 r1 = r1 LSHIFT r7;
0x001993        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x001994        8D33007F                 r1 = r1 LSHIFT -1;
0x001995        8D55007F                 r3 = r3 LSHIFT -1;
0x001996        03350000                 r1 = r1 + r3;
0x001997        87260000                 r0 = r0 OR r4;
0x001998        F1040330                 popm <r2, r3, r6, r7>;
0x001999        F10400C0                 popm <r4, r5>;
0x00199A        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x00199B        F1000330                 pushm <r2, r3, r6, r7>;
0x00199C        0003000F                 Null = r1 + Null;
0x00199D        00240000                 if EQ r0 = r2 + Null;
0x00199E        0005000F                 Null = r3 + Null;
0x00199F        00420000                 if EQ r2 = r0 + Null;
0x0019A0        817200FF                 r5 = r0 AND 0xff;
0x0019A1        818400FF                 r6 = r2 AND 0xff;
0x0019A2        2097008F                 r7 = r5 - r6;
0x0019A3        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x0019A4        2090009F                 r7 = Null - r7;
0x0019A5        8F590000                 r3 = r3 LSHIFT r7;
0x0019A6        E427002F                 r0 = r5 + 1;
0x0019A7        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x0019A8        8F390000                 r1 = r1 LSHIFT r7;
0x0019A9        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x0019AA        8D33007F                 r1 = r1 LSHIFT -1;
0x0019AB        8D55007F                 r3 = r3 LSHIFT -1;
0x0019AC        2003005F                 Null = r1 - r3;
0x0019AD        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x0019AE        23350000                 r1 = r1 - r3;
0x0019AF        87260000                 r0 = r0 OR r4;
0x0019B0        F1040330                 popm <r2, r3, r6, r7>;
0x0019B1        F10400C0                 popm <r4, r5>;
0x0019B2        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x0019B3        2035003F                 r1 = r3 - r1;
0x0019B4        FD000080 89660000        r4 = r4 XOR 0x800000;
0x0019B6        87260000                 r0 = r0 OR r4;
0x0019B7        F1040330                 popm <r2, r3, r6, r7>;
0x0019B8        F10400C0                 popm <r4, r5>;
0x0019B9        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x0019BA        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x0019BB        0002000F                 Null = r0 + Null;
0x0019BC        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0019BD        F1000050                 pushm <r2, r4>;
0x0019BE        0042000F                 r2 = r0 + Null;
0x0019BF        FD000080 81620000        r4 = r0 AND 0x800000;
0x0019C1        20400041                 if NE r2 = Null - r2;
0x0019C2        0123007F                 r0 = r1 + 127;
0x0019C3        87260000                 r0 = r0 OR r4;
0x0019C4        0034000F                 r1 = r2 + Null;
0x0019C5        F1040050                 popm <r2, r4>;
0x0019C6        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x0019C7        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x0019C8        F1000060                 pushm <r3, r4>;
0x0019C9        8D33007F                 r1 = r1 LSHIFT -1;
0x0019CA        815200FF                 r3 = r0 AND 0xff;
0x0019CB        E455003F                 r3 = r3 - 1;
0x0019CC        FD000080 81620000        r4 = r0 AND 0x800000;
0x0019CE        20300031                 if NE r1 = Null - r1;
0x0019CF        21550097                 r3 = r3 - 151;
0x0019D0        03540000                 r3 = r3 + r2;
0x0019D1        9023005F                 r0 = r1 ASHIFT r3;
0x0019D2        F1040060                 popm <r3, r4>;
0x0019D3        F3D40000                 pop rLink;
0x0019D4        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x0019D5        F3D00000                 push rLink;
0x0019D6        01300018                 r1 = Null + 24;
0x0019D7        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x0019D8        F3D00000                 push rLink;
0x0019D9        E430002F                 r1 = Null + 1;
0x0019DA        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x0019DB        F1002010                 pushm <r2, rLink>;
0x0019DC        01400002                 r2 = Null + 2;
0x0019DD        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x0019DE        F1042010                 popm <r2, rLink>;
0x0019DF        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x0019E0        F1002010                 pushm <r2, rLink>;
0x0019E1        01400019                 r2 = Null + 25;
0x0019E2        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x0019E3        F1042010                 popm <r2, rLink>;
0x0019E4        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x0019E5        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0019E7        DC0D000F                 rts;

 <$kal_float_lib.add>
0x0019E8        F3D00000                 push rLink;
0x0019E9        F10000C0                 pushm <r4, r5>;
0x0019EA        FD000080 81620000        r4 = r0 AND 0x800000;
0x0019EC        FD000080 81740000        r5 = r2 AND 0x800000;
0x0019EE        2006007F                 Null = r4 - r5;
0x0019EF        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x0019F0        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x0019F1        F3D00000                 push rLink;
0x0019F2        F10000C0                 pushm <r4, r5>;
0x0019F3        FD000080 81620000        r4 = r0 AND 0x800000;
0x0019F5        FD000080 81740000        r5 = r2 AND 0x800000;
0x0019F7        2006007F                 Null = r4 - r5;
0x0019F8        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x0019F9        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x0019FA        F3D00000                 push rLink;
0x0019FB        0003000F                 Null = r1 + Null;
0x0019FC        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0019FD        0005000F                 Null = r3 + Null;
0x0019FE        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0019FF        F10000E0                 pushm <r3, r4, r5>;
0x001A00        816200FF                 r4 = r0 AND 0xff;
0x001A01        817400FF                 r5 = r2 AND 0xff;
0x001A02        03670000                 r4 = r4 + r5;
0x001A03        2166007F                 r4 = r4 - 127;
0x001A04        8872004F                 r5 = r0 XOR r2;
0x001A05        FD000080 81770000        r5 = r5 AND 0x800000;
0x001A07        8426007F                 r0 = r4 OR r5;
0x001A08        8D33007F                 r1 = r1 LSHIFT -1;
0x001A09        8D55007F                 r3 = r3 LSHIFT -1;
0x001A0A        CC13005F                 rMAC = r1 * r3 (SS);
0x001A0B        0031000F                 r1 = rMAC + Null;
0x001A0C        8D330001                 r1 = r1 LSHIFT 1;
0x001A0D        F10400E0                 popm <r3, r4, r5>;
0x001A0E        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x001A0F        F3D00000                 push rLink;
0x001A10        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001A11        654200FF                 r2 = 255 - r0;
0x001A12        91530017                 r3 = r1 ASHIFT 23;
0x001A13        F100000C                 pushm <r0, r1>;
0x001A14        01C00006                 r10 = Null + 6;
0x001A15        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001A16        F104000C                 popm <r0, r1>;
0x001A17        F100000C                 pushm <r0, r1>;
0x001A18        E1F0FFE2                 call $kal_float_lib.mul;
0x001A19        F100003C                 pushm <r0, r1, r2, r3>;
0x001A1A        F10400F0                 popm <r2, r3, r4, r5>;
0x001A1B        01200080                 r0 = Null + 128;
0x001A1C        FD000080 01300000        r1 = Null + -8388608;
0x001A1E        E1F0FFD3                 call $kal_float_lib.sub;
0x001A1F        0046000F                 r2 = r4 + Null;
0x001A20        0057000F                 r3 = r5 + Null;
0x001A21        E1F0FFD9                 call $kal_float_lib.mul;
0x001A22        0046000F                 r2 = r4 + Null;
0x001A23        0057000F                 r3 = r5 + Null;
0x001A24        E1F0FFC4                 call $kal_float_lib.add;
0x001A25        0042000F                 r2 = r0 + Null;
0x001A26        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001A27        F104000C                 popm <r0, r1>;
0x001A28        0024000F                 r0 = r2 + Null;
0x001A29        0035000F                 r1 = r3 + Null;
0x001A2A        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x001A2B        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x001A2C        F3D00000                 push rLink;
0x001A2D        F1000030                 pushm <r2, r3>;
0x001A2E        F100000C                 pushm <r0, r1>;
0x001A2F        0024000F                 r0 = r2 + Null;
0x001A30        0035000F                 r1 = r3 + Null;
0x001A31        E1F0FFDE                 call $kal_float_lib.recip;
0x001A32        0042000F                 r2 = r0 + Null;
0x001A33        0053000F                 r3 = r1 + Null;
0x001A34        F104000C                 popm <r0, r1>;
0x001A35        E1F0FFC5                 call $kal_float_lib.mul;
0x001A36        F1040030                 popm <r2, r3>;
0x001A37        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x001A38        F3D00000                 push rLink;
0x001A39        0002000F                 Null = r0 + Null;
0x001A3A        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x001A3B        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x001A3C        0062000F                 r4 = r0 + Null;
0x001A3D        0073000F                 r5 = r1 + Null;
0x001A3E        E482003F                 r6 = r0 - 1;
0x001A3F        0093000F                 r7 = r1 + Null;
0x001A40        E466003F                 r4 = r4 - 1;
0x001A41        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x001A43        8D66000E                 r4 = r4 LSHIFT 14;
0x001A44        8D770077                 r5 = r5 LSHIFT -9;
0x001A45        87670000                 r4 = r4 OR r5;
0x001A46        FD00005F 01703759        r5 = Null + 6240089;
0x001A48        2067006F                 r4 = r5 - r4;
0x001A49        8D760008                 r5 = r4 LSHIFT 8;
0x001A4A        FD000080 85770000        r5 = r5 OR 0x800000;
0x001A4C        8D660071                 r4 = r4 LSHIFT -15;
0x001A4D        E466002F                 r4 = r4 + 1;
0x001A4E        01C00003                 r10 = Null + 3;
0x001A4F        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x001A50        0026000F                 r0 = r4 + Null;
0x001A51        0037000F                 r1 = r5 + Null;
0x001A52        0046000F                 r2 = r4 + Null;
0x001A53        0057000F                 r3 = r5 + Null;
0x001A54        E1F0FFA6                 call $kal_float_lib.mul;
0x001A55        0048000F                 r2 = r6 + Null;
0x001A56        0059000F                 r3 = r7 + Null;
0x001A57        E1F0FFA3                 call $kal_float_lib.mul;
0x001A58        0042000F                 r2 = r0 + Null;
0x001A59        0053000F                 r3 = r1 + Null;
0x001A5A        01200080                 r0 = Null + 128;
0x001A5B        FD0000C0 01300000        r1 = Null + -4194304;
0x001A5D        E1F0FF94                 call $kal_float_lib.sub;
0x001A5E        0046000F                 r2 = r4 + Null;
0x001A5F        0057000F                 r3 = r5 + Null;
0x001A60        E1F0FF9A                 call $kal_float_lib.mul;
0x001A61        0062000F                 r4 = r0 + Null;
0x001A62        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x001A63        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001A64        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.Subwoofer.l2cap_handler>
0x001A65        F3D00000                 push rLink;
0x001A66        E1F00134                 call $create_sub_packet;
0x001A67        E1F0FA26                 call $block_interrupts;
0x001A68        FD0000FF 01A05F81        r8 = Null + -41087;
0x001A6A        E1F0EFDC                 call $cbops.copy;
0x001A6B        01A02F92                 r8 = Null + 12178;
0x001A6C        E1F0EFDA                 call $cbops.copy;
0x001A6D        E1F0FA18                 call $interrupt.unblock;
0x001A6E        DDF0FA69                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_preprocess>
0x001A6F        F3D00000                 push rLink;
0x001A70        0930FE71                 r1 = Null + M[0xfffe71];
0x001A71        19303912                 M[$time_before_fp] = r1 + Null;
0x001A72        DDF0FA65                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_post_process>
0x001A73        F3D00000                 push rLink;
0x001A74        E1F001F9                 call $downsample_sub_to_1k2;
0x001A75        0930FE71                 r1 = Null + M[0xfffe71];
0x001A76        29433912                 r2 = r1 - M[$time_before_fp];
0x001A77        09303914                 r1 = Null + M[$subwoofer.sco_offset];
0x001A78        2043004F                 r2 = r1 - r2;
0x001A79        214401F4                 r2 = r2 - 500;
0x001A7A        09303906                 r1 = Null + M[$sco_param_tesco];
0x001A7B        21030006                 Null = r1 - 6;
0x001A7C        DD100004                 if NE jump $M.Subwoofer.do_not_send_duplicates;
0x001A7D        E430002F                 r1 = Null + 1;
0x001A7E        FD0000FF 1930690B        M[$queue_another_bass_packet] = r1 + Null;

 <$M.Subwoofer.do_not_send_duplicates>
0x001A80        01302FEC                 r1 = Null + 12268;
0x001A81        D1530003                 r3 = M[r1 + 3];
0x001A82        DD100003                 if NE jump $M.Subwoofer.bass_packet_already_scheduled;
0x001A83        01501A87                 r3 = Null + 6791;
0x001A84        E1F0FA49                 call $timer.schedule_event_in;

 <$M.Subwoofer.bass_packet_already_scheduled>
0x001A85        1950390A                 M[$bass_timer_id] = r3 + Null;
0x001A86        DDF0FA51                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.send_bass_packet>
0x001A87        F3D00000                 push rLink;
0x001A88        E1F00112                 call $create_sub_packet;
0x001A89        09203902                 r0 = Null + M[$sub_link_port];
0x001A8A        E1F0F9DB                 call $cbuffer.calc_amount_space;
0x001A8B        0960390C                 r4 = Null + M[$min_port_space];
0x001A8C        2002006F                 Null = r0 - r4;
0x001A8D        00620004                 if NEG r4 = r0 + Null;
0x001A8E        1960390C                 M[$min_port_space] = r4 + Null;
0x001A8F        FD0000FF 01A05F7C        r8 = Null + -41092;
0x001A91        E1F0EFB5                 call $cbops.copy;
0x001A92        0930FE71                 r1 = Null + M[0xfffe71];
0x001A93        09403911                 r2 = Null + M[$esco_write_deadline];
0x001A94        2053004F                 r3 = r1 - r2;
0x001A95        DD40000B                 if NEG jump $M.Subwoofer.early;
0x001A96        FD0000FF 0960690C        r4 = Null + M[$late_write_counter];
0x001A98        E466002F                 r4 = r4 + 1;
0x001A99        FD0000FF 1960690C        M[$late_write_counter] = r4 + Null;
0x001A9B        0960390D                 r4 = Null + M[$max_late_write];
0x001A9C        2005006F                 Null = r3 - r4;
0x001A9D        00650005                 if POS r4 = r3 + Null;
0x001A9E        1960390D                 M[$max_late_write] = r4 + Null;
0x001A9F        DDF00010                 jump $M.Subwoofer.done_logging_debug_data;

 <$M.Subwoofer.early>
0x001AA0        FD0000FF 0960690D        r4 = Null + M[$early_write_counter];
0x001AA2        E466002F                 r4 = r4 + 1;
0x001AA3        FD0000FF 1960690D        M[$early_write_counter] = r4 + Null;
0x001AA5        0960390E                 r4 = Null + M[$min_early_write];
0x001AA6        2005006F                 Null = r3 - r4;
0x001AA7        00650005                 if POS r4 = r3 + Null;
0x001AA8        1960390E                 M[$min_early_write] = r4 + Null;
0x001AA9        FD0000FF 0960690E        r4 = Null + M[$max_early_write];
0x001AAB        2005006F                 Null = r3 - r4;
0x001AAC        00650004                 if NEG r4 = r3 + Null;
0x001AAD        FD0000FF 1960690E        M[$max_early_write] = r4 + Null;

 <$M.Subwoofer.done_logging_debug_data>
0x001AAF        09603906                 r4 = Null + M[$sco_param_tesco];
0x001AB0        99660271                 r4 = r4 * 625 (int);
0x001AB1        03460000                 r2 = r2 + r4;
0x001AB2        19403911                 M[$esco_write_deadline] = r2 + Null;
0x001AB3        FD0000FF 0900690B        Null = Null + M[$queue_another_bass_packet];
0x001AB5        DD000008                 if EQ jump $M.Subwoofer.done_sending_bass_packets;
0x001AB6        FD0000FF 1900690B        M[$queue_another_bass_packet] = Null + Null;
0x001AB8        01400EA6                 r2 = Null + 3750;
0x001AB9        01302FEC                 r1 = Null + 12268;
0x001ABA        01501A87                 r3 = Null + 6791;
0x001ABB        E1F0FA0F                 call $timer.schedule_event_in_period;
0x001ABC        1950390A                 M[$bass_timer_id] = r3 + Null;

 <$M.Subwoofer.done_sending_bass_packets>
0x001ABD        DDF0FA1A                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_connected_handler>
0x001ABE        2133000C                 r1 = r1 - 12;
0x001ABF        D1232FE8                 r0 = M[r1 + 12264];
0x001AC0        DC02000F                 jump r0;

 <$M.Subwoofer.dummy>
0x001AC1        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_connected>
0x001AC2        F3D00000                 push rLink;
0x001AC3        FD000000 01408018        r2 = Null + 32792;
0x001AC5        0153000C                 r3 = r1 + 12;
0x001AC6        E1F0F9F7                 call $message.send;
0x001AC7        FD000091 0120A00E        r0 = Null + -7233522;
0x001AC9        19203902                 M[$sub_link_port] = r0 + Null;
0x001ACA        E420002F                 r0 = Null + 1;
0x001ACB        19203913                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001ACC        0920006F                 r0 = Null + M[$app_config.io];
0x001ACD        21020005                 Null = r0 - 5;
0x001ACE        DD000004                 if EQ jump $M.Subwoofer.usb_input;
0x001ACF        FD0000FF 0120690A        r0 = Null + -38646;
0x001AD1        192038F9                 M[$music_example.sync_flag_ptr] = r0 + Null;

 <$M.Subwoofer.usb_input>
0x001AD2        DDF0FA05                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_connected>
0x001AD3        F3D00000                 push rLink;
0x001AD4        FD000000 01408018        r2 = Null + 32792;
0x001AD6        0153000C                 r3 = r1 + 12;
0x001AD7        E1F0F9E6                 call $message.send;
0x001AD8        01200BCC                 r0 = Null + 3020;
0x001AD9        FD0000FF 19205FC2        M[0xff5fc2] = r0 + Null;
0x001ADB        19202FD3                 M[0x2fd3] = r0 + Null;
0x001ADC        19202FA4                 M[$M.main.samples_latency_measure] = r0 + Null;
0x001ADD        FD0000FF 01A05FBF        r8 = Null + -41025;
0x001ADF        E1F004DD                 call $audio_proc.delay.initialize;
0x001AE0        01A02FD0                 r8 = Null + 12240;
0x001AE1        E1F004DB                 call $audio_proc.delay.initialize;
0x001AE2        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x001AE4        01500003                 r3 = Null + 3;
0x001AE5        FD000000 2102BB80        Null = r0 - 48000;
0x001AE7        DD000002                 if EQ jump $M.Subwoofer.set_data_objects;
0x001AE8        01500002                 r3 = Null + 2;

 <$M.Subwoofer.set_data_objects>
0x001AE9        0125004A                 r0 = r3 + 74;
0x001AEA        19202F98                 M[0x2f98] = r0 + Null;
0x001AEB        19202F9A                 M[0x2f9a] = r0 + Null;
0x001AEC        19202F55                 M[0x2f55] = r0 + Null;
0x001AED        19202F57                 M[0x2f57] = r0 + Null;
0x001AEE        FD000094 0120600F        r0 = Null + -7053297;
0x001AF0        19203902                 M[$sub_link_port] = r0 + Null;
0x001AF1        E420002F                 r0 = Null + 1;
0x001AF2        19203913                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001AF3        092038EF                 r0 = Null + M[$sra_rate_addr];
0x001AF4        D3200000                 r0 = M[r0 + Null];
0x001AF5        FD0000FF 19206914        M[$synchronized_rate] = r0 + Null;
0x001AF7        FD0000FF 01206914        r0 = Null + -38636;
0x001AF9        FD0000FF 19205E9C        M[0xff5e9c] = r0 + Null;
0x001AFB        19202E60                 M[0x2e60] = r0 + Null;
0x001AFC        01200168                 r0 = Null + 360;
0x001AFD        91220001                 r0 = r0 ASHIFT 1;
0x001AFE        FD0000FF 192068F9        M[$music_example.frame_processing_size] = r0 + Null;
0x001B00        DDF0F9D7                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.write_port_disconnected_handler>
0x001B01        2133000C                 r1 = r1 - 12;
0x001B02        FD0000FF D1235FD7        r0 = M[r1 + -41001];
0x001B04        DC02000F                 jump r0;

 <$M.Subwoofer.dummy_disconnected>
0x001B05        DC0D000F                 rts;

 <$M.Subwoofer.esco_port_disconnected>
0x001B06        F3D00000                 push rLink;
0x001B07        092038EF                 r0 = Null + M[$sra_rate_addr];
0x001B08        19202E60                 M[0x2e60] = r0 + Null;
0x001B09        E1F002DE                 call $disable_esco_subwoofer;
0x001B0A        DDF0F9CD                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_disconnected>
0x001B0B        F3D00000                 push rLink;
0x001B0C        092038EF                 r0 = Null + M[$sra_rate_addr];
0x001B0D        FD0000FF 19205E9C        M[0xff5e9c] = r0 + Null;
0x001B0F        19202E60                 M[0x2e60] = r0 + Null;
0x001B10        E1F002D7                 call $disable_esco_subwoofer;
0x001B11        DDF0F9C6                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.subwoofer_init>
0x001B12        F3D00000                 push rLink;
0x001B13        01300B85                 r1 = Null + 2949;
0x001B14        E1F0030E                 call $enable_esco_subwoofer;
0x001B15        01201ABE                 r0 = Null + 6846;
0x001B16        FD0000FF 19206915        M[$cbuffer.write_port_connect_address] = r0 + Null;
0x001B18        01201B01                 r0 = Null + 6913;
0x001B19        19203916                 M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x001B1A        DDF0F9BD                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.synchronise>
0x001B1B        F3D00000                 push rLink;
0x001B1C        09203902                 r0 = Null + M[$sub_link_port];
0x001B1D        FD000094 2102600F        Null = r0 - -7053297;
0x001B1F        DD100005                 if NE jump $M.Subwoofer.done_synchronise;
0x001B20        01902F97                 r7 = Null + 12183;
0x001B21        01A02F53                 r8 = Null + 12115;
0x001B22        E1F001A2                 call $calc_time_to_play;
0x001B23        19803904                 M[$M.Subwoofer.playback_time] = r6 + Null;

 <$M.Subwoofer.done_synchronise>
0x001B24        DDF0F9B3                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy>
0x001B25        F3D00000                 push rLink;
0x001B26        E1F0030F                 call $cbops.av_copy.init_avcopy_struct;
0x001B27        19303921                 M[$M.cbops.av_copy.control_port] = r1 + Null;
0x001B28        FD0000FF 19206921        M[$M.cbops.av_copy.control_cbuffer] = r0 + Null;
0x001B2A        09203921                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001B2B        E1F0F970                 call $cbuffer.is_it_enabled;
0x001B2C        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x001B2D        FD0000FF 09206921        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001B2F        E1F0F94E                 call $cbuffer.calc_amount_data;
0x001B30        FD0000FF 19206924        M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x001B32        09203921                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001B33        E1F0F932                 call $cbuffer.calc_amount_space;
0x001B34        9144007F                 r2 = r2 ASHIFT -1;
0x001B35        29323923                 r1 = r0 - M[$M.cbops.dac_av_copy.prev_port_mnt_space];
0x001B36        19203923                 M[$M.cbops.dac_av_copy.prev_port_mnt_space] = r0 + Null;
0x001B37        09333925                 r1 = r1 + M[$M.cbops.dac_av_copy.port_amount_written];
0x001B38        00330044                 if NEG r1 = r1 + r2;
0x001B39        DD40000C                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x001B3A        91230008                 r0 = r1 ASHIFT 8;
0x001B3B        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x001B3D        FD0000FF 09306922        r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001B3F        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x001B41        03320000                 r1 = r1 + r0;
0x001B42        FD0000FF 19306922        M[$M.cbops.dac_av_copy.port_mnt_data_avg] = r1 + Null;
0x001B44        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x001B45        FD0000FF 19006920        M[$cbops.amount_written] = Null + Null;
0x001B47        E1F0EEFF                 call $cbops.copy;
0x001B48        FD0000FF 09206920        r0 = Null + M[$cbops.amount_written];
0x001B4A        19203925                 M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;
0x001B4B        09203921                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001B4C        E1F0F919                 call $cbuffer.calc_amount_space;
0x001B4D        9144007F                 r2 = r2 ASHIFT -1;
0x001B4E        2024002F                 r0 = r2 - r0;
0x001B4F        FD0000FF 09306922        r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001B51        91330078                 r1 = r1 ASHIFT -8;
0x001B52        FD0000FF 09006924        Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x001B54        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x001B55        2093002F                 r7 = r1 - r0;
0x001B56        DDB00015                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x001B57        0093000F                 r7 = r1 + Null;
0x001B58        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x001B59        6592006E                 r7 = 110 - r0;
0x001B5A        DD400011                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x001B5B        00C9000F                 r10 = r7 + Null;
0x001B5C        012038C5                 r0 = Null + 14533;
0x001B5D        E1F003B7                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001B5E        00C9000F                 r10 = r7 + Null;
0x001B5F        FD0000FF 012068CA        r0 = Null + -38710;
0x001B61        E1F003B3                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001B62        FD0000FF 01A05F3D        r8 = Null + -41155;
0x001B64        FD0000FF 19006920        M[$cbops.amount_written] = Null + Null;
0x001B66        E1F0EEE0                 call $cbops.copy;
0x001B67        FD0000FF 09206920        r0 = Null + M[$cbops.amount_written];
0x001B69        09223925                 r0 = r0 + M[$M.cbops.dac_av_copy.port_amount_written];
0x001B6A        19203925                 M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x001B6B        FD0000FF 09206921        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001B6D        E1F0F910                 call $cbuffer.calc_amount_data;
0x001B6E        0082000F                 r6 = r0 + Null;
0x001B6F        FD0000FF 09206921        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001B71        E1F0F930                 call $cbuffer.get_read_address_and_size;
0x001B72        0092000F                 r7 = r0 + Null;
0x001B73        09503924                 r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001B74        2105000A                 Null = r3 - 10;
0x001B75        DD00000C                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x001B76        01500000                 r3 = Null + 0;
0x001B77        FD0000FF 29496923        r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001B79        DD100006                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x001B7A        8D43007F                 r2 = r1 LSHIFT -1;
0x001B7B        2008004F                 Null = r6 - r2;
0x001B7C        DD400003                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x001B7D        09503924                 r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001B7E        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x001B7F        19503924                 M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = r3 + Null;
0x001B80        DDF00017                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x001B81        FD0000FF 29496923        r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001B83        DD000003                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x001B84        19003924                 M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = Null + Null;
0x001B85        DDF00012                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x001B86        09203922                 r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001B87        E110F8F6                 if NE call $cbuffer.calc_amount_data;
0x001B88        2008002F                 Null = r6 - r0;
0x001B89        00820005                 if POS r6 = r0 + Null;
0x001B8A        21280048                 r0 = r6 - 72;
0x001B8B        20880025                 if POS r6 = r6 - r0;
0x001B8C        00C8000F                 r10 = r6 + Null;
0x001B8D        FD0000FF 09206921        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001B8F        E1F0F85C                 call $cbuffer.advance_read_ptr;
0x001B90        FD0000FF 09206921        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001B92        E1F0F90F                 call $cbuffer.get_read_address_and_size;
0x001B93        0092000F                 r7 = r0 + Null;
0x001B94        00C8000F                 r10 = r6 + Null;
0x001B95        09203922                 r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001B96        E110F855                 if NE call $cbuffer.advance_read_ptr;

 <$M.cbops.dac_av_copy.remove_end>
0x001B97        FD0000FF 19906923        M[$M.cbops.dac_av_copy.prev_buffer_read_addr] = r7 + Null;
0x001B99        DDF0F93E                 jump $pop_rLink_and_rts;

 <$create_sub_packet>
0x001B9A        F3D00000                 push rLink;
0x001B9B        FD0000FF 012068C7        r0 = Null + -38713;
0x001B9D        E1F0F8E0                 call $cbuffer.calc_amount_data;
0x001B9E        01400009                 r2 = Null + 9;
0x001B9F        91540001                 r3 = r2 ASHIFT 1;
0x001BA0        09303906                 r1 = Null + M[$sco_param_tesco];
0x001BA1        21030018                 Null = r1 - 24;
0x001BA2        00450000                 if EQ r2 = r3 + Null;
0x001BA3        20C2004F                 r10 = r0 - r2;
0x001BA4        DD50000F                 if POS jump $M.create_sub_packet.continue;
0x001BA5        20C000CF                 r10 = Null - r10;
0x001BA6        FD0000FF 012068C7        r0 = Null + -38713;
0x001BA8        E1F0F8FE                 call $cbuffer.get_write_address_and_size;
0x001BA9        5000002F                 I0 = Null + r0;
0x001BAA        50C0003F                 L0 = Null + r1;
0x001BAB        01200000                 r0 = Null + 0;
0x001BAC        E5F00002                 do $M.create_sub_packet.zero_insertion;
0x001BAD        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_insertion>
0x001BAE        FD0000FF 012068C7        r0 = Null + -38713;
0x001BB0        4430000F                 r1 = Null + I0;
0x001BB1        E1F0F908                 call $cbuffer.set_write_address;
0x001BB2        51C00000                 L0 = Null + 0;

 <$M.create_sub_packet.continue>
0x001BB3        FD0000FF 012068C4        r0 = Null + -38716;
0x001BB5        E1F0F8F1                 call $cbuffer.get_write_address_and_size;
0x001BB6        5000002F                 I0 = Null + r0;
0x001BB7        50C0003F                 L0 = Null + r1;
0x001BB8        FD0000FF 012068C7        r0 = Null + -38713;
0x001BBA        E1F0F8E7                 call $cbuffer.get_read_address_and_size;
0x001BBB        5040002F                 I4 = Null + r0;
0x001BBC        50E0003F                 L4 = Null + r1;
0x001BBD        FD0000FF 09C06907        r10 = Null + M[$sco_param_to_air_size];
0x001BBF        91CC007F                 r10 = r10 ASHIFT -1;
0x001BC0        FD000000 0120F5F5        r0 = Null + 62965;
0x001BC2        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001BC3        09603913                 r4 = Null + M[$M.create_sub_packet.packet_counter];
0x001BC4        8126FFFF                 r0 = r4 AND 0xffff;
0x001BC5        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001BC6        FD0000FF 09206910        r0 = Null + M[$wall_clock_adjustment];
0x001BC8        0922FE71                 r0 = r0 + M[0xfffe71];
0x001BC9        8D420070                 r2 = r0 LSHIFT -16;
0x001BCA        FD0000FF 81760000        r5 = r4 AND 0xff0000;
0x001BCC        8D770078                 r5 = r5 LSHIFT -8;
0x001BCD        0047004F                 r2 = r5 + r2;
0x001BCE        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001BCF        8142FFFF                 r2 = r0 AND 0xffff;
0x001BD0        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001BD1        09303902                 r1 = Null + M[$sub_link_port];
0x001BD2        FD000094 2103600F        Null = r1 - -7053297;
0x001BD4        DD00001D                 if EQ jump $M.create_sub_packet.write_l2cap_sub_data;
0x001BD5        215C000D                 r3 = r10 - 13;
0x001BD6        01C00009                 r10 = Null + 9;
0x001BD7        E5F00004                 do $M.create_sub_packet.copy_esco_sub_data_to_air;
0x001BD8        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001BD9        91220078                 r0 = r0 ASHIFT -8;
0x001BDA        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_esco_sub_data_to_air>
0x001BDB        00C5000F                 r10 = r3 + Null;
0x001BDC        E5F00003                 do $M.create_sub_packet.zero_padding;
0x001BDD        01200000                 r0 = Null + 0;
0x001BDE        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_padding>
0x001BDF        09303906                 r1 = Null + M[$sco_param_tesco];
0x001BE0        21030006                 Null = r1 - 6;
0x001BE1        DD100003                 if NE jump $M.create_sub_packet.update_read_addr;
0x001BE2        E406003F                 Null = r4 - 1;
0x001BE3        DD000005                 if EQ jump $M.create_sub_packet.dont_update_sub_1k2_read_ptrs;

 <$M.create_sub_packet.update_read_addr>
0x001BE4        FD0000FF 012068C7        r0 = Null + -38713;
0x001BE6        4430004F                 r1 = Null + I4;
0x001BE7        E1F0F8CE                 call $cbuffer.set_read_address;

 <$M.create_sub_packet.dont_update_sub_1k2_read_ptrs>
0x001BE8        09303906                 r1 = Null + M[$sco_param_tesco];
0x001BE9        21030006                 Null = r1 - 6;
0x001BEA        DD100006                 if NE jump $M.create_sub_packet.do_not_send_duplicates;
0x001BEB        E430002F                 r1 = Null + 1;
0x001BEC        E466002F                 r4 = r4 + 1;
0x001BED        21060002                 Null = r4 - 2;
0x001BEE        00630001                 if NE r4 = r1 + Null;
0x001BEF        19603913                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.do_not_send_duplicates>
0x001BF0        DDF00018                 jump $M.create_sub_packet.done;

 <$M.create_sub_packet.write_l2cap_sub_data>
0x001BF1        09203904                 r0 = Null + M[$M.Subwoofer.playback_time];
0x001BF2        8D420070                 r2 = r0 LSHIFT -16;
0x001BF3        FD0000FF 09306914        r1 = Null + M[$synchronized_rate];
0x001BF5        8D530070                 r3 = r1 LSHIFT -16;
0x001BF6        8D550008                 r3 = r3 LSHIFT 8;
0x001BF7        0045004F                 r2 = r3 + r2;
0x001BF8        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001BF9        8142FFFF                 r2 = r0 AND 0xffff;
0x001BFA        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001BFB        8143FFFF                 r2 = r1 AND 0xffff;
0x001BFC        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001BFD        01C00012                 r10 = Null + 18;
0x001BFE        E5F00004                 do $M.create_sub_packet.copy_l2cap_sub_data_to_air;
0x001BFF        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001C00        91220078                 r0 = r0 ASHIFT -8;
0x001C01        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_l2cap_sub_data_to_air>
0x001C02        FD0000FF 012068C7        r0 = Null + -38713;
0x001C04        4430004F                 r1 = Null + I4;
0x001C05        E1F0F8B0                 call $cbuffer.set_read_address;
0x001C06        E466002F                 r4 = r4 + 1;
0x001C07        19603913                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.done>
0x001C08        FD0000FF 012068C4        r0 = Null + -38716;
0x001C0A        4430000F                 r1 = Null + I0;
0x001C0B        E1F0F8AE                 call $cbuffer.set_write_address;
0x001C0C        51C00000                 L0 = Null + 0;
0x001C0D        51E00000                 L4 = Null + 0;
0x001C0E        DDF0F8C9                 jump $pop_rLink_and_rts;

 <$wall_clock_message_handler>
0x001C0F        F3D00000                 push rLink;
0x001C10        D1250004                 r0 = M[r3 + 4];
0x001C11        FD0000FF 19206904        M[$wall_clock_msw] = r0 + Null;
0x001C13        D1250005                 r0 = M[r3 + 5];
0x001C14        19203905                 M[$wall_clock_lsw] = r0 + Null;
0x001C15        D1250006                 r0 = M[r3 + 6];
0x001C16        D1350007                 r1 = M[r3 + 7];
0x001C17        8D220010                 r0 = r0 LSHIFT 16;
0x001C18        8133FFFF                 r1 = r1 AND 0xffff;
0x001C19        03320000                 r1 = r1 + r0;
0x001C1A        FD0000FF 19306905        M[$wall_clock_time] = r1 + Null;
0x001C1C        D1350004                 r1 = M[r3 + 4];
0x001C1D        FD0000FF 19306904        M[$wall_clock_msw] = r1 + Null;
0x001C1F        D1450005                 r2 = M[r3 + 5];
0x001C20        19403905                 M[$wall_clock_lsw] = r2 + Null;
0x001C21        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x001C22        811100FF                 rMAC = rMAC AND 0xff;
0x001C23        991104E2                 rMAC = rMAC * 1250 (int);
0x001C24        8D330010                 r1 = r1 LSHIFT 16;
0x001C25        8144FFFF                 r2 = r2 AND 0xffff;
0x001C26        03430000                 r2 = r2 + r1;
0x001C27        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x001C29        8D410016                 r2 = rMAC LSHIFT 22;
0x001C2A        D1650007                 r4 = M[r3 + 7];
0x001C2B        D1550006                 r3 = M[r3 + 6];
0x001C2C        8D550010                 r3 = r3 LSHIFT 16;
0x001C2D        8166FFFF                 r4 = r4 AND 0xffff;
0x001C2E        03650000                 r4 = r4 + r3;
0x001C2F        23460000                 r2 = r2 - r4;
0x001C30        FD0000FF 19406910        M[$wall_clock_adjustment] = r2 + Null;
0x001C32        09003906                 Null = Null + M[$sco_param_tesco];
0x001C33        DD100039                 if NE jump $M.wall_clock_message_handler.done;
0x001C34        E1F0F859                 call $block_interrupts;
0x001C35        FD0000FF 092068A5        r0 = Null + M[0xff68a5];
0x001C37        FD0000FF 192068A4        M[0xff68a4] = r0 + Null;
0x001C39        0920007F                 r0 = Null + M[0x7f];
0x001C3A        1920007E                 M[0x7e] = r0 + Null;
0x001C3B        FD0000FF 092068BD        r0 = Null + M[0xff68bd];
0x001C3D        FD0000FF 192068BC        M[0xff68bc] = r0 + Null;
0x001C3F        092038BB                 r0 = Null + M[0x38bb];
0x001C40        192038BA                 M[0x38ba] = r0 + Null;
0x001C41        092038C4                 r0 = Null + M[0x38c4];
0x001C42        192038C3                 M[0x38c3] = r0 + Null;
0x001C43        FD0000FF 092068C9        r0 = Null + M[0xff68c9];
0x001C45        FD0000FF 192068C8        M[0xff68c8] = r0 + Null;
0x001C47        FD0000FF 092068C6        r0 = Null + M[0xff68c6];
0x001C49        FD0000FF 192068C5        M[0xff68c5] = r0 + Null;
0x001C4B        E1F0F83A                 call $interrupt.unblock;
0x001C4C        09303902                 r1 = Null + M[$sub_link_port];
0x001C4D        FD000094 2103600F        Null = r1 - -7053297;
0x001C4F        DD000018                 if EQ jump $M.wall_clock_message_handler.uses_l2cap;
0x001C50        FD000000 01408014        r2 = Null + 32788;
0x001C52        09503902                 r3 = Null + M[$sub_link_port];
0x001C53        8155001F                 r3 = r3 AND 0x1f;
0x001C54        01600000                 r4 = Null + 0;
0x001C55        01700000                 r5 = Null + 0;
0x001C56        01800000                 r6 = Null + 0;
0x001C57        E1F0F866                 call $message.send;
0x001C58        0120028A                 r0 = Null + 650;
0x001C59        91320001                 r1 = r0 ASHIFT 1;
0x001C5A        09403906                 r2 = Null + M[$sco_param_tesco];
0x001C5B        21040018                 Null = r2 - 24;
0x001C5C        00230000                 if EQ r0 = r1 + Null;
0x001C5D        FD0000FF 19205FC2        M[0xff5fc2] = r0 + Null;
0x001C5F        19202FD3                 M[0x2fd3] = r0 + Null;
0x001C60        19202FA4                 M[$M.main.samples_latency_measure] = r0 + Null;
0x001C61        FD0000FF 01A05FBF        r8 = Null + -41025;
0x001C63        E1F00359                 call $audio_proc.delay.initialize;
0x001C64        01A02FD0                 r8 = Null + 12240;
0x001C65        E1F00357                 call $audio_proc.delay.initialize;
0x001C66        DDF00006                 jump $M.wall_clock_message_handler.done;

 <$M.wall_clock_message_handler.uses_l2cap>
0x001C67        E420002F                 r0 = Null + 1;
0x001C68        19203906                 M[$sco_param_tesco] = r0 + Null;
0x001C69        01200032                 r0 = Null + 50;
0x001C6A        FD0000FF 19206907        M[$sco_param_to_air_size] = r0 + Null;

 <$M.wall_clock_message_handler.done>
0x001C6C        DDF0F86B                 jump $pop_rLink_and_rts;

 <$downsample_sub_to_1k2>
0x001C6D        F3D00000                 push rLink;
0x001C6E        012038C2                 r0 = Null + 14530;
0x001C6F        E1F0F80E                 call $cbuffer.calc_amount_data;
0x001C70        00C2000F                 r10 = r0 + Null;
0x001C71        21020028                 Null = r0 - 40;
0x001C72        DD40F865                 if NEG jump $pop_rLink_and_rts;
0x001C73        E1F00208                 call $calc_sub_sra_ratio;
0x001C74        012038C2                 r0 = Null + 14530;
0x001C75        E1F0F82C                 call $cbuffer.get_read_address_and_size;
0x001C76        5000002F                 I0 = Null + r0;
0x001C77        50C0003F                 L0 = Null + r1;
0x001C78        FD0000FF 012068C7        r0 = Null + -38713;
0x001C7A        E1F0F82C                 call $cbuffer.get_write_address_and_size;
0x001C7B        5040002F                 I4 = Null + r0;
0x001C7C        50E0003F                 L4 = Null + r1;
0x001C7D        51800028                 M0 = Null + 40;
0x001C7E        01300000                 r1 = Null + 0;
0x001C7F        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x001C81        FD000000 2102AC44        Null = r0 - 44100;
0x001C83        DD100004                 if NE jump $M.downsample_sub_to_1k2.dont_modify;
0x001C84        51800024                 M0 = Null + 36;
0x001C85        FD000060 01300000        r1 = Null + 6291456;

 <$M.downsample_sub_to_1k2.dont_modify>
0x001C87        09203902                 r0 = Null + M[$sub_link_port];
0x001C88        FD000094 2102600F        Null = r0 - -7053297;
0x001C8A        DD000012                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x001C8B        0920006F                 r0 = Null + M[$app_config.io];
0x001C8C        21020008                 Null = r0 - 8;
0x001C8D        DD00000F                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x001C8E        4440008F                 r2 = Null + M0;
0x001C8F        FD0000FF 29206911        r0 = Null - M[$sub_sra_ratio];
0x001C91        8DE40200                 rMAC12 = r2 LSHIFT 0;
0x001C92        0053003F                 r3 = r1 + r1;
0x001C93        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x001C94        AC12004F                 rMAC = rMAC + r0 * r2 (SS);
0x001C95        91110017                 rMAC = rMAC ASHIFT 23 (56bit);
0x001C96        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x001C97        91110069                 rMAC = rMAC ASHIFT -23 (56bit);
0x001C98        8D410000                 r2 = rMAC LSHIFT 0;
0x001C99        5080004F                 M0 = Null + r2;
0x001C9A        8D310018                 r1 = rMAC LSHIFT 24;
0x001C9B        8D33007F                 r1 = r1 LSHIFT -1;

 <$M.downsample_sub_to_1k2.downsample>
0x001C9C        09603910                 r4 = Null + M[$M.downsample_sub_to_1k2.mute_index];
0x001C9D        0970390F                 r5 = Null + M[$M.downsample_sub_to_1k2.mute_direction];
0x001C9E        FD0000FF 0940690F        r2 = Null + M[$M.downsample_sub_to_1k2.residual];

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop>
0x001CA0        4480008F                 r6 = Null + M0;
0x001CA1        0054003F                 r3 = r2 + r1;
0x001CA2        E488002A                 if GE r6 = r6 + 1;
0x001CA3        23C80000                 r10 = r10 - r6;
0x001CA4        DD400013                 if NEG jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit;
0x001CA5        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001CA6        03430000                 r2 = r2 + r1;
0x001CA7        DD500004                 if POS jump $M.downsample_sub_to_1k2.no_extra_read;
0x001CA8        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001CA9        FD00007F 8144FFFF        r2 = r2 AND 0x7fffff;

 <$M.downsample_sub_to_1k2.no_extra_read>
0x001CAB        03670000                 r4 = r4 + r5;
0x001CAC        00600004                 if NEG r4 = Null + Null;
0x001CAD        01500007                 r3 = Null + 7;
0x001CAE        2005006F                 Null = r3 - r4;
0x001CAF        00650004                 if NEG r4 = r3 + Null;
0x001CB0        01502F3D                 r3 = Null + 12093;
0x001CB1        0056005F                 r3 = r4 + r3;
0x001CB2        D3500000                 r3 = M[r3 + Null];
0x001CB3        97250000                 r0 = r0 * r3 (frac);
0x001CB4        2020002F                 r0 = Null - r0;
0x001CB5        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x001CB6        DDF0FFEA                 jump $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_loop;

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer_exit>
0x001CB7        FD0000FF 1940690F        M[$M.downsample_sub_to_1k2.residual] = r2 + Null;
0x001CB9        19603910                 M[$M.downsample_sub_to_1k2.mute_index] = r4 + Null;
0x001CBA        012038C2                 r0 = Null + 14530;
0x001CBB        4430000F                 r1 = Null + I0;
0x001CBC        E1F0F7F9                 call $cbuffer.set_read_address;
0x001CBD        51C00000                 L0 = Null + 0;
0x001CBE        FD0000FF 012068C7        r0 = Null + -38713;
0x001CC0        4430004F                 r1 = Null + I4;
0x001CC1        E1F0F7F8                 call $cbuffer.set_write_address;
0x001CC2        51E00000                 L4 = Null + 0;
0x001CC3        DDF0F814                 jump $pop_rLink_and_rts;

 <$calc_time_to_play>
0x001CC4        F3D00000                 push rLink;
0x001CC5        E1F0F7C8                 call $block_interrupts;
0x001CC6        01800000                 r6 = Null + 0;

 <$M.calc_time_to_play.proc_loop>
0x001CC7        D029000F                 r0 = M[r7 + Null];
0x001CC8        DD00000A                 if EQ jump $M.calc_time_to_play.done_counting_cbuffer_data;
0x001CC9        E1F0F7B4                 call $cbuffer.calc_amount_data;
0x001CCA        D1390001                 r1 = M[r7 + 1];
0x001CCB        D3300000                 r1 = M[r1 + Null];
0x001CCC        CC12003F                 rMAC = r0 * r1 (SS);
0x001CCD        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001CCE        8D310000                 r1 = rMAC LSHIFT 0;
0x001CCF        03830000                 r6 = r6 + r1;
0x001CD0        01990002                 r7 = r7 + 2;
0x001CD1        DDF0FFF6                 jump $M.calc_time_to_play.proc_loop;

 <$M.calc_time_to_play.done_counting_cbuffer_data>
0x001CD2        0030000F                 r1 = Null + Null;
0x001CD3        0008000F                 Null = r6 + Null;
0x001CD4        DD100012                 if NE jump $M.calc_time_to_play.calculate_num_samples_in_port;
0x001CD5        D12A0000                 r0 = M[r8 + 0];
0x001CD6        D3200000                 r0 = M[r0 + Null];
0x001CD7        E1F0F78E                 call $cbuffer.calc_amount_space;
0x001CD8        0012000F                 rMAC = r0 + Null;
0x001CD9        D12A0001                 r0 = M[r8 + 1];
0x001CDA        D3200000                 r0 = M[r0 + Null];
0x001CDB        E1F0F78A                 call $cbuffer.calc_amount_space;
0x001CDC        2001002F                 Null = rMAC - r0;
0x001CDD        00120005                 if POS rMAC = r0 + Null;
0x001CDE        D12A0000                 r0 = M[r8 + 0];
0x001CDF        00C1000F                 r10 = rMAC + Null;
0x001CE0        D052000F                 r3 = M[r0 + Null];
0x001CE1        E1F001EB                 call $audio_insert_silence;
0x001CE2        D12A0001                 r0 = M[r8 + 1];
0x001CE3        00C1000F                 r10 = rMAC + Null;
0x001CE4        D052000F                 r3 = M[r0 + Null];
0x001CE5        E1F001E7                 call $audio_insert_silence;

 <$M.calc_time_to_play.calculate_num_samples_in_port>
0x001CE6        D12A0000                 r0 = M[r8 + 0];
0x001CE7        D3200000                 r0 = M[r0 + Null];
0x001CE8        E1F0F77D                 call $cbuffer.calc_amount_space;
0x001CE9        E422002F                 r0 = r0 + 1;
0x001CEA        9144007F                 r2 = r2 ASHIFT -1;
0x001CEB        2024002F                 r0 = r2 - r0;
0x001CEC        D13A0002                 r1 = M[r8 + 2];
0x001CED        D3300000                 r1 = M[r1 + Null];
0x001CEE        CC12003F                 rMAC = r0 * r1 (SS);
0x001CEF        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001CF0        8D310000                 r1 = rMAC LSHIFT 0;
0x001CF1        F3300000                 push r1;
0x001CF2        D12A0003                 r0 = M[r8 + 3];
0x001CF3        D13A0004                 r1 = M[r8 + 4];
0x001CF4        D3300000                 r1 = M[r1 + Null];
0x001CF5        CC12003F                 rMAC = r0 * r1 (SS);
0x001CF6        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x001CF7        8D310000                 r1 = rMAC LSHIFT 0;
0x001CF8        03830000                 r6 = r6 + r1;
0x001CF9        FD0000FF 09206914        r0 = Null + M[$synchronized_rate];
0x001CFB        9428002F                 r0 = r6 * r0 (frac);
0x001CFC        0082008F                 r6 = r0 + r6;
0x001CFD        F3340000                 pop r1;
0x001CFE        0048003F                 r2 = r6 + r1;
0x001CFF        FD0000FF 09306910        r1 = Null + M[$wall_clock_adjustment];
0x001D01        0933FE71                 r1 = r1 + M[0xfffe71];
0x001D02        0083004F                 r6 = r1 + r2;
0x001D03        D58A0006                 M[r8 + 6] = r6;

 <$M.calc_time_to_play.done>
0x001D04        E1F0F781                 call $interrupt.unblock;
0x001D05        09003915                 Null = Null + M[$warp_timer_id];
0x001D06        DD100005                 if NE jump $M.calc_time_to_play.do_not_set_timer;
0x001D07        01302FD4                 r1 = Null + 12244;
0x001D08        01501F25                 r3 = Null + 7973;
0x001D09        E1F0F7C4                 call $timer.schedule_event_in;
0x001D0A        19503915                 M[$warp_timer_id] = r3 + Null;

 <$M.calc_time_to_play.do_not_set_timer>
0x001D0B        DDF0F7CC                 jump $pop_rLink_and_rts;

 <$sco_schedule_to_air>
0x001D0C        F3D00000                 push rLink;
0x001D0D        FD0000FF 09306904        r1 = Null + M[$wall_clock_msw];
0x001D0F        09403905                 r2 = Null + M[$wall_clock_lsw];
0x001D10        8D330010                 r1 = r1 LSHIFT 16;
0x001D11        8144FFFF                 r2 = r2 AND 0xffff;
0x001D12        03430000                 r2 = r2 + r1;
0x001D13        FD0000FF 09306904        r1 = Null + M[$wall_clock_msw];
0x001D15        8D330078                 r1 = r1 LSHIFT -8;
0x001D16        FD0000FF 09506906        r3 = Null + M[$sco_param_clock_msw];
0x001D18        09603907                 r4 = Null + M[$sco_param_clock_lsw];

 <$M.sco_schedule_to_air.sco_schedule_next_instant>
0x001D19        2086004F                 r6 = r4 - r2;
0x001D1A        2475003F                 r5 = r3 - r1 - Borrow;
0x001D1B        99780271                 r5 = r6 * 625 (int);
0x001D1C        9177007F                 r5 = r5 ASHIFT -1;
0x001D1D        FD0000FF 09206905        r0 = Null + M[$wall_clock_time];
0x001D1F        0042007F                 r2 = r0 + r5;
0x001D20        FD0000FF 29446908        r2 = r2 - M[$sco_param_to_air_time];
0x001D22        0054000F                 r3 = r2 + Null;
0x001D23        29443914                 r2 = r2 - M[$subwoofer.sco_offset];
0x001D24        2904FE71                 Null = r2 - M[0xfffe71];
0x001D25        DD500007                 if POS jump $M.sco_schedule_to_air.continue;
0x001D26        09303906                 r1 = Null + M[$sco_param_tesco];
0x001D27        99330271                 r1 = r1 * 625 (int);

 <$M.sco_schedule_to_air.advance>
0x001D28        03430000                 r2 = r2 + r1;
0x001D29        03530000                 r3 = r3 + r1;
0x001D2A        2904FE71                 Null = r2 - M[0xfffe71];
0x001D2B        DD40FFFD                 if NEG jump $M.sco_schedule_to_air.advance;

 <$M.sco_schedule_to_air.continue>
0x001D2C        19503911                 M[$esco_write_deadline] = r3 + Null;
0x001D2D        F3400000                 push r2;
0x001D2E        FD0000FF 09406909        r2 = Null + M[$sco_timer_id];
0x001D30        E1F0F54A                 call $timer.cancel_event;
0x001D31        F3440000                 pop r2;
0x001D32        FD0000FF 01305FCF        r1 = Null + -41009;
0x001D34        01501F08                 r3 = Null + 7944;
0x001D35        E1F0F359                 call $timer.schedule_event_at;
0x001D36        FD0000FF 19506909        M[$sco_timer_id] = r3 + Null;
0x001D38        012038C2                 r0 = Null + 14530;
0x001D39        E1F0F76D                 call $cbuffer.get_write_address_and_size;
0x001D3A        5000002F                 I0 = Null + r0;
0x001D3B        50C0003F                 L0 = Null + r1;
0x001D3C        5180FF9C                 M0 = Null + -100;
0x001D3D        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001D3E        012038C2                 r0 = Null + 14530;
0x001D3F        4430000F                 r1 = Null + I0;
0x001D40        E1F0F775                 call $cbuffer.set_read_address;
0x001D41        51C00000                 L0 = Null + 0;
0x001D42        DDF0F795                 jump $pop_rLink_and_rts;

 <$spdif_pause_detect>
0x001D43        F3D00000                 push rLink;
0x001D44        0009000F                 Null = r7 + Null;
0x001D45        DD10002C                 if NE jump $M.spdif_pause_detect.spdif_stream_active;
0x001D46        FD0000FF 092068F2        r0 = Null + M[$spdif_pause_timer];
0x001D48        012203E8                 r0 = r0 + 1000;
0x001D49        21021388                 Null = r0 - 5000;
0x001D4A        DD500004                 if POS jump $M.spdif_pause_detect.insert_silence;
0x001D4B        FD0000FF 192068F2        M[$spdif_pause_timer] = r0 + Null;
0x001D4D        DDF00029                 jump $M.spdif_pause_detect.end;

 <$M.spdif_pause_detect.insert_silence>
0x001D4E        09500F5E                 r3 = Null + M[0xf5e];
0x001D4F        DD000027                 if EQ jump $M.spdif_pause_detect.end;
0x001D50        096038F2                 r4 = Null + M[$spdif_silence_to_insert];
0x001D51        DDD00025                 if LE jump $M.spdif_pause_detect.end;
0x001D52        09200F46                 r0 = Null + M[0xf46];
0x001D53        E1F0F712                 call $cbuffer.calc_amount_space;
0x001D54        21220090                 r0 = r0 - 144;
0x001D55        DD400021                 if NEG jump $M.spdif_pause_detect.end;
0x001D56        FD000000 CD1503E8        rMAC = r3 * 0.00011920928955078125 (SS);
0x001D58        91110005                 rMAC = rMAC ASHIFT 5 (56bit);
0x001D59        FD000043 95C11BDF        r10 = rMAC * 0.52428805828094482 (frac);
0x001D5B        FD000003 0140D090        r2 = Null + 250000;
0x001D5D        CC1400CF                 rMAC = r2 * r10 (SS);
0x001D5E        D9050000                 Div = rMAC / r3;
0x001D5F        D9500001                 r3 = DivResult;
0x001D60        396538F2                 M[$spdif_silence_to_insert] = r4 - r3;
0x001D61        E4C2005F                 r10 = MIN r0;
0x001D62        FD0000FF 81CCFFFE        r10 = r10 AND 0xfffffe;
0x001D64        DD000012                 if EQ jump $M.spdif_pause_detect.end;
0x001D65        09200F46                 r0 = Null + M[0xf46];
0x001D66        E1F0F740                 call $cbuffer.get_write_address_and_size;
0x001D67        5000002F                 I0 = Null + r0;
0x001D68        50C0003F                 L0 = Null + r1;
0x001D69        01200000                 r0 = Null + 0;
0x001D6A        E5F00002                 do $M.spdif_pause_detect.sil_loop;
0x001D6B        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.spdif_pause_detect.sil_loop>
0x001D6C        51C00000                 L0 = Null + 0;
0x001D6D        012000B5                 r0 = Null + 181;
0x001D6E        4430000F                 r1 = Null + I0;
0x001D6F        E1F0F74A                 call $cbuffer.set_write_address;
0x001D70        DDF00006                 jump $M.spdif_pause_detect.end;

 <$M.spdif_pause_detect.spdif_stream_active>
0x001D71        FD0000FF 190068F2        M[$spdif_pause_timer] = Null + Null;
0x001D73        FD000000 0120C350        r0 = Null + 50000;
0x001D75        192038F2                 M[$spdif_silence_to_insert] = r0 + Null;

 <$M.spdif_pause_detect.end>
0x001D76        DDF0F761                 jump $pop_rLink_and_rts;

 <$sco_params_message_handler>
0x001D77        F3D00000                 push rLink;
0x001D78        D1250001                 r0 = M[r3 + 1];
0x001D79        19203906                 M[$sco_param_tesco] = r0 + Null;
0x001D7A        D1250003                 r0 = M[r3 + 3];
0x001D7B        FD0000FF 19206907        M[$sco_param_to_air_size] = r0 + Null;
0x001D7D        D1250004                 r0 = M[r3 + 4];
0x001D7E        19203908                 M[$sco_param_from_air_size] = r0 + Null;
0x001D7F        D1250005                 r0 = M[r3 + 5];
0x001D80        D1350006                 r1 = M[r3 + 6];
0x001D81        8D220010                 r0 = r0 LSHIFT 16;
0x001D82        8133FFFF                 r1 = r1 AND 0xffff;
0x001D83        03320000                 r1 = r1 + r0;
0x001D84        D1250005                 r0 = M[r3 + 5];
0x001D85        8D220078                 r0 = r0 LSHIFT -8;
0x001D86        FD0000FF 19206906        M[$sco_param_clock_msw] = r0 + Null;
0x001D88        19303907                 M[$sco_param_clock_lsw] = r1 + Null;
0x001D89        D1250007                 r0 = M[r3 + 7];
0x001D8A        8D220008                 r0 = r0 LSHIFT 8;
0x001D8B        91220078                 r0 = r0 ASHIFT -8;
0x001D8C        FD0000FF 19206908        M[$sco_param_to_air_time] = r0 + Null;
0x001D8E        D1250008                 r0 = M[r3 + 8];
0x001D8F        8D220008                 r0 = r0 LSHIFT 8;
0x001D90        91220078                 r0 = r0 ASHIFT -8;
0x001D91        19203909                 M[$sco_param_from_air_time] = r0 + Null;
0x001D92        FD0000FF 09406909        r2 = Null + M[$sco_timer_id];
0x001D94        E1F0F4E6                 call $timer.cancel_event;
0x001D95        85408017                 r2 = Null OR 0x8017;
0x001D96        09503902                 r3 = Null + M[$sub_link_port];
0x001D97        8155001F                 r3 = r3 AND 0x1f;
0x001D98        FD0000FF 09606907        r4 = Null + M[$sco_param_to_air_size];
0x001D9A        E1F0F723                 call $message.send;
0x001D9B        E1F0FF71                 call $sco_schedule_to_air;
0x001D9C        DDF0F73B                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.timer_handler>
0x001D9D        F3D00000                 push rLink;
0x001D9E        D13A0000                 r1 = M[r8 + 0];
0x001D9F        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x001DA0        D12A0002                 r0 = M[r8 + 2];
0x001DA1        2002003F                 Null = r0 - r1;
0x001DA2        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x001DA3        D14A0003                 r2 = M[r8 + 3];
0x001DA4        E444002F                 r2 = r2 + 1;
0x001DA5        D54A0003                 M[r8 + 3] = r2;
0x001DA6        D13A0001                 r1 = M[r8 + 1];
0x001DA7        2004003F                 Null = r2 - r1;
0x001DA8        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x001DA9        D10A0004                 Null = M[r8 + 4];
0x001DAA        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x001DAB        01500000                 r3 = Null + 0;
0x001DAC        D55A0004                 M[r8 + 4] = r3;
0x001DAD        D14A0005                 r2 = M[r8 + 5];
0x001DAE        E1F0F539                 call $message.send_short;
0x001DAF        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x001DB0        D10A0004                 Null = M[r8 + 4];
0x001DB1        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x001DB2        E450002F                 r3 = Null + 1;
0x001DB3        D55A0004                 M[r8 + 4] = r3;
0x001DB4        D14A0005                 r2 = M[r8 + 5];
0x001DB5        E1F0F532                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x001DB6        01400000                 r2 = Null + 0;
0x001DB7        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x001DB8        01200000                 r0 = Null + 0;
0x001DB9        D52A0002                 M[r8 + 2] = r0;
0x001DBA        DDF0F71D                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x001DBB        01200000                 r0 = Null + 0;
0x001DBC        D52A0003                 M[r8 + 3] = r0;
0x001DBD        D52A0002                 M[r8 + 2] = r0;
0x001DBE        E420002F                 r0 = Null + 1;
0x001DBF        D52A0004                 M[r8 + 4] = r0;
0x001DC0        DDF0F717                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x001DC1        F3D00000                 push rLink;
0x001DC2        00BC000F                 r9 = r10 + Null;
0x001DC3        D17A0002                 r5 = M[r8 + 2];
0x001DC4        511A0003                 I1 = r8 + 3;
0x001DC5        51D00000                 L1 = Null + 0;
0x001DC6        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x001DC7        00CB000F                 r10 = r9 + Null;
0x001DC8        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001DC9        D038002F                 r1 = M[r6 + r0];
0x001DCA        5000003F                 I0 = Null + r1;
0x001DCB        D039002F                 r1 = M[r7 + r0];
0x001DCC        50C0003F                 L0 = Null + r1;
0x001DCD        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001DCE        D038002F                 r1 = M[r6 + r0];
0x001DCF        5040003F                 I4 = Null + r1;
0x001DD0        D039002F                 r1 = M[r7 + r0];
0x001DD1        50E0003F                 L4 = Null + r1;
0x001DD2        D12A0001                 r0 = M[r8 + 1];
0x001DD3        D13A0000                 r1 = M[r8 + 0];
0x001DD4        E5F0000D                 do $M.cbops.soft_mute.sampleLoop;
0x001DD5        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x001DD6        00200004                 if NEG r0 = Null + Null;
0x001DD7        0160001F                 r4 = Null + 31;
0x001DD8        2006002F                 Null = r4 - r0;
0x001DD9        00260004                 if NEG r0 = r4 + Null;
0x001DDA        FD0000FF 01605DD0        r4 = Null + -41520;
0x001DDC        0062006F                 r4 = r0 + r4;
0x001DDD        D3600000                 r4 = M[r4 + Null];
0x001DDE        97460000                 r2 = r2 * r4 (frac);
0x001DDF        2040004F                 r2 = Null - r2;
0x001DE0        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x001DE1        E477003F                 r5 = r5 - 1;
0x001DE2        DD10FFE5                 if NE jump $M.cbops.soft_mute.channelLoop;
0x001DE3        D52A0001                 M[r8 + 1] = r0;
0x001DE4        51C00000                 L0 = Null + 0;
0x001DE5        51E00000                 L4 = Null + 0;
0x001DE6        DDF0F6F1                 jump $pop_rLink_and_rts;

 <$disable_esco_subwoofer>
0x001DE7        F3D00000                 push rLink;
0x001DE8        FD0000FF 09406909        r2 = Null + M[$sco_timer_id];
0x001DEA        E1F0F490                 call $timer.cancel_event;
0x001DEB        FD0000FF 09406912        r2 = Null + M[$wall_clock_timer_id];
0x001DED        E1F0F48D                 call $timer.cancel_event;
0x001DEE        0940390A                 r2 = Null + M[$bass_timer_id];
0x001DEF        E1F0F48B                 call $timer.cancel_event;
0x001DF0        FD0000FF 19005FD3        M[$bdaddr_struc] = Null + Null;
0x001DF2        FD0000FF 19005FD4        M[0xff5fd4] = Null + Null;
0x001DF4        FD0000FF 19005FD5        M[0xff5fd5] = Null + Null;
0x001DF6        FD0000FF 19005FD6        M[0xff5fd6] = Null + Null;
0x001DF8        19003906                 M[$sco_param_tesco] = Null + Null;
0x001DF9        19003902                 M[$sub_link_port] = Null + Null;
0x001DFA        1900392B                 M[$frame_sync.sync_flag] = Null + Null;
0x001DFB        FD0000FF 19005FC2        M[0xff5fc2] = Null + Null;
0x001DFD        19002FD3                 M[0x2fd3] = Null + Null;
0x001DFE        19002FA4                 M[$M.main.samples_latency_measure] = Null + Null;
0x001DFF        0120392B                 r0 = Null + 14635;
0x001E00        192038F9                 M[$music_example.sync_flag_ptr] = r0 + Null;
0x001E01        01200168                 r0 = Null + 360;
0x001E02        FD0000FF 192068F9        M[$music_example.frame_processing_size] = r0 + Null;

 <$M.disable_esco_subwoofer.done>
0x001E04        DDF0F6D3                 jump $pop_rLink_and_rts;

 <$bdaddr_message_handler>
0x001E05        F3D00000                 push rLink;
0x001E06        8D330078                 r1 = r1 LSHIFT -8;
0x001E07        FD0000FF 19305FD3        M[$bdaddr_struc] = r1 + Null;
0x001E09        FD0000FF 19405FD4        M[0xff5fd4] = r2 + Null;
0x001E0B        FD0000FF 19505FD5        M[0xff5fd5] = r3 + Null;
0x001E0D        FD0000FF 19605FD6        M[0xff5fd6] = r4 + Null;
0x001E0F        8540801B                 r2 = Null OR 0x801b;
0x001E10        FD0000FF 09505FD3        r3 = Null + M[$bdaddr_struc];
0x001E12        FD0000FF 09605FD4        r4 = Null + M[0xff5fd4];
0x001E14        FD0000FF 09705FD5        r5 = Null + M[0xff5fd5];
0x001E16        FD0000FF 09805FD6        r6 = Null + M[0xff5fd6];
0x001E18        E1F0F6A5                 call $message.send;
0x001E19        01302FE4                 r1 = Null + 12260;
0x001E1A        FD000001 014086A0        r2 = Null + 100000;
0x001E1C        01501E90                 r3 = Null + 7824;
0x001E1D        E1F0F6B0                 call $timer.schedule_event_in;
0x001E1E        E430002F                 r1 = Null + 1;
0x001E1F        FD0000FF 19306913        M[$subwoofer.running] = r1 + Null;
0x001E21        DDF0F6B6                 jump $pop_rLink_and_rts;

 <$enable_esco_subwoofer>
0x001E22        F3D00000                 push rLink;
0x001E23        19303914                 M[$subwoofer.sco_offset] = r1 + Null;
0x001E24        01302FDC                 r1 = Null + 12252;
0x001E25        FD000000 01408019        r2 = Null + 32793;
0x001E27        01501E05                 r3 = Null + 7685;
0x001E28        E1F00157                 call $message.register_handler;
0x001E29        FD0000FF 01305FCB        r1 = Null + -41013;
0x001E2B        FD000000 01408015        r2 = Null + 32789;
0x001E2D        01501D77                 r3 = Null + 7543;
0x001E2E        E1F00151                 call $message.register_handler;
0x001E2F        01302FE0                 r1 = Null + 12256;
0x001E30        FD000000 0140801C        r2 = Null + 32796;
0x001E32        01501C0F                 r3 = Null + 7183;
0x001E33        E1F0014C                 call $message.register_handler;

 <$M.enable_esco_subwoofer.done>
0x001E34        DDF0F6A3                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.init_avcopy_struct>
0x001E35        500000AF                 I0 = Null + r8;
0x001E36        01C00007                 r10 = Null + 7;
0x001E37        FD0000FF 51105F3D        I1 = Null + -41155;
0x001E39        E5F00003                 do $M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct;
0x001E3A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E3B        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct>
0x001E3C        D12A0001                 r0 = M[r8 + 1];
0x001E3D        01320003                 r1 = r0 + 3;
0x001E3E        D33A0000                 r1 = M[r1 + r8];
0x001E3F        D12A0002                 r0 = M[r8 + 2];
0x001E40        19003922                 M[$M.cbops.av_copy.right_channel] = Null + Null;
0x001E41        FD0000FF 01905F3F        r7 = Null + -41153;
0x001E43        014038C5                 r2 = Null + 14533;
0x001E44        D5490000                 M[r7 + 0] = r2;
0x001E45        D14A0001                 r2 = M[r8 + 1];
0x001E46        21040002                 Null = r2 - 2;
0x001E47        DD100006                 if NE jump $M.cbops.av_copy.init_avcopy_struct.is_mono_struct;
0x001E48        FD0000FF 014068CA        r2 = Null + -38710;
0x001E4A        D5490001                 M[r7 + 1] = r2;
0x001E4B        D14A0003                 r2 = M[r8 + 3];
0x001E4C        19403922                 M[$M.cbops.av_copy.right_channel] = r2 + Null;

 <$M.cbops.av_copy.init_avcopy_struct.is_mono_struct>
0x001E4D        DC0D000F                 rts;

 <$cbops.signal_detect_op.main>
0x001E4E        F3D00000                 push rLink;
0x001E4F        00BC000F                 r9 = r10 + Null;
0x001E50        D17A0000                 r5 = M[r8 + 0];
0x001E51        D15A0001                 r3 = M[r8 + 1];
0x001E52        514A0002                 I4 = r8 + 2;
0x001E53        51E00000                 L4 = Null + 0;
0x001E54        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x001E55        00CB000F                 r10 = r9 + Null;
0x001E56        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001E57        D038002F                 r1 = M[r6 + r0];
0x001E58        5000003F                 I0 = Null + r1;
0x001E59        D039002F                 r1 = M[r7 + r0];
0x001E5A        50C0003F                 L0 = Null + r1;
0x001E5B        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x001E5C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E5D        0002000F                 Null = r0 + Null;
0x001E5E        20200024                 if NEG r0 = Null - r0;
0x001E5F        2004002F                 Null = r2 - r0;
0x001E60        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x001E61        E455003F                 r3 = r3 - 1;
0x001E62        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x001E63        D5470002                 M[r5 + 2] = r2;
0x001E64        51C00000                 L0 = Null + 0;
0x001E65        DDF0F672                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetConfig.func>
0x001E66        F3D00000                 push rLink;
0x001E67        8144FFFF                 r2 = r2 AND 0xffff;
0x001E68        8D330010                 r1 = r1 LSHIFT 16;
0x001E69        87340000                 r1 = r1 OR r2;
0x001E6A        8166FFFF                 r4 = r4 AND 0xffff;
0x001E6B        8D550010                 r3 = r3 LSHIFT 16;
0x001E6C        87560000                 r3 = r3 OR r4;
0x001E6D        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x001E6E        83530000                 r3 = r3 AND r1;
0x001E6F        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x001E71        83230000                 r0 = r0 AND r1;
0x001E72        87250000                 r0 = r0 OR r3;
0x001E73        19202BCD                 M[$M.system_config.data.CurParams] = r0 + Null;
0x001E74        0140100F                 r2 = Null + 4111;
0x001E75        8D520070                 r3 = r0 LSHIFT -16;
0x001E76        8162FFFF                 r4 = r0 AND 0xffff;
0x001E77        E1F0F470                 call $message.send_short;
0x001E78        E430002F                 r1 = Null + 1;
0x001E79        193038F8                 M[$music_example.reinit] = r1 + Null;
0x001E7A        DDF0F65D                 jump $pop_rLink_and_rts;

 <$calc_sub_sra_ratio>
0x001E7B        F3D00000                 push rLink;
0x001E7C        012038C2                 r0 = Null + 14530;
0x001E7D        E1F0F600                 call $cbuffer.calc_amount_data;
0x001E7E        21340168                 r1 = r2 - 360;
0x001E7F        214402D0                 r2 = r2 - 720;
0x001E80        01500054                 r3 = Null + 84;
0x001E81        0015000F                 rMAC = r3 + Null;
0x001E82        2002003F                 Null = r0 - r1;
0x001E83        20110055                 if POS rMAC = rMAC - r3;
0x001E84        2002004F                 Null = r0 - r2;
0x001E85        20110055                 if POS rMAC = rMAC - r3;
0x001E86        09112E64                 rMAC = rMAC + M[0x2e64];
0x001E87        FD0000FF 09206911        r0 = Null + M[$sub_sra_ratio];
0x001E89        FD00000C CD11CCCD        rMAC = rMAC * 0.10000002384185791 (SS);
0x001E8B        FD000073 AD123333        rMAC = rMAC + r0 * 0.89999997615814209 (SS);
0x001E8D        FD0000FF 19106911        M[$sub_sra_ratio] = rMAC + Null;
0x001E8F        DDF0F648                 jump $pop_rLink_and_rts;

 <$wall_clock_timer_handler>
0x001E90        F3D00000                 push rLink;
0x001E91        8540801B                 r2 = Null OR 0x801b;
0x001E92        FD0000FF 09505FD3        r3 = Null + M[$bdaddr_struc];
0x001E94        FD0000FF 09605FD4        r4 = Null + M[0xff5fd4];
0x001E96        FD0000FF 09705FD5        r5 = Null + M[0xff5fd5];
0x001E98        FD0000FF 09805FD6        r6 = Null + M[0xff5fd6];
0x001E9A        E1F0F623                 call $message.send;
0x001E9B        01302FE4                 r1 = Null + 12260;
0x001E9C        FD000001 014086A0        r2 = Null + 100000;
0x001E9E        01501E90                 r3 = Null + 7824;
0x001E9F        E1F0F62B                 call $timer.schedule_event_in_period;
0x001EA0        FD0000FF 19506912        M[$wall_clock_timer_id] = r3 + Null;
0x001EA2        DDF0F635                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x001EA3        F3D00000                 push rLink;
0x001EA4        5000005F                 I0 = Null + r3;
0x001EA5        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001EA6        00C3000F                 r10 = r1 + Null;
0x001EA7        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x001EA8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001EA9        E1F011BC                 call $user_eq.calcParamAddrOffset;
0x001EAA        01222C22                 r0 = r0 + 11298;
0x001EAB        D3200000                 r0 = M[r0 + Null];
0x001EAC        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x001EAD        0075000F                 r5 = r3 + Null;
0x001EAE        0064000F                 r4 = r2 + Null;
0x001EAF        0150329B                 r3 = Null + 12955;
0x001EB0        E1F0F10C                 call $message.send_long;
0x001EB1        DDF0F626                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SoftMute.func>
0x001EB2        F3D00000                 push rLink;
0x001EB3        0043000F                 r2 = r1 + Null;
0x001EB4        81330001                 r1 = r1 AND 0x1;
0x001EB5        FD0000FF 01A03F79        r8 = Null + -49287;
0x001EB7        E1F00075                 call $M.cbops.soft_mute.message_handler.func;
0x001EB8        8D34007F                 r1 = r2 LSHIFT -1;
0x001EB9        81330001                 r1 = r1 AND 0x1;
0x001EBA        E420002F                 r0 = Null + 1;
0x001EBB        2030003F                 r1 = Null - r1;
0x001EBC        0003000F                 Null = r1 + Null;
0x001EBD        00320000                 if EQ r1 = r0 + Null;
0x001EBE        1930390F                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x001EBF        DDF0F618                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x001EC0        F3D00000                 push rLink;
0x001EC1        0023000F                 r0 = r1 + Null;
0x001EC2        E1F011A3                 call $user_eq.calcParamAddrOffset;
0x001EC3        01222C22                 r0 = r0 + 11298;
0x001EC4        8144FFFF                 r2 = r2 AND 0xffff;
0x001EC5        1824000F                 M[r0] = r2 + Null;
0x001EC6        21050000                 Null = r3 - 0;
0x001EC7        DD00F610                 if EQ jump $pop_rLink_and_rts;
0x001EC8        0023000F                 r0 = r1 + Null;
0x001EC9        019038E0                 r7 = Null + 14560;
0x001ECA        E1F01173                 call $user_eq.calcBandCoefs;
0x001ECB        DDF0F60C                 jump $pop_rLink_and_rts;

 <$audio_insert_silence>
0x001ECC        F3D00000                 push rLink;
0x001ECD        0025000F                 r0 = r3 + Null;
0x001ECE        E1F0F5D8                 call $cbuffer.get_write_address_and_size;
0x001ECF        5000002F                 I0 = Null + r0;
0x001ED0        50C0003F                 L0 = Null + r1;
0x001ED1        01200000                 r0 = Null + 0;
0x001ED2        E5F00002                 do $M.audio_insert_silence.audio_fill_loop;
0x001ED3        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_insert_silence.audio_fill_loop>
0x001ED4        0025000F                 r0 = r3 + Null;
0x001ED5        4430000F                 r1 = Null + I0;
0x001ED6        E1F0F5E3                 call $cbuffer.set_write_address;
0x001ED7        51C00000                 L0 = Null + 0;
0x001ED8        DDF0F5FF                 jump $pop_rLink_and_rts;

 <$signal_detect_timer_handler>
0x001ED9        F3D00000                 push rLink;
0x001EDA        FD0000FF 01A05F4B        r8 = Null + -41141;
0x001EDC        E1F0FEC1                 call $cbops.signal_detect_op.timer_handler;
0x001EDD        FD0000FF 01305F8F        r1 = Null + -41073;
0x001EDF        FD00000F 01404240        r2 = Null + 1000000;
0x001EE1        01501ED9                 r3 = Null + 7897;
0x001EE2        E1F0F5E8                 call $timer.schedule_event_in_period;
0x001EE3        DDF0F5F4                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x001EE4        0900006F                 Null = Null + M[$app_config.io];
0x001EE5        DC0D0005                 if POS rts;
0x001EE6        1930006F                 M[$app_config.io] = r1 + Null;
0x001EE7        21030009                 Null = r1 - 9;
0x001EE8        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_spdif;
0x001EE9        01200008                 r0 = Null + 8;
0x001EEA        FD0000FF 192068EB        M[$codec_type] = r0 + Null;
0x001EEC        01200122                 r0 = Null + 290;
0x001EED        192038EC                 M[$codec_config] = r0 + Null;
0x001EEE        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_spdif>
0x001EEF        DDF000FD                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x001EF0        DC0D000F                 rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x001EF1        F3D00000                 push rLink;
0x001EF2        0053000F                 r3 = r1 + Null;
0x001EF3        0023000F                 r0 = r1 + Null;
0x001EF4        E1F01171                 call $user_eq.calcParamAddrOffset;
0x001EF5        01222C22                 r0 = r0 + 11298;
0x001EF6        D062000F                 r4 = M[r0 + Null];
0x001EF7        01700000                 r5 = Null + 0;
0x001EF8        01800000                 r6 = Null + 0;
0x001EF9        0140329A                 r2 = Null + 12954;
0x001EFA        E1F0F3ED                 call $message.send_short;
0x001EFB        DDF0F5DC                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x001EFC        F3D00000                 push rLink;
0x001EFD        5000005F                 I0 = Null + r3;
0x001EFE        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001EFF        00C3000F                 r10 = r1 + Null;
0x001F00        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x001F01        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001F02        E1F01163                 call $user_eq.calcParamAddrOffset;
0x001F03        01222C22                 r0 = r0 + 11298;
0x001F04        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001F05        8133FFFF                 r1 = r1 AND 0xffff;
0x001F06        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x001F07        DDF0F5D0                 jump $pop_rLink_and_rts;

 <$sco_timer_handler>
0x001F08        F3D00000                 push rLink;
0x001F09        0920390B                 r0 = Null + M[$sub_app_esco_func];
0x001F0A        E0020001                 if NE call r0;
0x001F0B        01401D4C                 r2 = Null + 7500;
0x001F0C        FD0000FF 01305FCF        r1 = Null + -41009;
0x001F0E        01501F08                 r3 = Null + 7944;
0x001F0F        E1F0F5BB                 call $timer.schedule_event_in_period;
0x001F10        FD0000FF 19506909        M[$sco_timer_id] = r3 + Null;
0x001F12        1900392B                 M[$frame_sync.sync_flag] = Null + Null;
0x001F13        DDF0F5C4                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.fill_silence_buffer_with_zeros>
0x001F14        D1320000                 r1 = M[r0 + 0];
0x001F15        50C0003F                 L0 = Null + r1;
0x001F16        D1320001                 r1 = M[r0 + 1];
0x001F17        5000003F                 I0 = Null + r1;
0x001F18        01300000                 r1 = Null + 0;
0x001F19        E5F00002                 do $M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero;
0x001F1A        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero>
0x001F1B        51C00000                 L0 = Null + 0;
0x001F1C        4430000F                 r1 = Null + I0;
0x001F1D        D5320002                 M[r0 + 2] = r1;
0x001F1E        DC0D000F                 rts;

 <$M.music_example_message.SignalDetect.func>
0x001F1F        F3D00000                 push rLink;
0x001F20        8D330008                 r1 = r1 LSHIFT 8;
0x001F21        FD0000FF 01A05F4B        r8 = Null + -41141;
0x001F23        E1F00010                 call $M.cbops.signal_detect_op.message_handler.func;
0x001F24        DDF0F5B3                 jump $pop_rLink_and_rts;

 <$set_synchronized_warp_handler>
0x001F25        F3D00000                 push rLink;
0x001F26        19003915                 M[$warp_timer_id] = Null + Null;
0x001F27        092038EF                 r0 = Null + M[$sra_rate_addr];
0x001F28        D3200000                 r0 = M[r0 + Null];
0x001F29        FD0000FF 19206914        M[$synchronized_rate] = r0 + Null;
0x001F2B        DDF0F5AC                 jump $pop_rLink_and_rts;

 <$M.cbops.soft_mute.message_handler.func>
0x001F2C        F3D00000                 push rLink;
0x001F2D        E420002F                 r0 = Null + 1;
0x001F2E        2030003F                 r1 = Null - r1;
0x001F2F        0003000F                 Null = r1 + Null;
0x001F30        00320000                 if EQ r1 = r0 + Null;
0x001F31        D53A0000                 M[r8 + 0] = r1;
0x001F32        DDF0F5A5                 jump $pop_rLink_and_rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x001F33        F3D00000                 push rLink;
0x001F34        D53A0000                 M[r8 + 0] = r1;
0x001F35        D54A0001                 M[r8 + 1] = r2;
0x001F36        DDF0F5A1                 jump $pop_rLink_and_rts;

 <$spi_comm.polled_service_routine>
0x001F37        FD000000 0120AAAA        r0 = Null + 43690;
0x001F39        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x001F3A        DC0D0001                 if NE rts;
0x001F3B        F3D00000                 push rLink;
0x001F3C        01C00032                 r10 = Null + 50;
0x001F3D        FD0000FF 0930692E        r1 = Null + M[$M.spi_comm.last_addr];
0x001F3F        09200045                 r0 = Null + M[$M.spi_block.command];
0x001F40        FD000000 0190AAAA        r7 = Null + 43690;
0x001F42        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x001F43        E403002F                 Null = r1 + 1;
0x001F44        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x001F45        D1430001                 r2 = M[r1 + 1];
0x001F46        2002004F                 Null = r0 - r2;
0x001F47        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x001F48        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x001F49        E1F000A3                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x001F4A        D1D30002                 rLink = M[r1 + 2];
0x001F4B        01300005                 r1 = Null + 5;
0x001F4C        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x001F4D        E00D000F                 call rLink;
0x001F4E        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x001F4F        01205555                 r0 = Null + 21845;
0x001F50        FD000000 0130AAAA        r1 = Null + 43690;
0x001F52        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x001F53        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x001F54        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x001F55        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x001F56        DDF0F581                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x001F57        F3D00000                 push rLink;
0x001F58        FD0000FF 01305FDF        r1 = Null + -40993;
0x001F5A        01407000                 r2 = Null + 28672;
0x001F5B        01501F5E                 r3 = Null + 8030;
0x001F5C        E1F00023                 call $message.register_handler;
0x001F5D        DDF00005                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x001F5E        E420002F                 r0 = Null + 1;
0x001F5F        FD0000FF 1920691C        M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x001F61        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x001F62        85408000                 r2 = Null OR 0x8000;
0x001F63        E1F0F384                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x001F64        FD0000FF 0900691C        Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x001F66        DD00FFFE                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x001F67        DDF0F570                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x001F68        D12A000A                 r0 = M[r8 + 10];
0x001F69        D13A000B                 r1 = M[r8 + 11];
0x001F6A        D14A000C                 r2 = M[r8 + 12];
0x001F6B        D15A000E                 r3 = M[r8 + 14];
0x001F6C        D16A000F                 r4 = M[r8 + 15];
0x001F6D        2073002F                 r5 = r1 - r0;
0x001F6E        CC17005F                 rMAC = r5 * r3 (SS);
0x001F6F        D51A0012                 M[r8 + 18] = rMAC;
0x001F70        2074003F                 r5 = r2 - r1;
0x001F71        CC17006F                 rMAC = r5 * r4 (SS);
0x001F72        D51A0013                 M[r8 + 19] = rMAC;
0x001F73        D15A000D                 r3 = M[r8 + 13];
0x001F74        D16A0010                 r4 = M[r8 + 16];
0x001F75        2075004F                 r5 = r3 - r2;
0x001F76        CC17006F                 rMAC = r5 * r4 (SS);
0x001F77        D51A0014                 M[r8 + 20] = rMAC;
0x001F78        01300000                 r1 = Null + 0;
0x001F79        D16A0007                 r4 = M[r8 + 7];
0x001F7A        1863000F                 M[r4] = r1 + Null;
0x001F7B        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x001F7C        8966FFFF                 r4 = r4 XOR 0xffff;
0x001F7D        D5630003                 M[r1 + 3] = r4;
0x001F7E        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x001F7F        8520FFFF                 r0 = Null OR 0xffff;
0x001F80        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x001F81        F3D00000                 push rLink;
0x001F82        E1F0F50B                 call $block_interrupts;
0x001F83        0920391A                 r0 = Null + M[$message.last_addr];
0x001F84        D5230000                 M[r1 + 0] = r0;
0x001F85        1930391A                 M[$message.last_addr] = r1 + Null;
0x001F86        D5430001                 M[r1 + 1] = r2;
0x001F87        D5530002                 M[r1 + 2] = r3;
0x001F88        E1F0F4FD                 call $interrupt.unblock;
0x001F89        DDF0F54E                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x001F8A        F3D00000                 push rLink;
0x001F8B        01302FF4                 r1 = Null + 12276;
0x001F8C        FD000000 01408007        r2 = Null + 32775;
0x001F8E        0150116F                 r3 = Null + 4463;
0x001F8F        E1F0FFF0                 call $message.register_handler;
0x001F90        FD0000FF 01305FE3        r1 = Null + -40989;
0x001F92        85408008                 r2 = Null OR 0x8008;
0x001F93        0150116F                 r3 = Null + 4463;
0x001F94        E1F0FFEB                 call $message.register_handler;
0x001F95        DDF0F542                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x001F96        F3D00000                 push rLink;
0x001F97        FD0000FF 01305FE7        r1 = Null + -40985;
0x001F99        8540801C                 r2 = Null OR 0x801c;
0x001F9A        01500EDF                 r3 = Null + 3807;
0x001F9B        E1F0FFE4                 call $message.register_handler;
0x001F9C        01302FFC                 r1 = Null + 12284;
0x001F9D        8540801D                 r2 = Null OR 0x801d;
0x001F9E        015014DB                 r3 = Null + 5339;
0x001F9F        E1F0FFE0                 call $message.register_handler;
0x001FA0        DDF0F537                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x001FA1        01200015                 r0 = Null + 21;
0x001FA2        1920FE14                 M[0xfffe14] = r0 + Null;
0x001FA3        01200311                 r0 = Null + 785;
0x001FA4        1920FE15                 M[0xfffe15] = r0 + Null;
0x001FA5        E420002F                 r0 = Null + 1;
0x001FA6        1920FE11                 M[0xfffe11] = r0 + Null;
0x001FA7        1920FE12                 M[0xfffe12] = r0 + Null;
0x001FA8        1920FE13                 M[0xfffe13] = r0 + Null;
0x001FA9        1900FE4E                 M[0xfffe4e] = Null + Null;
0x001FAA        85EE0080                 rFlags = rFlags OR 0x80;
0x001FAB        DC0D000F                 rts;
0x001FAC        DDF0E054                 jump $reset;
0x001FAD        DDF0E055                 jump $interrupt.handler;

 <$audio_proc.peq.initialize>
0x001FAE        D1A90003                 r8 = M[r7 + 3];
0x001FAF        D12A0000                 r0 = M[r8 + 0];
0x001FB0        812200FF                 r0 = r0 AND 0xff;
0x001FB1        D5290006                 M[r7 + 6] = r0;
0x001FB2        E432002F                 r1 = r0 + 1;
0x001FB3        91C30001                 r10 = r1 ASHIFT 1;
0x001FB4        D5C90007                 M[r7 + 7] = r10;
0x001FB5        01390009                 r1 = r7 + 9;
0x001FB6        D5390004                 M[r7 + 4] = r1;
0x001FB7        99C20005                 r10 = r0 * 5 (int);
0x001FB8        D5C90008                 M[r7 + 8] = r10;
0x001FB9        012A0003                 r0 = r8 + 3;
0x001FBA        D5290005                 M[r7 + 5] = r0;
0x001FBB        DC0D000F                 rts;

 <$audio_proc.delay.initialize>
0x001FBC        D12A0002                 r0 = M[r8 + 2];
0x001FBD        F3D00000                 push rLink;
0x001FBE        E1F0F4E3                 call $cbuffer.get_read_address_and_size;
0x001FBF        5000002F                 I0 = Null + r0;
0x001FC0        50C0003F                 L0 = Null + r1;
0x001FC1        00C3000F                 r10 = r1 + Null;
0x001FC2        F3D40000                 pop rLink;
0x001FC3        01200000                 r0 = Null + 0;
0x001FC4        E5F00002                 do $M.audio_proc.delay.initialize.loop_delay_init;
0x001FC5        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.delay.initialize.loop_delay_init>
0x001FC6        51C00000                 L0 = Null + 0;
0x001FC7        DC0D000F                 rts;

 <$_stack_initialise>
0x001FC8        FD0000FF 01B03239        r9 = Null + -52679;
0x001FCA        19B0FE67                 M[0xfffe67] = r9 + Null;
0x001FCB        FD0000FF 01B0317A        r9 = Null + -52870;
0x001FCD        19B0FE66                 M[0xfffe66] = r9 + Null;
0x001FCE        19B0FE68                 M[0xfffe68] = r9 + Null;
0x001FCF        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x001FD0        E420002F                 r0 = Null + 1;
0x001FD1        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x001FD2        DC0D000F                 rts;

 <$cbuffer.initialise>
0x001FD3        F3D00000                 push rLink;
0x001FD4        FD0000FF 01305FDB        r1 = Null + -40997;
0x001FD6        85408001                 r2 = Null OR 0x8001;
0x001FD7        01500CCA                 r3 = Null + 3274;
0x001FD8        E1F0FFA7                 call $message.register_handler;
0x001FD9        DDF0F4FE                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x001FDA        F3D00000                 push rLink;
0x001FDB        FD0000FF 0920692E        r0 = Null + M[$M.spi_comm.last_addr];
0x001FDD        D5230000                 M[r1 + 0] = r0;
0x001FDE        FD0000FF 1930692E        M[$M.spi_comm.last_addr] = r1 + Null;
0x001FE0        D5430001                 M[r1 + 1] = r2;
0x001FE1        D5530002                 M[r1 + 2] = r3;
0x001FE2        DDF0F4F5                 jump $pop_rLink_and_rts;

 <$frame_sync.1ms_delay>
0x001FE3        E430002F                 r1 = Null + 1;
0x001FE4        1930392B                 M[$frame_sync.sync_flag] = r1 + Null;
0x001FE5        0930FE4D                 r1 = Null + M[0xfffe4d];
0x001FE6        0120003F                 r0 = Null + 63;
0x001FE7        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.1ms_delay.frame_operator_sync_loop>
0x001FE8        0900392B                 Null = Null + M[$frame_sync.sync_flag];
0x001FE9        DD10FFFF                 if NE jump $M.frame_sync.1ms_delay.frame_operator_sync_loop;
0x001FEA        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x001FEB        DC0D000F                 rts;

 <$error>
0x001FEC        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x001FED        09B03918                 r9 = Null + M[$error.handler];
0x001FEE        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x001FEF        E400001F                 break;
0x001FF0        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x001FF1        0920E000                 r0 = Null + M[0xffe000];
0x001FF2        FD0000FF 1920691B        M[$message.last_seq_sent] = r0 + Null;
0x001FF4        DC0D000F                 rts;

 <$spi_comm.initialize>
0x001FF5        01205555                 r0 = Null + 21845;
0x001FF6        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x001FF7        DC0D000F                 rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.initialize>
0x003000        F3D00000                 push rLink;
0x003001        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x003002        81220007                 r0 = r0 AND 0x7;
0x003003        D03A000F                 r1 = M[r8 + Null];
0x003004        E423005F                 r0 = MIN r1;
0x003005        E422002F                 r0 = r0 + 1;
0x003006        03A20000                 r8 = r8 + r0;
0x003007        D3A00000                 r8 = M[r8 + Null];
0x003008        E1F00002                 call $user_eq.calcBankCoefs;
0x003009        DDF0E4CE                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs>
0x00300A        F3D00000                 push rLink;
0x00300B        D029000F                 r0 = M[r7 + Null];
0x00300C        D1420003                 r2 = M[r0 + 3];
0x00300D        01202D7A                 r0 = Null + 11642;
0x00300E        01302D9B                 r1 = Null + 11675;
0x00300F        2004002F                 Null = r2 - r0;
0x003010        00230000                 if EQ r0 = r1 + Null;
0x003011        F1000204                 pushm <r0, r7>;
0x003012        500000AF                 I0 = Null + r8;
0x003013        5010002F                 I1 = Null + r0;
0x003014        000A000F                 Null = r8 + Null;
0x003015        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x003016        01200000                 r0 = Null + 0;
0x003017        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003018        E420002F                 r0 = Null + 1;
0x003019        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301A        FD000040 01200000        r0 = Null + 4194304;
0x00301C        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301D        DDF00016                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x00301E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00301F        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003020        F3200000                 push r0;
0x003021        E1F000A3                 call $user_eq.calcPreGain.call_entry;
0x003022        4420001F                 r0 = Null + I1;
0x003023        01220019                 r0 = r0 + 25;
0x003024        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003025        F1010007                 pushm <I0, I1, I2>;
0x003026        E1F0006D                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003027        F104001C                 popm <r0, r1, r2>;
0x003028        01220004                 r0 = r0 + 4;
0x003029        5000002F                 I0 = Null + r0;
0x00302A        01330005                 r1 = r1 + 5;
0x00302B        5010003F                 I1 = Null + r1;
0x00302C        E444002F                 r2 = r2 + 1;
0x00302D        5020004F                 I2 = Null + r2;
0x00302E        F3240000                 pop r0;
0x00302F        E422003F                 r0 = r0 - 1;
0x003030        F3200000                 push r0;
0x003031        DD10FFF4                 if NE jump $user_eq.calcBandLoop;
0x003032        F3240000                 pop r0;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x003033        F1040204                 popm <r0, r7>;
0x003034        F1000204                 pushm <r0, r7>;
0x003035        D3900000                 r7 = M[r7 + Null];
0x003036        D5290003                 M[r7 + 3] = r0;
0x003037        E1F0EF77                 call $audio_proc.peq.initialize;
0x003038        F1040204                 popm <r0, r7>;
0x003039        D1990001                 r7 = M[r7 + 1];
0x00303A        D5290003                 M[r7 + 3] = r0;
0x00303B        E1F0EF73                 call $audio_proc.peq.initialize;
0x00303C        DDF0E49B                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x00303D        F3D00000                 push rLink;
0x00303E        0062000F                 r4 = r0 + Null;
0x00303F        8122FFF0                 r0 = r0 AND 0xfff0;
0x003040        E1F00025                 call $user_eq.calcParamAddrOffset;
0x003041        01A22C22                 r8 = r0 + 11298;
0x003042        D089000F                 r6 = M[r7 + Null];
0x003043        D1880003                 r6 = M[r6 + 3];
0x003044        21082D7A                 Null = r6 - 11642;
0x003045        DD000004                 if EQ jump $user_eq.calcBandCoefsB;
0x003046        01402D7A                 r2 = Null + 11642;
0x003047        01502D9B                 r3 = Null + 11675;
0x003048        DDF00003                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x003049        01402D9B                 r2 = Null + 11675;
0x00304A        01502D7A                 r3 = Null + 11642;

 <$user_eq.calcBandCoefsAorB>
0x00304B        5000005F                 I0 = Null + r3;
0x00304C        5010004F                 I1 = Null + r2;
0x00304D        01C00021                 r10 = Null + 33;
0x00304E        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x00304F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003050        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x003051        500000AF                 I0 = Null + r8;
0x003052        0026000F                 r0 = r4 + Null;
0x003053        E1F00027                 call $user_eq.calcCoefAddrOffset;
0x003054        00A2004F                 r8 = r0 + r2;
0x003055        501000AF                 I1 = Null + r8;
0x003056        00A3004F                 r8 = r1 + r2;
0x003057        502000AF                 I2 = Null + r8;
0x003058        F1000210                 pushm <r2, r7>;
0x003059        0026000F                 r0 = r4 + Null;
0x00305A        E1F0002D                 call $user_eq.coefCalc;
0x00305B        F1040210                 popm <r2, r7>;
0x00305C        F1000210                 pushm <r2, r7>;
0x00305D        D3900000                 r7 = M[r7 + Null];
0x00305E        D5490003                 M[r7 + 3] = r2;
0x00305F        E1F0EF4F                 call $audio_proc.peq.initialize;
0x003060        F1040210                 popm <r2, r7>;
0x003061        D1990001                 r7 = M[r7 + 1];
0x003062        D5490003                 M[r7 + 3] = r2;
0x003063        E1F0EF4B                 call $audio_proc.peq.initialize;
0x003064        DDF0E473                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003065        F1000038                 pushm <r1, r2, r3>;
0x003066        81320F00                 r1 = r0 AND 0xf00;
0x003067        91330078                 r1 = r1 ASHIFT -8;
0x003068        814200F0                 r2 = r0 AND 0xf0;
0x003069        9144007C                 r2 = r2 ASHIFT -4;
0x00306A        8152000F                 r3 = r0 AND 0xf;
0x00306B        0025000F                 r0 = r3 + Null;
0x00306C        21030000                 Null = r1 - 0;
0x00306D        DD00000B                 if EQ jump $user_eq.completedParamAddrCalculation;
0x00306E        E433003F                 r1 = r1 - 1;
0x00306F        99330016                 r1 = r1 * 22 (int);
0x003070        0023005F                 r0 = r1 + r3;
0x003071        E422002F                 r0 = r0 + 1;
0x003072        21040000                 Null = r2 - 0;
0x003073        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003074        E444003F                 r2 = r2 - 1;
0x003075        99440004                 r2 = r2 * 4 (int);
0x003076        03240000                 r0 = r0 + r2;
0x003077        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x003078        F1040038                 popm <r1, r2, r3>;
0x003079        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x00307A        F1000030                 pushm <r2, r3>;
0x00307B        814200F0                 r2 = r0 AND 0xf0;
0x00307C        9144007C                 r2 = r2 ASHIFT -4;
0x00307D        8152000F                 r3 = r0 AND 0xf;
0x00307E        0025000F                 r0 = r3 + Null;
0x00307F        21040000                 Null = r2 - 0;
0x003080        DD000005                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x003081        E444003F                 r2 = r2 - 1;
0x003082        0134001C                 r1 = r2 + 28;
0x003083        99240005                 r0 = r2 * 5 (int);
0x003084        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x003085        F1040030                 popm <r2, r3>;
0x003086        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x003087        F3D00000                 push rLink;
0x003088        814200F0                 r2 = r0 AND 0xf0;
0x003089        9144007C                 r2 = r2 ASHIFT -4;
0x00308A        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x00308B        8122000F                 r0 = r0 AND 0xf;
0x00308C        21020000                 Null = r0 - 0;
0x00308D        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x00308E        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00308F        E402003F                 Null = r0 - 1;
0x003090        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x003091        F3D40000                 pop rLink;
0x003092        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x003093        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x003094        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003095        21020000                 Null = r0 - 0;
0x003096        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x003097        0190155F                 r7 = Null + 5471;
0x003098        E402003F                 Null = r0 - 1;
0x003099        DD000050                 if EQ jump $user_eq.calcXP1.jump_entry;
0x00309A        01901594                 r7 = Null + 5524;
0x00309B        21020002                 Null = r0 - 2;
0x00309C        DD00004D                 if EQ jump $user_eq.calcXP1.jump_entry;
0x00309D        019015C8                 r7 = Null + 5576;
0x00309E        21020003                 Null = r0 - 3;
0x00309F        DD00004A                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A0        019016C7                 r7 = Null + 5831;
0x0030A1        21020007                 Null = r0 - 7;
0x0030A2        DD00005E                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A3        01901718                 r7 = Null + 5912;
0x0030A4        21020008                 Null = r0 - 8;
0x0030A5        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A6        01901768                 r7 = Null + 5992;
0x0030A7        21020009                 Null = r0 - 9;
0x0030A8        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A9        01901668                 r7 = Null + 5736;
0x0030AA        21020004                 Null = r0 - 4;
0x0030AB        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030AC        01901686                 r7 = Null + 5766;
0x0030AD        21020005                 Null = r0 - 5;
0x0030AE        DD000072                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030AF        019016A6                 r7 = Null + 5798;
0x0030B0        21020006                 Null = r0 - 6;
0x0030B1        DD00006F                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B2        0190184F                 r7 = Null + 6223;
0x0030B3        2102000A                 Null = r0 - 10;
0x0030B4        DD000091                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030B5        01901870                 r7 = Null + 6256;
0x0030B6        2102000B                 Null = r0 - 11;
0x0030B7        DD00008E                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030B8        01901893                 r7 = Null + 6291;
0x0030B9        2102000C                 Null = r0 - 12;
0x0030BA        DD00008B                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BB        2102000D                 Null = r0 - 13;
0x0030BC        DD0000B6                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030BD        F3D40000                 pop rLink;
0x0030BE        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030BF        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030C0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C1        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030C2        F3D40000                 pop rLink;
0x0030C3        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030C4        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030C5        0120003C                 r0 = Null + 60;
0x0030C6        E1F0E90F                 call $kal_float_lib.int_to_float;
0x0030C7        0042000F                 r2 = r0 + Null;
0x0030C8        0053000F                 r3 = r1 + Null;
0x0030C9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030CA        8D220008                 r0 = r0 LSHIFT 8;
0x0030CB        91220078                 r0 = r0 ASHIFT -8;
0x0030CC        0130F790                 r1 = Null + -2160;
0x0030CD        E423006F                 r0 = MAX r1;
0x0030CE        013002D0                 r1 = Null + 720;
0x0030CF        E423005F                 r0 = MIN r1;
0x0030D0        E1F0E905                 call $kal_float_lib.int_to_float;
0x0030D1        E1F0E95B                 call $kal_float_lib.div;
0x0030D2        E1F0E42B                 call $kal_filter_coef_lib.__db2lin;
0x0030D3        812200FF                 r0 = r0 AND 0xff;
0x0030D4        2122007F                 r0 = r0 - 127;
0x0030D5        8D33007F                 r1 = r1 LSHIFT -1;
0x0030D6        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030D7        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0030D8        F3D40000                 pop rLink;
0x0030D9        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x0030DA        F1030006                 SP = SP + 6;
0x0030DB        E1F0E477                 call $kal_filter_coef_lib.calc_bypass;
0x0030DC        DDF000C4                 jump $user_eq.pop_biquad_coefs_and_rts;
0x0030DD        FD000040 01200000        r0 = Null + 4194304;
0x0030DF        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E0        01200000                 r0 = Null + 0;
0x0030E1        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E2        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E3        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E4        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E5        E420002F                 r0 = Null + 1;
0x0030E6        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0030E7        F3D40000                 pop rLink;
0x0030E8        DC0D000F                 rts;

 <$user_eq.calcXP1.jump_entry>
0x0030E9        F1030006                 SP = SP + 6;
0x0030EA        01200003                 r0 = Null + 3;
0x0030EB        E1F0E8EA                 call $kal_float_lib.int_to_float;
0x0030EC        0042000F                 r2 = r0 + Null;
0x0030ED        0053000F                 r3 = r1 + Null;
0x0030EE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030EF        E430002F                 r1 = Null + 1;
0x0030F0        E423006F                 r0 = MAX r1;
0x0030F1        FD000000 0130EA60        r1 = Null + 60000;
0x0030F3        E423005F                 r0 = MIN r1;
0x0030F4        E1F0E8E1                 call $kal_float_lib.int_to_float;
0x0030F5        E1F0E937                 call $kal_float_lib.div;
0x0030F6        F100000C                 pushm <r0, r1>;
0x0030F7        FD000000 0130BB80        r1 = Null + 48000;
0x0030F9        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x0030FB        00230000                 if EQ r0 = r1 + Null;
0x0030FC        E1F0E8D9                 call $kal_float_lib.int_to_float;
0x0030FD        F100000C                 pushm <r0, r1>;
0x0030FE        E009000F                 call r7;
0x0030FF        DDF000A1                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003100        F1030006                 SP = SP + 6;
0x003101        01200003                 r0 = Null + 3;
0x003102        E1F0E8D3                 call $kal_float_lib.int_to_float;
0x003103        0042000F                 r2 = r0 + Null;
0x003104        0053000F                 r3 = r1 + Null;
0x003105        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003106        01300078                 r1 = Null + 120;
0x003107        E423006F                 r0 = MAX r1;
0x003108        FD000000 0130EA60        r1 = Null + 60000;
0x00310A        E423005F                 r0 = MIN r1;
0x00310B        E1F0E8CA                 call $kal_float_lib.int_to_float;
0x00310C        E1F0E920                 call $kal_float_lib.div;
0x00310D        F100000C                 pushm <r0, r1>;
0x00310E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00310F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003110        01300400                 r1 = Null + 1024;
0x003111        E423006F                 r0 = MAX r1;
0x003112        01302000                 r1 = Null + 8192;
0x003113        E423005F                 r0 = MIN r1;
0x003114        0130000C                 r1 = Null + 12;
0x003115        E1F0E8A5                 call $kal_float_lib.q_to_float;
0x003116        F100000C                 pushm <r0, r1>;
0x003117        FD000000 0130BB80        r1 = Null + 48000;
0x003119        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x00311B        00230000                 if EQ r0 = r1 + Null;
0x00311C        E1F0E8B9                 call $kal_float_lib.int_to_float;
0x00311D        F100000C                 pushm <r0, r1>;
0x00311E        E009000F                 call r7;
0x00311F        DDF00081                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x003120        F1030006                 SP = SP + 6;
0x003121        01200003                 r0 = Null + 3;
0x003122        E1F0E8B3                 call $kal_float_lib.int_to_float;
0x003123        0042000F                 r2 = r0 + Null;
0x003124        0053000F                 r3 = r1 + Null;
0x003125        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003126        0130003C                 r1 = Null + 60;
0x003127        E423006F                 r0 = MAX r1;
0x003128        FD000000 0130EA60        r1 = Null + 60000;
0x00312A        E423005F                 r0 = MIN r1;
0x00312B        E1F0E8AA                 call $kal_float_lib.int_to_float;
0x00312C        E1F0E900                 call $kal_float_lib.div;
0x00312D        F100000C                 pushm <r0, r1>;
0x00312E        0120003C                 r0 = Null + 60;
0x00312F        E1F0E8A6                 call $kal_float_lib.int_to_float;
0x003130        0042000F                 r2 = r0 + Null;
0x003131        0053000F                 r3 = r1 + Null;
0x003132        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003133        8D220008                 r0 = r0 LSHIFT 8;
0x003134        91220078                 r0 = r0 ASHIFT -8;
0x003135        0130FD30                 r1 = Null + -720;
0x003136        E423006F                 r0 = MAX r1;
0x003137        013002D0                 r1 = Null + 720;
0x003138        E423005F                 r0 = MIN r1;
0x003139        E1F0E89C                 call $kal_float_lib.int_to_float;
0x00313A        E1F0E8F2                 call $kal_float_lib.div;
0x00313B        F100000C                 pushm <r0, r1>;
0x00313C        FD000000 0130BB80        r1 = Null + 48000;
0x00313E        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x003140        00230000                 if EQ r0 = r1 + Null;
0x003141        E1F0E894                 call $kal_float_lib.int_to_float;
0x003142        F100000C                 pushm <r0, r1>;
0x003143        E009000F                 call r7;
0x003144        DDF0005C                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003145        F1030006                 SP = SP + 6;
0x003146        01200003                 r0 = Null + 3;
0x003147        E1F0E88E                 call $kal_float_lib.int_to_float;
0x003148        0042000F                 r2 = r0 + Null;
0x003149        0053000F                 r3 = r1 + Null;
0x00314A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314B        01300078                 r1 = Null + 120;
0x00314C        E423006F                 r0 = MAX r1;
0x00314D        FD000000 0130EA60        r1 = Null + 60000;
0x00314F        E423005F                 r0 = MIN r1;
0x003150        E1F0E885                 call $kal_float_lib.int_to_float;
0x003151        E1F0E8DB                 call $kal_float_lib.div;
0x003152        F100000C                 pushm <r0, r1>;
0x003153        0120003C                 r0 = Null + 60;
0x003154        E1F0E881                 call $kal_float_lib.int_to_float;
0x003155        0042000F                 r2 = r0 + Null;
0x003156        0053000F                 r3 = r1 + Null;
0x003157        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003158        8D220008                 r0 = r0 LSHIFT 8;
0x003159        91220078                 r0 = r0 ASHIFT -8;
0x00315A        0130FD30                 r1 = Null + -720;
0x00315B        E423006F                 r0 = MAX r1;
0x00315C        013002D0                 r1 = Null + 720;
0x00315D        E423005F                 r0 = MIN r1;
0x00315E        E1F0E877                 call $kal_float_lib.int_to_float;
0x00315F        E1F0E8CD                 call $kal_float_lib.div;
0x003160        F100000C                 pushm <r0, r1>;
0x003161        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003162        01300400                 r1 = Null + 1024;
0x003163        E423006F                 r0 = MAX r1;
0x003164        01302000                 r1 = Null + 8192;
0x003165        E423005F                 r0 = MIN r1;
0x003166        0130000C                 r1 = Null + 12;
0x003167        E1F0E853                 call $kal_float_lib.q_to_float;
0x003168        F100000C                 pushm <r0, r1>;
0x003169        FD000000 0130BB80        r1 = Null + 48000;
0x00316B        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x00316D        00230000                 if EQ r0 = r1 + Null;
0x00316E        E1F0E867                 call $kal_float_lib.int_to_float;
0x00316F        F100000C                 pushm <r0, r1>;
0x003170        E009000F                 call r7;
0x003171        DDF0002F                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x003172        F1030006                 SP = SP + 6;
0x003173        01200003                 r0 = Null + 3;
0x003174        E1F0E861                 call $kal_float_lib.int_to_float;
0x003175        0042000F                 r2 = r0 + Null;
0x003176        0053000F                 r3 = r1 + Null;
0x003177        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003178        0130003C                 r1 = Null + 60;
0x003179        E423006F                 r0 = MAX r1;
0x00317A        FD000000 0130EA60        r1 = Null + 60000;
0x00317C        E423005F                 r0 = MIN r1;
0x00317D        E1F0E858                 call $kal_float_lib.int_to_float;
0x00317E        E1F0E8AE                 call $kal_float_lib.div;
0x00317F        F100000C                 pushm <r0, r1>;
0x003180        0120003C                 r0 = Null + 60;
0x003181        E1F0E854                 call $kal_float_lib.int_to_float;
0x003182        0042000F                 r2 = r0 + Null;
0x003183        0053000F                 r3 = r1 + Null;
0x003184        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003185        8D220008                 r0 = r0 LSHIFT 8;
0x003186        91220078                 r0 = r0 ASHIFT -8;
0x003187        0130F790                 r1 = Null + -2160;
0x003188        E423006F                 r0 = MAX r1;
0x003189        013002D0                 r1 = Null + 720;
0x00318A        E423005F                 r0 = MIN r1;
0x00318B        E1F0E84A                 call $kal_float_lib.int_to_float;
0x00318C        E1F0E8A0                 call $kal_float_lib.div;
0x00318D        F100000C                 pushm <r0, r1>;
0x00318E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00318F        01300400                 r1 = Null + 1024;
0x003190        E423006F                 r0 = MAX r1;
0x003191        FD000000 01308000        r1 = Null + 32768;
0x003193        E423005F                 r0 = MIN r1;
0x003194        0130000C                 r1 = Null + 12;
0x003195        E1F0E825                 call $kal_float_lib.q_to_float;
0x003196        F100000C                 pushm <r0, r1>;
0x003197        FD000000 0130BB80        r1 = Null + 48000;
0x003199        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x00319B        00230000                 if EQ r0 = r1 + Null;
0x00319C        E1F0E839                 call $kal_float_lib.int_to_float;
0x00319D        F100000C                 pushm <r0, r1>;
0x00319E        E1F0E719                 call $kal_filter_coef_lib.calc_peq;
0x00319F        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031A0        F3240000                 pop r0;
0x0031A1        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A2        F3240000                 pop r0;
0x0031A3        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A4        F3240000                 pop r0;
0x0031A5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A6        F3240000                 pop r0;
0x0031A7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A8        F3240000                 pop r0;
0x0031A9        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AA        F3240000                 pop r0;
0x0031AB        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0031AC        F3D40000                 pop rLink;
0x0031AD        DC0D000F                 rts;

 <$main>
0x0031AE        E1F0EE1A                 call $_stack_initialise;
0x0031AF        E1F0EDF2                 call $interrupt.initialise;
0x0031B0        E1F0EE41                 call $message.initialise;
0x0031B1        E1F0EE22                 call $cbuffer.initialise;
0x0031B2        E1F0EDD8                 call $pskey.initialise;
0x0031B3        E1F0EDE3                 call $wall_clock.initialise;
0x0031B4        E1F0CE8A                 call $flash.init_dmconst;
0x0031B5        E1F0EE40                 call $spi_comm.initialize;
0x0031B6        FD0000FF 013033FC        r1 = Null + -52228;
0x0031B8        01401072                 r2 = Null + 4210;
0x0031B9        01500EAE                 r3 = Null + 3758;
0x0031BA        E1F0EDC5                 call $message.register_handler;
0x0031BB        013000A4                 r1 = Null + 164;
0x0031BC        01401073                 r2 = Null + 4211;
0x0031BD        01500E1F                 r3 = Null + 3615;
0x0031BE        E1F0EDC1                 call $message.register_handler;
0x0031BF        E1F00239                 call $music_example.power_up_reset;
0x0031C0        01401000                 r2 = Null + 4096;
0x0031C1        FD000000 0150E008        r3 = Null + 57352;
0x0031C3        096038F7                 r4 = Null + M[$music_example.Version];
0x0031C4        8D660078                 r4 = r4 LSHIFT -8;
0x0031C5        E1F0E122                 call $message.send_short;
0x0031C6        0120132F                 r0 = Null + 4911;
0x0031C7        1920390B                 M[$sub_app_esco_func] = r0 + Null;
0x0031C8        E1F0E94A                 call $M.Subwoofer.subwoofer_init;
0x0031C9        E1F0ED8E                 call $message.send_ready_wait_for_go;
0x0031CA        FD0000FF 01305F8B        r1 = Null + -41077;
0x0031CC        014005DC                 r2 = Null + 1500;
0x0031CD        01500C47                 r3 = Null + 3143;
0x0031CE        E1F0E2FF                 call $timer.schedule_event_in;
0x0031CF        01302F9C                 r1 = Null + 12188;
0x0031D0        014003E8                 r2 = Null + 1000;
0x0031D1        0150102B                 r3 = Null + 4139;
0x0031D2        E1F0E2FB                 call $timer.schedule_event_in;
0x0031D3        01302FA0                 r1 = Null + 12192;
0x0031D4        FD0000FF 094068E7        r2 = Null + M[$tmr_period_tone_copy];
0x0031D6        01501350                 r3 = Null + 4944;
0x0031D7        E1F0E2F6                 call $timer.schedule_event_in;
0x0031D8        FD0000FF 01305F8F        r1 = Null + -41073;
0x0031DA        FD00000F 01404240        r2 = Null + 1000000;
0x0031DC        01501ED9                 r3 = Null + 7897;
0x0031DD        E1F0E2F0                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x0031DE        E1F0ED59                 call $spi_comm.polled_service_routine;
0x0031DF        FD0000FF 01A033B6        r8 = Null + -52298;
0x0031E1        E1F0DC6C                 call $M.mips_profile.mainstart;
0x0031E2        FD0000FF 01705E0C        r5 = Null + -41460;
0x0031E4        E1F0D0D3                 call $spdif.decode;
0x0031E5        FD0000FF 01A033B6        r8 = Null + -52298;
0x0031E7        E1F0DC73                 call $M.mips_profile.mainend;
0x0031E8        D12A0006                 r0 = M[r8 + 6];
0x0031E9        19202FAA                 M[$music_example.PeakMipsDecoder] = r0 + Null;
0x0031EA        FD0000FF 09005E15        Null = Null + M[0xff5e15];
0x0031EC        E110EDF7                 if NE call $frame_sync.1ms_delay;
0x0031ED        E1F0DE5C                 call $syncronise_lfe_to_LR_channels;
0x0031EE        FD0000FF 095068F9        r3 = Null + M[$music_example.frame_processing_size];
0x0031F0        FD0000FF 01205FFB        r0 = Null + -40965;
0x0031F2        E1F0E28B                 call $cbuffer.calc_amount_data;
0x0031F3        2002005F                 Null = r0 - r3;
0x0031F4        DD40FFEA                 if NEG jump $M.main.frame_loop;
0x0031F5        FD0000FF 012068A0        r0 = Null + -38752;
0x0031F7        E1F0E286                 call $cbuffer.calc_amount_data;
0x0031F8        2002005F                 Null = r0 - r3;
0x0031F9        DD40FFE5                 if NEG jump $M.main.frame_loop;
0x0031FA        01200075                 r0 = Null + 117;
0x0031FB        E1F0E282                 call $cbuffer.calc_amount_data;
0x0031FC        2002005F                 Null = r0 - r3;
0x0031FD        DD40FFE1                 if NEG jump $M.main.frame_loop;
0x0031FE        FD0000FF 012068A3        r0 = Null + -38749;
0x003200        E1F0E265                 call $cbuffer.calc_amount_space;
0x003201        2002005F                 Null = r0 - r3;
0x003202        DD40FFDC                 if NEG jump $M.main.frame_loop;
0x003203        FD0000FF 090068F8        Null = Null + M[$music_example.stereo_processing];
0x003205        DD000005                 if EQ jump $M.main.mono_process;
0x003206        0120007D                 r0 = Null + 125;
0x003207        E1F0E25E                 call $cbuffer.calc_amount_space;
0x003208        2002005F                 Null = r0 - r3;
0x003209        DD40FFD5                 if NEG jump $M.main.frame_loop;

 <$M.main.mono_process>
0x00320A        E1F00002                 call $music_example_process;
0x00320B        DDF0FFD3                 jump $M.main.frame_loop;

 <$music_example_process>
0x00320C        F3D00000                 push rLink;
0x00320D        1900FE93                 M[0xfffe93] = Null + Null;
0x00320E        FD0000FF 01A03F34        r8 = Null + -49356;
0x003210        E1F0DC3D                 call $M.mips_profile.mainstart;
0x003211        090038F8                 Null = Null + M[$music_example.reinit];
0x003212        E110018D                 if NE call $music_example_reinitialize;
0x003213        FD0000FF 093068F7        r1 = Null + M[$music_example.sys_mode];
0x003215        FD0000FF 09205F77        r0 = Null + M[$music_example.SpiSysControl];
0x003217        FD0000FF 09605F7A        r4 = Null + M[$music_example.OvrMode];
0x003219        81022000                 Null = r0 AND 0x2000;
0x00321A        00360001                 if NE r1 = r4 + Null;
0x00321B        8D530001                 r3 = r1 LSHIFT 1;
0x00321C        FD0000FF D1454FEE        r2 = M[r3 + -45074];
0x00321E        FD000080 0120000D        r0 = Null + -8388595;
0x003220        E1F0E27B                 call $cbuffer.is_it_enabled;
0x003221        00340000                 if EQ r1 = r2 + Null;
0x003222        E440002F                 r2 = Null + 1;
0x003223        01600004                 r4 = Null + 4;
0x003224        8D530001                 r3 = r1 LSHIFT 1;
0x003225        FD0000FF D1054FEF        Null = M[r3 + -45073];
0x003227        00460000                 if EQ r2 = r4 + Null;
0x003228        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x00322A        FD0000FF 09606901        r4 = Null + M[$M.system_config.data.dithertype];
0x00322C        FD000000 2102AC44        Null = r0 - 44100;
0x00322E        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x00322F        FD000000 2102BB80        Null = r0 - 48000;
0x003231        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x003232        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x003233        19302FA8                 M[$music_example.CurMode] = r1 + Null;
0x003234        01400000                 r2 = Null + 0;
0x003235        E403003F                 Null = r1 - 1;
0x003236        00640000                 if EQ r4 = r2 + Null;
0x003237        21030004                 Null = r1 - 4;
0x003238        00640000                 if EQ r4 = r2 + Null;
0x003239        092038E8                 r0 = Null + M[$current_dac_sampling_rate];
0x00323A        FD000000 2102AC44        Null = r0 - 44100;
0x00323C        00640004                 if NEG r4 = r2 + Null;
0x00323D        19602E61                 M[0x2e61] = r4 + Null;
0x00323E        FD0000FF 19605E9D        M[0xff5e9d] = r4 + Null;
0x003240        8D530001                 r3 = r1 LSHIFT 1;
0x003241        FD0000FF D1254FEF        r0 = M[r3 + -45073];
0x003243        FD0000FF 192068F8        M[$music_example.stereo_processing] = r0 + Null;
0x003245        D1632F2C                 r4 = M[r1 + 12076];
0x003246        E1F0E20D                 call $frame_sync.run_function_table;
0x003247        FD0000FF 01A03F34        r8 = Null + -49356;
0x003249        E1F0DC11                 call $M.mips_profile.mainend;
0x00324A        D12A0006                 r0 = M[r8 + 6];
0x00324B        19202FA9                 M[$music_example.PeakMipsFunc] = r0 + Null;
0x00324C        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x00324E        19202FAB                 M[$music_example.SamplingRate] = r0 + Null;
0x00324F        DDF0E288                 jump $pop_rLink_and_rts;

 <$M.music_example.PsKeyReadHandler.func>
0x003250        F3D00000                 push rLink;
0x003251        E404002F                 Null = r2 + 1;
0x003252        DD10000C                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x003253        FD0000FF 092068FD        r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x003255        DD000005                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x003256        FD0000FF 190068FD        M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x003258        094038FE                 r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x003259        DDF00121                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x00325A        E420002F                 r0 = Null + 1;
0x00325B        FD0000FF 192068FD        M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x00325D        DDF00122                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x00325E        51050001                 I0 = r3 + 1;
0x00325F        E4C4003F                 r10 = r2 - 1;
0x003260        5820000F                 I2 = I0 + Null;
0x003261        FD000000 0150FFFF        r3 = Null + 65535;
0x003263        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x003264        03002800                 Null = Null + Null, r0 = M[I2,0];
0x003265        83250000                 r0 = r0 AND r3;
0x003266        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x003267        01C00100                 r10 = Null + 256;
0x003268        79220001                 I2 = I2 - 1;
0x003269        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00326A        2003002F                 Null = r1 - r0;
0x00326B        DD100114                 if NE jump $M.music_example.LoadParams.done;
0x00326C        03007100                 Null = Null + Null, r5 = M[I0,1];
0x00326D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00326E        816200FF                 r4 = r0 AND 0xff;
0x00326F        006C0000                 if EQ r4 = r10 + Null;
0x003270        8D220078                 r0 = r0 LSHIFT -8;
0x003271        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x003272        8DAA007F                 r8 = r8 LSHIFT -1;
0x003273        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x003274        6C02000F                 Null = I2 - I0;
0x003275        DD400016                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x003276        03005100                 Null = Null + Null, r3 = M[I0,1];
0x003277        FD000000 01A08000        r8 = Null + 32768;
0x003279        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x00327A        800500AF                 Null = r3 AND r8;
0x00327B        DD00000D                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x00327C        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x00327E        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x00327F        03004100                 Null = Null + Null, r2 = M[I0,1];
0x003280        8D840078                 r6 = r2 LSHIFT -8;
0x003281        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x003282        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x003283        03003100                 Null = Null + Null, r1 = M[I0,1];
0x003284        8D880010                 r6 = r6 LSHIFT 16;
0x003285        87380000                 r1 = r1 OR r6;
0x003286        098238FD                 r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x003287        D5382BCD                 M[r6 + 11213] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x003288        E422002F                 r0 = r0 + 1;
0x003289        2002006F                 Null = r0 - r4;
0x00328A        DD40FFE8                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x00328B        094038FD                 r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x00328C        200600CF                 Null = r4 - r10;
0x00328D        004400C0                 if EQ r2 = r2 + r10;
0x00328E        194038FD                 M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x00328F        0047000F                 r2 = r5 + Null;
0x003290        DDF000EA                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example_message.Volume.vmdB2vol>
0x003291        FD000035 0130F5E3        r1 = Null + 3536355;
0x003293        991200B5                 rMAC = r0 * 181 (int);
0x003294        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x003295        FD000004 21210000        r0 = rMAC - 262144;
0x003297        00200005                 if POS r0 = Null + Null;
0x003298        DDF0E0F6                 jump $math.pow2_taylor;

 <$M.music_example_message.Volume.update_volumes>
0x003299        F3D00000                 push rLink;
0x00329A        8133000F                 r1 = r1 AND 0xf;
0x00329B        193038FA                 M[$music_example.SystemVolume] = r1 + Null;
0x00329C        0004000F                 Null = r2 + Null;
0x00329D        00400005                 if POS r2 = Null + Null;
0x00329E        FD0000FF 194068FA        M[$music_example.MasterVolume] = r2 + Null;
0x0032A0        0005000F                 Null = r3 + Null;
0x0032A1        00500005                 if POS r3 = Null + Null;
0x0032A2        195038FB                 M[$music_example.ToneVolume] = r3 + Null;
0x0032A3        212602D2                 r0 = r4 - 722;
0x0032A4        20660025                 if POS r4 = r4 - r0;
0x0032A5        2126FD2E                 r0 = r4 - -722;
0x0032A6        20660024                 if NEG r4 = r4 - r0;
0x0032A7        FD0000FF 196068FB        M[$music_example.LeftTrimVolume] = r4 + Null;
0x0032A9        212702D2                 r0 = r5 - 722;
0x0032AA        20770025                 if POS r5 = r5 - r0;
0x0032AB        2126FD2E                 r0 = r4 - -722;
0x0032AC        20770024                 if NEG r5 = r5 - r0;
0x0032AD        197038FC                 M[$music_example.RightTrimVolume] = r5 + Null;
0x0032AE        0024000F                 r0 = r2 + Null;
0x0032AF        E1F0FFE2                 call $M.music_example_message.Volume.vmdB2vol;
0x0032B0        91220002                 r0 = r0 ASHIFT 2;
0x0032B1        19202E82                 M[0x2e82] = r0 + Null;
0x0032B2        19202ED7                 M[0x2ed7] = r0 + Null;
0x0032B3        092038FB                 r0 = Null + M[$music_example.ToneVolume];
0x0032B4        E1F0FFDD                 call $M.music_example_message.Volume.vmdB2vol;
0x0032B5        91520003                 r3 = r0 ASHIFT 3;
0x0032B6        FD0000FF 19505E5F        M[0xff5e5f] = r3 + Null;
0x0032B8        FD0000FF 19505E87        M[0xff5e87] = r3 + Null;
0x0032BA        FD0000FF 092068FB        r0 = Null + M[$music_example.LeftTrimVolume];
0x0032BC        E1F0FFD5                 call $M.music_example_message.Volume.vmdB2vol;
0x0032BD        19202E8A                 M[0x2e8a] = r0 + Null;
0x0032BE        092038FC                 r0 = Null + M[$music_example.RightTrimVolume];
0x0032BF        E1F0FFD2                 call $M.music_example_message.Volume.vmdB2vol;
0x0032C0        19202E8F                 M[0x2e8f] = r0 + Null;
0x0032C1        096038FA                 r4 = Null + M[$music_example.SystemVolume];
0x0032C2        0056000F                 r3 = r4 + Null;
0x0032C3        01401006                 r2 = Null + 4102;
0x0032C4        E1F0E023                 call $message.send_short;
0x0032C5        DDF0E212                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.func>
0x0032C6        F3D00000                 push rLink;
0x0032C7        D1350000                 r1 = M[r3 + 0];
0x0032C8        D1450001                 r2 = M[r3 + 1];
0x0032C9        D1650003                 r4 = M[r3 + 3];
0x0032CA        D1750004                 r5 = M[r3 + 4];
0x0032CB        D1550002                 r3 = M[r3 + 2];
0x0032CC        E1F0FFCD                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example_message.Volume.volume_msg_done>
0x0032CD        DDF0E20A                 jump $pop_rLink_and_rts;

 <$config_resampler>
0x0032CE        F3D00000                 push rLink;
0x0032CF        FD0000FF 01305D68        r1 = Null + -41624;

 <$M.config_resampler.lookup_loop>
0x0032D1        D023000F                 r0 = M[r1 + Null];
0x0032D2        DD000009                 if EQ jump $M.config_resampler.rates_not_supported;
0x0032D3        FD0000FF 290268E8        Null = r0 - M[$current_codec_sampling_rate];
0x0032D5        DD100004                 if NE jump $M.config_resampler.skip;
0x0032D6        D1230001                 r0 = M[r1 + 1];
0x0032D7        290238E8                 Null = r0 - M[$current_dac_sampling_rate];
0x0032D8        DD000017                 if EQ jump $M.config_resampler.done;

 <$M.config_resampler.skip>
0x0032D9        01330003                 r1 = r1 + 3;
0x0032DA        DDF0FFF7                 jump $M.config_resampler.lookup_loop;

 <$M.config_resampler.rates_not_supported>
0x0032DB        FD0000FF 095068E8        r3 = Null + M[$current_codec_sampling_rate];
0x0032DD        096038E8                 r4 = Null + M[$current_dac_sampling_rate];
0x0032DE        0120000A                 r0 = Null + 10;
0x0032DF        0015000F                 rMAC = r3 + Null;
0x0032E0        D9020000                 Div = rMAC / r0;
0x0032E1        D9500001                 r3 = DivResult;
0x0032E2        0016000F                 rMAC = r4 + Null;
0x0032E3        D9020000                 Div = rMAC / r0;
0x0032E4        D9600001                 r4 = DivResult;
0x0032E5        01401090                 r2 = Null + 4240;
0x0032E6        E1F0E001                 call $message.send_short;
0x0032E7        E1F0ED05                 call $error;
0x0032E8        FD0000FF 01305D68        r1 = Null + -41624;
0x0032EA        D023000F                 r0 = M[r1 + Null];
0x0032EB        FD0000FF 192068E8        M[$current_codec_sampling_rate] = r0 + Null;
0x0032ED        D1230001                 r0 = M[r1 + 1];
0x0032EE        192038E8                 M[$current_dac_sampling_rate] = r0 + Null;

 <$M.config_resampler.done>
0x0032EF        E1F0E19E                 call $block_interrupts;
0x0032F0        E440002F                 r2 = Null + 1;
0x0032F1        FD0000FF 19005CC0        M[0xff5cc0] = Null + Null;
0x0032F3        FD0000FF 19004FB3        M[0xff4fb3] = Null + Null;
0x0032F5        190003C3                 M[0x3c3] = Null + Null;
0x0032F6        D1230002                 r0 = M[r1 + 2];
0x0032F7        FD0000FF 19205CB3        M[0xff5cb3] = r0 + Null;
0x0032F9        FD0000FF 19204FA6        M[0xff4fa6] = r0 + Null;
0x0032FB        192003B6                 M[0x3b6] = r0 + Null;
0x0032FC        00400000                 if EQ r2 = Null + Null;
0x0032FD        FD0000FF 194068FE        M[$dac_resampler.resampler_active] = r2 + Null;
0x0032FF        E1F0E186                 call $interrupt.unblock;
0x003300        DDF0E1D7                 jump $pop_rLink_and_rts;

 <$M.music_example.GetControl.func>
0x003301        F3D00000                 push rLink;
0x003302        FD0000FF 51405F77        I4 = Null + -41097;
0x003304        5000003F                 I0 = Null + r1;
0x003305        01C00005                 r10 = Null + 5;
0x003306        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x003307        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003308        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x003309        E460002F                 r4 = Null + 1;
0x00330A        FD0000FF 19605E59        M[0xff5e59] = r4 + Null;
0x00330C        FD0000FF 09205F7A        r0 = Null + M[$music_example.OvrMode];
0x00330E        03220000                 r0 = r0 + r0;
0x00330F        FD0000FF D1024FEF        Null = M[r0 + -45073];
0x003311        DD10000A                 if NE jump $M.music_example.GetControl.clear_right_cbuffer_output;
0x003312        FD0000FF 39065E59        M[0xff5e59] = Null - r4;
0x003314        0050000F                 r3 = Null + Null;
0x003315        FD0000FF 19505F6C        M[0xff5f6c] = r3 + Null;
0x003317        01C00360                 r10 = Null + 864;
0x003318        51000400                 I0 = Null + 1024;
0x003319        E5F00002                 do $M.music_example.GetControl.clear_right_cbuffer_output;
0x00331A        0300D100                 Null = Null + Null, M[I0,1] = r3;

 <$M.music_example.GetControl.clear_right_cbuffer_output>
0x00331B        FD0000FF 09205F77        r0 = Null + M[$music_example.SpiSysControl];
0x00331D        81028000                 Null = r0 AND 0x8000;
0x00331E        DD00000C                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x00331F        FD0000FF 09305F78        r1 = Null + M[$music_example.OvrMasterSystemVolume];
0x003321        9143007C                 r2 = r1 ASHIFT -4;
0x003322        8133000F                 r1 = r1 AND 0xf;
0x003323        095038FB                 r3 = Null + M[$music_example.ToneVolume];
0x003324        FD0000FF 09605F7B        r4 = Null + M[$music_example.OvrTrimVolumes];
0x003326        91760074                 r5 = r4 ASHIFT -12;
0x003327        8D66000C                 r4 = r4 LSHIFT 12;
0x003328        91660074                 r4 = r4 ASHIFT -12;
0x003329        E1F0FF70                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC>
0x00332A        01A00000                 r8 = Null + 0;
0x00332B        DDF0E1AC                 jump $pop_rLink_and_rts;

 <$config_rate_matching>
0x00332C        FD0000FF 093068ED        r1 = Null + M[$rate_match_disable];
0x00332E        0043000F                 r2 = r1 + Null;
0x00332F        01500019                 r3 = Null + 25;
0x003330        09203902                 r0 = Null + M[$sub_link_port];
0x003331        FD000091 2102A00E        Null = r0 - -7233522;
0x003333        DD100004                 if NE jump $M.config_rate_matching.sub_check_done;
0x003334        01500028                 r3 = Null + 40;
0x003335        85330002                 r1 = r1 OR 0x2;
0x003336        DDF00008                 jump $M.config_rate_matching.set_config;

 <$M.config_rate_matching.sub_check_done>
0x003337        FD0000FF 09505E0F        r3 = Null + M[0xff5e0f];
0x003339        E405003F                 Null = r3 - 1;
0x00333A        DD100003                 if NE jump $M.config_rate_matching.disable_hw;
0x00333B        85440008                 r2 = r2 OR 0x8;
0x00333C        DDF00002                 jump $M.config_rate_matching.set_config;

 <$M.config_rate_matching.disable_hw>
0x00333D        85330004                 r1 = r1 OR 0x4;

 <$M.config_rate_matching.set_config>
0x00333E        193038ED                 M[$hw_rate_match_disable] = r1 + Null;
0x00333F        FD0000FF 194068EC        M[$sw_rate_match_disable] = r2 + Null;
0x003341        8403004F                 Null = r1 OR r2;
0x003342        E100ECAA                 if EQ call $error;
0x003343        092038EA                 r0 = Null + M[$spdif_target_latency_setting];
0x003344        E425006F                 r0 = MAX r3;
0x003345        01500046                 r3 = Null + 70;
0x003346        01400096                 r2 = Null + 150;
0x003347        FD0000FF 09305E16        r1 = Null + M[0xff5e16];
0x003349        E403003F                 Null = r1 - 1;
0x00334A        0054000C                 if GT r3 = r2 + Null;
0x00334B        E425005F                 r0 = MIN r3;
0x00334C        19202F18                 M[0x2f18] = r0 + Null;
0x00334D        DC0D000F                 rts;

 <$M.music_example_message.SetMode.func>
0x00334E        0004000F                 Null = r2 + Null;
0x00334F        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x003350        01600007                 r4 = Null + 7;
0x003351        09702C22                 r5 = Null + M[0x2c22];
0x003352        83760000                 r5 = r5 AND r4;
0x003353        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x003354        8082006F                 r6 = r0 AND r4;
0x003355        E488002F                 r6 = r6 + 1;
0x003356        21040002                 Null = r2 - 2;
0x003357        00850000                 if EQ r6 = r3 + Null;
0x003358        01A00200                 r8 = Null + 512;
0x003359        01500000                 r3 = Null + 0;
0x00335A        E490002F                 r7 = Null + 1;
0x00335B        800200AF                 Null = r0 AND r8;
0x00335C        00590000                 if EQ r3 = r7 + Null;
0x00335D        2007008F                 Null = r5 - r6;
0x00335E        0085000B                 if LT r6 = r3 + Null;
0x00335F        21080000                 Null = r6 - 0;
0x003360        00850000                 if EQ r6 = r3 + Null;
0x003361        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x003363        8092009F                 r7 = r0 AND r7;
0x003364        8489008F                 r6 = r7 OR r6;
0x003365        19802BCD                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x003366        01500008                 r3 = Null + 8;
0x003367        2005003F                 Null = r3 - r1;
0x003368        00350004                 if NEG r1 = r3 + Null;
0x003369        01500000                 r3 = Null + 0;
0x00336A        2005003F                 Null = r3 - r1;
0x00336B        00350005                 if POS r1 = r3 + Null;
0x00336C        FD0000FF 193068F7        M[$music_example.sys_mode] = r1 + Null;
0x00336E        E430002F                 r1 = Null + 1;
0x00336F        193038F8                 M[$music_example.reinit] = r1 + Null;
0x003370        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x003371        F3D00000                 push rLink;
0x003372        01A00000                 r8 = Null + 0;
0x003373        FD0000FF 19A068F7        M[$music_example.sys_mode] = r8 + Null;
0x003375        F3300000                 push r1;
0x003376        E1F00065                 call $M.music_example.load_default_params.func;
0x003377        190038FD                 M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x003378        F3440000                 pop r2;
0x003379        194038FE                 M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x00337A        DD000005                 if EQ jump $M.music_example.LoadParams.done;
0x00337B        013038B6                 r1 = Null + 14518;
0x00337C        01503250                 r3 = Null + 12880;
0x00337D        E1F0DF7C                 call $pskey.read_key;
0x00337E        DDF0E159                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x00337F        092038EC                 r0 = Null + M[$codec_config];
0x003380        D1222BCD                 r0 = M[r0 + 11213];
0x003381        19202BCD                 M[$M.system_config.data.CurParams] = r0 + Null;
0x003382        E1F00093                 call $M.music_example.ReInit.func;
0x003383        01401015                 r2 = Null + 4117;
0x003384        E1F0DF63                 call $message.send_short;
0x003385        DDF0E152                 jump $pop_rLink_and_rts;

 <$M.music_example.GetStatus.func>
0x003386        5010003F                 I1 = Null + r1;
0x003387        01C00023                 r10 = Null + 35;
0x003388        00AC000F                 r8 = r10 + Null;
0x003389        FD0000FF 51405D8D        I4 = Null + -41587;
0x00338B        03000031                 Null = Null + Null, r1 = M[I4,1];
0x00338C        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x00338D        D3300000                 r1 = M[r1 + Null];
0x00338E        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x00338F        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x003390        01C00004                 r10 = Null + 4;
0x003391        51402FA8                 I4 = Null + 12200;
0x003392        8B440000                 r2 = r2 XOR r2;
0x003393        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x003394        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x003395        FD0000FF 19003F3F        M[0xff3f3f] = Null + Null;
0x003397        190038E3                 M[0x38e3] = Null + Null;
0x003398        FD0000FF 19004FFF        M[0xff4fff] = Null + Null;
0x00339A        190038E5                 M[0x38e5] = Null + Null;
0x00339B        FD0000FF 19005FFF        M[0xff5fff] = Null + Null;
0x00339D        190038E7                 M[0x38e7] = Null + Null;
0x00339E        DC0D000F                 rts;

 <$music_example_reinitialize>
0x00339F        F3D00000                 push rLink;
0x0033A0        51900001                 M1 = Null + 1;
0x0033A1        FD0000FF 510032B8        I0 = Null + -52552;
0x0033A3        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x0033A4        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x0033A5        D3200000                 r0 = M[r0 + Null];
0x0033A6        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x0033A7        0002000F                 Null = r0 + Null;
0x0033A8        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x0033A9        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033AA        094038EC                 r2 = Null + M[$codec_config];
0x0033AB        D5242BCD                 M[r2 + 11213] = r0;
0x0033AC        01401014                 r2 = Null + 4116;
0x0033AD        81520007                 r3 = r0 AND 0x7;
0x0033AE        E1F0DF39                 call $message.send_short;
0x0033AF        FD0000FF 01605D40        r4 = Null + -41664;
0x0033B1        E1F0E0A2                 call $frame_sync.run_function_table;
0x0033B2        190038F8                 M[$music_example.reinit] = Null + Null;
0x0033B3        DDF0E124                 jump $pop_rLink_and_rts;

 <$music_example.peq.initialize>
0x0033B4        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033B5        D07A000F                 r5 = M[r8 + Null];
0x0033B6        81520007                 r3 = r0 AND 0x7;
0x0033B7        E407003F                 Null = r5 - 1;
0x0033B8        00500000                 if EQ r3 = Null + Null;
0x0033B9        FD0000FF 093068E8        r1 = Null + M[$current_codec_sampling_rate];
0x0033BB        FD000000 2103BB80        Null = r1 - 48000;
0x0033BD        00550070                 if EQ r3 = r3 + r5;
0x0033BE        E4AA002F                 r8 = r8 + 1;
0x0033BF        D02A005F                 r0 = M[r8 + r3];
0x0033C0        D5290003                 M[r7 + 3] = r0;
0x0033C1        DC0D0000                 if EQ rts;
0x0033C2        DDF0EBEC                 jump $audio_proc.peq.initialize;

 <$music_example.peq.process>
0x0033C3        09202BCD                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033C4        800200AF                 Null = r0 AND r8;
0x0033C5        DC0D0001                 if NE rts;
0x0033C6        D1090003                 Null = M[r7 + 3];
0x0033C7        DC0D0000                 if EQ rts;
0x0033C8        DDF0D9B9                 jump $audio_proc.peq.process;

 <$music_example.cmpd100.initialize>
0x0033C9        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x0033CB        FD000000 2102BB80        Null = r0 - 48000;
0x0033CD        00A90001                 if NE r8 = r7 + Null;
0x0033CE        DDF0EB9A                 jump $cmpd100.initialize;

 <$music_example.cmpd100.analysis>
0x0033CF        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x0033D1        FD000000 2102BB80        Null = r0 - 48000;
0x0033D3        00A90001                 if NE r8 = r7 + Null;
0x0033D4        DDF0D603                 jump $cmpd100.analysis;

 <$music_example.cmpd100.applygain>
0x0033D5        FD0000FF 092068E8        r0 = Null + M[$current_codec_sampling_rate];
0x0033D7        FD000000 2102BB80        Null = r0 - 48000;
0x0033D9        00A90001                 if NE r8 = r7 + Null;
0x0033DA        DDF0DA17                 jump $cmpd100.applygain;

 <$M.music_example.load_default_params.func>
0x0033DB        51C00005                 L0 = Null + 5;
0x0033DC        510000A8                 I0 = Null + 168;
0x0033DD        FD0000D0 51400000        I4 = Null + -3145728;
0x0033DF        51102BCD                 I1 = Null + 11213;
0x0033E0        01C00124                 r10 = Null + 292;
0x0033E1        91CC007F                 r10 = r10 ASHIFT -1;
0x0033E2        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x0033E3        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x0033E4        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x0033E5        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x0033E6        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x0033E7        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x0033E8        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x0033E9        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x0033EA        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x0033EB        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x0033EC        51C00000                 L0 = Null + 0;
0x0033ED        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x0033EE        FD000000 0150E008        r3 = Null + 57352;
0x0033F0        097038F7                 r5 = Null + M[$music_example.Version];
0x0033F1        FD0000FF 098068E8        r6 = Null + M[$current_codec_sampling_rate];
0x0033F3        1835000F                 M[r1] = r3 + Null;
0x0033F4        D5730001                 M[r1 + 1] = r5;
0x0033F5        D5830002                 M[r1 + 2] = r6;
0x0033F6        01A00003                 r8 = Null + 3;
0x0033F7        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x0033F8        F3D00000                 push rLink;
0x0033F9        E1F0FFE2                 call $M.music_example.load_default_params.func;
0x0033FA        FD0000FF 01605CFB        r4 = Null + -41733;
0x0033FC        E1F0E019                 call $frame_sync.register_handlers;
0x0033FD        DDF0E0DA                 jump $pop_rLink_and_rts;

 <$M.music_example.GetParams.func>
0x0033FE        01502BCD                 r3 = Null + 11213;
0x0033FF        01600124                 r4 = Null + 292;
0x003400        FD0000D0 01700000        r5 = Null + -3145728;
0x003402        1835000F                 M[r1] = r3 + Null;
0x003403        D5630001                 M[r1 + 1] = r4;
0x003404        D5730002                 M[r1 + 2] = r5;
0x003405        01A00003                 r8 = Null + 3;
0x003406        DC0D000F                 rts;

 <$M.music_example.GetSpdifConfig.func>
0x003407        F3D00000                 push rLink;
0x003408        D1430001                 r2 = M[r1 + 1];
0x003409        D1530002                 r3 = M[r1 + 2];
0x00340A        D1330000                 r1 = M[r1 + 0];
0x00340B        E1F0E052                 call $spdif_apply_realtime_config;
0x00340C        01A00000                 r8 = Null + 0;
0x00340D        DDF0E0CA                 jump $pop_rLink_and_rts;

 <$copy_codec_stats_pointers>
0x00340E        01C00011                 r10 = Null + 17;
0x00340F        FD0000FF 51405D9F        I4 = Null + -41569;
0x003411        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x003412        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003413        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x003414        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x003415        E4A0002F                 r8 = Null + 1;
0x003416        19A038F8                 M[$music_example.reinit] = r8 + Null;
0x003417        01A00000                 r8 = Null + 0;
0x003418        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.SPI_BLOCK
0x000000	$M.spi_block.signature
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$us_per_sample_sbc
        000000 000000 5AB3F4 535555 

0x00004E	$interrupt.start_time
        000000 000000 

0x000050	$tone_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00005C	$M.system_config.data.mute_cntrl_l_dm1
        002EFD 0038FF 000000 000000 

0x000060	$tone_right_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00006C	$M.system_config.data.mute_cntrl_r_dm1
        FF5F10 0038FF 000000 

0x00006F	$app_config.io
        FFFFFF 

0x000070	$dither_hist_left
        000000 000000 000000 000000 
        000000 

0x000075	$audio_out_lfe_cbuffer_struc
        0005DC 004000 004000 

0x000078	$dither_hist_right
        000000 000000 000000 000000 
        000000 

0x00007D	$dac_out_right_cbuffer_struc
        000360 000400 000400 

0x000080	$sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000A4	$config_spdif_sink_vm_message_struc
        000000 000000 000000 000000 

0x0000A8	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000AD	$tone_in_cbuffer_struc
        000100 000100 000100 

0x0000B0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0000B5	$spdif_in_cbuffer_struc
        000C00 FF4000 FF4000 

0x0000B8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0000BD	$dac_sil_left_cbuffer_struc
        000005 0000F8 0000F8 

0x0000C0	$sr_hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000E4	$stereo_3d_enhancement.coeff_buf
        CF5C29 5EB852 C7AE14 27AE14 
        D47AE1 570A3D C7AE14 27AE14 

0x0000EC	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0000F3	$tone_in_copy_struc
        FF5F63 000001 946003 000001 
        0000AD 

0x0000F8	$dac_sil_left
        000000 000000 000000 000000 
        000000 

0x0000FD	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0x000100	$tone_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000200	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000300	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x000321	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x000342	$stereo_tone_in_copy_struc
        FF4CFA 000001 946003 000002 
        0000AD FF68A9 

0x000348	$dac_sil_right
        000000 000000 000000 000000 
        000000 

0x00034D	$M.system_config.data.mono_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF FF4FFE 
        000000 000DBB 002FCC 000000 
        001153 002F73 000000 000DBB 
        FF5FBB 000000 0033C3 FF3321 
        000400 0033C3 FF3375 000080 
        0033C3 FF334B 000100 0033CF 
        002DBC 002DDA 0033D5 002DBC 
        002DDA 000826 002ED3 000000 
        0013CF 0038E4 000000 001264 
        FF5F36 000000 000000 

0x000378	$audio_out_dither_and_shift_op_left.next
0x000378	$audio_out_dither_and_shift_op_left
        002F35 

0x000379	$audio_out_dither_and_shift_op_left.func
        0038CB 

0x00037A	$audio_out_dither_and_shift_op_left.param
        000000 000002 FFFFF8 000000 
        000070 000000 

0x000380	$sub_codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0003B2	$dac_resampler.stereo_right_resampler_op
0x0003B2	$dac_resampler.stereo_right_resampler_op.next
        FFFFFF 

0x0003B3	$dac_resampler.stereo_right_resampler_op.func
        FF68D6 

0x0003B4	$dac_resampler.stereo_right_resampler_op.param
        000001 000003 000000 FFFFF8 
        000008 FF5BCD 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0003FE	$pcm_latency_input_struct
        0007F3 002FA4 

0x000400	$dac_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000760	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0007CE	$M.system_config.data.pass_thru_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF 0038E2 
        000000 0013CF FF4FFE 000000 
        000DBB 002FCC 000000 000DBB 
        002FC8 000000 000DBB FF5FB7 
        000000 0010EF FF5FB3 000000 
        000826 002E7E 000000 0013CF 
        0038E4 000000 0013CF FF5FFE 
        000000 001264 FF5F36 000000 
        000000 

0x0007F3	$M.main.cbuffers_latency_measure
        FF5FFB 000F5F FF68EF FF68A3 
        000F5F FF68EF FF68BB 0038F0 
        FF68EF 80000C 0038F0 000000 
        000000 

0x000800	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000DDC	$M.system_config.data.bass_manager_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F44	$spdif_copy_struct
        8C0000 8C0001 0000B5 FF5FFB 
        FF68A0 FF68A6 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FAA	$M.system_config.data.soundbar_2_1_mono_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF 0038E2 
        000000 0013CF FF4FFE 000000 
        000DBB 002FCC 000000 000DBB 
        002FC8 000000 000DBB FF5FB7 
        000000 0010EF FF5FB3 000000 
        0033C3 FF3321 000400 0033C3 
        FF3336 000400 0033C3 FF3375 
        000080 0033C3 FF3382 000080 
        0033C3 FF334B 000100 0033C3 
        FF3360 000100 000638 FF3774 
        000000 0033CF 002DBC 002DDA 
        0033D5 002DBC 002DDA 000FE3 
        000000 FF5FBF 000FE3 000000 
        002FD0 001153 FF5F5D 000000 
        0013A0 00006C 000000 000826 
        002ED3 000000 000826 FF5ED9 
        000000 0013CF 0038E4 000000 
        0013CF 0038E6 000000 001264 
        FF5F36 000000 000000 

0x000FF9	$stereo_out_copy_struc
        FF5E56 000002 FF68BB 0038B9 
        000002 80000C 80000D 

0x001000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002000	$M.system_config.data.delay_buf_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002BCD	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002CF1	$M.system_config.data.soundbar_2_1_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF 0038E2 
        000000 0013CF FF4FFE 000000 
        000DBB 002FCC 000000 000DBB 
        002FC8 000000 000DBB FF5FB7 
        000000 0008F1 000000 FF338F 
        0033C3 FF3321 000400 0033C3 
        FF3336 000400 0033C3 FF3375 
        000080 0033C3 FF3382 000080 
        0033C3 FF334B 000100 0033C3 
        FF3360 000100 000638 FF3774 
        000000 0033CF 002DBC 002DDA 
        0033D5 002DBC 002DDA 000FE3 
        000000 FF5FBF 000FE3 000000 
        002FD0 000826 002E7E 000000 
        000826 FF5ED9 000000 0013CF 
        0038E4 000000 0013CF FF5FFE 
        000000 0013CF 0038E6 000000 
        001264 FF5F36 000000 000000 

0x002D3D	$M.system_config.data.full_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF 0038E2 
        000000 0013CF FF4FFE 000000 
        000DBB 002FCC 000000 000DBB 
        002FC8 000000 000DBB FF5FB7 
        000000 0008F1 000000 FF338F 
        0033C3 FF3321 000400 0033C3 
        FF3336 000400 0033C3 FF3375 
        000080 0033C3 FF3382 000080 
        0033C3 FF334B 000100 0033C3 
        FF3360 000100 0033CF 002DBC 
        002DDA 0033D5 002DBC 002DDA 
        000826 002E7E 000000 0013CF 
        0038E4 000000 0013CF FF5FFE 
        000000 001264 FF5F36 000000 
        000000 

0x002D7A	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x002D9B	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x002DBC	$M.system_config.data.cmpd100_obj_44kHz
        000040 000020 002EFD FF5F10 
        002EFD FF5F10 080000 FF6900 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0x002DDA	$M.system_config.data.cmpd100_obj_48kHz
        000040 000020 002EFD FF5F10 
        002EFD FF5F10 080000 FF6900 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 3E4859 02D026 3E4859 
        00D9BA 5E4273 009150 7B6F09 
        006D0B 020000 

0x002DF8	$M.system_config.data.mono_pass_thru_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF FF4FFE 
        000000 001153 002F73 000000 
        000DBB FF5FBB 000000 000826 
        002ED3 000000 0013CF 0038E4 
        000000 001264 FF5F36 000000 
        000000 

0x002E11	$cbuffer.port_buffer_size
0x002E11	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002E1D	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002E29	$cbuffer.port_limit_addr
0x002E29	$cbuffer.read_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002E35	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002E41	$M.system_config.data.bass_manager_coefs
        000003 100000 200000 653161 
        000000 200000 000050 015725 
        000005 000006 7BA375 5A827A 
        2120FC 7BA375 2120FC 7BA375 
        5A827A 2120FC 7BA375 5A827A 
        2120FC 

0x002E56	$audio_out_rate_adjustment_and_shift_op_stereo
0x002E56	$audio_out_rate_adjustment_and_shift_op_stereo.next
        FFFFFF 

0x002E57	$audio_out_rate_adjustment_and_shift_op_stereo.func
        FF68D3 

0x002E58	$audio_out_rate_adjustment_and_shift_op_stereo.param
        000000 000002 000001 000003 
        FFFFF8 FF3000 000080 0000C0 
        002F1B 000001 000000 000024 
        000000 000000 000000 000000 
        000000 000000 

0x002E6A	$audio_out_tone_right_upsample_mono_mix.next
0x002E6A	$audio_out_tone_right_upsample_mono_mix
        FF5F6D 

0x002E6B	$audio_out_tone_right_upsample_mono_mix.func
        0038D4 

0x002E6C	$audio_out_tone_right_upsample_mono_mix.param
        000000 FFFFFF FF68A9 FF323A 
        0038E8 000060 0038E9 200000 
        7FFFFF 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002E7E	$M.system_config.data.stereo_volume_and_limit_obj
0x002E7E	$M.system_config.data.stereo_volume_and_limit_block
        000000 001000 000002 FF68E8 
        000000 FBD57B 072148 79999A 
        000000 000000 

0x002E88	$M.system_config.data.left_channel_vol_struc
        002EFD 002EFD 080000 000000 
        000000 

0x002E8D	$M.system_config.data.right_channel_vol_struc
        FF5F10 FF5F10 080000 000000 
        000000 

0x002E92	$spdif_stats
        0038EE FF68EE 000F59 0038FF 
        0038FF 0038FF 0038FF 0038FF 
        0038FF 0038FF 0038FF 0038FF 
        0038FF FF68EA FF68E8 0038E8 
        FF68E8 

0x002EA3	$M.fade_out_buffer.coefs
        7F6237 7FD888 7FEE75 7FF622 
        7FF9AF 7FFB9D 7FFCC7 7FFD88 
        7FFE0D 7FFE6C 7FFEB2 7FFEE7 
        7FFF11 7FFF32 7FFF4C 7FFF62 

0x002EB3	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002EC3	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002ED3	$M.system_config.data.mono_volume_and_limit_block
0x002ED3	$M.system_config.data.mono_volume_and_limit_obj
        000000 001000 000001 FF68E8 
        000000 FBD57B 072148 79999A 
        000000 000000 

0x002EDD	$M.system_config.data.mono_channel_vol_struc
        002EFD 002EFD 080000 000000 
        000000 

0x002EE2	$encoded_latency_struct
        0003FE FF68AC FF68A6 FF5FFB 
        000F5F FF68EF 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002EF0	$M.system_config.data.stream_map_right_in
        FF68A0 000000 000000 000168 
        000BB8 00146E 001422 000000 
        000000 000000 000000 000000 
        000000 

0x002EFD	$M.system_config.data.stream_map_left_out
        FF68A3 000000 000000 000168 
        000BB8 00143B 0012D2 000000 
        000000 000000 000000 000000 
        000000 

0x002F0A	$M.system_config.data.stream_map_sub_out
        0038C2 000000 000000 000168 
        000BB8 00143B 0012D2 000000 
        000000 000000 000000 000000 
        000000 

0x002F17	$spdif_sra_struct
        01EB85 000028 002EEB 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x002F22	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0x002F2C	$M.system_config.data.mode_table
        FF5DF0 0007CE 002D3D 00034D 
        002DF8 FF5EA6 002CF1 000FAA 
        000000 

0x002F35	$audio_out_dither_and_shift_op_right
0x002F35	$audio_out_dither_and_shift_op_right.next
        FFFFFF 

0x002F36	$audio_out_dither_and_shift_op_right.func
        0038CB 

0x002F37	$audio_out_dither_and_shift_op_right.param
        000001 000003 FFFFF8 000000 
        000078 000000 

0x002F3D	$M.downsample_sub_to_1k2.sub_mute_coefs
        000000 F9A97A E7E742 CE3DC9 
        B1C238 9818BF 865687 800000 

0x002F45	$stereo_sil_out_copy_struc
        FF5E56 000002 0000BD FF68AF 
        000002 80000C 80000D 

0x002F4C	$dac_out_resampler_stereo_copy_struc
        002F6D 000002 FF68A3 00007D 
        000002 FF68BB 0038B9 

0x002F53	$output_port_and_delay_size
        003903 FF6903 00004C 000BCC 
        00004C FF6902 000000 

0x002F5A	$M.cbops.rate_adjustment_and_shift.main.right_channel_info
        000000 000000 000000 000000 
        000000 000000 000000 

0x002F61	$signal_detect_op_stereo.next
0x002F61	$signal_detect_op_stereo
        FF3F77 

0x002F62	$signal_detect_op_stereo.func
        FF68D9 

0x002F63	$signal_detect_op_stereo.param
        FF5F4B 000002 000000 000001 

0x002F67	$M.main.rm_stereo_switch_op
0x002F67	$M.main.rm_stereo_switch_op.next
        000378 

0x002F68	$M.main.rm_stereo_switch_op.func
        FF68DC 

0x002F69	$M.main.rm_stereo_switch_op.param
        FF68EC 002E56 00FFFF 000000 

0x002F6D	$dac_resampler.stereo_copy_switch_op.next
0x002F6D	$dac_resampler.stereo_copy_switch_op
        002FC0 

0x002F6E	$dac_resampler.stereo_copy_switch_op.func
        FF68DC 

0x002F6F	$dac_resampler.stereo_copy_switch_op.param
        FF68FE FF4FA2 000000 000001 

0x002F73	$M.system_config.data.mix_dm1
        FF5EF6 002EF0 002EFD FF68FF 
        FF68FF 0038FF 

0x002F79	$M.main.audio_out_dc_remove_op_left.next
0x002F79	$audio_out_dc_remove_op_left
        FF5F68 

0x002F7A	$M.main.audio_out_dc_remove_op_left.func
        FF68CD 

0x002F7B	$M.main.audio_out_dc_remove_op_left.param
        000000 000000 000000 

0x002F7E	$mono_out_copy_struc
        FF5E7E 000001 FF68BB 000001 
        80000C 

0x002F83	$M.main.audio_out_dc_remove_op_mono.next
0x002F83	$audio_out_dc_remove_op_mono
        FF5F51 

0x002F84	$M.main.audio_out_dc_remove_op_mono.func
        FF68CD 

0x002F85	$M.main.audio_out_dc_remove_op_mono.param
        000000 000000 000000 

0x002F88	$mono_sil_out_copy_struc
        FF5E7E 000001 0000BD 000001 
        80000C 

0x002F8D	$dac_out_resampler_mono_copy_struc
        FF5F57 000001 FF68A3 000001 
        FF68BB 

0x002F92	$sub_l2cap_out_copy_struc
        FF5FC3 000001 FF68C4 000001 
        94600F 

0x002F97	$output_buffers
        FF68A3 00004C FF68BB 00004C 
        000000 

0x002F9C	$spdif_in_timer_struc
        000000 000000 000000 000000 

0x002FA0	$tone_copy_timer_struc
        000000 000000 000000 000000 

0x002FA4	$M.main.samples_latency_measure
        000000 000F5F FF68EF 000000 

0x002FA8	$music_example.CurMode
0x002FA8	$music_example.Statistics
        000000 

0x002FA9	$music_example.PeakMipsFunc
        000000 

0x002FAA	$music_example.PeakMipsDecoder
        000000 

0x002FAB	$music_example.SamplingRate
        000000 

0x002FAC	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0x002FB0	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0x002FB4	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0x002FB8	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0x002FBC	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x002FC0	$dac_resampler.stereo_left_copy_op
0x002FC0	$dac_resampler.stereo_left_copy_op.next
        FF5FAF 

0x002FC1	$dac_resampler.stereo_left_copy_op.func
        0038C8 

0x002FC2	$dac_resampler.stereo_left_copy_op.param
        000000 000002 

0x002FC4	$dac_resampler.mono_copy_op
0x002FC4	$dac_resampler.mono_copy_op.next
        FFFFFF 

0x002FC5	$dac_resampler.mono_copy_op.func
        0038C8 

0x002FC6	$dac_resampler.mono_copy_op.param
        000000 000001 

0x002FC8	$M.system_config.data.left_headroom_obj
        FF5EF6 FF5EF6 003901 0038FF 

0x002FCC	$M.system_config.data.lfe_headroom_obj
        FF5F03 FF5F03 003901 0038FF 

0x002FD0	$M.system_config.data.delay_right
        FF5F10 FF5F10 FF68C1 000BCC 

0x002FD4	$set_synchronized_warp_message_struc
        000000 000000 000000 000000 

0x002FD8	$sub_l2cap_header_limit_op
0x002FD8	$sub_l2cap_header_limit_op.next
        FF5FC7 

0x002FD9	$sub_l2cap_header_limit_op.func
        0038CE 

0x002FDA	$sub_l2cap_header_limit_op.mono
        FFFFFF 000007 

0x002FDC	$bdaddr_message_struc
        000000 000000 000000 000000 

0x002FE0	$wall_clock_message_struc
        000000 000000 000000 000000 

0x002FE4	$wall_clock_timer_struc
        000000 000000 000000 000000 

0x002FE8	$M.Subwoofer.write_port_function_table
        001AC1 001AC1 001AC2 001AD3 

0x002FEC	$bass_timer_struc
        000000 000000 000000 000000 

0x002FF0	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0x002FF4	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x002FF8	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x002FFC	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x003000	$stereo_3d_enhancement.delay2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0038A0	$M.spdif.frame_copy.chnl_sts_event_message_handler.chts_fs
        00AC44 FFFFFF 00BB80 007D00 

0x0038A4	$spdif.frame_copy.block_start_message_struc
        000000 000000 000000 000000 

0x0038A8	$spdif.output_interface_control.audio_configure_response_message_struc
        000000 000000 000000 000000 

0x0038AC	$spdif.output_interface_control.timer_struc
        000000 000000 000000 000000 

0x0038B0	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0x0038B3	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0x0038B6	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0x0038B9	$dac_out_temp_right_cbuffer_struc
        000091 FF4D00 FF4D00 

0x0038BC	$stereo_3d_enhancement_delay2_cbuffer_struc
        0008A0 003000 00326A 

0x0038BF	$M.system_config.data.delay_buf_left_cbuffer_struc
        000BCD 002000 002000 

0x0038C2	$sub_out_cbuffer_struc
        000708 FF3800 FF3800 

0x0038C5	$M.cbops.av_copy.left_silence_cbuffer_struc
        000079 FF3780 FF3780 

0x0038C8	$cbops.copy_op
        000000 000000 00118E 

0x0038CB	$cbops.dither_and_shift
        000000 000000 000B12 

0x0038CE	$cbops.limited_copy
        000000 0013F7 000000 

0x0038D1	$cbops.shift
        000000 000000 001132 

0x0038D4	$cbops.auto_upsample_and_mix
        000000 000000 000731 

0x0038D7	$cbops.soft_mute
        000000 000000 001DC1 

0x0038DA	$cbops.deinterleave
        000000 0014C0 0011AB 

0x0038DD	$M.spdif.frame_copy.handle_pcm_tab
        00006F 00008D 00007E 

0x0038E0	$M.system_config.data.UserEqInitTable
        FF334B FF3360 

0x0038E2	$M.system_config.data.pcmin_r_pk_dtct
        002EF0 000000 

0x0038E4	$M.system_config.data.dac_l_pk_dtct
        002EFD 000000 

0x0038E6	$M.system_config.data.sub_pk_dtct
        002F0A 000000 

0x0038E8	$current_dac_sampling_rate
        000000 

0x0038E9	$current_tone_sampling_rate
        001F40 

0x0038EA	$spdif_target_latency_setting
        000028 

0x0038EB	$aux_input_stream_available
        000000 

0x0038EC	$codec_config
        FFFFFF 

0x0038ED	$hw_rate_match_disable
        000000 

0x0038EE	$spdif_config_word
        000000 

0x0038EF	$sra_rate_addr
        002F1B 

0x0038F0	$inv_dac_fs
        14D555 

0x0038F1	$stereo_copy_struc_ptr
        000FF9 

0x0038F2	$spdif_silence_to_insert
        000000 

0x0038F3	$first_audio_received
        000000 

0x0038F4	$first_audio_init_latency_offset
        000000 

0x0038F5	$no_tone_timer
        000000 

0x0038F6	$no_audio_counter
        000000 

0x0038F7	$music_example.Version
        000001 

0x0038F8	$music_example.reinit
        000001 

0x0038F9	$music_example.sync_flag_ptr
        00392B 

0x0038FA	$music_example.SystemVolume
        00000B 

0x0038FB	$music_example.ToneVolume
        000000 

0x0038FC	$music_example.RightTrimVolume
        000000 

0x0038FD	$M.music_example.LoadParams.paramoffset
        000000 

0x0038FE	$M.music_example.LoadParams.Last_PsKey
        000000 

0x0038FF	$M.system_config.data.ZeroValue
        000000 

0x003900	$M.system_config.data.MinusOne
        FFFFFF 

0x003901	$M.system_config.data.headroom_mant
        200000 

0x003902	$sub_link_port
        000000 

0x003903	$left_port
        80000C 

0x003904	$M.Subwoofer.playback_time
        000000 

0x003905	$wall_clock_lsw
        000000 

0x003906	$sco_param_tesco
        000000 

0x003907	$sco_param_clock_lsw
        000000 

0x003908	$sco_param_from_air_size
        000000 

0x003909	$sco_param_from_air_time
        000000 

0x00390A	$bass_timer_id
        000000 

0x00390B	$sub_app_esco_func
        000000 

0x00390C	$min_port_space
        0003E8 

0x00390D	$max_late_write
        000000 

0x00390E	$min_early_write
        FFEC78 

0x00390F	$M.downsample_sub_to_1k2.mute_direction
        000001 

0x003910	$M.downsample_sub_to_1k2.mute_index
        000000 

0x003911	$esco_write_deadline
        000000 

0x003912	$time_before_fp
        000000 

0x003913	$M.create_sub_packet.packet_counter
        000001 

0x003914	$subwoofer.sco_offset
        000000 

0x003915	$warp_timer_id
        000000 

0x003916	$cbuffer.write_port_disconnect_address
        000000 

0x003917	$cbuffer.read_port_disconnect_address
        000000 

0x003918	$error.handler
        000000 

0x003919	$interrupt.block_count
        000000 

0x00391A	$message.last_addr
        FFFFFF 

0x00391B	$message.queue_write_ptr
        000000 

0x00391C	$message.long_message_size
        000000 

0x00391D	$pskey.request_in_progress
        000000 

0x00391E	$timer.id
        000001 

0x00391F	$wall_clock.last_addr
        FFFFFF 

0x003920	$cbops.amount_to_use
        000000 

0x003921	$M.cbops.av_copy.control_port
        000000 

0x003922	$M.cbops.av_copy.right_channel
        000000 

0x003923	$M.cbops.dac_av_copy.prev_port_mnt_space
        000000 

0x003924	$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter
        000000 

0x003925	$M.cbops.dac_av_copy.port_amount_written
        000000 

0x003926	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0x003927	$M.cbops.rate_adjustment_and_shift.main.chn_no
        000000 

0x003928	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0x003929	$M.cbops.iir_resamplev2.amount_used
        000000 

0x00392A	$spdif.stream_decode.stream_decode_struct
        000000 

0x00392B	$frame_sync.sync_flag
        000000 

0x00392C	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0x00392D	$M.cmpd100.analysis.region
        000000 

0x00392E	$M.cmpd100.applygain.lin_gain
        000000 

0x004000	$audio_out_lfe
	-------- [0x1194 octets]


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sra_coeffs_hd_quality
        7649F5 7587F0 740625 71C90F 
        6ED751 6B399F 66FA9F 6226C4 
        5CCC23 56FA3E 50C1D1 4A3496 
        436505 3C661B 354B11 2E2720 
        270D3E 200FDE 1940B9 12B08B 
        0C6EE9 068A09 010E9C FC07A6 
        F77E66 F37A3C F00099 ED14FA 
        EAB8E5 E8EBF3 E7ABDA E6F485 
        E6C02E E7077E E7C1B4 E8E4D1 
        EA65C3 EC389A EE50B9 F0A10E 
        F31C43 F5B4F9 F85DF6 FB0A5D 
        FDADD7 003CC6 02AC66 04F2F6 
        0707D3 08E391 0A8013 0BD890 
        0CE9A2 0DB144 0E2ED0 0E62F2 
        0E4F9B 0DF7EE 0D6024 0C8D75 
        0B85F2 0A5068 08F438 077932 
        05E770 04472A 02A097 00FBC1 
        FF6067 FDD5DA FC62DE FB0D92 
        F9DB57 F8D0BD F7F178 F7404F 
        F6BF1D F66ECD F64F59 F65FD8 
        F69E86 F708CE F79B66 F85259 
        F92926 FA1AD7 FB2219 FC395A 
        FD5AE7 FE8103 FFA605 00C473 
        01D71A 02D922 03C626 049A46 
        055231 05EB37 06634D 06B915 
        06EBDE 06FBA5 06E90E 06B55E 
        066270 05F2AA 0568ED 04C880 
        041506 035263 0284AB 01B00D 
        00D8BB 0002DD FF3274 FE6B4F 
        FDB0F8 FD06A3 FC6F20 FBECD5 
        FB81B1 FB2F24 FAF620 FAD715 
        FAD1F1 FAE627 FB12B1 FB561A 
        FBAE86 FC19C3 FC954C FD1E61 
        FDB211 FE4D48 FEECE4 FF8DBF 
        002CC3 00C6F5 015985 01E1D9 
        025D9B 02CAC0 032791 0372B2 
        03AB26 03D04F 03E1F5 03E03D 
        03CBAA 03A51B 036DBD 03270B 
        02D2BE 0272CB 02094E 019889 
        0122D1 00AA85 003200 FFBB90 
        FF496C FEDDA4 FE7A1F FE208D 
        FDD264 FD90D8 FD5CD7 FD3708 
        FD1FC8 FD1728 FD1CF4 FD30B0 
        FD51A1 FD7ECE FDB70B FDF8F9 
        FE4318 FE93C4 FEE949 FF41E2 
        FF9BC8 FFF53C 004C89 00A012 
        00EE58 0135FD 0175D0 01ACCD 
        01DA22 01FD34 02159C 02232C 
        0225EC 021E1A 020C26 01F0AE 
        01CC7B 01A07D 016DC3 013575 
        00F8CF 00B91A 0077A6 0035C0 
        FFF4AF FFB5AF FF79E5 FF4260 
        FF1012 FEE3CD FEBE3F FE9FED 
        FE8939 FE7A5A FE735D FE742A 
        FE7C84 FE8C06 FEA22F FEBE5E 
        FEDFDA FF05D6 FF2F72 FF5BC5 
        FF89E0 FFB8D1 FFE7A9 001581 
        004180 006ADA 0090D8 00B2DA 
        00D058 00E8E5 00FC2F 010A04 
        01124B 01150B 011263 010A90 
        00FDE2 00ECC4 00D7AF 00BF2E 
        00A3DA 008652 00673C 004741 
        002707 000732 FFE85B FFCB13 
        FFAFDE FF9731 FF816E FF6EE7 
        FF5FDB FF5473 FF4CC6 FF48D7 
        FF4895 FF4BDF FF5280 FF5C37 
        FF68B5 FF77A0 FF8894 FF9B28 
        FFAEEE FFC376 FFD852 FFED15 
        000158 0014BB 0026E4 003785 
        00465C 005330 005DD8 006635 
        006C37 006FDA 007127 007032 
        006D1A 006807 00612C 0058C0 
        004F01 004431 003894 002C6F 
        002008 0013A2 00077B FFFBD0 
        FFF0D5 FFE6BC FFDDAB FFD5C4 
        FFCF21 FFC9D1 FFC5DF FFC34C 
        FFC212 FFC223 FFC36D FFC5D7 
        FFC944 FFCD92 FFD29D FFD83F 
        FFDE51 FFE4AB FFEB28 FFF1A3 
        FFF7F8 FFFE08 0003B7 0008ED 
        000D96 0011A1 001504 0017B9 
        0019BB 001B0F 001BB8 001BC1 
        001B36 001A24 00189D 0016B3 
        001479 001202 000F63 000CAD 
        0009F3 000746 0004B5 00024C 
        000016 FFFE1C FFFC65 FFFAF4 
        FFF9CC FFF8EC FFF852 FFF7FB 
        FFF7E1 FFF7FE FFF84B FFF8BF 
        FFF953 FFF9FE FFFAB9 FFFB7B 
        FFFC3E FFFCFB FFFDAD FFFE50 
        FFFEE0 FFFF5C FFFFC2 000013 
        00004E 000075 00008B 000093 
        00008E 000080 00006C 000056 
        00003E 000029 000017 00000A 
        000002 000000 

0xFF317A	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF323A	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF32B8	$M.system_config.data.ParameterMap
        002BCD FF3398 002CB6 FF3396 
        002CB7 FF3397 002CAA 002E41 
        002CB5 002E47 002CB0 002E42 
        002CB1 002E43 002CB2 002E44 
        002CB3 002E45 002CB4 002E46 
        002BCD 002DBC 002BCD 002DDA 
        002CB8 002DC6 002CB9 002DC7 
        002CBA 002DC8 002CBB 002DC9 
        002CBC 002DCA 002CBD 002DCB 
        002CBE 002DCC 002CBF 002DCD 
        002CC0 002DD1 002CC1 002DD2 
        002CC2 002DD3 002CC3 002DD4 
        002CC4 002DD5 002CC5 002DD6 
        002CC6 002DD7 002CC7 002DD8 
        002CC8 002DC2 002CC9 002DE4 
        002CCA 002DE5 002CCB 002DE6 
        002CCC 002DE7 002CCD 002DE8 
        002CCE 002DE9 002CCF 002DEA 
        002CD0 002DEB 002CD1 002DEF 
        002CD2 002DF0 002CD3 002DF1 
        002CD4 002DF2 002CD5 002DF3 
        002CD6 002DF4 002CD7 002DF5 
        002CD8 002DF6 002CD9 002DE0 
        002CDA FF5F4B 002CDB FF5F4C 
        002CDC FF6901 002BCD 002E7E 
        002BCD 002ED3 002BCD FF5ED9 
        000000 

0xFF3321	$M.system_config.data.spkr_eq_left_dm2
        002EFD 002EFD 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3336	$M.system_config.data.spkr_eq_right_dm2
        FF5F10 FF5F10 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF334B	$M.system_config.data.user_eq_left_dm2
        002EFD 002EFD 000005 002D7A 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3360	$M.system_config.data.user_eq_right_dm2
        FF5F10 FF5F10 000005 002D7A 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3375	$M.system_config.data.boost_eq_left_dm2
        002EFD 002EFD 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3382	$M.system_config.data.boost_eq_right_dm2
        FF5F10 FF5F10 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF338F	$M.system_config.data.stereo_3d_obj
        FF5EF6 002EF0 002EFD FF5F10 
        FF68BE 0038BC 0000E4 00026A 
        000000 000000 000040 

0xFF339A	$M.system_config.data.user_eq_bank_select
        000007 000000 002C23 002C39 
        002C4F 002C65 002C7B 002C91 

0xFF33A2	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF33A9	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF33B0	$M.system_config.data.spkr_eq_bank_select
        000001 002BCE 002BEF 

0xFF33B3	$M.system_config.data.boost_eq_bank_select
        000001 002C10 002C19 

0xFF33B6	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF33C0	$sub_out_1k2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33FC	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF3400	$dac_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3760	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF3774	$M.system_config.data.bass_manager_struct
        002EFD FF5F10 002EFD FF5F10 
        FF5F03 002F0A 000DDC 002E41 
        FF5DB0 002BCD 000800 FF68E8 

0xFF3780	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF37F9	$audio_mute_op_mono
0xFF37F9	$audio_mute_op_mono.next
        002F83 

0xFF37FA	$audio_mute_op_mono.func
        0038D7 

0xFF37FB	$audio_mute_op_mono.param
        000001 000000 000001 000000 
        000000 

0xFF3800	$sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F08	$M.iir_resamplev2.Up_160_Down_147.filter
0xFF3F08	$M.iir_resamplev2.Up_160_Down_147.int_ratio
        000000 

0xFF3F09	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF3F0A	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF3F0B	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF3F0C	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000F90 

0xFF3F0D	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF3F0E	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF3F0F	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF3F10	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF3F11	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF4D91 

0xFF3F12	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF3F13	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        000B6B 

0xFF3F14	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF3F15	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF3F16	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF3F17	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF3F18	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF3F19	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF3760 

0xFF3F1A	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF3F1B	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF3F1C	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        00121A 

0xFF3F1D	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF3F28	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF3F29	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF3F33	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF3F34	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3F3E	$M.system_config.data.pcmin_l_pk_dtct
        FF5EF6 000000 

0xFF3F40	$encoded_packet_info
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F68	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF3F77	$audio_mute_op_stereo.next
0xFF3F77	$audio_mute_op_stereo
        002F79 

0xFF3F78	$audio_mute_op_stereo.func
        0038D7 

0xFF3F79	$audio_mute_op_stereo.param
        000001 000000 000002 000000 
        000000 000001 000001 

0xFF3F80	$M.cbops.av_copy.right_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3FF9	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
0xFF3FF9	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
        00FEEB 

0xFF3FFA	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0xFF3FFB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0xFF3FFC	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BF00 

0xFF3FFD	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0xFF3FFE	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0xFF3FFF	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0xFF4000	$spdif_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4C00	$dac_resampler.dac_out_temp_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4C91	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF4CFA	$stereo_tone_in_copy_op.next
0xFF4CFA	$stereo_tone_in_copy_op
        FFFFFF 

0xFF4CFB	$stereo_tone_in_copy_op.func
        0038DA 

0xFF4CFC	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0xFF4D00	$dac_resampler.dac_out_temp_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4D91	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF4E09	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF4E48	$M.iir_resamplev2.Up_147_Down_160.int_ratio
0xFF4E48	$M.iir_resamplev2.Up_147_Down_160.filter
        000001 

0xFF4E49	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF4E4A	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF4E4B	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF4E4C	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000F90 

0xFF4E4D	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF4E4E	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF4E4F	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF4E50	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF4E51	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF4E09 

0xFF4E52	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF4E53	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        000B6B 

0xFF4E54	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF4E55	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF4E56	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF4E57	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF4E58	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF4E59	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF4F18 

0xFF4E5A	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF4E5B	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF4E5C	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        00121A 

0xFF4E5D	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF4E68	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF4E69	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF4E73	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF4E74	$M.iir_resamplev2.Up_441_Down_320.filter
0xFF4E74	$M.iir_resamplev2.Up_441_Down_320.int_ratio
        000000 

0xFF4E75	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF4E76	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF4E77	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF4E78	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000F90 

0xFF4E79	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF4E7A	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF4E7B	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF4E7C	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF4E7D	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF4E09 

0xFF4E7E	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF4E7F	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        000B6B 

0xFF4E80	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF4E81	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF4E82	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF4E83	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF4E84	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF4E85	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF4C91 

0xFF4E86	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF4E87	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF4E88	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        00121A 

0xFF4E89	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF4E94	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF4E95	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF4E9F	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF4EA0	$M.iir_resamplev2.Up_441_Down_160.int_ratio
0xFF4EA0	$M.iir_resamplev2.Up_441_Down_160.filter
        000000 

0xFF4EA1	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF4EA2	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF4EA3	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF4EA4	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000F90 

0xFF4EA5	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF4EA6	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF4EA7	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF4EA8	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF4EA9	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF4E09 

0xFF4EAA	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF4EAB	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000D44 

0xFF4EAC	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF4EAD	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF4EAE	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF4EAF	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF4EB0	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF4EB1	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF4C91 

0xFF4EB2	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF4EB3	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF4EB4	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        00124D 

0xFF4EB5	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF4EBC	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF4EBD	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF4EC3	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF4EC4	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF4EC9	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF4ECA	$M.iir_resamplev2.Up_3_Down_1.filter
0xFF4ECA	$M.iir_resamplev2.Up_3_Down_1.int_ratio
        000000 

0xFF4ECB	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF4ECC	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF4ECD	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF4ECE	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF4ECF	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000D44 

0xFF4ED0	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF4ED1	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF4ED2	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF4ED3	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF4ED4	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF4ED5	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF3F68 

0xFF4ED6	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF4ED7	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF4ED8	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        0011E8 

0xFF4ED9	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF4EE1	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF4EE2	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF4EE9	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF4EEA	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF4EF1	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF4EF2	$M.iir_resamplev2.Up_3_Down_2.filter
0xFF4EF2	$M.iir_resamplev2.Up_3_Down_2.int_ratio
        000000 

0xFF4EF3	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF4EF4	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF4EF5	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF4EF6	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s1
        000000 

0xFF4EF7	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000D44 

0xFF4EF8	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF4EF9	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF4EFA	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF4EFB	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF4EFC	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF4EFD	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF4F3B 

0xFF4EFE	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF4EFF	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF4F00	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        00121A 

0xFF4F01	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF4F0C	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF4F0D	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF4F17	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF4F18	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF4F3B	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF4F4A	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4FA2	$dac_resampler.stereo_left_resampler_op.next
0xFF4FA2	$dac_resampler.stereo_left_resampler_op
        0003B2 

0xFF4FA3	$dac_resampler.stereo_left_resampler_op.func
        FF68D6 

0xFF4FA4	$dac_resampler.stereo_left_resampler_op.param
        000000 000002 000000 FFFFF8 
        000008 FF5BCD 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4FEE	$M.music_example_process.mono_mode_conversion_table
        000005 000001 000004 000001 
        000003 000001 000003 000000 
        000004 000000 000005 000000 
        000007 000001 000007 000000 

0xFF4FFE	$M.system_config.data.pcmin_lfe_pk_dtct
        FF5F03 000000 

0xFF5000	$M.system_config.data.delay_buf_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF5BCD	$dac_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5CAF	$dac_resampler.mono_resampler_op
0xFF5CAF	$dac_resampler.mono_resampler_op.next
        FFFFFF 

0xFF5CB0	$dac_resampler.mono_resampler_op.func
        FF68D6 

0xFF5CB1	$dac_resampler.mono_resampler_op.param
        000000 000001 000000 FFFFF8 
        000008 FF5BCD 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5CFB	$M.music_example.power_up_reset.message_handlers
        FF5F97 001020 001EE4 001F7F 
        002FAC 001001 00334E 001F7F 
        002FB0 00100E 001E66 001F7F 
        FF5F9B 001002 0032C6 001F7F 
        FF5F9F 001012 003371 001F7F 
        002FB4 001018 001F1F 001F7F 
        FF5FA3 00101A 001EB2 001F7F 
        002FB8 00121A 001EC0 001F7F 
        FF5FA7 00129A 001EF1 001F7F 
        002FBC 00121B 001EFC 001F7F 
        FF5FAB 00129B 001EA3 001F7F 
        0000FD 001007 003386 001FDA 
        FF68B2 00100A 0033EE 001FDA 
        0038B3 00100B 003301 001FDA 
        0038B0 001009 003415 001FDA 
        FF68B5 001008 0033FE 001FDA 
        FF68B8 002000 003407 001FDA 
        000000 

0xFF5D40	$M.system_config.data.reinitialize_table
        0033B4 FF3321 FF33B0 0033B4 
        FF3336 FF33B0 0033B4 FF3375 
        FF33B3 0033B4 FF3382 FF33B3 
        003000 0038E0 FF339A 0008D1 
        000000 FF338F 0033C9 002DBC 
        002DDA 001447 002E7E 002E7E 
        001447 002ED3 002ED3 001447 
        FF5ED9 FF5ED9 00060E FF3774 
        0038C2 001FBC 000000 FF5FBF 
        001FBC 000000 002FD0 000000 

0xFF5D68	$dac_resampler.filter_spec_lookup_table
        00BB80 00BB80 000000 00AC44 
        00AC44 000000 007D00 007D00 
        000000 005622 005622 000000 
        003E80 003E80 000000 001F40 
        001F40 000000 003E80 00BB80 
        FF4ECA 007D00 00BB80 FF4EF2 
        00AC44 00BB80 FF3F08 003E80 
        00AC44 FF4EA0 007D00 00AC44 
        FF4E74 00BB80 00AC44 FF4E48 
        000000 

0xFF5D8D	$M.system_config.data.StatisticsPtrs
        002FA8 FF5F77 002FA9 002FAA 
        FF3F3F 0038E3 FF4FFF 0038E5 
        FF5FFF 0038E7 0038FA FF68FA 
        FF68FB 0038FC 002BCD FF3FFC 
        003900 FF68EB 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF5DB0	$M.system_config.data.bass_manager_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5DD0	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0xFF5DF0	$M.system_config.data.StandBy_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF 0038E2 
        000000 0013CF FF4FFE 000000 
        0013A0 00005C 000000 0013A0 
        00006C 000000 0013CF 0038E4 
        000000 0013CF FF5FFE 000000 
        001264 FF5F36 000000 000000 

0xFF5E0C	$spdif_stream_decode_struct
        000F44 001475 00135E 000000 
        80000C 80000D FF3F79 000000 
        002EE2 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5E26	$cbuffer.read_port_offset_addr
0xFF5E26	$cbuffer.port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5E32	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5E3E	$M.spdif.frame_copy.codec_support_jump_table
        0000F3 0000DB 0000FB 0000F7 
        0000FB 0000DE 0000FB 0000E1 
        0000FB 0000FB 0000FB 0000FB 
        0000FB 0000FB 0000FB 0000FB 
        0000FB 0000FB 0000FB 0000FB 
        0000FB 0000FB 0000FB 0000FB 

0xFF5E56	$audio_out_tone_upsample_stereo_mix.next
0xFF5E56	$audio_out_tone_upsample_stereo_mix
        FF5E6A 

0xFF5E57	$audio_out_tone_upsample_stereo_mix.func
        0038D4 

0xFF5E58	$audio_out_tone_upsample_stereo_mix.param
        000000 000001 0000AD FF323A 
        0038E8 000050 0038E9 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5E6A	$audio_out_tone_right_upsample_stereo_mix.next
0xFF5E6A	$audio_out_tone_right_upsample_stereo_mix
        002F61 

0xFF5E6B	$audio_out_tone_right_upsample_stereo_mix.func
        0038D4 

0xFF5E6C	$audio_out_tone_right_upsample_stereo_mix.param
        000001 FFFFFF FF68A9 FF323A 
        0038E8 000060 0038E9 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5E7E	$audio_out_tone_upsample_mono_mix
0xFF5E7E	$audio_out_tone_upsample_mono_mix.next
        002E6A 

0xFF5E7F	$audio_out_tone_upsample_mono_mix.func
        0038D4 

0xFF5E80	$audio_out_tone_upsample_mono_mix.param
        000000 FFFFFF 0000AD FF323A 
        0038E8 000050 0038E9 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF5E92	$audio_out_rate_adjustment_and_shift_op_mono.next
0xFF5E92	$audio_out_rate_adjustment_and_shift_op_mono
        FFFFFF 

0xFF5E93	$audio_out_rate_adjustment_and_shift_op_mono.func
        FF68D3 

0xFF5E94	$audio_out_rate_adjustment_and_shift_op_mono.param
        000000 000001 FFFFFF FFFFFF 
        FFFFF8 FF3000 000080 000000 
        002F1B 000000 000000 000024 
        000000 000000 000000 000000 
        000000 000000 

0xFF5EA6	$M.system_config.data.mono_StandBy_proc_funcs
        0012BE FF5F36 000000 0013CF 
        FF3F3E 000000 0013CF FF4FFE 
        000000 0013A0 00005C 000000 
        0013CF 0038E4 000000 001264 
        FF5F36 000000 000000 

0xFF5EB9	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5EC9	$flash.code.address
	-------- [0x000C octets]

0xFF5ECD	$flash.data16.address
	-------- [0x000C octets]

0xFF5ED1	$flash.data24.address
	-------- [0x000C octets]

0xFF5ED5	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF5ED9	$M.system_config.data.sub_volume_and_limit_obj
0xFF5ED9	$M.system_config.data.sub_volume_and_limit_block
        000000 001000 000001 FF68E8 
        200000 FBD57B 072148 79999A 
        000000 000000 

0xFF5EE3	$M.system_config.data.sub_channel_vol_struc
        002F0A 002F0A 080000 000000 
        000000 

0xFF5EE8	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0xFF5EF6	$M.system_config.data.stream_map_left_in
        FF5FFB 000000 000000 000168 
        000BB8 00146E 001422 000000 
        000000 000000 000000 000000 
        000000 

0xFF5F03	$M.system_config.data.stream_map_lfe_in
        000075 000000 000000 000168 
        000BB8 00146E 001422 000000 
        000000 000000 000000 000000 
        000000 

0xFF5F10	$M.system_config.data.stream_map_right_out
        00007D 000000 000000 000168 
        000BB8 00143B 0012D2 000000 
        000000 000000 000000 000000 
        000000 

0xFF5F1D	$interrupt.isr_call_table
        001233 001FEC 000BFF 001FEC 
        001FEC 001FEC 001FEC 001FEC 
        001FEC 

0xFF5F26	$audio_out_dither_and_shift_op_mono
0xFF5F26	$audio_out_dither_and_shift_op_mono.next
        FFFFFF 

0xFF5F27	$audio_out_dither_and_shift_op_mono.func
        0038CB 

0xFF5F28	$audio_out_dither_and_shift_op_mono.param
        000000 000001 FFFFF8 000000 
        000070 000000 

0xFF5F2E	$M.spdif.output_interface_control.all_confirms_received.confirm_table
        000380 000381 000384 000380 
        000388 00038C 00038F 000392 

0xFF5F36	$M.system_config.data.rcv_process_streams
        FF5EF6 002EF0 FF5F03 002EFD 
        FF5F10 002F0A 000000 

0xFF5F3D	$M.cbops.av_copy.silence_buffer_struc
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF5F44	$M.spdif.frame_copy.spdif_in_state_proc
        000092 00005F 00005F 00005F 
        00011C 00010F 000155 

0xFF5F4B	$signal_detect_op_coefs
        000A5B 000258 000000 000000 
        000001 001019 

0xFF5F51	$M.main.rm_mono_switch_op
0xFF5F51	$M.main.rm_mono_switch_op.next
        FF5F26 

0xFF5F52	$M.main.rm_mono_switch_op.func
        FF68DC 

0xFF5F53	$M.main.rm_mono_switch_op.param
        FF68EC FF5E92 00FFFF 000000 

0xFF5F57	$dac_resampler.mono_copy_switch_op.next
0xFF5F57	$dac_resampler.mono_copy_switch_op
        002FC4 

0xFF5F58	$dac_resampler.mono_copy_switch_op.func
        FF68DC 

0xFF5F59	$dac_resampler.mono_copy_switch_op.param
        FF68FE FF5CAF 000000 000001 

0xFF5F5D	$M.system_config.data.sub_mix_dm1
        002EFD FF5F10 002EFD FF68FF 
        FF68FF 0038FF 

0xFF5F63	$tone_in_copy_op.next
0xFF5F63	$tone_in_copy_op
        FFFFFF 

0xFF5F64	$tone_in_copy_op.func
        0038D1 

0xFF5F65	$tone_in_copy_op.param
        000000 000001 00000B 

0xFF5F68	$M.main.audio_out_dc_remove_op_right.next
0xFF5F68	$audio_out_dc_remove_op_right
        002F67 

0xFF5F69	$M.main.audio_out_dc_remove_op_right.func
        FF68CD 

0xFF5F6A	$M.main.audio_out_dc_remove_op_right.param
        000001 000001 000000 

0xFF5F6D	$signal_detect_op_mono
0xFF5F6D	$signal_detect_op_mono.next
        FF37F9 

0xFF5F6E	$signal_detect_op_mono.func
        FF68D9 

0xFF5F6F	$signal_detect_op_mono.param
        FF5F4B 000001 000000 

0xFF5F72	$hw_warp_struct
        007D00 002F1B 000080 000000 
        000000 

0xFF5F77	$music_example.SpiSysControl
0xFF5F77	$music_example.SysControl
        000000 

0xFF5F78	$music_example.OvrMasterSystemVolume
        000009 

0xFF5F79	$music_example.OvrCallState
        000000 

0xFF5F7A	$music_example.OvrMode
        000000 

0xFF5F7B	$music_example.OvrTrimVolumes
        000000 

0xFF5F7C	$sub_esco_out_copy_struc
        FF5FC3 000001 FF68C4 000001 
        91A00E 

0xFF5F81	$sub_l2cap_header_out_copy_struc
        002FD8 000001 FF68C4 000001 
        9D800F 

0xFF5F86	$M.spdif.output_interface_control.event_process.rate_config
        000000 000301 000201 000500 
        000000 

0xFF5F8B	$audio_out_timer_struc
        000000 000000 000000 000000 

0xFF5F8F	$signal_detect_timer_struc
        000000 000000 000000 000000 

0xFF5F93	$init_latency_table
        000BBE 000BC3 000BDA 000BE1 

0xFF5F97	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0xFF5F9B	$M.music_example_message.volume_message_struc
        000000 000000 000000 000000 

0xFF5F9F	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0xFF5FA3	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0xFF5FA7	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF5FAB	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF5FAF	$dac_resampler.stereo_right_copy_op.next
0xFF5FAF	$dac_resampler.stereo_right_copy_op
        FFFFFF 

0xFF5FB0	$dac_resampler.stereo_right_copy_op.func
        0038C8 

0xFF5FB1	$dac_resampler.stereo_right_copy_op.param
        000001 000003 

0xFF5FB3	$M.system_config.data.pass_thru_obj
        FF5EF6 002EF0 002EFD FF5F10 

0xFF5FB7	$M.system_config.data.right_headroom_obj
        002EF0 002EF0 003901 0038FF 

0xFF5FBB	$M.system_config.data.mono_headroom_obj
        002EFD 002EFD 003901 0038FF 

0xFF5FBF	$M.system_config.data.delay_left
        002EFD 002EFD 0038BF 000BCC 

0xFF5FC3	$codec_out_copy_op.next
0xFF5FC3	$codec_out_copy_op
        FFFFFF 

0xFF5FC4	$codec_out_copy_op.func
        0038C8 

0xFF5FC5	$codec_out_copy_op.param
        000000 000001 

0xFF5FC7	$sub_l2cap_header_out_copy_op.next
0xFF5FC7	$sub_l2cap_header_out_copy_op
        FFFFFF 

0xFF5FC8	$sub_l2cap_header_out_copy_op.func
        0038C8 

0xFF5FC9	$sub_l2cap_header_out_copy_op.param
        000000 000001 

0xFF5FCB	$sco_params_message_struc
        000000 000000 000000 000000 

0xFF5FCF	$sco_timer_struc
        000000 000000 000000 000000 

0xFF5FD3	$bdaddr_struc
        000000 000000 000000 000000 

0xFF5FD7	$M.Subwoofer.write_port_disconnected_function_table
        001B05 001B05 001B06 001B0B 

0xFF5FDB	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0xFF5FDF	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0xFF5FE3	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF5FE7	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF5FEB	$M.cbops.rate_adjustment_and_shift.main.temp_vars
        000000 000000 000000 000000 

0xFF5FEF	$spdif.frame_copy.chnl_sts_event_message_struc
        000000 000000 000000 000000 

0xFF5FF3	$spdif.frame_copy.valid_stream_event_message_struc
        000000 000000 000000 000000 

0xFF5FF7	$spdif.output_interface_control.activate_audio_response_message_struc
        000000 000000 000000 000000 

0xFF5FFB	$audio_out_left_cbuffer_struc
        0005DC 000800 000800 

0xFF5FFE	$M.system_config.data.dac_r_pk_dtct
        FF5F10 000000 

0xFF6000	$stereo_3d_enhancement.delay1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF68A0	$audio_out_right_cbuffer_struc
        0005DC FF7000 FF7000 

0xFF68A3	$dac_out_left_cbuffer_struc
        000360 FF3400 FF3400 

0xFF68A6	$codec_in_cbuffer_struc
        001000 001000 001000 

0xFF68A9	$tone_in_right_cbuffer_struc
        000100 000200 000200 

0xFF68AC	$encoded_packet_info_cbuffer_struc
        000028 FF3F40 FF3F40 

0xFF68AF	$dac_sil_right_cbuffer_struc
        000005 000348 000348 

0xFF68B2	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0xFF68B5	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0xFF68B8	$M.music_example_spi.spdif_config_message_struc
        000000 000000 000000 

0xFF68BB	$dac_out_temp_left_cbuffer_struc
        000091 FF4C00 FF4C00 

0xFF68BE	$stereo_3d_enhancement_delay1_cbuffer_struc
        0008A0 FF6000 FF626A 

0xFF68C1	$M.system_config.data.delay_buf_right_cbuffer_struc
        000BCD FF5000 FF5000 

0xFF68C4	$sub_codec_out_cbuffer_struc
        000032 000380 000380 

0xFF68C7	$sub_out_1k2_cbuffer_struc
        00003C FF33C0 FF33C0 

0xFF68CA	$M.cbops.av_copy.right_silence_cbuffer_struc
        000079 FF3F80 FF3F80 

0xFF68CD	$cbops.dc_remove
        0014D9 000000 0011C9 

0xFF68D0	$M.cbops.dither_and_shift.main.dither_func
        000B2A 000B37 000B46 

0xFF68D3	$cbops.rate_adjustment_and_shift
        000000 00142F 00048D 

0xFF68D6	$cbops_iir_resamplev2
        000000 001007 000C86 

0xFF68D9	$cbops.signal_detect_op
        000000 000000 001E4E 

0xFF68DC	$cbops.switch_op
        0014CF 0014D1 0014D3 

0xFF68DF	$M.spdif.frame_copy.rate_detect.sample_rates
        00BB80 00AC44 007D00 

0xFF68E2	$M.spdif.latency_measurement.latency_measurment_func_table
        000489 0002E2 0003D3 

0xFF68E5	$cbuffer.tmp
        000000 000000 

0xFF68E7	$tmr_period_tone_copy
        003E80 

0xFF68E8	$current_codec_sampling_rate
        000000 

0xFF68E9	$stereo_tone
        000000 

0xFF68EA	$audio_if_mode
        000000 

0xFF68EB	$codec_type
        FFFFFF 

0xFF68EC	$sw_rate_match_disable
        000008 

0xFF68ED	$rate_match_disable
        000000 

0xFF68EE	$spdif_stat_word
        000000 

0xFF68EF	$latency_calc_current_warp
        002E64 

0xFF68F0	$mono_copy_struc_ptr
        002F7E 

0xFF68F1	$mono_stereo_mode
        000000 

0xFF68F2	$spdif_pause_timer
        000000 

0xFF68F3	$first_audio_time
        000000 

0xFF68F4	$codec_level
        000000 

0xFF68F5	$init_latency_state
        000000 

0xFF68F6	$time_left_to_play
        000000 

0xFF68F7	$music_example.sys_mode
        000002 

0xFF68F8	$music_example.stereo_processing
        000000 

0xFF68F9	$music_example.frame_processing_size
        000168 

0xFF68FA	$music_example.MasterVolume
        000000 

0xFF68FB	$music_example.LeftTrimVolume
        000000 

0xFF68FC	$M.mips_profile.evalinterval_us
        0186A0 

0xFF68FD	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0xFF68FE	$dac_resampler.resampler_active
        000000 

0xFF68FF	$M.system_config.data.HalfValue
        400000 

0xFF6900	$cmpd_gain
        000000 

0xFF6901	$M.system_config.data.dithertype
        000000 

0xFF6902	$warp_amount
        000000 

0xFF6903	$right_port
        80000D 

0xFF6904	$wall_clock_msw
        000000 

0xFF6905	$wall_clock_time
        000000 

0xFF6906	$sco_param_clock_msw
        000000 

0xFF6907	$sco_param_to_air_size
        000000 

0xFF6908	$sco_param_to_air_time
        000000 

0xFF6909	$sco_timer_id
        000000 

0xFF690A	$subwoofer_temp
        000000 

0xFF690B	$queue_another_bass_packet
        000000 

0xFF690C	$late_write_counter
        000000 

0xFF690D	$early_write_counter
        000000 

0xFF690E	$max_early_write
        000000 

0xFF690F	$M.downsample_sub_to_1k2.residual
        000000 

0xFF6910	$wall_clock_adjustment
        000000 

0xFF6911	$sub_sra_ratio
        000000 

0xFF6912	$wall_clock_timer_id
        000000 

0xFF6913	$subwoofer.running
        000000 

0xFF6914	$synchronized_rate
        000000 

0xFF6915	$cbuffer.write_port_connect_address
        000000 

0xFF6916	$cbuffer.read_port_connect_address
        000000 

0xFF6917	$cbuffer.auto_mcu_message
        000001 000000 

0xFF6919	$interrupt.total_time
        000000 

0xFF691A	$message.queue_read_ptr
        000000 

0xFF691B	$message.last_seq_sent
        000000 

0xFF691C	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0xFF691D	$pskey.last_addr
        FFFFFF 

0xFF691E	$timer.last_addr
        FFFFFF 

0xFF691F	$cbops.struc_ptr
        000000 

0xFF6920	$cbops.amount_written
        000000 

0xFF6921	$M.cbops.av_copy.control_cbuffer
        000000 

0xFF6922	$M.cbops.dac_av_copy.port_mnt_data_avg
        0016A8 

0xFF6923	$M.cbops.dac_av_copy.prev_buffer_read_addr
        000000 

0xFF6924	$M.cbops.dac_av_copy.buffer_level
        000000 

0xFF6925	$M.cbops.dither_and_shift.main.rand_num
        005555 

0xFF6926	$M.cbops.rate_adjustment_and_shift.main.n_samples
        000000 

0xFF6927	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0xFF6928	$M.cbops.rate_adjustment_and_shift.main.temp_r4
        000000 

0xFF6929	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0xFF692A	$spdif.frame_copy.frame_copy_struct
        000000 

0xFF692B	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0xFF692C	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0xFF692D	$M.cmpd100.analysis.inst_gain
        000000 

0xFF692E	$M.spi_comm.last_addr
        FFFFFF 

0xFF7000	$audio_out_right
	-------- [0x1194 octets]


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000003 00E000 000000 000000 
        000140 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000001 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000001 004000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000100 000000 
        000000 000000 000000 000000 
        000000 000401 000000 000140 
        000000 003B0B 001B85 002809 
        004000 00003B 000B1B 008528 
        000900 000001 000004 000100 
        000001 004000 00003B 006E6E 
        0084BC 00E040 000000 003B6E 
        006E84 00BCE0 000000 000100 
        000006 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000500 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000500 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 00000F 000000 000F00 
        000003 001000 000020 000000 
        000000 000000 000000 002000 
        000010 000000 002000 000065 
        003161 000000 000020 000000 
        000000 005000 00026A 007FFF 
        00FFF9 00B037 00FA05 0042FE 
        0056CC 00FF80 007110 000000 
        000800 000001 005555 0000CC 
        00CC42 000B8B 00030F 001042 
        000B8B 0000EC 00E962 00032E 
        00009E 00217C 00997B 000076 
        00AB08 000000 00F9B0 0037FA 
        000542 00FE56 00CCFF 008071 
        001000 000008 000000 000155 
        005500 00CCCC 003E48 005902 
        00D025 003E48 005900 00D9BA 
        005E42 007200 00914F 007B6F 
        000800 006D0B 000800 000000 
        000A5D 000002 005800 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 17884 of 32768 words used, 14884 words available in 1 blocks
  DM2_REGION: 17884 of 32768 words used, 14884 words available in 1 blocks
  flash.data16: 438 of 1048576 words used, 1048138 words available in 1 blocks
TOTAL: 36206 of 1114112 words used, 1077906 words available in 3 blocks

CODE:
  PM_REGION: 8184 of 11264 words used, 3080 words available in 1 blocks
  flash.code: 1049 of 16764928 words used, 16763879 words available in 1 blocks
TOTAL: 9233 of 16776192 words used, 16766959 words available in 2 blocks

