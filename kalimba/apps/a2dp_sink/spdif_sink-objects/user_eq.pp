.linefile 1 "user_eq.asm"
.linefile 1 "<command-line>"
.linefile 1 "user_eq.asm"





.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stack.h" 1
.linefile 7 "user_eq.asm" 2

.linefile 1 "music_example.h" 1
.linefile 12 "music_example.h"
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/music_manager_library_gen.h" 1
.linefile 12 "C:/ADK3.5/kalimba/lib_sets/sdk/include/music_manager_library_gen.h"
.CONST $MUSIC_MANAGER_SYSID 0xE008;


.CONST $M.MUSIC_MANAGER.CONFIG.VOLUME_LIMITER_BYPASS 0x001000;
.CONST $M.MUSIC_MANAGER.CONFIG.BASS_MANAGER_BYPASS 0x000800;
.CONST $M.MUSIC_MANAGER.CONFIG.SPKR_EQ_BYPASS 0x000400;
.CONST $M.MUSIC_MANAGER.CONFIG.EQFLAT 0x000200;
.CONST $M.MUSIC_MANAGER.CONFIG.USER_EQ_BYPASS 0x000100;
.CONST $M.MUSIC_MANAGER.CONFIG.BASS_BOOST_BYPASS 0x000080;
.CONST $M.MUSIC_MANAGER.CONFIG.SPATIAL_BYPASS 0x000040;
.CONST $M.MUSIC_MANAGER.CONFIG.COMPANDER_BYPASS 0x000020;
.CONST $M.MUSIC_MANAGER.CONFIG.DITHER_BYPASS 0x000010;
.CONST $M.MUSIC_MANAGER.CONFIG.USER_EQ_SELECT 0x000007;


.CONST $M.MUSIC_MANAGER.STATUS.CUR_MODE_OFFSET 0;
.CONST $M.MUSIC_MANAGER.STATUS.SYSCONTROL_OFFSET 1;
.CONST $M.MUSIC_MANAGER.STATUS.FUNC_MIPS_OFFSET 2;
.CONST $M.MUSIC_MANAGER.STATUS.DECODER_MIPS_OFFSET 3;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_PCMINL_OFFSET 4;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_PCMINR_OFFSET 5;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_PCMLFE_OFFSET 6;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_DACL_OFFSET 7;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_DACR_OFFSET 8;
.CONST $M.MUSIC_MANAGER.STATUS.PEAK_SUB_OFFSET 9;
.CONST $M.MUSIC_MANAGER.STATUS.VOL_SYS_OFFSET 10;
.CONST $M.MUSIC_MANAGER.STATUS.VOL_MAST_OFFSET 11;
.CONST $M.MUSIC_MANAGER.STATUS.TRIM_LEFT_OFFSET 12;
.CONST $M.MUSIC_MANAGER.STATUS.TRIM_RIGHT_OFFSET 13;
.CONST $M.MUSIC_MANAGER.STATUS.USER_EQ_BANK_OFFSET 14;
.CONST $M.MUSIC_MANAGER.STATUS.CONFIG_FLAG_OFFSET 15;
.CONST $M.MUSIC_MANAGER.STATUS.DELAY 16;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_TYPE_OFFSET 17;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_FS_OFFSET 18;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_CHANNEL_MODE 19;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT1 20;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT2 21;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT3 22;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT4 23;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT5 24;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT6 25;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT7 26;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT8 27;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STAT9 28;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STATA 29;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_STATB 30;
.CONST $M.MUSIC_MANAGER.STATUS.INTERFACE_TYPE 31;
.CONST $M.MUSIC_MANAGER.STATUS.INPUT_RATE 32;
.CONST $M.MUSIC_MANAGER.STATUS.OUTPUT_RATE 33;
.CONST $M.MUSIC_MANAGER.STATUS.CODEC_RATE 34;
.CONST $M.MUSIC_MANAGER.STATUS.BLOCK_SIZE 35;


.CONST $M.MUSIC_MANAGER.SYSMODE.STANDBY 0;
.CONST $M.MUSIC_MANAGER.SYSMODE.PASSTHRU 1;
.CONST $M.MUSIC_MANAGER.SYSMODE.FULLPROC 2;
.CONST $M.MUSIC_MANAGER.SYSMODE.MONO 3;
.CONST $M.MUSIC_MANAGER.SYSMODE.MONO_PASSTHRU 4;
.CONST $M.MUSIC_MANAGER.SYSMODE.MONO_STANDBY 5;
.CONST $M.MUSIC_MANAGER.SYSMODE.SUBWOOFER 6;
.CONST $M.MUSIC_MANAGER.SYSMODE.MONO_SUBWOOFER 7;
.CONST $M.MUSIC_MANAGER.SYSMODE.MAX_MODES 8;


.CONST $M.MUSIC_MANAGER.CONTROL.DAC_OVERRIDE 0x8000;
.CONST $M.MUSIC_MANAGER.CONTROL.MODE_OVERRIDE 0x2000;



.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CONFIG 0;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_CONFIG 1;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_GAIN_EXP 2;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_GAIN_MANT 3;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE1_B2 4;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE1_B1 5;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE1_B0 6;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE1_A2 7;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE1_A1 8;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE2_B2 9;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE2_B1 10;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE2_B0 11;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE2_A2 12;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE2_A1 13;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE3_B2 14;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE3_B1 15;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE3_B0 16;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE3_A2 17;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE3_A1 18;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE4_B2 19;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE4_B1 20;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE4_B0 21;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE4_A2 22;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE4_A1 23;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE5_B2 24;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE5_B1 25;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE5_B0 26;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE5_A2 27;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_STAGE5_A1 28;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_SCALE1 29;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_SCALE2 30;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_SCALE3 31;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_SCALE4 32;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ1_SCALE5 33;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_CONFIG 34;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_GAIN_EXP 35;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_GAIN_MANT 36;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE1_B2 37;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE1_B1 38;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE1_B0 39;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE1_A2 40;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE1_A1 41;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE2_B2 42;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE2_B1 43;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE2_B0 44;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE2_A2 45;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE2_A1 46;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE3_B2 47;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE3_B1 48;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE3_B0 49;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE3_A2 50;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE3_A1 51;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE4_B2 52;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE4_B1 53;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE4_B0 54;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE4_A2 55;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE4_A1 56;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE5_B2 57;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE5_B1 58;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE5_B0 59;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE5_A2 60;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_STAGE5_A1 61;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_SCALE1 62;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_SCALE2 63;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_SCALE3 64;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_SCALE4 65;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SPKR_EQ2_SCALE5 66;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_CONFIG 67;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_GAIN_EXP 68;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_GAIN_MANT 69;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_B2 70;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_B1 71;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_B0 72;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_A2 73;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_A1 74;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ1_SCALE 75;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_CONFIG 76;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_GAIN_EXP 77;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_GAIN_MANT 78;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_B2 79;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_B1 80;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_B0 81;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_A2 82;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_A1 83;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BOOST_EQ2_SCALE 84;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS 85;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_NUM_BANDS 86;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_GAIN 87;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE1_TYPE 88;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE1_FC 89;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE1_GAIN 90;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE1_Q 91;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE2_TYPE 92;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE2_FC 93;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE2_GAIN 94;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE2_Q 95;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE3_TYPE 96;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE3_FC 97;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE3_GAIN 98;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE3_Q 99;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE4_TYPE 100;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE4_FC 101;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE4_GAIN 102;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE4_Q 103;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE5_TYPE 104;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE5_FC 105;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE5_GAIN 106;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ1_STAGE5_Q 107;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_NUM_BANDS 108;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_GAIN 109;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE1_TYPE 110;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE1_FC 111;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE1_GAIN 112;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE1_Q 113;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE2_TYPE 114;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE2_FC 115;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE2_GAIN 116;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE2_Q 117;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE3_TYPE 118;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE3_FC 119;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE3_GAIN 120;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE3_Q 121;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE4_TYPE 122;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE4_FC 123;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE4_GAIN 124;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE4_Q 125;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE5_TYPE 126;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE5_FC 127;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE5_GAIN 128;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ2_STAGE5_Q 129;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_NUM_BANDS 130;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_GAIN 131;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE1_TYPE 132;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE1_FC 133;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE1_GAIN 134;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE1_Q 135;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE2_TYPE 136;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE2_FC 137;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE2_GAIN 138;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE2_Q 139;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE3_TYPE 140;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE3_FC 141;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE3_GAIN 142;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE3_Q 143;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE4_TYPE 144;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE4_FC 145;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE4_GAIN 146;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE4_Q 147;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE5_TYPE 148;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE5_FC 149;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE5_GAIN 150;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ3_STAGE5_Q 151;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_NUM_BANDS 152;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_GAIN 153;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE1_TYPE 154;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE1_FC 155;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE1_GAIN 156;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE1_Q 157;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE2_TYPE 158;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE2_FC 159;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE2_GAIN 160;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE2_Q 161;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE3_TYPE 162;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE3_FC 163;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE3_GAIN 164;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE3_Q 165;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE4_TYPE 166;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE4_FC 167;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE4_GAIN 168;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE4_Q 169;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE5_TYPE 170;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE5_FC 171;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE5_GAIN 172;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ4_STAGE5_Q 173;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_NUM_BANDS 174;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_GAIN 175;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE1_TYPE 176;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE1_FC 177;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE1_GAIN 178;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE1_Q 179;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE2_TYPE 180;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE2_FC 181;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE2_GAIN 182;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE2_Q 183;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE3_TYPE 184;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE3_FC 185;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE3_GAIN 186;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE3_Q 187;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE4_TYPE 188;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE4_FC 189;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE4_GAIN 190;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE4_Q 191;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE5_TYPE 192;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE5_FC 193;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE5_GAIN 194;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ5_STAGE5_Q 195;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_NUM_BANDS 196;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_GAIN 197;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE1_TYPE 198;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE1_FC 199;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE1_GAIN 200;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE1_Q 201;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE2_TYPE 202;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE2_FC 203;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE2_GAIN 204;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE2_Q 205;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE3_TYPE 206;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE3_FC 207;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE3_GAIN 208;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE3_Q 209;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE4_TYPE 210;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE4_FC 211;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE4_GAIN 212;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE4_Q 213;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE5_TYPE 214;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE5_FC 215;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE5_GAIN 216;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ6_STAGE5_Q 217;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SDICONFIG 218;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DAC_GAIN_L 219;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DAC_GAIN_R 220;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_CONFIG 221;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A1 222;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A2 223;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A3 224;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A4 225;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A5 226;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_B1 227;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_B2 228;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_B3 229;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_B4 230;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_B5 231;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_BASS_MANAGER_COEF_FREQ 232;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_REFLECTION_DELAY 233;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SE_MIX 234;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_THRESHOLD1 235;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_THRESHOLD1 236;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_THRESHOLD1 237;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_THRESHOLD1 238;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_EXPAND_RATIO1 239;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_LINEAR_RATIO1 240;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_COMPRESS_RATIO1 241;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_LIMIT_RATIO1 242;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_ATTACK_TC1 243;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_DECAY_TC1 244;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_ATTACK_TC1 245;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_DECAY_TC1 246;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_ATTACK_TC1 247;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_DECAY_TC1 248;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_ATTACK_TC1 249;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_DECAY_TC1 250;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_MAKEUP_GAIN1 251;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_THRESHOLD2 252;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_THRESHOLD2 253;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_THRESHOLD2 254;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_THRESHOLD2 255;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_EXPAND_RATIO2 256;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_LINEAR_RATIO2 257;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_COMPRESS_RATIO2 258;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_INV_LIMIT_RATIO2 259;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_ATTACK_TC2 260;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_EXPAND_DECAY_TC2 261;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_ATTACK_TC2 262;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LINEAR_DECAY_TC2 263;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_ATTACK_TC2 264;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_COMPRESS_DECAY_TC2 265;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_ATTACK_TC2 266;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_LIMIT_DECAY_TC2 267;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_MAKEUP_GAIN2 268;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SIGNAL_DETECT_THRESH 269;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_SIGNAL_DETECT_TIMEOUT 270;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DITHER_NOISE_SHAPE 271;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_0 272;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_1 273;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_2 274;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_3 275;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_4 276;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_5 277;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_6 278;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_7 279;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_8 280;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_DSP_USER_9 281;

.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC1_CONFIG 282;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC2_CONFIG 283;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC3_CONFIG 284;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC4_CONFIG 285;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC5_CONFIG 286;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC6_CONFIG 287;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC7_CONFIG 288;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC8_CONFIG 289;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC9_CONFIG 290;
.CONST $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC10_CONFIG 291;
.CONST $M.MUSIC_MANAGER.PARAMETERS.STRUCT_SIZE 292;
.linefile 13 "music_example.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h"
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/delay.h" 1
.linefile 12 "C:/ADK3.5/kalimba/lib_sets/sdk/include/delay.h"
   .CONST $audio_proc.delay.INPUT_ADDR_FIELD 0;

   .CONST $audio_proc.delay.OUTPUT_ADDR_FIELD 1;


   .CONST $audio_proc.delay.DBUFF_ADDR_FIELD 2;

   .CONST $audio_proc.delay.DELAY_FIELD 3;

   .CONST $audio_proc.delay.STRUC_SIZE 4;
.linefile 12 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peq.h" 1
.linefile 10 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peq.h"
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cbuffer.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cbuffer.h"
   .CONST $cbuffer.SIZE_FIELD 0;
   .CONST $cbuffer.READ_ADDR_FIELD 1;
   .CONST $cbuffer.WRITE_ADDR_FIELD 2;




      .CONST $cbuffer.STRUC_SIZE 3;




 .CONST $frmbuffer.CBUFFER_PTR_FIELD 0;
 .CONST $frmbuffer.FRAME_PTR_FIELD 1;
 .CONST $frmbuffer.FRAME_SIZE_FIELD 2;
 .CONST $frmbuffer.STRUC_SIZE 3;
.linefile 42 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cbuffer.h"
      .CONST $cbuffer.NUM_PORTS 12;
      .CONST $cbuffer.WRITE_PORT_OFFSET 0x00000C;
      .CONST $cbuffer.PORT_NUMBER_MASK 0x00000F;
      .CONST $cbuffer.TOTAL_PORT_NUMBER_MASK 0x00001F;
      .CONST $cbuffer.TOTAL_CONTINUOUS_PORTS 8;







   .CONST $cbuffer.MMU_PAGE_SIZE 64;


   .CONST $cbuffer.READ_PORT_MASK 0x800000;
   .CONST $cbuffer.WRITE_PORT_MASK $cbuffer.READ_PORT_MASK + $cbuffer.WRITE_PORT_OFFSET;




   .CONST $cbuffer.FORCE_ENDIAN_MASK 0x300000;
   .CONST $cbuffer.FORCE_ENDIAN_SHIFT_AMOUNT -21;
   .CONST $cbuffer.FORCE_LITTLE_ENDIAN 0x100000;
   .CONST $cbuffer.FORCE_BIG_ENDIAN 0x300000;


   .CONST $cbuffer.FORCE_SIGN_EXTEND_MASK 0x0C0000;
   .CONST $cbuffer.FORCE_SIGN_EXTEND_SHIFT_AMOUNT -19;
   .CONST $cbuffer.FORCE_SIGN_EXTEND 0x040000;
   .CONST $cbuffer.FORCE_NO_SIGN_EXTEND 0x0C0000;


   .CONST $cbuffer.FORCE_BITWIDTH_MASK 0x038000;
   .CONST $cbuffer.FORCE_BITWIDTH_SHIFT_AMOUNT -16;
   .CONST $cbuffer.FORCE_8BIT_WORD 0x008000;
   .CONST $cbuffer.FORCE_16BIT_WORD 0x018000;
   .CONST $cbuffer.FORCE_24BIT_WORD 0x028000;
   .CONST $cbuffer.FORCE_32BIT_WORD 0x038000;


   .CONST $cbuffer.FORCE_SATURATE_MASK 0x006000;
   .CONST $cbuffer.FORCE_SATURATE_SHIFT_AMOUNT -14;
   .CONST $cbuffer.FORCE_NO_SATURATE 0x002000;
   .CONST $cbuffer.FORCE_SATURATE 0x006000;


   .CONST $cbuffer.FORCE_PADDING_MASK 0x001C00;
   .CONST $cbuffer.FORCE_PADDING_SHIFT_AMOUNT -11;
   .CONST $cbuffer.FORCE_PADDING_NONE 0x000400;
   .CONST $cbuffer.FORCE_PADDING_LS_BYTE 0x000C00;
   .CONST $cbuffer.FORCE_PADDING_MS_BYTE 0x001400;


   .CONST $cbuffer.FORCE_PCM_AUDIO $cbuffer.FORCE_LITTLE_ENDIAN +
                                                      $cbuffer.FORCE_SIGN_EXTEND +
                                                      $cbuffer.FORCE_SATURATE;
   .CONST $cbuffer.FORCE_24B_PCM_AUDIO $cbuffer.FORCE_LITTLE_ENDIAN +
                                                      $cbuffer.FORCE_32BIT_WORD +
                                                      $cbuffer.FORCE_PADDING_MS_BYTE +
                                                      $cbuffer.FORCE_NO_SATURATE;

   .CONST $cbuffer.FORCE_16BIT_DATA_STREAM $cbuffer.FORCE_BIG_ENDIAN +
                                                      $cbuffer.FORCE_NO_SIGN_EXTEND +
                                                      $cbuffer.FORCE_NO_SATURATE;
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peq.h" 2







    .CONST $audio_proc.peq.parameter.NUM_STAGES_FIELD 0;
    .CONST $audio_proc.peq.parameter.GAIN_EXPONENT_FIELD 1;
    .CONST $audio_proc.peq.parameter.GAIN_MANTISA__FIELD 2;
    .CONST $audio_proc.peq.parameter.STAGES_SCALES 3;







   .CONST $audio_proc.peq.INPUT_ADDR_FIELD 0;


   .CONST $audio_proc.peq.OUTPUT_ADDR_FIELD 1;


   .CONST $audio_proc.peq.MAX_STAGES_FIELD 2;

   .CONST $audio_proc.peq.PARAM_PTR_FIELD 3;



   .CONST $audio_proc.peq.DELAYLINE_ADDR_FIELD 4;
.linefile 50 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peq.h"
   .CONST $audio_proc.peq.COEFS_ADDR_FIELD 5;




   .CONST $audio_proc.peq.NUM_STAGES_FIELD 6;



   .CONST $audio_proc.peq.DELAYLINE_SIZE_FIELD 7;



   .CONST $audio_proc.peq.COEFS_SIZE_FIELD 8;


   .CONST $audio_proc.peq.STRUC_SIZE 9;






   .CONST $audio_proc.peq.const.NUM_STAGES_MASK 0xFF;
.linefile 13 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peak_monitor.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/peak_monitor.h"
   .CONST $M.audio_proc.peak_monitor.PTR_INPUT_BUFFER_FIELD 0;
   .CONST $M.audio_proc.peak_monitor.PEAK_LEVEL 1;
   .CONST $M.audio_proc.peak_monitor.STRUCT_SIZE 2;
.linefile 14 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stream_gain.h" 1
.linefile 10 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stream_gain.h"
.CONST $M.audio_proc.stream_gain.OFFSET_INPUT_PTR 0;
.CONST $M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR 1;
.CONST $M.audio_proc.stream_gain.OFFSET_PTR_MANTISSA 2;
.CONST $M.audio_proc.stream_gain.OFFSET_PTR_EXPONENT 3;
.CONST $M.audio_proc.stream_gain.STRUC_SIZE 4;

.CONST $audio_proc.stream_gain_ramp.RAMP_STEP_FIELD 0;
.CONST $audio_proc.stream_gain_ramp.RAMP_GAIN_FIELD 1;
.CONST $audio_proc.stream_gain_ramp.PREV_MANTISSA_FIELD 2;
.CONST $audio_proc.stream_gain_ramp.PREV_EXPONENT_FIELD 3;
.CONST $audio_proc.stream_gain_ramp.STRUC_SIZE 4;
.linefile 15 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stream_mixer.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stream_mixer.h"
.CONST $M.audio_proc.stream_mixer.OFFSET_INPUT_CH1_PTR 0;
.CONST $M.audio_proc.stream_mixer.OFFSET_INPUT_CH2_PTR 1;
.CONST $M.audio_proc.stream_mixer.OFFSET_OUTPUT_PTR 2;
.CONST $M.audio_proc.stream_mixer.OFFSET_PTR_CH1_MANTISSA 3;
.CONST $M.audio_proc.stream_mixer.OFFSET_PTR_CH2_MANTISSA 4;
.CONST $M.audio_proc.stream_mixer.OFFSET_PTR_EXPONENT 5;
.CONST $M.audio_proc.stream_mixer.STRUC_SIZE 6;
.linefile 16 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cmpd100.h" 1
.linefile 13 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cmpd100.h"
.CONST $CMPD100_VERSION 0x010004;


.CONST $cmpd100.OFFSET_CONTROL_WORD 0;
.CONST $cmpd100.OFFSET_ENABLE_BIT_MASK 1;
.CONST $cmpd100.OFFSET_INPUT_CH1_PTR 2;
.CONST $cmpd100.OFFSET_INPUT_CH2_PTR 3;
.CONST $cmpd100.OFFSET_OUTPUT_CH1_PTR 4;
.CONST $cmpd100.OFFSET_OUTPUT_CH2_PTR 5;
.CONST $cmpd100.OFFSET_MAKEUP_GAIN 6;
.CONST $cmpd100.OFFSET_GAIN_PTR 7;
.CONST $cmpd100.OFFSET_NEG_ONE 8;
.CONST $cmpd100.OFFSET_POW2_NEG4 9;
.CONST $cmpd100.OFFSET_EXPAND_THRESHOLD 10;
.CONST $cmpd100.OFFSET_LINEAR_THRESHOLD 11;
.CONST $cmpd100.OFFSET_COMPRESS_THRESHOLD 12;
.CONST $cmpd100.OFFSET_LIMIT_THRESHOLD 13;
.CONST $cmpd100.OFFSET_INV_EXPAND_RATIO 14;
.CONST $cmpd100.OFFSET_INV_LINEAR_RATIO 15;
.CONST $cmpd100.OFFSET_INV_COMPRESS_RATIO 16;
.CONST $cmpd100.OFFSET_INV_LIMIT_RATIO 17;
.CONST $cmpd100.OFFSET_EXPAND_CONSTANT 18;
.CONST $cmpd100.OFFSET_LINEAR_CONSTANT 19;
.CONST $cmpd100.OFFSET_COMPRESS_CONSTANT 20;
.CONST $cmpd100.OFFSET_EXPAND_ATTACK_TC 21;
.CONST $cmpd100.OFFSET_EXPAND_DECAY_TC 22;
.CONST $cmpd100.OFFSET_LINEAR_ATTACK_TC 23;
.CONST $cmpd100.OFFSET_LINEAR_DECAY_TC 24;
.CONST $cmpd100.OFFSET_COMPRESS_ATTACK_TC 25;
.CONST $cmpd100.OFFSET_COMPRESS_DECAY_TC 26;
.CONST $cmpd100.OFFSET_LIMIT_ATTACK_TC 27;
.CONST $cmpd100.OFFSET_LIMIT_DECAY_TC 28;
.CONST $cmpd100.OFFSET_HEADROOM_COMPENSATION 29;
.CONST $cmpd100.STRUC_SIZE 30;
.linefile 17 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stereo_3d_enhancement.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stereo_3d_enhancement.h"
.CONST $stereo_3d_enhancement.INPUT_CH1_PTR_BUFFER_FIELD 0;
.CONST $stereo_3d_enhancement.INPUT_CH2_PTR_BUFFER_FIELD 1;
.CONST $stereo_3d_enhancement.OUTPUT_CH1_PTR_BUFFER_FIELD 2;
.CONST $stereo_3d_enhancement.OUTPUT_CH2_PTR_BUFFER_FIELD 3;
.CONST $stereo_3d_enhancement.DELAY_1_STRUC_FIELD 4;
.CONST $stereo_3d_enhancement.DELAY_2_STRUC_FIELD 5;
.CONST $stereo_3d_enhancement.COEFF_STRUC_FIELD 6;
.CONST $stereo_3d_enhancement.REFLECTION_DELAY_SAMPLES_FIELD 7;
.CONST $stereo_3d_enhancement.MIX_FIELD 8;
.CONST $stereo_3d_enhancement.SE_CONFIG_FIELD 9;
.CONST $stereo_3d_enhancement.ENABLE_BIT_MASK_FIELD 10;
.CONST $stereo_3d_enhancement.STRUC_SIZE 11;


.CONST $stereo_3d_enhancement.REFLECTION_DELAY 618;

.CONST $stereo_3d_enhancement.DELAY_BUFFER_SIZE 2208;
.linefile 18 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/mute_control.h" 1
.linefile 11 "C:/ADK3.5/kalimba/lib_sets/sdk/include/mute_control.h"
.CONST $MUTE_CONTROL_VERSION 0x010000;

.CONST $M.MUTE_CONTROL.OFFSET_INPUT_PTR 0;
.CONST $M.MUTE_CONTROL.OFFSET_PTR_STATE 1;
.CONST $M.MUTE_CONTROL.OFFSET_MUTE_VAL 2;
.CONST $M.MUTE_CONTROL.STRUC_SIZE 3;
.linefile 19 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stereo_copy.h" 1
.linefile 13 "C:/ADK3.5/kalimba/lib_sets/sdk/include/stereo_copy.h"
.CONST $M.audio_proc.stereo_copy.INPUT_CH1_PTR_BUFFER_FIELD 0;
.CONST $M.audio_proc.stereo_copy.INPUT_CH2_PTR_BUFFER_FIELD 1;
.CONST $M.audio_proc.stereo_copy.OUTPUT_CH1_PTR_BUFFER_FIELD 2;
.CONST $M.audio_proc.stereo_copy.OUTPUT_CH2_PTR_BUFFER_FIELD 3;
.CONST $M.audio_proc.stereo_copy.STRUC_SIZE 4;
.linefile 20 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/bass_management.h" 1
.linefile 15 "C:/ADK3.5/kalimba/lib_sets/sdk/include/bass_management.h"
    .const $bass_management.LEFT_INPUT_PTR 0;
    .const $bass_management.RIGHT_INPUT_PTR 1;
    .const $bass_management.LEFT_OUTPUT_PTR 2;
    .const $bass_management.RIGHT_OUTPUT_PTR 3;
    .const $bass_management.LFE_INPUT_PTR 4;
    .const $bass_management.SUB_OUTPUT_PTR 5;
    .const $bass_management.BASS_BUFFER_PTR 6;
    .const $bass_management.COEFS_PTR 7;
    .const $bass_management.DATA_MEM_PTR 8;
    .const $bass_management.BYPASS_WORD_PTR 9;
    .const $bass_management.BYPASS_BIT_MASK_FIELD 10;
    .const $bass_management.CODEC_RATE_PTR 11;
    .const $bass_management.STRUCT_SIZE 12;




    .const $bass_management.COEF_CONFIG 0;
    .const $bass_management.COEF_A1 1;
    .const $bass_management.COEF_A2 2;
    .const $bass_management.COEF_A3 3;
    .const $bass_management.COEF_A4 4;
    .const $bass_management.COEF_A5 5;
    .const $bass_management.COEF_FREQ_PARAM 6;
    .const $bass_management.COEF_FREQ 7;

    .const $bass_management.COEF_NUM_HF_STAGES 8;
    .const $bass_management.COEF_NUM_LF_STAGES 9;

    .const $bass_management.COEF_STRUCT_BASE_SIZE 10;

    .const $bass_management.COEF_CONFIG.ENABLE_HPF 0x000001;
    .const $bass_management.COEF_CONFIG.ENABLE_LPF 0x000002;
.linefile 21 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/latency_measure.h" 1
.linefile 12 "C:/ADK3.5/kalimba/lib_sets/sdk/include/latency_measure.h"
   .CONST $pcm_latency.BUFFERS_LIST_FIELD 0;
   .CONST $pcm_latency.SAMPLES_LIST_FIELD 1;
   .CONST $pcm_latency.STRUC_SIZE 2;


   .CONST $encoded_latency.PCM_LATENCY_STRUCT_FIELD 0;
   .CONST $encoded_latency.CODEC_PACKETS_INFO_CBUFFER_FIELD 1;
   .CONST $encoded_latency.CODEC_CBUFFER_FIELD 2;
   .CONST $encoded_latency.DECODED_CBUFFER_FIELD 3;
   .CONST $encoded_latency.DECODER_INV_SAMPLE_RATE_FIELD 4;
   .CONST $encoded_latency.CURRENT_WARP_RATE_FIELD 5;
   .CONST $encoded_latency.SEARCH_MIN_LEN_FIELD 6;
   .CONST $encoded_latency.LATENCY_MEASUREMENT_LAST_CODED_RD_ADDR_FIELD 7;
   .CONST $encoded_latency.LATENCY_MEASUREMENT_LAST_DECODED_WR_ADDR_FIELD 8;
   .CONST $encoded_latency.TOTAL_LATENCY_US_FIELD 9;
   .CONST $encoded_latency.HIST_LATENCY_US_FIELD 10;
   .CONST $encoded_latency.STRUC_SIZE 14;
.linefile 22 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/volume_and_limit.h" 1
.linefile 15 "C:/ADK3.5/kalimba/lib_sets/sdk/include/volume_and_limit.h"
   .CONST $volume_and_limit.OFFSET_CONTROL_WORD_FIELD 0;
   .CONST $volume_and_limit.OFFSET_BYPASS_BIT_FIELD 1;
   .CONST $volume_and_limit.NROF_CHANNELS_FIELD 2;
   .CONST $volume_and_limit.SAMPLE_RATE_PTR_FIELD 3;
   .CONST $volume_and_limit.MASTER_VOLUME_FIELD 4;
   .CONST $volume_and_limit.LIMIT_THRESHOLD_FIELD 5;
   .CONST $volume_and_limit.LIMIT_THRESHOLD_LINEAR_FIELD 6;
   .CONST $volume_and_limit.LIMIT_RATIO_FIELD_FIELD 7;
   .CONST $volume_and_limit.LIMITER_GAIN_FIELD 8;
   .CONST $volume_and_limit.LIMITER_GAIN_LINEAR_FIELD 9;
   .CONST $volume_and_limit.STRUC_SIZE 10;

   .CONST $volume_and_limit.CHANNELS_STRUCTURES_OFFSET_FIELD $volume_and_limit.STRUC_SIZE;


   .CONST $volume_and_limit.channel.INPUT_PTR_FIELD 0;
   .CONST $volume_and_limit.channel.OUTPUT_PTR_FIELD 1;
   .CONST $volume_and_limit.channel.TRIM_VOLUME_FIELD 2;
   .CONST $volume_and_limit.channel.CURRENT_VOLUME_FIELD 3;
   .CONST $volume_and_limit.channel.LAST_VOLUME_APPLIED_FIELD 4;
   .CONST $volume_and_limit.channel.STRUC_SIZE 5;






  .CONST $volume_and_limit.MIN_POSITIVE_VOLUME 0x080000;
  .CONST $volume_and_limit.VOLUME_RAMP_OFFSET_CONST (0.0001/16.0);
.linefile 23 "C:/ADK3.5/kalimba/lib_sets/sdk/include/audio_proc_library.h" 2
.linefile 14 "music_example.h" 2




.CONST $music_example.JITTER 3000;


.CONST $M.music_example.SPIMSG.STATUS 0x1007;
.CONST $M.music_example.SPIMSG.PARAMS 0x1008;
.CONST $M.music_example.SPIMSG.REINIT 0x1009;
.CONST $M.music_example.SPIMSG.VERSION 0x100A;
.CONST $M.music_example.SPIMSG.CONTROL 0x100B;
.CONST $M.music_example.SPIMSG.SPDIF_CONFIG 0x2000;

.CONST $music_example.VMMSG.READY 0x1000;
.CONST $music_example.VMMSG.SETMODE 0x1001;
.CONST $music_example.VMMSG.VOLUME 0x1002;
.CONST $music_example.VMMSG.SETPARAM 0x1004;
.CONST $music_example.VMMSG.CODEC 0x1006;
.CONST $music_example.VMMSG.PING 0x1008;
.CONST $music_example.VMMSG.PINGRESP 0x1009;
.CONST $music_example.VMMSG.SECPASSED 0x100c;
.CONST $music_example.VMMSG.SETSCOTYPE 0x100d;
.CONST $music_example.VMMSG.SETCONFIG 0x100e;
.CONST $music_example.VMMSG.SETCONFIG_RESP 0x100f;
.CONST $music_example.VMMSG.GETPARAM 0x1010;
.CONST $music_example.VMMSG.GETPARAM_RESP 0x1011;
.CONST $music_example.VMMSG.LOADPARAMS 0x1012;
.CONST $music_example.VMMSG.CUR_EQ_BANK 0x1014;
.CONST $music_example.VMMSG.PARAMS_LOADED 0x1015;
.CONST $music_example.VMMSG.APTX_PARAMS 0x1016;
.CONST $music_example.VMMSG.APTX_SECURITY 0x1017;

.const $music_example.VMMSG.SIGNAL_DETECT_SET_PARMS 0x1018;
.const $music_example.VMMSG.SIGNAL_DETECT_STATUS 0x1019;
.const $music_example.VMMSG.SOFT_MUTE 0x101a;


.CONST $music_example.VMMSG.SETPLUGIN 0x1020;







.const $music_example.GAIAMSG.SET_USER_PARAM 0x121a;
.const $music_example.GAIAMSG.GET_USER_PARAM 0x129a;
.const $music_example.GAIAMSG.SET_USER_GROUP_PARAM 0x121b;
.const $music_example.GAIAMSG.GET_USER_GROUP_PARAM 0x129b;

.const $music_example.GAIAMSG.SET_USER_PARAM_RESP 0x321a;
.const $music_example.GAIAMSG.GET_USER_PARAM_RESP 0x329a;
.const $music_example.GAIAMSG.SET_USER_GROUP_PARAM_RESP 0x321b;
.const $music_example.GAIAMSG.GET_USER_GROUP_PARAM_RESP 0x329b;


.CONST $music_example.REINITIALIZE 1;


.CONST $music_example.MUTE_CONTROL.OFFSET_INPUT_PTR 0;
.CONST $music_example.MUTE_CONTROL.OFFSET_INPUT_LEN 1;
.CONST $music_example.MUTE_CONTROL.OFFSET_NUM_SAMPLES 2;
.CONST $music_example.MUTE_CONTROL.OFFSET_MUTE_VAL 3;
.CONST $music_example.MUTE_CONTROL.STRUC_SIZE 4;
.linefile 89 "music_example.h"
    .CONST $music_example.NUM_SAMPLES_PER_FRAME 360;





.CONST $music_example.peq.INPUT_ADDR_FIELD 0;
.CONST $music_example.peq.OUTPUT_ADDR_FIELD 1;
.CONST $music_example.peq.MAX_STAGES_FIELD 2;
.CONST $music_example.peq.PARAM_PTR_FIELD 3;
.CONST $music_example.peq.DELAYLINE_ADDR_FIELD 4;
.CONST $music_example.peq.COEFS_ADDR_FIELD 5;
.CONST $music_example.peq.NUM_STAGES_FIELD 6;
.CONST $music_example.peq.DELAYLINE_SIZE_FIELD 7;
.CONST $music_example.peq.COEFS_SIZE_FIELD 8;
.CONST $music_example.peq.BLOCK_SIZE_FIELD 9;
.CONST $music_example.peq.SCALING_ADDR_FIELD 10;
.CONST $music_example.peq.GAIN_EXPONENT_ADDR_FIELD 11;
.CONST $music_example.peq.GAIN_MANTISA_ADDR_FIELD 12;
.CONST $music_example.peq.BYPASS_BIT_MASK_FIELD 13;

.CONST $music_example.peq.STRUC_SIZE 14;


.CONST $music_example.peq.BS_COEFFS_PTR_FIELD 0;
.CONST $music_example.peq.BS_SCALE_PTR_FIELD 1;
.CONST $music_example.peq.BS_NUMSTAGES_FIELD 2;
.CONST $music_example.peq.BS_GAIN_EXP_PTR_FIELD 3;
.CONST $music_example.peq.BS_GAIN_MANT_PTR_FIELD 4;
.CONST $music_example.peq.BS_STRUC_SIZE 5;


.CONST $music_example.SBC_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC1_CONFIG;
.CONST $music_example.MP3_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC2_CONFIG;
.CONST $music_example.FASTSTREAM_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC3_CONFIG;
.CONST $music_example.USB_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC4_CONFIG;
.CONST $music_example.APTX_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC5_CONFIG;
.CONST $music_example.AAC_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC6_CONFIG;
.CONST $music_example.ANALOGUE_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC7_CONFIG;
.CONST $music_example.APTX_ACL_SPRINT_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC8_CONFIG;
.CONST $music_example.SPDIF_CODEC_CONFIG $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CODEC9_CONFIG;


.CONST $music_example.SBC_CODEC_TYPE 0;
.CONST $music_example.MP3_CODEC_TYPE 1;
.CONST $music_example.FASTSTREAM_CODEC_TYPE 2;
.CONST $music_example.USB_CODEC_TYPE 3;
.CONST $music_example.APTX_CODEC_TYPE 4;
.CONST $music_example.AAC_CODEC_TYPE 5;
.CONST $music_example.ANALOGUE_CODEC_TYPE 6;
.CONST $music_example.APTX_ACL_SPRINT_CODEC_TYPE 7;
.CONST $music_example.SPDIF_CODEC_TYPE 8;


.CONST $music_example.CODEC_STATS_SIZE ($M.MUSIC_MANAGER.STATUS.BLOCK_SIZE - $M.MUSIC_MANAGER.STATUS.CODEC_FS_OFFSET);

.CONST $music_example.12dB 12.041199826559248;
.CONST $music_example.DEFAULT_MASTER_VOLUME ((10.0**(0 + $music_example.12dB/20.0))/16.0);
.CONST $music_example.DEFAULT_TRIM_VOLUME ((10.0**(0/20.0))/16.0);
.CONST $music_example.LIMIT_THRESHOLD (log2(((10.0**(-1.0/20.0))/16.0))/128.0);
.CONST $music_example.LIMIT_RATIO (1.0 - (1.0/20));
.CONST $music_example.LIMIT_THRESHOLD_LINEAR ((10.0**(-1.0/20.0))/16.0);
.CONST $music_example.MAX_VM_TRIM_VOLUME_dB round($music_example.12dB*60.0);
.CONST $music_example.MIN_VM_TRIM_VOLUME_dB round(-$music_example.12dB*60.0);
.CONST $music_example.MUTE_MASTER_VOLUME 0;
.linefile 9 "user_eq.asm" 2
.linefile 1 "user_eq.h" 1
.linefile 11 "user_eq.h"
.linefile 1 "C:/ADK3.5/kalimba/lib_sets/sdk/include/cbuffer.h" 1
.linefile 12 "user_eq.h" 2

    .const $user_eq.num_bands 0;
    .const $user_eq.pre_gain 1;



    .const $user_eq.filter_type.bypass 0;

    .const $user_eq.filter_type.lp_1 1;
    .const $user_eq.filter_type.hp_1 2;
    .const $user_eq.filter_type.ap_1 3;

    .const $user_eq.filter_type.ls_1 4;
    .const $user_eq.filter_type.hs_1 5;
    .const $user_eq.filter_type.tlt_1 6;

    .const $user_eq.filter_type.lp_2 7;
    .const $user_eq.filter_type.hp_2 8;
    .const $user_eq.filter_type.ap_2 9;

    .const $user_eq.filter_type.ls_2 10;
    .const $user_eq.filter_type.hs_2 11;
    .const $user_eq.filter_type.tlt_2 12;

    .const $user_eq.filter_type.peq 13;



    .const $user_eq.freq_param_scale 3;
    .const $user_eq.gain_param_scale 60;
    .const $user_eq.q_param_scale 12;


    .const $user_eq.gain_lo_gain_limit -2160;
    .const $user_eq.gain_hi_gain_limit 720;


    .const $user_eq.xp_1_lo_freq_limit 1;
    .const $user_eq.xp_1_hi_freq_limit 60000;


    .const $user_eq.xp_2_lo_freq_limit 120;
    .const $user_eq.xp_2_hi_freq_limit 60000;
    .const $user_eq.xp_2_lo_q_limit 0x0400;
    .const $user_eq.xp_2_hi_q_limit 0x2000;


    .const $user_eq.shelf_1_lo_freq_limit 60;
    .const $user_eq.shelf_1_hi_freq_limit 60000;
    .const $user_eq.shelf_1_lo_gain_limit -720;
    .const $user_eq.shelf_1_hi_gain_limit 720;


    .const $user_eq.shelf_2_lo_freq_limit 120;
    .const $user_eq.shelf_2_hi_freq_limit 60000;
    .const $user_eq.shelf_2_lo_gain_limit -720;
    .const $user_eq.shelf_2_hi_gain_limit 720;
    .const $user_eq.shelf_2_lo_q_limit 0x0400;
    .const $user_eq.shelf_2_hi_q_limit 0x2000;


    .const $user_eq.peq_lo_freq_limit 60;
    .const $user_eq.peq_hi_freq_limit 60000;
    .const $user_eq.peq_lo_gain_limit -2160;
    .const $user_eq.peq_hi_gain_limit 720;
    .const $user_eq.peq_lo_q_limit 0x0400;
    .const $user_eq.peq_hi_q_limit 0x8000;
.linefile 10 "user_eq.asm" 2


.module $user_eq;
   .CODESEGMENT MUSIC_EXAMPLE_PEQ_PM;

.DATASEGMENT DM;


initialize:







    push rLink;


    r0 = M[&$M.system_config.data.CurParams + $M.MUSIC_MANAGER.PARAMETERS.OFFSET_CONFIG];
    r0 = r0 and $M.MUSIC_MANAGER.CONFIG.USER_EQ_SELECT;
    r1 = m[r8];
    r0 = min r1;

    r0 = r0 + 1;
    r8 = r8 + r0;
    r8 = m[r8];

    call calcBankCoefs;

    jump $pop_rLink_and_rts;



calcBankCoefs:







    push rLink;



    r0 = m[r7];
    r2 = m[r0 + $audio_proc.peq.PARAM_PTR_FIELD];
    r0 = &$M.system_config.data.UserEqCoefsA;
    r1 = &$M.system_config.data.UserEqCoefsB;
    null = r2 - r0;
    if eq r0 = r1;





    pushm <r0,r7>;




    i0 = r8;
    i1 = r0;

    null = r8;
    if nz jump calcBankCoefs.NotNullBank;

        r0 = 0;
        m[i1,1] = r0;
        r0 = 0x000001;
        m[i1,1] = r0;
        r0 = 0x400000;
        m[i1,1] = r0;
        jump calcBankCoefs.switchToNewCoefs;

    calcBankCoefs.NotNullBank:


    r0 = m[i0,1];
    m[i1,1] = r0;
    push r0;


    call calcPreGain.call_entry;


    r0 = i1;
    r0 = r0 + 25;
    i2 = r0;
    calcBandLoop:
        pushm <i0,i1,i2>;
        call coefCalcBiquadBand.call_entry;
        popm <r0,r1,r2>;
        r0 = r0 + 4;
        i0 = r0;
        r1 = r1 + 5;
        i1 = r1;
        r2 = r2 + 1;
        i2 = r2;

        pop r0;
        r0 = r0 -1;
        push r0;
    if ne jump calcBandLoop;
    pop r0;

    calcBankCoefs.switchToNewCoefs:


    popm <r0,r7>;

    pushm <r0,r7>;
    r7 = m[r7];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.peq.initialize;

    popm <r0,r7>;
    r7 = m[r7 + 1];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.peq.initialize;

    jump $pop_rLink_and_rts;






calcBandCoefs:







    push rLink;

    r4 = r0;
    r0 = r0 and 0x00fff0;
    call calcParamAddrOffset;
    r8 = r0 + ($M.system_config.data.CurParams + $M.MUSIC_MANAGER.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);





    r6 = m[r7];
    r6 = m[r6 + $audio_proc.peq.PARAM_PTR_FIELD];
    null = r6 - &$M.system_config.data.UserEqCoefsA;
    if eq jump calcBandCoefsB;


    r2 = &$M.system_config.data.UserEqCoefsA;
    r3 = &$M.system_config.data.UserEqCoefsB;
    jump calcBandCoefsAorB;

    calcBandCoefsB:
    r2 = &$M.system_config.data.UserEqCoefsB;
    r3 = &$M.system_config.data.UserEqCoefsA;

    calcBandCoefsAorB:





    i0 = r3;
    i1 = r2;
    r10 = 33;
    do copyCurrentCoefsLoop;
        r0 = m[i0,1];
        m[i1,1] = r0;
    copyCurrentCoefsLoop:

    i0 = r8;


    r0 = r4;
    call calcCoefAddrOffset;
    r8 = r0 + r2;
    i1 = r8;
    r8 = r1 + r2;
    i2 = r8;






    pushm <r2,r7>;


    r0 = r4;
    call coefCalc;


    popm <r2,r7>;
    pushm <r2,r7>;
    r7 = m[r7];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r2;
    call $audio_proc.peq.initialize;

    popm <r2,r7>;
    r7 = m[r7 + 1];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r2;
    call $audio_proc.peq.initialize;

    jump $pop_rLink_and_rts;



calcParamAddrOffset:
.linefile 232 "user_eq.asm"
    pushm <r1,r2,r3>;

    r1 = r0 and 0x000f00;
    r1 = r1 ashift -8;
    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    r3 = r0 and 0x00000f;


    r0 = r3;
    null = r1 - 0;
    if eq jump completedParamAddrCalculation;


    r1 = r1 - 1;
    r1 = r1 * 22 (int);
    r0 = r1 + r3;
    r0 = r0 + 1;
    null = r2 - 0;
    if eq jump completedParamAddrCalculation;


    r2 = r2 - 1;
    r2 = r2 * 4 (int);
    r0 = r0 + r2;
    r0 = r0 + 2;

    completedParamAddrCalculation:

    popm <r1,r2,r3>;

    rts;



calcCoefAddrOffset:
.linefile 277 "user_eq.asm"
    pushm <r2,r3>;


    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    r3 = r0 and 0x00000f;


    r0 = r3;
    null = r2 - 0;
    if eq jump completedCoefAddrCalculation;


    r2 = r2 - 1;
    r1 = r2 + 28;
    r0 = r2 * 5 (int);
    r0 = r0 + 3;

    completedCoefAddrCalculation:

    popm <r2,r3>;

    rts;



coefCalc:
.linefile 314 "user_eq.asm"
    push rLink;


    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    if nz jump coefCalcBiquadBand.jump_entry;



    r0 = r0 and 0x00000f;
    null = r0 - $user_eq.num_bands;
    if eq jump calcNumBands.jump_entry;

    r2 = m[i0,1];
    null = r0 - $user_eq.pre_gain;
    if eq jump calcPreGain.jump_entry;

    pop rLink;
    rts;



coefCalcBiquadBand.call_entry:
    push rLink;
coefCalcBiquadBand.jump_entry:
.linefile 348 "user_eq.asm"
    r0 = m[i0,1];

    null = r0 - $user_eq.filter_type.bypass;
    if eq jump calcBypass.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_pass_1st;
    null = r0 - $user_eq.filter_type.lp_1;
    if eq jump calcXP1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_pass_1st;
    null = r0 - $user_eq.filter_type.hp_1;
    if eq jump calcXP1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_all_pass_1st;
    null = r0 - $user_eq.filter_type.ap_1;
    if eq jump calcXP1.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_pass_2nd;
    null = r0 - $user_eq.filter_type.lp_2;
    if eq jump calcXP2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_pass_2nd;
    null = r0 - $user_eq.filter_type.hp_2;
    if eq jump calcXP2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_all_pass_2nd;
    null = r0 - $user_eq.filter_type.ap_2;
    if eq jump calcXP2.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_shelf_1st;
    null = r0 - $user_eq.filter_type.ls_1;
    if eq jump calcShelf1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_shelf_1st;
    null = r0 - $user_eq.filter_type.hs_1;
    if eq jump calcShelf1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_tilt_1st;
    null = r0 - $user_eq.filter_type.tlt_1;
    if eq jump calcShelf1.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_shelf_2nd;
    null = r0 - $user_eq.filter_type.ls_2;
    if eq jump calcShelf2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_shelf_2nd;
    null = r0 - $user_eq.filter_type.hs_2;
    if eq jump calcShelf2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_tilt_2nd;
    null = r0 - $user_eq.filter_type.tlt_2;
    if eq jump calcShelf2.jump_entry;



    null = r0 - $user_eq.filter_type.peq;
    if eq jump calcPEQ.jump_entry;

    coefCalcInvalid:





    pop rLink;
    rts;



calcNumBands.call_entry:

    push rLink;

calcNumBands.jump_entry:

    r0 = m[i0,1];
    m[i1,1] = r0;

    pop rLink;
    rts;



calcPreGain.call_entry:

    push rLink;

calcPreGain.jump_entry:


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.gain_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.gain_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;

    call $kal_filter_coef_lib.__db2lin.call_entry;



    r0 = r0 and 0x0000ff;
    r0 = r0 - 127;
    r1 = r1 lshift -1;

    m[i1,1] = r0;
    m[i1,1] = r1;

    pop rLink;
    rts;



calcBypass.jump_entry:



    sp = sp + 6;

    call $kal_filter_coef_lib.calc_bypass;

    jump pop_biquad_coefs_and_rts;

    r0 = 0x400000;
    m[i1,1] = r0;
    r0 = 0x000000;
    m[i1,1] = r0;
    m[i1,1] = r0;
    m[i1,1] = r0;
    m[i1,1] = r0;
    r0 = 0x000001;
    m[i2,1] = r0;

    pop rLink;
    rts;



calcXP1.jump_entry:



    sp = sp + 6;

    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r1 = $user_eq.xp_1_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.xp_1_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcXP2.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r1 = $user_eq.xp_2_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.xp_2_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r0 = m[i0,1];


    r0 = m[i0,1];

    r1 = $user_eq.xp_2_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.xp_2_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcShelf1.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r1 = $user_eq.shelf_1_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_1_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.shelf_1_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_1_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcShelf2.jump_entry:


    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r1 = $user_eq.shelf_2_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.shelf_2_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = m[i0,1];

    r1 = $user_eq.shelf_2_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcPEQ.jump_entry:


    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r1 = $user_eq.peq_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.peq_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = m[i0,1];

    r1 = $user_eq.peq_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call $kal_filter_coef_lib.calc_peq;

    jump pop_biquad_coefs_and_rts;



pop_biquad_coefs_and_rts:


    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i2,1] = r0;

    pop rLink;
    rts;




.endmodule;
