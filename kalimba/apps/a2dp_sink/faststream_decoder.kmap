
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF0004C                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920005C                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        D1541BAF                 r3 = M[r2 + 7087];
0x00001E        01E00080                 rFlags = Null + 128;
0x00001F        E420002F                 r0 = Null + 1;
0x000020        09001F80                 Null = Null + M[$interrupt.block_count];
0x000021        00200001                 if NE r0 = Null + Null;
0x000022        1920FE12                 M[0xfffe12] = r0 + Null;
0x000023        E005000F                 call r3;
0x000024        01E00000                 rFlags = Null + 0;
0x000025        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000026        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000027        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000028        1940FE44                 M[0xfffe44] = r2 + Null;
0x000029        85334000                 r1 = r1 OR 0x4000;
0x00002A        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002B        FD0000FF 09304F80        r1 = Null + M[$interrupt.total_time];
0x00002D        2933005C                 r1 = r1 - M[$interrupt.start_time];
0x00002E        0933FE71                 r1 = r1 + M[0xfffe71];
0x00002F        FD0000FF 19304F80        M[$interrupt.total_time] = r1 + Null;
0x000031        F104000C                 popm <r0, r1>;
0x000032        1930FE93                 M[0xfffe93] = r1 + Null;
0x000033        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000034        F104001C                 popm <r0, r1, r2>;
0x000035        DC0E000F                 rti;

 <$flash.init_pm>
0x000036        FD0000FF 09204E35        r0 = Null + M[$flash.code.address];
0x000038        1920FE83                 M[0xfffe83] = r0 + Null;
0x000039        FD000004 85200000        r0 = Null OR 0x40000;
0x00003B        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003C        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003D        FD0000FF 09204E3D        r0 = Null + M[$flash.data24.address];
0x00003F        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x000040        01200002                 r0 = Null + 2;
0x000041        1920FE62                 M[0xfffe62] = r0 + Null;
0x000042        FD0000FF 09204E39        r0 = Null + M[$flash.data16.address];
0x000044        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000045        1900FE61                 M[0xfffe61] = Null + Null;
0x000046        DC0D000F                 rts;

 <$faststream.sbcenc_post_func>
0x000047        F3D00000                 push rLink;
0x000048        D12B0010                 r0 = M[r9 + 16];
0x000049        8122000F                 r0 = r0 AND 0xf;
0x00004A        01300000                 r1 = Null + 0;
0x00004B        E1F01A00                 call $sbcenc.putbits;
0x00004C        DDF00CF4                 jump $pop_rLink_and_rts;

 <$pre_main>
0x00004D        E1F0FFE9                 call $flash.init_pm;
0x00004E        DDF03164                 jump $main;

 <$cbops.auto_upsample_and_mix.main>
0x00004F        F3D00000                 push rLink;
0x000050        FD000000 0150BB80        r3 = Null + 48000;
0x000052        01601F40                 r4 = Null + 8000;
0x000053        D13A0006                 r1 = M[r8 + 6];
0x000054        D0330001                 if NE r1 = M[r1 + Null];
0x000055        00360000                 if EQ r1 = r4 + Null;
0x000056        D14A0004                 r2 = M[r8 + 4];
0x000057        D0440001                 if NE r2 = M[r2 + Null];
0x000058        00450000                 if EQ r2 = r3 + Null;
0x000059        D12A000B                 r0 = M[r8 + 11];
0x00005A        2002003F                 Null = r0 - r1;
0x00005B        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x00005C        D12A000A                 r0 = M[r8 + 10];
0x00005D        2002004F                 Null = r0 - r2;
0x00005E        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x00005F        D53A000B                 M[r8 + 11] = r1;
0x000060        D54A000A                 M[r8 + 10] = r2;
0x000061        D50A000C                 M[r8 + 12] = Null;
0x000062        FD00007F 0120FFFF        r0 = Null + 8388607;
0x000064        D52A0009                 M[r8 + 9] = r0;
0x000065        E460002F                 r4 = Null + 1;
0x000066        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x000068        2004002F                 Null = r2 - r0;
0x000069        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x00006A        01600002                 r4 = Null + 2;
0x00006B        E450002F                 r3 = Null + 1;
0x00006C        2003004F                 Null = r1 - r2;
0x00006D        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x00006E        00500004                 if NEG r3 = Null + Null;
0x00006F        2033004C                 if GT r1 = r1 - r2;
0x000070        D55A000C                 M[r8 + 12] = r3;
0x000071        0013000F                 rMAC = r1 + Null;
0x000072        91340001                 r1 = r2 ASHIFT 1;
0x000073        D9030000                 Div = rMAC / r1;
0x000074        D9200001                 r0 = DivResult;
0x000075        D9300002                 r1 = DivRemainder;
0x000076        E450002F                 r3 = Null + 1;
0x000077        2003004F                 Null = r1 - r2;
0x000078        00220055                 if POS r0 = r0 + r3;
0x000079        D52A0009                 M[r8 + 9] = r0;
0x00007A        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x00007B        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x00007C        D12A0002                 r0 = M[r8 + 2];
0x00007D        E1F00C64                 call $cbuffer.calc_amount_data;
0x00007E        D13A0009                 r1 = M[r8 + 9];
0x00007F        D15A000C                 r3 = M[r8 + 12];
0x000080        9B5C0000                 r3 = r3 * r10 (int);
0x000081        973C0000                 r1 = r1 * r10 (frac);
0x000082        E433002F                 r1 = r1 + 1;
0x000083        03350000                 r1 = r1 + r3;
0x000084        D14A0010                 r2 = M[r8 + 16];
0x000085        E444002F                 r2 = r2 + 1;
0x000086        D16A000F                 r4 = M[r8 + 15];
0x000087        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x000088        0002000F                 Null = r0 + Null;
0x000089        00400001                 if NE r2 = Null + Null;
0x00008A        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x00008B        2002003F                 Null = r0 - r1;
0x00008C        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x00008D        0026000F                 r0 = r4 + Null;
0x00008E        E450002F                 r3 = Null + 1;
0x00008F        21040003                 Null = r2 - 3;
0x000090        88660055                 if POS r4 = r4 XOR r3;
0x000091        FD00007F 0130FFFF        r1 = Null + 8388607;
0x000093        D15A000E                 r3 = M[r8 + 14];
0x000094        2006002F                 Null = r4 - r0;
0x000095        00530001                 if NE r3 = r1 + Null;
0x000096        D54A0010                 M[r8 + 16] = r2;
0x000097        D55A000E                 M[r8 + 14] = r3;
0x000098        D56A000F                 M[r8 + 15] = r4;
0x000099        8406005F                 Null = r4 OR r3;
0x00009A        DD000CA6                 if EQ jump $pop_rLink_and_rts;
0x00009B        D12A0002                 r0 = M[r8 + 2];
0x00009C        E1F00C71                 call $cbuffer.get_read_address_and_size;
0x00009D        5000002F                 I0 = Null + r0;
0x00009E        50C0003F                 L0 = Null + r1;
0x00009F        51D0000C                 L1 = Null + 12;
0x0000A0        D12A0005                 r0 = M[r8 + 5];
0x0000A1        5010002F                 I1 = Null + r0;
0x0000A2        D12A0000                 r0 = M[r8 + 0];
0x0000A3        D038002F                 r1 = M[r6 + r0];
0x0000A4        5040003F                 I4 = Null + r1;
0x0000A5        D039002F                 r1 = M[r7 + r0];
0x0000A6        50E0003F                 L4 = Null + r1;
0x0000A7        FD0000FF 51504F8F        I5 = Null + -45169;
0x0000A9        51F00001                 L5 = Null + 1;
0x0000AA        D12A0001                 r0 = M[r8 + 1];
0x0000AB        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_cahnnel;
0x0000AC        D038002F                 r1 = M[r6 + r0];
0x0000AD        5050003F                 I5 = Null + r1;
0x0000AE        D039002F                 r1 = M[r7 + r0];
0x0000AF        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_cahnnel>
0x0000B0        D16A0008                 r4 = M[r8 + 8];
0x0000B1        FD00007F 0150FFFF        r3 = Null + 8388607;
0x0000B3        D14A000E                 r2 = M[r8 + 14];
0x0000B4        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x0000B5        D10A000F                 Null = M[r8 + 15];
0x0000B6        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x0000B7        FD00007F 0160FFFF        r4 = Null + 8388607;
0x0000B9        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x0000BA        23560000                 r3 = r3 - r4;
0x0000BB        FD00007F 0180FFFF        r6 = Null + 8388607;
0x0000BD        FD000002 0170AAAB        r5 = Null + 174763;
0x0000BF        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x0000C0        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x0000C1        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x0000C2        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x0000C3        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x0000C4        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x0000C5        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x0000C6        D54A000E                 M[r8 + 14] = r2;
0x0000C7        DDF00C79                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x0000C8        01400000                 r2 = Null + 0;
0x0000C9        D54A000E                 M[r8 + 14] = r2;
0x0000CA        DDF00C76                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x0000CB        D12A0011                 r0 = M[r8 + 17];
0x0000CC        21020000                 Null = r0 - 0;
0x0000CD        DD000013                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x0000CE        21020002                 Null = r0 - 2;
0x0000CF        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x0000D0        009C000F                 r7 = r10 + Null;
0x0000D1        DDF00061                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x0000D2        D16A0007                 r4 = M[r8 + 7];
0x0000D3        D17A0008                 r5 = M[r8 + 8];
0x0000D4        009C000F                 r7 = r10 + Null;
0x0000D5        23442000                 r2 = r2 - r2, r0 = M[I0,0];
0x0000D6        FD00007F 0180FFFF        r6 = Null + 8388607;
0x0000D8        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x0000D9        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x0000DA        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x0000DB        AF28C100                 rMAC = rMAC + r0 * r6 (SS), M[I0,1] = r2;
0x0000DC        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x0000DD        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x0000DE        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x0000DF        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x0000E0        D17A0003                 r5 = M[r8 + 3];
0x0000E1        5137007E                 I3 = r5 + 126;
0x0000E2        D17A0009                 r5 = M[r8 + 9];
0x0000E3        D16A000D                 r4 = M[r8 + 13];
0x0000E4        51B00001                 M3 = Null + 1;
0x0000E5        01800015                 r6 = Null + 21;
0x0000E6        70A0008F                 M2 = Null - r6;
0x0000E7        5080008F                 M0 = Null + r6;
0x0000E8        01900000                 r7 = Null + 0;
0x0000E9        D10A000C                 Null = M[r8 + 12];
0x0000EA        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x0000EB        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x0000EC        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0000ED        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0000EE        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x0000EF        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x0000F0        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x0000F1        03670000                 r4 = r4 + r5;
0x0000F2        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x0000F3        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0000F4        FD000080 21660000        r4 = r4 - -8388608;
0x0000F6        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0000F7        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x0000F8        CC16008F                 rMAC = r4 * r6 (SS);
0x0000F9        8D510018                 r3 = rMAC LSHIFT 24;
0x0000FA        8D55007F                 r3 = r3 LSHIFT -1;
0x0000FB        8D410000                 r2 = rMAC LSHIFT 0;
0x0000FC        5863004F                 I6 = I3 + r2;
0x0000FD        6524FFEA                 r0 = -22 - r2;
0x0000FE        7092004F                 M1 = r0 - r2;
0x0000FF        5871000F                 I7 = I1 + Null;
0x000100        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000101        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000102        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000103        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000104        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000105        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000106        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000107        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000108        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000109        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00010A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00010B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00010C        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x00010D        79990002                 M1 = M1 - 2;
0x00010E        474B0000                 r2 = r2 + M3;
0x00010F        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x000110        71980001                 M1 = r6 - 1;
0x000111        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x000112        5863004F                 I6 = I3 + r2;
0x000113        0041000F                 r2 = rMAC + Null;
0x000114        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x000115        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000116        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000117        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000118        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000119        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x00011A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00011B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00011C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00011D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00011E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00011F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000120        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000121        5817000F                 I1 = I7 + Null;
0x000122        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x000123        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x000125        D14A0007                 r2 = M[r8 + 7];
0x000126        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x000127        D12A0008                 r0 = M[r8 + 8];
0x000128        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x000129        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x00012B        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x00012C        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x00012E        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x00012F        4420001F                 r0 = Null + I1;
0x000130        D52A0005                 M[r8 + 5] = r0;
0x000131        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x000132        D12A0002                 r0 = M[r8 + 2];
0x000133        E1F00BAE                 call $cbuffer.calc_amount_data;
0x000134        2039002F                 r1 = r7 - r0;
0x000135        20990035                 if POS r7 = r7 - r1;
0x000136        D12A0002                 r0 = M[r8 + 2];
0x000137        E1F00BD6                 call $cbuffer.get_read_address_and_size;
0x000138        5000002F                 I0 = Null + r0;
0x000139        50C0003F                 L0 = Null + r1;
0x00013A        5080009F                 M0 = Null + r7;
0x00013B        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00013C        4430000F                 r1 = Null + I0;
0x00013D        D12A0002                 r0 = M[r8 + 2];
0x00013E        E1F00BE4                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x00013F        51E00000                 L4 = Null + 0;
0x000140        51D00000                 L1 = Null + 0;
0x000141        51C00000                 L0 = Null + 0;
0x000142        51F00000                 L5 = Null + 0;
0x000143        DDF00BFD                 jump $pop_rLink_and_rts;

 <$volume_and_limit.apply_volume>
0x000144        F3D00000                 push rLink;
0x000145        00A9000F                 r8 = r7 + Null;
0x000146        D12A0003                 r0 = M[r8 + 3];
0x000147        D3200000                 r0 = M[r0 + Null];
0x000148        01100200                 rMAC = Null + 512;
0x000149        D9020000                 Div = rMAC / r0;
0x00014A        D1CA0002                 r10 = M[r8 + 2];
0x00014B        DDD00BF5                 if LE jump $pop_rLink_and_rts;
0x00014C        018A000A                 r6 = r8 + 10;
0x00014D        FD00007F 0140FFFF        r2 = Null + 8388607;
0x00014F        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x000150        D1280000                 r0 = M[r6 + 0];
0x000151        D1520002                 r3 = M[r0 + 2];
0x000152        2004005F                 Null = r2 - r3;
0x000153        00450005                 if POS r2 = r3 + Null;
0x000154        D1280001                 r0 = M[r6 + 1];
0x000155        D1520002                 r3 = M[r0 + 2];
0x000156        2004005F                 Null = r2 - r3;
0x000157        00450005                 if POS r2 = r3 + Null;
0x000158        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x000159        00C4000F                 r10 = r2 + Null;
0x00015A        DDD00BE6                 if LE jump $pop_rLink_and_rts;
0x00015B        0920FE93                 r0 = Null + M[0xfffe93];
0x00015C        F3200000                 push r0;
0x00015D        D9200001                 r0 = DivResult;
0x00015E        CC12004F                 rMAC = r0 * r2 (SS);
0x00015F        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x000160        F3C00000                 push r10;
0x000161        F3100000                 push rMAC;
0x000162        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x000163        9D710017                 r5 = rMAC * 23 (int) (sat);
0x000164        E420002F                 r0 = Null + 1;
0x000165        1920FE93                 M[0xfffe93] = r0 + Null;
0x000166        D1CA0002                 r10 = M[r8 + 2];
0x000167        018A000A                 r6 = r8 + 10;
0x000168        51A00034                 M2 = Null + 52;
0x000169        D15A0004                 r3 = M[r8 + 4];
0x00016A        01600000                 r4 = Null + 0;
0x00016B        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x00016C        D1280002                 r0 = M[r6 + 2];
0x00016D        CC15002F                 rMAC = r3 * r0 (SS);
0x00016E        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x00016F        D1380003                 r1 = M[r6 + 3];
0x000170        2021003F                 r0 = rMAC - r1;
0x000171        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x000172        20200024                 if NEG r0 = Null - r0;
0x000173        9443007F                 r2 = r1 * r5 (frac);
0x000174        474A0000                 r2 = r2 + M2;
0x000175        E442005F                 r2 = MIN r0;
0x000176        2001003F                 Null = rMAC - r1;
0x000177        20400044                 if NEG r2 = Null - r2;
0x000178        03340000                 r1 = r1 + r2;
0x000179        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x00017A        E463006F                 r4 = MAX r1;
0x00017B        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x00017C        1900FE93                 M[0xfffe93] = Null + Null;
0x00017D        01500000                 r3 = Null + 0;
0x00017E        D12A0000                 r0 = M[r8 + 0];
0x00017F        D13A0001                 r1 = M[r8 + 1];
0x000180        8002003F                 Null = r0 AND r1;
0x000181        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000182        FD000008 21060000        Null = r4 - 524288;
0x000184        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000185        018A000A                 r6 = r8 + 10;
0x000186        D12A0002                 r0 = M[r8 + 2];
0x000187        5090002F                 M1 = Null + r0;
0x000188        01600000                 r4 = Null + 0;
0x000189        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x00018A        D1380003                 r1 = M[r6 + 3];
0x00018B        FD000008 21030000        Null = r1 - 524288;
0x00018D        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x00018E        F1C8FFFE                 r10 = M[SP + -0x2];
0x00018F        D1280000                 r0 = M[r6 + 0];
0x000190        E1F00B8D                 call $frmbuffer.get_buffer;
0x000191        5000002F                 I0 = Null + r0;
0x000192        50C0003F                 L0 = Null + r1;
0x000193        E4CC003F                 r10 = r10 - 1;
0x000194        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x000195        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x000196        E444004F                 r2 = ABS r2;
0x000197        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x000198        E444004F                 r2 = ABS r2;
0x000199        E474006F                 r5 = MAX r2;
0x00019A        D1380003                 r1 = M[r6 + 3];
0x00019B        97730000                 r5 = r5 * r1 (frac);
0x00019C        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x00019D        01880005                 r6 = r6 + 5;
0x00019E        79990001                 M1 = M1 - 1;
0x00019F        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x0001A0        51C00000                 L0 = Null + 0;
0x0001A1        01500000                 r3 = Null + 0;
0x0001A2        D14A0006                 r2 = M[r8 + 6];
0x0001A3        2006004F                 Null = r4 - r2;
0x0001A4        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x0001A5        0016000F                 rMAC = r4 + Null;
0x0001A6        E1F00A4E                 call $math.log2_table;
0x0001A7        D15A0005                 r3 = M[r8 + 5];
0x0001A8        D13A0007                 r1 = M[r8 + 7];
0x0001A9        2025002F                 r0 = r3 - r0;
0x0001AA        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x0001AB        F128FFFF                 r0 = M[SP + -0x1];
0x0001AC        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x0001AE        E1F00A8A                 call $math.pow2_table;
0x0001AF        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x0001B1        9432002F                 r1 = r0 * r0 (frac);
0x0001B2        97330000                 r1 = r1 * r1 (frac);
0x0001B3        9432003F                 r1 = r0 * r1 (frac);
0x0001B4        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x0001B6        D12A0008                 r0 = M[r8 + 8];
0x0001B7        2075002F                 r5 = r3 - r0;
0x0001B8        00460005                 if POS r2 = r4 + Null;
0x0001B9        97740000                 r5 = r5 * r2 (frac);
0x0001BA        03270000                 r0 = r0 + r5;
0x0001BB        00200005                 if POS r0 = Null + Null;
0x0001BC        2042005F                 r2 = r0 - r3;
0x0001BD        20400044                 if NEG r2 = Null - r2;
0x0001BE        21040054                 Null = r2 - 84;
0x0001BF        00250004                 if NEG r0 = r3 + Null;
0x0001C0        D52A0008                 M[r8 + 8] = r0;
0x0001C1        E1F00A77                 call $math.pow2_table;
0x0001C2        D16A0009                 r4 = M[r8 + 9];
0x0001C3        D52A0009                 M[r8 + 9] = r0;
0x0001C4        018A000A                 r6 = r8 + 10;
0x0001C5        D12A0002                 r0 = M[r8 + 2];
0x0001C6        5090002F                 M1 = Null + r0;
0x0001C7        E420002F                 r0 = Null + 1;
0x0001C8        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x0001C9        D1280000                 r0 = M[r6 + 0];
0x0001CA        E1F00B53                 call $frmbuffer.get_buffer;
0x0001CB        5000002F                 I0 = Null + r0;
0x0001CC        50C0003F                 L0 = Null + r1;
0x0001CD        D1280001                 r0 = M[r6 + 1];
0x0001CE        E1F00B4F                 call $frmbuffer.get_buffer;
0x0001CF        5040002F                 I4 = Null + r0;
0x0001D0        50E0003F                 L4 = Null + r1;
0x0001D1        D1380003                 r1 = M[r6 + 3];
0x0001D2        D12A0009                 r0 = M[r8 + 9];
0x0001D3        9443002F                 r2 = r1 * r0 (frac);
0x0001D4        D1380004                 r1 = M[r6 + 4];
0x0001D5        23430000                 r2 = r2 - r1;
0x0001D6        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x0001D7        F1C8FFFE                 r10 = M[SP + -0x2];
0x0001D8        D90C0000                 Div = rMAC / r10;
0x0001D9        E4CC003F                 r10 = r10 - 1;
0x0001DA        01500004                 r3 = Null + 4;
0x0001DB        D9700001                 r5 = DivResult;
0x0001DC        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x0001DD        CC14003F                 rMAC = r2 * r1 (SS);
0x0001DE        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x0001DF        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x0001E0        03370000                 r1 = r1 + r5;
0x0001E1        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x0001E2        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x0001E3        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0001E4        D5380004                 M[r6 + 4] = r1;
0x0001E5        01880005                 r6 = r6 + 5;
0x0001E6        79990001                 M1 = M1 - 1;
0x0001E7        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x0001E8        51C00000                 L0 = Null + 0;
0x0001E9        51E00000                 L4 = Null + 0;
0x0001EA        F3240000                 pop r0;
0x0001EB        F3240000                 pop r0;
0x0001EC        F3240000                 pop r0;
0x0001ED        1920FE93                 M[0xfffe93] = r0 + Null;
0x0001EE        DDF00B52                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x0001EF        F3D00000                 push rLink;
0x0001F0        FD0000FF 09204CFE        r0 = Null + M[0xff4cfe];
0x0001F2        E1F00AEF                 call $cbuffer.calc_amount_data;
0x0001F3        0072000F                 r5 = r0 + Null;
0x0001F4        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x0001F6        E1F00AEB                 call $cbuffer.calc_amount_data;
0x0001F7        03720000                 r5 = r5 + r0;
0x0001F8        FD0000FF 09774D14        r5 = r5 + M[0xff4d14];
0x0001FA        FD0000FF 19704D14        M[0xff4d14] = r5 + Null;
0x0001FC        FD0000FF 09604D13        r4 = Null + M[0xff4d13];
0x0001FE        E466002F                 r4 = r4 + 1;
0x0001FF        FD0000FF 19604D13        M[0xff4d13] = r4 + Null;
0x000201        FD0000FF 09304CFD        r1 = Null + M[$sra_struct];
0x000203        95331000                 r1 = r1 * 0.125 (frac);
0x000204        2006003F                 Null = r4 - r1;
0x000205        DD40003E                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x000206        FD0000FF 19004D13        M[0xff4d13] = Null + Null;
0x000208        FD0000FF 19004D14        M[0xff4d14] = Null + Null;
0x00020A        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x00020C        D3200000                 r0 = M[r0 + Null];
0x00020D        9B260000                 r0 = r0 * r4 (int);
0x00020E        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x00020F        D9020000                 Div = rMAC / r0;
0x000210        D9300001                 r1 = DivResult;
0x000211        FD0000FF 09604D19        r4 = Null + M[0xff4d19];
0x000213        FD0000FF 19304D19        M[0xff4d19] = r1 + Null;
0x000215        2063006F                 r4 = r1 - r4;
0x000216        FD0000FF 09204D03        r0 = Null + M[0xff4d03];
0x000218        2043002F                 r2 = r1 - r0;
0x000219        FD0000F9 9544999A        r2 = r2 * -0.04999995231628418 (frac);
0x00021B        FD000000 2134A3D7        r1 = r2 - 41943;
0x00021D        20440035                 if POS r2 = r2 - r1;
0x00021E        013451EC                 r1 = r2 + 20972;
0x00021F        20440034                 if NEG r2 = r2 - r1;
0x000220        01901062                 r7 = Null + 4194;
0x000221        FD0000FF 09804D15        r6 = Null + M[0xff4d15];
0x000223        0024000F                 r0 = r2 + Null;

 <$M.sra_tagtimes.fix_rate>
0x000224        0038009F                 r1 = r6 + r7;
0x000225        2002003F                 Null = r0 - r1;
0x000226        00230005                 if POS r0 = r1 + Null;
0x000227        2038009F                 r1 = r6 - r7;
0x000228        2002003F                 Null = r0 - r1;
0x000229        00230004                 if NEG r0 = r1 + Null;
0x00022A        FD0000FF 19204D15        M[0xff4d15] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x00022C        FD0000FF 09204D16        r0 = Null + M[0xff4d16];
0x00022E        FD0000FF 09224D15        r0 = r0 + M[0xff4d15];
0x000230        FD0000FF 29324D01        r1 = r0 - M[0xff4d01];
0x000232        20220035                 if POS r0 = r0 - r1;
0x000233        FD0000FF 09324D01        r1 = r0 + M[0xff4d01];
0x000235        20220034                 if NEG r0 = r0 - r1;
0x000236        FD000001 0132EB85        r1 = r0 + 125829;
0x000238        20220034                 if NEG r0 = r0 - r1;
0x000239        FD0000FF 09804D0F        r6 = Null + M[0xff4d0f];
0x00023B        0038009F                 r1 = r6 + r7;
0x00023C        2002003F                 Null = r0 - r1;
0x00023D        00230005                 if POS r0 = r1 + Null;
0x00023E        2038009F                 r1 = r6 - r7;
0x00023F        2002003F                 Null = r0 - r1;
0x000240        00230004                 if NEG r0 = r1 + Null;
0x000241        FD0000FF 19204D0F        M[0xff4d0f] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x000243        FD0000FF 09204CFE        r0 = Null + M[0xff4cfe];
0x000245        E1F00A9C                 call $cbuffer.calc_amount_data;
0x000246        0052000F                 r3 = r0 + Null;
0x000247        FD0000FF 09204D05        r0 = Null + M[0xff4d05];
0x000249        E422002F                 r0 = r0 + 1;
0x00024A        0005000F                 Null = r3 + Null;
0x00024B        00200001                 if NE r0 = Null + Null;
0x00024C        FD0000FF 19204D05        M[0xff4d05] = r0 + Null;
0x00024E        2102001E                 Null = r0 - 30;
0x00024F        DD400004                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x000250        FD0000FF 19004D15        M[0xff4d15] = Null + Null;
0x000252        DDF00030                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x000253        FD0000FF 09204D06        r0 = Null + M[0xff4d06];
0x000255        0130006E                 r1 = Null + 110;
0x000256        E422002F                 r0 = r0 + 1;
0x000257        2002003F                 Null = r0 - r1;
0x000258        00230005                 if POS r0 = r1 + Null;
0x000259        FD0000FF 19204D06        M[0xff4d06] = r0 + Null;
0x00025B        FD0000FF 09204D07        r0 = Null + M[0xff4d07];
0x00025D        D12201FE                 r0 = M[r0 + 510];
0x00025E        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x00025F        FD0000FF 09204D06        r0 = Null + M[0xff4d06];
0x000261        21020064                 Null = r0 - 100;
0x000262        DD500002                 if POS jump $M.sra_tagtimes.start;
0x000263        DDF0001E                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x000264        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x000266        E1F00AAC                 call $cbuffer.get_write_address_and_size;
0x000267        FD0000FF 19204D08        M[0xff4d08] = r0 + Null;
0x000269        E420002F                 r0 = Null + 1;
0x00026A        FD0000FF 19204D07        M[0xff4d07] = r0 + Null;
0x00026C        FD0000FF 19004D0A        M[0xff4d0a] = Null + Null;

 <$M.sra_tagtimes.counting>
0x00026E        FD0000FF 09204D0A        r0 = Null + M[0xff4d0a];
0x000270        E422002F                 r0 = r0 + 1;
0x000271        FD0000FF 19204D0A        M[0xff4d0a] = r0 + Null;
0x000273        E422003F                 r0 = r0 - 1;
0x000274        FD0000FF 29024CFD        Null = r0 - M[$sra_struct];
0x000276        DD40000B                 if NEG jump $M.sra_tagtimes.end;
0x000277        FD0000FF 09204D0B        r0 = Null + M[0xff4d0b];
0x000279        21020002                 Null = r0 - 2;
0x00027A        DD100008                 if NE jump $reset_sra;
0x00027B        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x00027D        E1F00A95                 call $cbuffer.get_write_address_and_size;
0x00027E        FD0000FF 19204D09        M[0xff4d09] = r0 + Null;
0x000280        DDF0FFDF                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x000281        DDF00ABF                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x000282        FD0000FF 19004D06        M[0xff4d06] = Null + Null;
0x000284        FD0000FF 19004D0B        M[0xff4d0b] = Null + Null;
0x000286        FD0000FF 19004D09        M[0xff4d09] = Null + Null;
0x000288        FD0000FF 19004D08        M[0xff4d08] = Null + Null;
0x00028A        FD0000FF 19004D07        M[0xff4d07] = Null + Null;
0x00028C        DDF00AB4                 jump $pop_rLink_and_rts;

 <$stereo_3d_enhancement.initialize>
0x00028D        F3D00000                 push rLink;
0x00028E        D12A0004                 r0 = M[r8 + 4];
0x00028F        E1F00A7E                 call $cbuffer.get_read_address_and_size;
0x000290        5010002F                 I1 = Null + r0;
0x000291        50D0003F                 L1 = Null + r1;
0x000292        5000002F                 I0 = Null + r0;
0x000293        50C0003F                 L0 = Null + r1;
0x000294        D12A0005                 r0 = M[r8 + 5];
0x000295        E1F00A78                 call $cbuffer.get_read_address_and_size;
0x000296        5040002F                 I4 = Null + r0;
0x000297        50E0003F                 L4 = Null + r1;
0x000298        5050002F                 I5 = Null + r0;
0x000299        50F0003F                 L5 = Null + r1;
0x00029A        01C008A0                 r10 = Null + 2208;
0x00029B        0020000F                 r0 = Null + Null;
0x00029C        E5F00002                 do $M.stereo_3d_enhancement.loop_clear_buffers;
0x00029D        0300A5A5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r0;

 <$M.stereo_3d_enhancement.loop_clear_buffers>
0x00029E        D14A0007                 r2 = M[r8 + 7];
0x00029F        5080004F                 M0 = Null + r2;
0x0002A0        02002030                 Null = Null + Null, r0 = M[I0,M0], r1 = M[I4,M0];
0x0002A1        D12A0004                 r0 = M[r8 + 4];
0x0002A2        4430000F                 r1 = Null + I0;
0x0002A3        E1F00A83                 call $cbuffer.set_write_address;
0x0002A4        D12A0005                 r0 = M[r8 + 5];
0x0002A5        4430004F                 r1 = Null + I4;
0x0002A6        E1F00A80                 call $cbuffer.set_write_address;
0x0002A7        51C00000                 L0 = Null + 0;
0x0002A8        51D00000                 L1 = Null + 0;
0x0002A9        51E00000                 L4 = Null + 0;
0x0002AA        51F00000                 L5 = Null + 0;
0x0002AB        DDF00A95                 jump $pop_rLink_and_rts;
0x0002AC        DC0D000F                 rts;

 <$stereo_3d_enhancement>
0x0002AD        D12A0009                 r0 = M[r8 + 9];
0x0002AE        D13A000A                 r1 = M[r8 + 10];
0x0002AF        009A000F                 r7 = r8 + Null;
0x0002B0        83320000                 r1 = r1 AND r0;
0x0002B1        DD1006C6                 if NE jump $M.audio_proc.stereo_copy.Process.func;
0x0002B2        F3D00000                 push rLink;
0x0002B3        D12A0000                 r0 = M[r8 + 0];
0x0002B4        E1F00A69                 call $frmbuffer.get_buffer;
0x0002B5        5000002F                 I0 = Null + r0;
0x0002B6        50C0003F                 L0 = Null + r1;
0x0002B7        D12A0001                 r0 = M[r8 + 1];
0x0002B8        E1F00A65                 call $frmbuffer.get_buffer;
0x0002B9        5040002F                 I4 = Null + r0;
0x0002BA        50E0003F                 L4 = Null + r1;
0x0002BB        00C5000F                 r10 = r3 + Null;
0x0002BC        D12A0004                 r0 = M[r8 + 4];
0x0002BD        E1F00A55                 call $cbuffer.get_write_address_and_size;
0x0002BE        5010002F                 I1 = Null + r0;
0x0002BF        50D0003F                 L1 = Null + r1;
0x0002C0        D12A0005                 r0 = M[r8 + 5];
0x0002C1        E1F00A51                 call $cbuffer.get_write_address_and_size;
0x0002C2        5050002F                 I5 = Null + r0;
0x0002C3        50F0003F                 L5 = Null + r1;
0x0002C4        007C000F                 r5 = r10 + Null;
0x0002C5        E5F00003                 do $M.stereo_3d_enhancement.loop_copy;
0x0002C6        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002C7        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.stereo_3d_enhancement.loop_copy>
0x0002C8        D12A0004                 r0 = M[r8 + 4];
0x0002C9        4430001F                 r1 = Null + I1;
0x0002CA        E1F00A5C                 call $cbuffer.set_write_address;
0x0002CB        D12A0005                 r0 = M[r8 + 5];
0x0002CC        4430005F                 r1 = Null + I5;
0x0002CD        E1F00A59                 call $cbuffer.set_write_address;
0x0002CE        51C00000                 L0 = Null + 0;
0x0002CF        51E00000                 L4 = Null + 0;
0x0002D0        51D00000                 L1 = Null + 0;
0x0002D1        51F00000                 L5 = Null + 0;
0x0002D2        E4C7003F                 r10 = r5 - 1;
0x0002D3        D12A0007                 r0 = M[r8 + 7];
0x0002D4        E430002F                 r1 = Null + 1;
0x0002D5        7083002F                 M0 = r1 - r0;
0x0002D6        5090002F                 M1 = Null + r0;
0x0002D7        50A0003F                 M2 = Null + r1;
0x0002D8        51B0FFF9                 M3 = Null + -7;
0x0002D9        D12A0006                 r0 = M[r8 + 6];
0x0002DA        5020002F                 I2 = Null + r0;
0x0002DB        D12A0004                 r0 = M[r8 + 4];
0x0002DC        E1F00A31                 call $cbuffer.get_read_address_and_size;
0x0002DD        5010002F                 I1 = Null + r0;
0x0002DE        50D0003F                 L1 = Null + r1;
0x0002DF        D12A0005                 r0 = M[r8 + 5];
0x0002E0        E1F00A2D                 call $cbuffer.get_read_address_and_size;
0x0002E1        5050002F                 I5 = Null + r0;
0x0002E2        50F0003F                 L5 = Null + r1;
0x0002E3        D12A0002                 r0 = M[r8 + 2];
0x0002E4        0057000F                 r3 = r5 + Null;
0x0002E5        E1F00A59                 call $frmbuffer.set_frame_size;
0x0002E6        E1F00A37                 call $frmbuffer.get_buffer;
0x0002E7        5000002F                 I0 = Null + r0;
0x0002E8        50C0003F                 L0 = Null + r1;
0x0002E9        D12A0003                 r0 = M[r8 + 3];
0x0002EA        0057000F                 r3 = r5 + Null;
0x0002EB        E1F00A53                 call $frmbuffer.set_frame_size;
0x0002EC        E1F00A31                 call $frmbuffer.get_buffer;
0x0002ED        50407A2F                 I4 = Null + r0, r5 = M[I2,M2];
0x0002EE        50E0553F                 L4 = Null + r1, r3 = M[I1,M1];
0x0002EF        FD000080 01800000        r6 = Null + -8388608;
0x0002F1        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x0002F2        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x0002F3        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x0002F4        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x0002F5        AC127A7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M2];
0x0002F6        0062001F                 r4 = r0 + rMAC;
0x0002F7        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x0002F8        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x0002F9        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x0002FA        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x0002FB        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x0002FC        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x0002FD        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];
0x0002FE        E5F0000D                 do $M.stereo_3d_enhancement.loop_dsp;
0x0002FF        CE577A45                 rMAC = r3 * r5 (SS), r5 = M[I2,M2], r2 = M[I5,M1];
0x000300        AC147A7F                 rMAC = rMAC + r2 * r5 (SS), r5 = M[I2,M2];
0x000301        AE377A24                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2], r0 = M[I5,M0];
0x000302        AC12E27F                 rMAC = rMAC + r0 * r5 (SS), M[I0,M2] = r4;
0x000303        00627A1F                 r4 = r0 + rMAC, r5 = M[I2,M2];
0x000304        9C660086                 if V r4 = r4 * r6 (int) (sat);
0x000305        CE477AE2                 rMAC = r2 * r5 (SS), r5 = M[I2,M2], M[I4,M2] = r4;
0x000306        AC157A7F                 rMAC = rMAC + r3 * r5 (SS), r5 = M[I2,M2];
0x000307        AC127B7F                 rMAC = rMAC + r0 * r5 (SS), r5 = M[I2,M3];
0x000308        AC137A7F                 rMAC = rMAC + r1 * r5 (SS), r5 = M[I2,M2];
0x000309        0063551F                 r4 = r1 + rMAC, r3 = M[I1,M1];
0x00030A        9C663486                 if V r4 = r4 * r6 (int) (sat), r1 = M[I1,M0];

 <$M.stereo_3d_enhancement.loop_dsp>
0x00030B        50E0E20F                 L4 = Null + Null, M[I0,M2] = r4;
0x00030C        7FCC3700                 L0 = L0 - L0, r1 = M[I1,-1];
0x00030D        D12A0005                 r0 = M[r8 + 5];
0x00030E        4430005F                 r1 = Null + I5;
0x00030F        E1F00A13                 call $cbuffer.set_read_address;
0x000310        D12A0004                 r0 = M[r8 + 4];
0x000311        4430001F                 r1 = Null + I1;
0x000312        E1F00A10                 call $cbuffer.set_read_address;
0x000313        51F00000                 L5 = Null + 0;
0x000314        51D00000                 L1 = Null + 0;
0x000315        DDF00A2B                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x000316        F3D00000                 push rLink;
0x000317        092001F2                 r0 = Null + M[0x1f2];
0x000318        DD00FF6A                 if EQ jump $reset_sra;
0x000319        FD0000FF 09204D0B        r0 = Null + M[0xff4d0b];
0x00031B        D122007D                 r0 = M[r0 + 125];
0x00031C        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x00031D        FD0000FF 09204D08        r0 = Null + M[0xff4d08];
0x00031F        DD00006B                 if EQ jump $M.sra_calcrate.end;
0x000320        E420002F                 r0 = Null + 1;
0x000321        FD0000FF 19204D0B        M[0xff4d0b] = r0 + Null;

 <$M.sra_calcrate.start>
0x000323        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x000325        E1F009E8                 call $cbuffer.get_read_address_and_size;
0x000326        FD0000FF 09304D0C        r1 = Null + M[0xff4d0c];
0x000328        FD0000FF 09404D08        r2 = Null + M[0xff4d08];
0x00032A        E1F0006B                 call $M.sra_calcrate.is_it_within_range;
0x00032B        0005000F                 Null = r3 + Null;
0x00032C        DD00005E                 if EQ jump $M.sra_calcrate.end;
0x00032D        FD0000FF 19004D08        M[0xff4d08] = Null + Null;
0x00032F        FD0000FF 19004D0E        M[0xff4d0e] = Null + Null;
0x000331        01200002                 r0 = Null + 2;
0x000332        FD0000FF 19204D0B        M[0xff4d0b] = r0 + Null;
0x000334        DDF00056                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x000335        FD0000FF 09204D00        r0 = Null + M[0xff4d00];
0x000337        E1F009DB                 call $cbuffer.get_write_address_and_size;
0x000338        FD0000FF 29424D0D        r2 = r0 - M[0xff4d0d];
0x00033A        00440034                 if NEG r2 = r2 + r1;
0x00033B        FD0000FF 09344D0E        r1 = r2 + M[0xff4d0e];
0x00033D        FD0000FF 19304D0E        M[0xff4d0e] = r1 + Null;
0x00033F        FD0000FF 09404D09        r2 = Null + M[0xff4d09];
0x000341        DD000049                 if EQ jump $M.sra_calcrate.end;
0x000342        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x000344        E1F009C9                 call $cbuffer.get_read_address_and_size;
0x000345        FD0000FF 09304D0C        r1 = Null + M[0xff4d0c];
0x000347        FD0000FF 09404D09        r2 = Null + M[0xff4d09];
0x000349        E1F0004C                 call $M.sra_calcrate.is_it_within_range;
0x00034A        0005000F                 Null = r3 + Null;
0x00034B        DD00003F                 if EQ jump $M.sra_calcrate.end;
0x00034C        FD0000FF 19004D09        M[0xff4d09] = Null + Null;
0x00034E        01200000                 r0 = Null + 0;
0x00034F        FD0000FF 19204D0B        M[0xff4d0b] = r0 + Null;
0x000351        FD0000FF 09404D02        r2 = Null + M[0xff4d02];
0x000353        E450002F                 r3 = Null + 1;
0x000354        FD0000FF 29344D0E        r1 = r2 - M[0xff4d0e];
0x000356        20500054                 if NEG r3 = Null - r3;
0x000357        9B350000                 r1 = r1 * r3 (int);
0x000358        FD0000FF 09904D01        r7 = Null + M[0xff4d01];
0x00035A        99990003                 r7 = r7 * 3 (int);
0x00035B        97490000                 r2 = r2 * r7 (frac);
0x00035C        2043004F                 r2 = r1 - r2;
0x00035D        DD50FFC0                 if POS jump $M.sra_calcrate.idle;
0x00035E        9B350000                 r1 = r1 * r3 (int);
0x00035F        FD0000FF 09204D11        r0 = Null + M[0xff4d11];
0x000361        FD0000FF D5324D1A        M[r0 + -45798] = r1;
0x000363        E422002F                 r0 = r0 + 1;
0x000364        8122001F                 r0 = r0 AND 0x1f;
0x000365        FD0000FF 19204D11        M[0xff4d11] = r0 + Null;
0x000367        DD100004                 if NE jump $M.sra_calcrate.init_phase_passed;
0x000368        E440002F                 r2 = Null + 1;
0x000369        FD0000FF 19404D12        M[0xff4d12] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x00036B        01300020                 r1 = Null + 32;
0x00036C        FD0000FF 09004D12        Null = Null + M[0xff4d12];
0x00036E        00230001                 if NE r0 = r1 + Null;

 <$M.sra_calcrate.calc_final_rate>
0x00036F        E4C2003F                 r10 = r0 - 1;
0x000370        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000372        FD0000FF 51004D1A        I0 = Null + -45798;
0x000374        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x000375        E5F00002                 do $M.sra_calcrate.acc_loop;
0x000376        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x000377        03340000                 r1 = r1 + r2;
0x000378        20500054                 if NEG r3 = Null - r3;
0x000379        97350000                 r1 = r1 * r3 (frac);
0x00037A        01100000                 rMAC = Null + 0;
0x00037B        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x00037C        D9020000                 Div = rMAC / r0;
0x00037D        D9300001                 r1 = DivResult;
0x00037E        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x00037F        FD0000FF 09404D02        r2 = Null + M[0xff4d02];
0x000381        D9040000                 Div = rMAC / r2;
0x000382        D9300001                 r1 = DivResult;
0x000383        FD0000FF 29434D01        r2 = r1 - M[0xff4d01];
0x000385        20330045                 if POS r1 = r1 - r2;
0x000386        97350000                 r1 = r1 * r3 (frac);
0x000387        FD0000FF 19304D16        M[0xff4d16] = r1 + Null;
0x000389        DDF0FF94                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x00038A        FD0000FF 09204CFF        r0 = Null + M[0xff4cff];
0x00038C        E1F00981                 call $cbuffer.get_read_address_and_size;
0x00038D        FD0000FF 19204D0C        M[0xff4d0c] = r0 + Null;
0x00038F        FD0000FF 09204D00        r0 = Null + M[0xff4d00];
0x000391        E1F00981                 call $cbuffer.get_write_address_and_size;
0x000392        FD0000FF 19204D0D        M[0xff4d0d] = r0 + Null;

 <$M.sra_calcrate.exit>
0x000394        DDF009AC                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x000395        E450002F                 r3 = Null + 1;
0x000396        2002003F                 Null = r0 - r1;
0x000397        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x000398        2004002F                 Null = r2 - r0;
0x000399        00500005                 if POS r3 = Null + Null;
0x00039A        2004003F                 Null = r2 - r1;
0x00039B        00500004                 if NEG r3 = Null + Null;
0x00039C        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x00039D        2004003F                 Null = r2 - r1;
0x00039E        DC0D0005                 if POS rts;
0x00039F        2004002F                 Null = r2 - r0;
0x0003A0        00500005                 if POS r3 = Null + Null;
0x0003A1        DC0D000F                 rts;

 <$cmpd100.analysis>
0x0003A2        D12A0000                 r0 = M[r8 + 0];
0x0003A3        D13A0001                 r1 = M[r8 + 1];
0x0003A4        83320000                 r1 = r1 AND r0;
0x0003A5        DC0D0001                 if NE rts;
0x0003A6        F3D00000                 push rLink;
0x0003A7        D12A0002                 r0 = M[r8 + 2];
0x0003A8        E1F00975                 call $frmbuffer.get_buffer;
0x0003A9        5000002F                 I0 = Null + r0;
0x0003AA        50C0003F                 L0 = Null + r1;
0x0003AB        D12A0003                 r0 = M[r8 + 3];
0x0003AC        E1F00971                 call $frmbuffer.get_buffer;
0x0003AD        5040002F                 I4 = Null + r0;
0x0003AE        50E0003F                 L4 = Null + r1;
0x0003AF        00C5000F                 r10 = r3 + Null;
0x0003B0        01400000                 r2 = Null + 0;
0x0003B1        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x0003B2        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0003B3        2002000F                 Null = r0 - Null;
0x0003B4        20200024                 if NEG r0 = Null - r0;
0x0003B5        2003000F                 Null = r1 - Null;
0x0003B6        20300034                 if NEG r1 = Null - r1;
0x0003B7        2002003F                 Null = r0 - r1;
0x0003B8        00230004                 if NEG r0 = r1 + Null;
0x0003B9        2004002F                 Null = r2 - r0;
0x0003BA        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x0003BB        19401F93                 M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x0003BC        0014000F                 rMAC = r2 + Null;
0x0003BD        E1F00837                 call $math.log2_table;
0x0003BE        FD0000FF 19204F93        M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x0003C0        D14A001D                 r2 = M[r8 + 29];
0x0003C1        0042004F                 r2 = r0 + r2;
0x0003C2        51C00000                 L0 = Null + 0;
0x0003C3        51E00000                 L4 = Null + 0;
0x0003C4        513A0008                 I3 = r8 + 8;
0x0003C5        514A0012                 I4 = r8 + 18;
0x0003C6        51900001                 M1 = Null + 1;
0x0003C7        D15A000D                 r3 = M[r8 + 13];
0x0003C8        D16A000C                 r4 = M[r8 + 12];
0x0003C9        D17A000B                 r5 = M[r8 + 11];
0x0003CA        D18A000A                 r6 = M[r8 + 10];
0x0003CB        2024005F                 r0 = r2 - r3;
0x0003CC        DD40000E                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x0003CD        D13A0011                 r1 = M[r8 + 17];
0x0003CE        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0003CF        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0003D0        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0003D1        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0003D2        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0003D3        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0003D4        510A001B                 I0 = r8 + 27;
0x0003D5        FD0000FF 19104F94        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0003D7        01300005                 r1 = Null + 5;
0x0003D8        19301F94                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0003D9        DDF0002F                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x0003DA        2024006F                 r0 = r2 - r4;
0x0003DB        DD40000D                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x0003DC        D13A0010                 r1 = M[r8 + 16];
0x0003DD        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0003DE        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0003DF        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0003E0        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0003E1        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0003E2        510A0019                 I0 = r8 + 25;
0x0003E3        FD0000FF 19104F94        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0003E5        01300004                 r1 = Null + 4;
0x0003E6        19301F94                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0003E7        DDF00021                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x0003E8        2024007F                 r0 = r2 - r5;
0x0003E9        DD40000C                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x0003EA        D13A000F                 r1 = M[r8 + 15];
0x0003EB        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0003EC        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0003ED        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0003EE        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0003EF        510A0017                 I0 = r8 + 23;
0x0003F0        FD0000FF 19104F94        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0003F2        01300003                 r1 = Null + 3;
0x0003F3        19301F94                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0003F4        DDF00014                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x0003F5        2024008F                 r0 = r2 - r6;
0x0003F6        DD40000C                 if NEG jump $M.cmpd100.analysis.gain_one;
0x0003F7        D13A000E                 r1 = M[r8 + 14];
0x0003F8        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x0003F9        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x0003FA        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0003FB        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0003FC        510A0015                 I0 = r8 + 21;
0x0003FD        FD0000FF 19104F94        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0003FF        01300002                 r1 = Null + 2;
0x000400        19301F94                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x000401        DDF00007                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x000402        510A0017                 I0 = r8 + 23;
0x000403        01100000                 rMAC = Null + 0;
0x000404        FD0000FF 19104F94        M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000406        E430002F                 r1 = Null + 1;
0x000407        19301F94                 M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x000408        D16A0007                 r4 = M[r8 + 7];
0x000409        5040006F                 I4 = Null + r4;
0x00040A        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x00040B        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x00040C        00540004                 if NEG r3 = r2 + Null;
0x00040D        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x00040E        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x00040F        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x000410        DDF00930                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x000411        F3D00000                 push rLink;
0x000412        51900001                 M1 = Null + 1;
0x000413        510A0001                 I0 = r8 + 1;
0x000414        01807FFF                 r6 = Null + 32767;
0x000415        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x000416        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000417        51101B4C                 I1 = Null + 6988;
0x000418        FD0000FF 19A04F86        M[$cbops.struc_ptr] = r8 + Null;
0x00041A        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x00041B        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x00041C        E1F008C5                 call $cbuffer.calc_amount_data;
0x00041D        2002008F                 Null = r0 - r6;
0x00041E        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x00041F        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000420        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x000421        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x000422        E1F008AF                 call $cbuffer.calc_amount_space;
0x000423        2002009F                 Null = r0 - r7;
0x000424        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x000425        0078000F                 r5 = r6 + Null;
0x000426        2007009F                 Null = r5 - r7;
0x000427        00790005                 if POS r5 = r7 + Null;
0x000428        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x000429        D12A0001                 r0 = M[r8 + 1];
0x00042A        01AA0002                 r8 = r8 + 2;
0x00042B        D1220001                 r0 = M[r0 + 1];
0x00042C        E0020001                 if NE call r0;
0x00042D        D1AAFFFE                 r8 = M[r8 + -2];
0x00042E        E40A002F                 Null = r8 + 1;
0x00042F        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x000430        21270200                 r0 = r5 - 512;
0x000431        20770025                 if POS r5 = r5 - r0;
0x000432        FD0000FF 09A04F86        r8 = Null + M[$cbops.struc_ptr];
0x000434        19701F87                 M[$cbops.amount_to_use] = r5 + Null;
0x000435        DD000042                 if EQ jump $M.cbops.copy.done;
0x000436        FD0000FF 19704F87        M[$cbops.amount_written] = r5 + Null;
0x000438        510A0001                 I0 = r8 + 1;
0x000439        FD0000FF 51404E25        I4 = Null + -45531;
0x00043B        51101B3C                 I1 = Null + 6972;
0x00043C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00043D        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x00043E        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x00043F        E1F008CE                 call $cbuffer.get_read_address_and_size;
0x000440        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000441        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x000442        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000443        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x000444        E1F008CE                 call $cbuffer.get_write_address_and_size;
0x000445        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000446        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x000447        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x000448        FD0000FF 01804E25        r6 = Null + -45531;
0x00044A        01901B3C                 r7 = Null + 6972;
0x00044B        09C01F87                 r10 = Null + M[$cbops.amount_to_use];
0x00044C        D12A0001                 r0 = M[r8 + 1];
0x00044D        01AA0002                 r8 = r8 + 2;
0x00044E        D1220002                 r0 = M[r0 + 2];
0x00044F        E0020001                 if NE call r0;
0x000450        D1AAFFFE                 r8 = M[r8 + -2];
0x000451        E40A002F                 Null = r8 + 1;
0x000452        DD10FFF6                 if NE jump $M.cbops.copy.operator_functions_loop;
0x000453        FD0000FF 09A04F86        r8 = Null + M[$cbops.struc_ptr];
0x000455        511A0001                 I1 = r8 + 1;
0x000456        FD0000FF 51204E25        I2 = Null + -45531;
0x000458        51301B3C                 I3 = Null + 6972;
0x000459        51900001                 M1 = Null + 1;
0x00045A        09201F87                 r0 = Null + M[$cbops.amount_to_use];
0x00045B        50A0002F                 M2 = Null + r0;
0x00045C        FD0000FF 09204F87        r0 = Null + M[$cbops.amount_written];
0x00045E        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x00045F        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x000460        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000461        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000462        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x000463        5000003F                 I0 = Null + r1;
0x000464        50C0004F                 L0 = Null + r2;
0x000465        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x000466        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x000467        E1F008BB                 call $cbuffer.set_read_address;
0x000468        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000469        79770001                 I7 = I7 - 1;
0x00046A        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x00046B        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x00046C        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x00046D        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x00046E        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x00046F        5000003F                 I0 = Null + r1;
0x000470        50C0004F                 L0 = Null + r2;
0x000471        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x000472        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x000473        E1F008B3                 call $cbuffer.set_write_address;
0x000474        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000475        79770001                 I7 = I7 - 1;
0x000476        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x000477        DDF008C9                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x000478        F3D00000                 push rLink;
0x000479        D12A0000                 r0 = M[r8 + 0];
0x00047A        D038002F                 r1 = M[r6 + r0];
0x00047B        5000003F                 I0 = Null + r1;
0x00047C        D039002F                 r1 = M[r7 + r0];
0x00047D        50C0003F                 L0 = Null + r1;
0x00047E        D12A0001                 r0 = M[r8 + 1];
0x00047F        D038002F                 r1 = M[r6 + r0];
0x000480        5040003F                 I4 = Null + r1;
0x000481        D039002F                 r1 = M[r7 + r0];
0x000482        50E0003F                 L4 = Null + r1;
0x000483        FD0000FF 09404F8E        r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x000485        D15A0003                 r3 = M[r8 + 3];
0x000486        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000488        FD0000FF D1254F53        r0 = M[r3 + -45229];
0x00048A        D19A0002                 r7 = M[r8 + 2];
0x00048B        6589FFE8                 r6 = -24 - r7;
0x00048C        9087008F                 r6 = r5 ASHIFT r6;
0x00048D        51900011                 M1 = Null + 17;
0x00048E        01603555                 r4 = Null + 13653;
0x00048F        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x000490        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000492        9065009F                 r4 = r3 ASHIFT r7;
0x000493        E4CC003F                 r10 = r10 - 1;
0x000494        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000495        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000496        E416005F                 rMAC = MIN r4;
0x000497        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x000498        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x000499        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x00049A        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x00049B        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x00049C        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x00049D        FD0000FF 515035AB        I5 = Null + -51797;
0x00049F        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0004A0        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0004A1        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x0004A2        9B460000                 r2 = r2 * r4 (int);
0x0004A3        47490000                 r2 = r2 + M1;
0x0004A4        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0004A5        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x0004A6        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x0004A7        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x0004A8        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x0004A9        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x0004AA        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x0004AB        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x0004AC        51D00005                 L1 = Null + 5;
0x0004AD        D12A0004                 r0 = M[r8 + 4];
0x0004AE        5010002F                 I1 = Null + r0;
0x0004AF        FD0000FF 515035A5        I5 = Null + -51803;
0x0004B1        5180FFFA                 M0 = Null + -6;
0x0004B2        FD0000FF 198035AB        M[0xff35ab] = r6 + Null;
0x0004B4        95886000                 r6 = r6 * 0.75 (frac);
0x0004B5        E450003F                 r3 = Null - 1;
0x0004B6        2020009F                 r0 = Null - r7;
0x0004B7        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0004B8        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x0004B9        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x0004BA        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x0004BB        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0004BC        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0004BD        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0004BE        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x0004BF        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0004C0        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x0004C1        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x0004C2        47490000                 r2 = r2 + M1;
0x0004C3        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x0004C4        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0004C5        8031005F                 r1 = rMAC AND r3;
0x0004C6        90E3009F                 rMAC = r1 ASHIFT r7;
0x0004C7        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x0004C8        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x0004C9        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x0004CA        4420001F                 r0 = Null + I1;
0x0004CB        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x0004CC        51C00000                 L0 = Null + 0;
0x0004CD        51E00000                 L4 = Null + 0;
0x0004CE        FD0000FF 19404F8E        M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x0004D0        DDF00870                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x0004D1        F3D00000                 push rLink;
0x0004D2        5F380000                 I3 = I3 + M0;
0x0004D3        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x0004D4        F3E20000                 push FP;
0x0004D5        F3A60000                 pop B0;
0x0004D6        F107000A                 FP = FP + 10;
0x0004D7        F3E20000                 push FP;
0x0004D8        F3C60000                 pop B4;
0x0004D9        F007003F                 FP = FP + r1;
0x0004DA        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x0004DB        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x0004DC        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x0004DD        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x0004DE        5060003F                 I6 = Null + r1;
0x0004DF        F3210000                 push I2;
0x0004E0        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x0004E1        9946000A                 r2 = r4 * 10 (int);
0x0004E2        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x0004E3        5FB60000                 M3 = M3 + I6;
0x0004E4        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x0004E5        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x0004E6        5040002F                 I4 = Null + r0;
0x0004E7        51C0000A                 L0 = Null + 10;
0x0004E8        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x0004E9        2055005A                 if GE r3 = r3 - r3;
0x0004EA        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x0004EB        004400B4                 if NEG r2 = r2 + r9;
0x0004EC        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x0004ED        4422008C                 if GT r0 = r0 + M0;
0x0004EE        0003000F                 Null = r1 + Null;
0x0004EF        00230001                 if NE r0 = r1 + Null;
0x0004F0        23C20000                 r10 = r10 - r0;
0x0004F1        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x0004F2        9434006F                 r1 = r2 * r4 (frac);
0x0004F3        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x0004F4        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x0004F5        E007000F                 call r5;
0x0004F6        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x0004F7        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x0004F8        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x0004F9        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0004FA        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0004FB        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0004FC        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x0004FD        7C7B007F                 I7 = M3 - I7;
0x0004FE        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x0004FF        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000500        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000501        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000502        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000503        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000504        903100AF                 r1 = rMAC ASHIFT r8;
0x000505        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000506        79330003                 I3 = I3 - 3;
0x000507        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000508        2055005A                 if GE r3 = r3 - r3;
0x000509        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x00050A        004400B4                 if NEG r2 = r2 + r9;
0x00050B        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x00050C        4422008C                 if GT r0 = r0 + M0;
0x00050D        23C20000                 r10 = r10 - r0;
0x00050E        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x00050F        006200CF                 r4 = r0 + r10;
0x000510        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x000511        0026000F                 r0 = r4 + Null;
0x000512        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x000513        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000514        E007000F                 call r5;
0x000515        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000516        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x000517        5832000F                 I3 = I2 + Null;
0x000518        F3250000                 pop I2;
0x000519        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x00051A        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x00051B        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x00051C        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x00051D        DDF00823                 jump $pop_rLink_and_rts;

 <$message.received_service_routine>
0x00051E        F3D00000                 push rLink;
0x00051F        51800000                 M0 = Null + 0;
0x000520        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000521        8132FFF0                 r1 = r0 AND 0xfff0;
0x000522        8903FFF0                 Null = r1 XOR 0xfff0;
0x000523        DD100020                 if NE jump $M.message.received_service_routine.non_long_message;
0x000524        81020001                 Null = r0 AND 0x1;
0x000525        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000526        19001F83                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x000527        09301F83                 r1 = Null + M[$message.long_message_size];
0x000528        21030052                 Null = r1 - 82;
0x000529        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x00052A        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x00052B        0940E006                 r2 = Null + M[0xffe006];
0x00052C        FD0000FF D5434BC8        M[r1 + -46136] = r2;
0x00052E        0940E007                 r2 = Null + M[0xffe007];
0x00052F        FD0000FF D5434BC9        M[r1 + -46135] = r2;
0x000531        0940E008                 r2 = Null + M[0xffe008];
0x000532        FD0000FF D5434BCA        M[r1 + -46134] = r2;
0x000534        0940E009                 r2 = Null + M[0xffe009];
0x000535        FD0000FF D5434BCB        M[r1 + -46133] = r2;
0x000537        01330004                 r1 = r1 + 4;
0x000538        19301F83                 M[$message.long_message_size] = r1 + Null;
0x000539        81020002                 Null = r0 AND 0x2;
0x00053A        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x00053B        0970E001                 r5 = Null + M[0xffe001];
0x00053C        E477002F                 r5 = r5 + 1;
0x00053D        1970E001                 M[0xffe001] = r5 + Null;
0x00053E        DDF00802                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x00053F        FD0000FF 09204BC8        r0 = Null + M[$message.long_message_data];
0x000541        8122FFFF                 r0 = r0 AND 0xffff;
0x000542        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000543        01C00032                 r10 = Null + 50;
0x000544        09301F81                 r1 = Null + M[$message.last_addr];
0x000545        E5F00009                 do $M.message.received_service_routine.loop;
0x000546        E403002F                 Null = r1 + 1;
0x000547        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000548        D1430003                 r2 = M[r1 + 3];
0x000549        8052004F                 r3 = r0 AND r2;
0x00054A        D1430001                 r2 = M[r1 + 1];
0x00054B        2005004F                 Null = r3 - r2;
0x00054C        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x00054D        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x00054E        E1F016EF                 call $error;

 <$M.message.received_service_routine.no_handler>
0x00054F        0970E001                 r5 = Null + M[0xffe001];
0x000550        E477002F                 r5 = r5 + 1;
0x000551        1970E001                 M[0xffe001] = r5 + Null;
0x000552        DDF007EE                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000553        D1D30002                 rLink = M[r1 + 2];
0x000554        47080000                 Null = Null + M0;
0x000555        DD000008                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000556        0032000F                 r1 = r0 + Null;
0x000557        FD0000FF 09404BC9        r2 = Null + M[0xff4bc9];
0x000559        FD0000FF 01504BCA        r3 = Null + -46134;
0x00055B        0120FFFE                 r0 = Null + -2;
0x00055C        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x00055D        0930E006                 r1 = Null + M[0xffe006];
0x00055E        0940E007                 r2 = Null + M[0xffe007];
0x00055F        0950E008                 r3 = Null + M[0xffe008];
0x000560        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000561        0970E001                 r5 = Null + M[0xffe001];
0x000562        E477002F                 r5 = r5 + 1;
0x000563        1970E001                 M[0xffe001] = r5 + Null;
0x000564        E00D000F                 call rLink;
0x000565        DDF007DB                 jump $pop_rLink_and_rts;

 <$codec_copy_handler>
0x000566        F3D00000                 push rLink;
0x000567        E1F0FC88                 call $sra_tagtimes;
0x000568        FD0000FF 01204F35        r0 = Null + -45259;
0x00056A        E1F00777                 call $cbuffer.calc_amount_data;
0x00056B        FD0000FF 29C24F70        r10 = r0 - M[$monitor_level];
0x00056D        DD400022                 if NEG jump $M.codec_copy_handler.no_need_to_discard;
0x00056E        01201F3A                 r0 = Null + 7994;
0x00056F        E1F00762                 call $cbuffer.calc_amount_space;
0x000570        21C20040                 r10 = r0 - 64;
0x000571        DD50001E                 if POS jump $M.codec_copy_handler.no_need_to_discard;
0x000572        FD0000FF 01204F38        r0 = Null + -45256;
0x000574        E1F0075D                 call $cbuffer.calc_amount_space;
0x000575        21C20040                 r10 = r0 - 64;
0x000576        DD500019                 if POS jump $M.codec_copy_handler.no_need_to_discard;
0x000577        09201F70                 r0 = Null + M[$glob_counter_removeframe];
0x000578        E422002F                 r0 = r0 + 1;
0x000579        19201F70                 M[$glob_counter_removeframe] = r0 + Null;
0x00057A        01201F3A                 r0 = Null + 7994;
0x00057B        E1F00792                 call $cbuffer.get_read_address_and_size;
0x00057C        5000002F                 I0 = Null + r0;
0x00057D        50C0003F                 L0 = Null + r1;
0x00057E        51800080                 M0 = Null + 128;
0x00057F        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x000580        01201F3A                 r0 = Null + 7994;
0x000581        4430000F                 r1 = Null + I0;
0x000582        E1F007A0                 call $cbuffer.set_read_address;
0x000583        FD0000FF 01204F38        r0 = Null + -45256;
0x000585        E1F00788                 call $cbuffer.get_read_address_and_size;
0x000586        5000002F                 I0 = Null + r0;
0x000587        50C0003F                 L0 = Null + r1;
0x000588        51800080                 M0 = Null + 128;
0x000589        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00058A        FD0000FF 01204F38        r0 = Null + -45256;
0x00058C        4430000F                 r1 = Null + I0;
0x00058D        E1F00795                 call $cbuffer.set_read_address;
0x00058E        51C00000                 L0 = Null + 0;

 <$M.codec_copy_handler.no_need_to_discard>
0x00058F        FD0000FF 01A04EC1        r8 = Null + -45375;
0x000591        E1F0FE80                 call $cbops.copy;
0x000592        FD0000FF 09004F6F        Null = Null + M[$rate_match_disable];
0x000594        E100030B                 if EQ call $apply_hardware_warp_rate;
0x000595        01A01BF6                 r8 = Null + 7158;
0x000596        D12A0002                 r0 = M[r8 + 2];
0x000597        E1F0074A                 call $cbuffer.calc_amount_data;
0x000598        21020064                 Null = r0 - 100;
0x000599        E1A0FE78                 if GE call $cbops.copy;
0x00059A        01301F00                 r1 = Null + 7936;
0x00059B        09401F6E                 r2 = Null + M[$tmr_period_con_copy];
0x00059C        01500566                 r3 = Null + 1382;
0x00059D        E1F00796                 call $timer.schedule_event_in_period;
0x00059E        DDF007A2                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x00059F        F3D00000                 push rLink;
0x0005A0        F3E20000                 push FP;
0x0005A1        51800001                 M0 = Null + 1;
0x0005A2        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x0005A4        500000AF                 I0 = Null + r8;
0x0005A5        F2A02000                 push r8, r0 = M[I0,M0];
0x0005A6        D038002F                 r1 = M[r6 + r0];
0x0005A7        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x0005A8        D039002F                 r1 = M[r7 + r0];
0x0005A9        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x0005AA        D038006F                 r1 = M[r6 + r4];
0x0005AB        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x0005AC        D039006F                 r1 = M[r7 + r4];
0x0005AD        50F0003F                 L5 = Null + r1;
0x0005AE        09301F8F                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0005AF        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x0005B0        19C01F8F                 M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x0005B1        0005000F                 Null = r3 + Null;
0x0005B2        DD00002A                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x0005B3        016A0010                 r4 = r8 + 16;
0x0005B4        F3600000                 push r4;
0x0005B5        F3E60000                 pop FP;
0x0005B6        512A000B                 I2 = r8 + 11;
0x0005B7        51350005                 I3 = r3 + 5;
0x0005B8        D1950004                 r7 = M[r3 + 4];
0x0005B9        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x0005BA        D12A0005                 r0 = M[r8 + 5];
0x0005BB        F1000084                 pushm <r0, r5>;
0x0005BC        F1018020                 pushm <I5, L5>;
0x0005BD        5050002F                 I5 = Null + r0;
0x0005BE        50F0000F                 L5 = Null + Null;
0x0005BF        0070000F                 r5 = Null + Null;
0x0005C0        512A0007                 I2 = r8 + 7;
0x0005C1        E009000F                 call r7;
0x0005C2        50D0000F                 L1 = Null + Null;
0x0005C3        00C9000F                 r10 = r7 + Null;
0x0005C4        0040000F                 r2 = Null + Null;
0x0005C5        F1058020                 popm <I5, L5>;
0x0005C6        F1040084                 popm <r0, r5>;
0x0005C7        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x0005C8        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x0005C9        03000000                 Null = Null + Null;
0x0005CA        E002000F                 call r0;
0x0005CB        FD0000FF 19904F87        M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x0005CD        F3A40000                 pop r8;
0x0005CE        50D0000F                 L1 = Null + Null;
0x0005CF        50F0000F                 L5 = Null + Null;
0x0005D0        F3000000                 push Null;
0x0005D1        F1AAFFFF                 B0 = M[SP + -0x1];
0x0005D2        F1BAFFFF                 B1 = M[SP + -0x1];
0x0005D3        F1CAFFFF                 B4 = M[SP + -0x1];
0x0005D4        F3D60000                 pop B5;
0x0005D5        09301F8F                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x0005D6        D12AFFFE                 r0 = M[r8 + -2];
0x0005D7        E402002F                 Null = r0 + 1;
0x0005D8        00930000                 if EQ r7 = r1 + Null;
0x0005D9        19901F87                 M[$cbops.amount_to_use] = r7 + Null;
0x0005DA        F3E60000                 pop FP;
0x0005DB        DDF00765                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x0005DC        009C000F                 r7 = r10 + Null;
0x0005DD        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x0005DE        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x0005DF        93E40000                 rMAC = rMAC ASHIFT r2;
0x0005E0        93E70000                 rMAC = rMAC ASHIFT r5;
0x0005E1        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x0005E2        DDF0FFEB                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x0005E3        F3D00000                 push rLink;
0x0005E4        2103000C                 Null = r1 - 12;
0x0005E5        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x0005E6        D5531AD7                 M[r1 + 6871] = r3;
0x0005E7        FD0000FF D5434DAD        M[r1 + -45651] = r2;
0x0005E9        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x0005EA        09201F7E                 r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x0005EB        E0020001                 if NE call r0;
0x0005EC        DDF00754                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x0005ED        0023000F                 r0 = r1 + Null;
0x0005EE        D144FFFF                 r2 = M[r2 + -1];
0x0005EF        01300040                 r1 = Null + 64;
0x0005F0        8D440078                 r2 = r2 LSHIFT -8;
0x0005F1        8C43004F                 r2 = r1 LSHIFT r2;
0x0005F2        D5421ABF                 M[r0 + 6847] = r2;
0x0005F3        E430002F                 r1 = Null + 1;
0x0005F4        0140000D                 r2 = Null + 13;
0x0005F5        2105F000                 Null = r3 - -4096;
0x0005F6        00340004                 if NEG r1 = r2 + Null;
0x0005F7        F3200000                 push r0;
0x0005F8        F3400000                 push r2;
0x0005F9        01400062                 r2 = Null + 98;
0x0005FA        65020007                 Null = 7 - r0;
0x0005FB        00220044                 if NEG r0 = r0 + r2;
0x0005FC        D532FE7B                 M[r0 + -389] = r1;
0x0005FD        F3440000                 pop r2;
0x0005FE        F3240000                 pop r0;
0x0005FF        0032000F                 r1 = r0 + Null;
0x000600        FD0000FF 09204F7D        r0 = Null + M[$cbuffer.read_port_connect_address];
0x000602        E0020001                 if NE call r0;
0x000603        DDF0073D                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000604        D5531AD7                 M[r1 + 6871] = r3;
0x000605        FD0000FF D5434DAD        M[r1 + -45651] = r2;
0x000607        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000608        09201F7D                 r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000609        E0020001                 if NE call r0;
0x00060A        DDF00736                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x00060B        0023000F                 r0 = r1 + Null;
0x00060C        D144FFFF                 r2 = M[r2 + -1];
0x00060D        01300040                 r1 = Null + 64;
0x00060E        8D440078                 r2 = r2 LSHIFT -8;
0x00060F        8C43004F                 r2 = r1 LSHIFT r2;
0x000610        D5421ABF                 M[r0 + 6847] = r2;
0x000611        01300009                 r1 = Null + 9;
0x000612        01400005                 r2 = Null + 5;
0x000613        2105F000                 Null = r3 - -4096;
0x000614        00340004                 if NEG r1 = r2 + Null;
0x000615        F3200000                 push r0;
0x000616        F3400000                 push r2;
0x000617        2122000C                 r0 = r0 - 12;
0x000618        01400066                 r2 = Null + 102;
0x000619        65020007                 Null = 7 - r0;
0x00061A        00220044                 if NEG r0 = r0 + r2;
0x00061B        D532FE73                 M[r0 + -397] = r1;
0x00061C        F3440000                 pop r2;
0x00061D        F3240000                 pop r0;
0x00061E        0032000F                 r1 = r0 + Null;
0x00061F        FD0000FF 09204F7C        r0 = Null + M[$cbuffer.write_port_connect_address];
0x000621        E0020001                 if NE call r0;
0x000622        DDF0071E                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000623        F3D00000                 push rLink;
0x000624        5F380000                 I3 = I3 + M0;
0x000625        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000626        F3E20000                 push FP;
0x000627        F3A60000                 pop B0;
0x000628        F107000A                 FP = FP + 10;
0x000629        F3E20000                 push FP;
0x00062A        F3C60000                 pop B4;
0x00062B        F007003F                 FP = FP + r1;
0x00062C        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x00062D        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x00062E        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x00062F        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000630        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000631        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000632        9946000A                 r2 = r4 * 10 (int);
0x000633        F3210000                 push I2;
0x000634        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000635        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000636        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000637        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000638        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000639        51C0000A                 L0 = Null + 10;
0x00063A        9845007F                 r2 = r3 * r5 (int);
0x00063B        004400B4                 if NEG r2 = r2 + r9;
0x00063C        9434006F                 r1 = r2 * r4 (frac);
0x00063D        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x00063E        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x00063F        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000640        5876003F                 I7 = I6 + r1;
0x000641        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000642        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000643        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000644        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000645        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000646        7C7B007F                 I7 = M3 - I7;
0x000647        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000648        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000649        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00064A        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00064B        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00064C        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x00064D        5823000F                 I2 = I3 + Null;
0x00064E        E002000F                 call r0;
0x00064F        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000650        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000651        2005006F                 Null = r3 - r4;
0x000652        2055005A                 if GE r3 = r3 - r3;
0x000653        9845007F                 r2 = r3 * r5 (int);
0x000654        004400B4                 if NEG r2 = r2 + r9;
0x000655        9434006F                 r1 = r2 * r4 (frac);
0x000656        2007004F                 Null = r5 - r2;
0x000657        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000658        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000659        5832000F                 I3 = I2 + Null;
0x00065A        F3250000                 pop I2;
0x00065B        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x00065C        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x00065D        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x00065E        50E0000F                 L4 = Null + Null;
0x00065F        DDF006E1                 jump $pop_rLink_and_rts;

 <$audio_proc.peq.process>
0x000660        F3D00000                 push rLink;
0x000661        D1290000                 r0 = M[r7 + 0];
0x000662        E1F006BB                 call $frmbuffer.get_buffer;
0x000663        5040002F                 I4 = Null + r0;
0x000664        50E0003F                 L4 = Null + r1;
0x000665        0065000F                 r4 = r3 + Null;
0x000666        D1290001                 r0 = M[r7 + 1];
0x000667        E1F006D7                 call $frmbuffer.set_frame_size;
0x000668        E1F006B5                 call $frmbuffer.get_buffer;
0x000669        5000002F                 I0 = Null + r0;
0x00066A        50C0003F                 L0 = Null + r1;
0x00066B        F3D40000                 pop rLink;

 <$audio_proc.peq.process_op>
0x00066C        51900001                 M1 = Null + 1;
0x00066D        51390003                 I3 = r7 + 3;
0x00066E        5180FFFF                 M0 = Null + -1;
0x00066F        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000670        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000671        F3200000                 push r0;
0x000672        F3D60000                 pop B5;
0x000673        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000674        F3200000                 push r0;
0x000675        F3B60000                 pop B1;
0x000676        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000677        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000678        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000679        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x00067A        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x00067B        21830002                 r6 = r1 - 2;
0x00067C        D1490002                 r2 = M[r7 + 2];
0x00067D        99440005                 r2 = r2 * 5 (int);
0x00067E        5B240000                 I2 = I2 + r2;
0x00067F        5F2A0000                 I2 = I2 + M2;
0x000680        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.peq.process.peq_block_loop>
0x000681        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000682        CE272A55                 rMAC = r0 * r5 (SS), r0 = M[I2,M2], r3 = M[I5,M1];
0x000683        9021458F                 r0 = rMAC ASHIFT r6, r2 = M[I1,M1];
0x000684        E5F00009                 do $M.audio_proc.peq.process.biquad_loop;
0x000685        CE544534                 rMAC = r3 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x000686        AE3445B5                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I1,M1], M[I5,M1] = r1;
0x000687        AE2400A5                 rMAC = rMAC + r0 * r2 (SS), M[I5,M1] = r0;
0x000688        02004535                 Null = Null + Null, r2 = M[I1,M1], r1 = M[I5,M1];
0x000689        BE344534                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I1,M1], r1 = M[I5,M0];
0x00068A        BE344955                 rMAC = rMAC - r1 * r2 (SS), r2 = M[I2,M1], r3 = M[I5,M1];
0x00068B        0021000F                 r0 = rMAC + Null;
0x00068C        92244500                 r0 = r0 ASHIFT r2, r2 = M[I1,M1];

 <$M.audio_proc.peq.process.biquad_loop>
0x00068D        02000054                 Null = Null + Null, r3 = M[I5,M0];
0x00068E        020044B5                 Null = Null + Null, r2 = M[I1,M0], M[I5,M1] = r1;
0x00068F        91520002                 r3 = r0 ASHIFT 2;
0x000690        6669D1A5                 r4 = r4 - M1, M[I0,M1] = r3, M[I5,M1] = r0;
0x000691        DD10FFF0                 if NE jump $M.audio_proc.peq.process.peq_block_loop;
0x000692        50C0000F                 L0 = Null + Null;
0x000693        50E0000F                 L4 = Null + Null;
0x000694        50D0000F                 L1 = Null + Null;
0x000695        50F0000F                 L5 = Null + Null;
0x000696        F3000000                 push Null;
0x000697        F1BAFFFF                 B1 = M[SP + -0x1];
0x000698        F3D60000                 pop B5;
0x000699        DC0D000F                 rts;

 <$M.audio_proc.stream_gain.Process.func>
0x00069A        F3D00000                 push rLink;
0x00069B        D1290000                 r0 = M[r7 + 0];
0x00069C        E1F00681                 call $frmbuffer.get_buffer;
0x00069D        5000002F                 I0 = Null + r0;
0x00069E        50C0003F                 L0 = Null + r1;
0x00069F        00C5000F                 r10 = r3 + Null;
0x0006A0        D1290001                 r0 = M[r7 + 1];
0x0006A1        E1F0069D                 call $frmbuffer.set_frame_size;
0x0006A2        E1F0067B                 call $frmbuffer.get_buffer;
0x0006A3        5040002F                 I4 = Null + r0;
0x0006A4        50E0003F                 L4 = Null + r1;
0x0006A5        F3D40000                 pop rLink;
0x0006A6        D1390002                 r1 = M[r7 + 2];
0x0006A7        D1490003                 r2 = M[r7 + 3];
0x0006A8        D3300000                 r1 = M[r1 + Null];
0x0006A9        D3400000                 r2 = M[r2 + Null];
0x0006AA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0006AB        210A0000                 Null = r8 - 0;
0x0006AC        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x0006AD        D15A0002                 r3 = M[r8 + 2];
0x0006AE        D16A0003                 r4 = M[r8 + 3];
0x0006AF        2003005F                 Null = r1 - r3;
0x0006B0        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x0006B1        2004006F                 Null = r2 - r4;
0x0006B2        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x0006B3        D17A0001                 r5 = M[r8 + 1];
0x0006B4        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x0006B5        D18A0000                 r6 = M[r8 + 0];
0x0006B6        03780000                 r5 = r5 + r6;
0x0006B7        FD00007F 2107FFFF        Null = r5 - 8388607;
0x0006B9        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x0006BA        CC12003F                 rMAC = r0 * r1 (SS);
0x0006BB        9081004F                 r6 = rMAC ASHIFT r2;
0x0006BC        97870000                 r6 = r6 * r5 (frac);
0x0006BD        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x0006BF        CC12005F                 rMAC = r0 * r3 (SS);
0x0006C0        9021006F                 r0 = rMAC ASHIFT r4;
0x0006C1        97290000                 r0 = r0 * r7 (frac);
0x0006C2        03280000                 r0 = r0 + r6;
0x0006C3        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x0006C4        D57A0001                 M[r8 + 1] = r5;
0x0006C5        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x0006C6        D53A0002                 M[r8 + 2] = r1;
0x0006C7        D54A0003                 M[r8 + 3] = r2;
0x0006C8        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x0006C9        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x0006CA        CC12003F                 rMAC = r0 * r1 (SS);
0x0006CB        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x0006CC        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x0006CD        50C0000F                 L0 = Null + Null;
0x0006CE        50E0000F                 L4 = Null + Null;
0x0006CF        DC0D000F                 rts;

 <$cmpd100.applygain>
0x0006D0        D12A0000                 r0 = M[r8 + 0];
0x0006D1        D13A0001                 r1 = M[r8 + 1];
0x0006D2        83320000                 r1 = r1 AND r0;
0x0006D3        DC0D0001                 if NE rts;
0x0006D4        F3D00000                 push rLink;
0x0006D5        D12A0002                 r0 = M[r8 + 2];
0x0006D6        E1F00647                 call $frmbuffer.get_buffer;
0x0006D7        5000002F                 I0 = Null + r0;
0x0006D8        50C0003F                 L0 = Null + r1;
0x0006D9        D12A0003                 r0 = M[r8 + 3];
0x0006DA        E1F00643                 call $frmbuffer.get_buffer;
0x0006DB        5040002F                 I4 = Null + r0;
0x0006DC        50E0003F                 L4 = Null + r1;
0x0006DD        00C5000F                 r10 = r3 + Null;
0x0006DE        D12A0004                 r0 = M[r8 + 4];
0x0006DF        E1F0065F                 call $frmbuffer.set_frame_size;
0x0006E0        E1F0063D                 call $frmbuffer.get_buffer;
0x0006E1        5010002F                 I1 = Null + r0;
0x0006E2        50D0003F                 L1 = Null + r1;
0x0006E3        D12A0005                 r0 = M[r8 + 5];
0x0006E4        005C000F                 r3 = r10 + Null;
0x0006E5        E1F00659                 call $frmbuffer.set_frame_size;
0x0006E6        E1F00637                 call $frmbuffer.get_buffer;
0x0006E7        5050002F                 I5 = Null + r0;
0x0006E8        50F0003F                 L5 = Null + r1;
0x0006E9        D14A0006                 r2 = M[r8 + 6];
0x0006EA        D15A0007                 r3 = M[r8 + 7];
0x0006EB        D025000F                 r0 = M[r3 + Null];
0x0006EC        91220004                 r0 = r0 ASHIFT 4;
0x0006ED        FD000003 21220000        r0 = r0 - 196608;
0x0006EF        E1F00549                 call $math.pow2_table;
0x0006F0        19201F95                 M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x0006F1        9462004F                 r4 = r0 * r2 (frac);
0x0006F2        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x0006F3        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0006F4        CC12006F                 rMAC = r0 * r4 (SS);
0x0006F5        91210007                 r0 = rMAC ASHIFT 7;
0x0006F6        9413006F                 rMAC = r1 * r4 (frac);
0x0006F7        91310007                 r1 = rMAC ASHIFT 7;
0x0006F8        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x0006F9        51C00000                 L0 = Null + 0;
0x0006FA        51D00000                 L1 = Null + 0;
0x0006FB        51E00000                 L4 = Null + 0;
0x0006FC        51F00000                 L5 = Null + 0;
0x0006FD        DDF00643                 jump $pop_rLink_and_rts;

 <$cbops.cross_mix.main>
0x0006FE        F3D00000                 push rLink;
0x0006FF        D12A0000                 r0 = M[r8 + 0];
0x000700        D038002F                 r1 = M[r6 + r0];
0x000701        5000003F                 I0 = Null + r1;
0x000702        D039002F                 r1 = M[r7 + r0];
0x000703        50C0003F                 L0 = Null + r1;
0x000704        D12A0001                 r0 = M[r8 + 1];
0x000705        D038002F                 r1 = M[r6 + r0];
0x000706        5010003F                 I1 = Null + r1;
0x000707        D039002F                 r1 = M[r7 + r0];
0x000708        50D0003F                 L1 = Null + r1;
0x000709        D12A0002                 r0 = M[r8 + 2];
0x00070A        D038002F                 r1 = M[r6 + r0];
0x00070B        5040003F                 I4 = Null + r1;
0x00070C        D039002F                 r1 = M[r7 + r0];
0x00070D        50E0003F                 L4 = Null + r1;
0x00070E        D16A0004                 r4 = M[r8 + 4];
0x00070F        D17A0005                 r5 = M[r8 + 5];
0x000710        D12A0003                 r0 = M[r8 + 3];
0x000711        DD400014                 if NEG jump $M.cbops.cross_mix.main.single_output;
0x000712        D038002F                 r1 = M[r6 + r0];
0x000713        5050003F                 I5 = Null + r1;
0x000714        D039002F                 r1 = M[r7 + r0];
0x000715        50F0003F                 L5 = Null + r1;
0x000716        D18A0006                 r6 = M[r8 + 6];
0x000717        D19A0007                 r7 = M[r8 + 7];
0x000718        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000719        E4CC003F                 r10 = r10 - 1;
0x00071A        CF263500                 rMAC = r0 * r4 (SS), r1 = M[I1,1];
0x00071B        E5F00005                 do $M.cbops.cross_mix.main.cross_mix_loop;
0x00071C        AC13007F                 rMAC = rMAC + r1 * r5 (SS);
0x00071D        CF282191                 rMAC = r0 * r6 (SS), r0 = M[I0,1], M[I4,1] = rMAC;
0x00071E        AF393500                 rMAC = rMAC + r1 * r7 (SS), r1 = M[I1,1];
0x00071F        CF260095                 rMAC = r0 * r4 (SS), M[I5,1] = rMAC;

 <$M.cbops.cross_mix.main.cross_mix_loop>
0x000720        AC13007F                 rMAC = rMAC + r1 * r5 (SS);
0x000721        CF280091                 rMAC = r0 * r6 (SS), M[I4,1] = rMAC;
0x000722        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x000723        03000095                 Null = Null + Null, M[I5,1] = rMAC;
0x000724        DDF00009                 jump $M.cbops.cross_mix.main.end;

 <$M.cbops.cross_mix.main.single_output>
0x000725        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000726        E4CC003F                 r10 = r10 - 1;
0x000727        CF263500                 rMAC = r0 * r4 (SS), r1 = M[I1,1];
0x000728        E5F00003                 do $M.cbops.cross_mix.main.cross_mix_loop_2;
0x000729        AF372100                 rMAC = rMAC + r1 * r5 (SS), r0 = M[I0,1];
0x00072A        CF263591                 rMAC = r0 * r4 (SS), r1 = M[I1,1], M[I4,1] = rMAC;

 <$M.cbops.cross_mix.main.cross_mix_loop_2>
0x00072B        AC13007F                 rMAC = rMAC + r1 * r5 (SS);
0x00072C        03000091                 Null = Null + Null, M[I4,1] = rMAC;

 <$M.cbops.cross_mix.main.end>
0x00072D        51E00000                 L4 = Null + 0;
0x00072E        51F00000                 L5 = Null + 0;
0x00072F        51C00000                 L0 = Null + 0;
0x000730        51D00000                 L1 = Null + 0;
0x000731        DDF0060F                 jump $pop_rLink_and_rts;

 <$M.mips_profile.mainstart>
0x000732        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000733        D52A0001                 M[r8 + 1] = r0;
0x000734        D50A0005                 M[r8 + 5] = Null;
0x000735        D12A0000                 r0 = M[r8 + 0];
0x000736        DD000002                 if EQ jump $M.mips_profile.init;
0x000737        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000738        0920FE71                 r0 = Null + M[0xfffe71];
0x000739        D52A0009                 M[r8 + 9] = r0;
0x00073A        E420002F                 r0 = Null + 1;
0x00073B        D52A0000                 M[r8 + 0] = r0;
0x00073C        D50A0002                 M[r8 + 2] = Null;
0x00073D        D50A0004                 M[r8 + 4] = Null;
0x00073E        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x00073F        D12A0000                 r0 = M[r8 + 0];
0x000740        DC0D0000                 if EQ rts;
0x000741        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000742        D13A0001                 r1 = M[r8 + 1];
0x000743        23230000                 r0 = r0 - r1;
0x000744        D13A0005                 r1 = M[r8 + 5];
0x000745        23230000                 r0 = r0 - r1;
0x000746        D13A0002                 r1 = M[r8 + 2];
0x000747        03230000                 r0 = r0 + r1;
0x000748        D52A0002                 M[r8 + 2] = r0;
0x000749        0920FE71                 r0 = Null + M[0xfffe71];
0x00074A        D13A0009                 r1 = M[r8 + 9];
0x00074B        23230000                 r0 = r0 - r1;
0x00074C        FD0000FF 093031FF        r1 = Null + M[$M.mips_profile.evalinterval_us];
0x00074E        2002003F                 Null = r0 - r1;
0x00074F        DC0D0004                 if NEG rts;
0x000750        D12A0002                 r0 = M[r8 + 2];
0x000751        D52A0006                 M[r8 + 6] = r0;
0x000752        D13A0004                 r1 = M[r8 + 4];
0x000753        D53A0007                 M[r8 + 7] = r1;
0x000754        03230000                 r0 = r0 + r1;
0x000755        D52A0008                 M[r8 + 8] = r0;
0x000756        D50A0000                 M[r8 + 0] = Null;
0x000757        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000758        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000759        D52A0003                 M[r8 + 3] = r0;
0x00075A        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x00075B        0920FE6C                 r0 = Null + M[0xfffe6c];
0x00075C        D13A0003                 r1 = M[r8 + 3];
0x00075D        23230000                 r0 = r0 - r1;
0x00075E        D13A0004                 r1 = M[r8 + 4];
0x00075F        0032003F                 r1 = r0 + r1;
0x000760        D53A0004                 M[r8 + 4] = r1;
0x000761        D13A0005                 r1 = M[r8 + 5];
0x000762        0032003F                 r1 = r0 + r1;
0x000763        D53A0005                 M[r8 + 5] = r1;
0x000764        DC0D000F                 rts;

 <$flash.copy_to_dm_24>
0x000765        F3D00000                 push rLink;
0x000766        0082000F                 r6 = r0 + Null;
0x000767        81730001                 r5 = r1 AND 0x1;
0x000768        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000769        0028000F                 r0 = r6 + Null;
0x00076A        99360003                 r1 = r4 * 3 (int);
0x00076B        F3300000                 push r1;
0x00076C        E1F00585                 call $flash.map_page_into_dm;
0x00076D        5010002F                 I1 = Null + r0;
0x00076E        00C6000F                 r10 = r4 + Null;
0x00076F        F3240000                 pop r0;
0x000770        2002003F                 Null = r0 - r1;
0x000771        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000772        99330002                 r1 = r1 * 2 (int);
0x000773        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000775        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000776        236C0000                 r4 = r4 - r10;
0x000777        992C0003                 r0 = r10 * 3 (int);
0x000778        03820000                 r6 = r6 + r0;
0x000779        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x00077A        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00077B        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00077C        8D220008                 r0 = r0 LSHIFT 8;
0x00077D        8D530078                 r3 = r1 LSHIFT -8;
0x00077E        815500FF                 r3 = r3 AND 0xff;
0x00077F        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000780        8122FFFF                 r0 = r0 AND 0xffff;
0x000781        8D330010                 r1 = r1 LSHIFT 16;
0x000782        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000783        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000784        0006000F                 Null = r4 + Null;
0x000785        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000786        0007000F                 Null = r5 + Null;
0x000787        DD0005B9                 if EQ jump $pop_rLink_and_rts;
0x000788        0028000F                 r0 = r6 + Null;
0x000789        01300002                 r1 = Null + 2;
0x00078A        E1F00567                 call $flash.map_page_into_dm;
0x00078B        5010002F                 I1 = Null + r0;
0x00078C        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00078D        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00078E        8D220008                 r0 = r0 LSHIFT 8;
0x00078F        8D330078                 r1 = r1 LSHIFT -8;
0x000790        813300FF                 r1 = r1 AND 0xff;
0x000791        8423002F                 r0 = r1 OR r0;
0x000792        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x000793        DDF005AD                 jump $pop_rLink_and_rts;

 <$message.send_long>
0x000794        F3D00000                 push rLink;
0x000795        E1F00564                 call $block_interrupts;
0x000796        0140FFFE                 r2 = Null + -2;
0x000797        01C60005                 r10 = r4 + 5;
0x000798        8DCC007E                 r10 = r10 LSHIFT -2;
0x000799        09301F82                 r1 = Null + M[$message.queue_write_ptr];
0x00079A        8580FFF1                 r6 = Null OR 0xfff1;
0x00079B        E5F00023                 do $M.message.send_long.long_message_loop;
0x00079C        01230005                 r0 = r1 + 5;
0x00079D        2102006E                 Null = r0 - 110;
0x00079E        00200000                 if EQ r0 = Null + Null;
0x00079F        FD0000FF 29024F81        Null = r0 - M[$message.queue_read_ptr];
0x0007A1        DD00001F                 if EQ jump $M.message.send_long.all_done;
0x0007A2        E40C003F                 Null = r10 - 1;
0x0007A3        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x0007A4        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x0007A5        FD0000FF D5834B5A        M[r1 + -46246] = r6;
0x0007A7        81080001                 Null = r6 AND 0x1;
0x0007A8        DD000008                 if EQ jump $M.message.send_long.not_first_message;
0x0007A9        E488003F                 r6 = r6 - 1;
0x0007AA        FD0000FF D5534B5B        M[r1 + -46245] = r3;
0x0007AC        FD0000FF D5634B5C        M[r1 + -46244] = r4;
0x0007AE        21770002                 r5 = r5 - 2;
0x0007AF        DDF00007                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x0007B0        D047000F                 r2 = M[r5 + Null];
0x0007B1        FD0000FF D5434B5B        M[r1 + -46245] = r2;
0x0007B3        D1470001                 r2 = M[r5 + 1];
0x0007B4        FD0000FF D5434B5C        M[r1 + -46244] = r2;

 <$M.message.send_long.last_two_words>
0x0007B6        D1470002                 r2 = M[r5 + 2];
0x0007B7        FD0000FF D5434B5D        M[r1 + -46243] = r2;
0x0007B9        D1470003                 r2 = M[r5 + 3];
0x0007BA        FD0000FF D5434B5E        M[r1 + -46242] = r2;
0x0007BC        01770004                 r5 = r5 + 4;
0x0007BD        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x0007BE        19201F82                 M[$message.queue_write_ptr] = r0 + Null;
0x0007BF        E1F00003                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x0007C0        E1F00529                 call $interrupt.unblock;
0x0007C1        DDF0057F                 jump $pop_rLink_and_rts;

 <$message.private.try_to_send_message>
0x0007C2        F3D00000                 push rLink;
0x0007C3        E1F00536                 call $block_interrupts;
0x0007C4        0920E000                 r0 = Null + M[0xffe000];
0x0007C5        FD0000FF 29224F82        r0 = r0 - M[$message.last_seq_sent];
0x0007C7        8102FFFF                 Null = r0 AND 0xffff;
0x0007C8        DD10001E                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x0007C9        FD0000FF 09304F81        r1 = Null + M[$message.queue_read_ptr];
0x0007CB        FD0000FF D1234B5B        r0 = M[r1 + -46245];
0x0007CD        1920E002                 M[0xffe002] = r0 + Null;
0x0007CE        FD0000FF D1234B5C        r0 = M[r1 + -46244];
0x0007D0        1920E003                 M[0xffe003] = r0 + Null;
0x0007D1        FD0000FF D1234B5D        r0 = M[r1 + -46243];
0x0007D3        1920E004                 M[0xffe004] = r0 + Null;
0x0007D4        FD0000FF D1234B5E        r0 = M[r1 + -46242];
0x0007D6        1920E005                 M[0xffe005] = r0 + Null;
0x0007D7        FD0000FF 09204F82        r0 = Null + M[$message.last_seq_sent];
0x0007D9        E422002F                 r0 = r0 + 1;
0x0007DA        FD0000FF 19204F82        M[$message.last_seq_sent] = r0 + Null;
0x0007DC        FD0000FF D1234B5A        r0 = M[r1 + -46246];
0x0007DE        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x0007DF        01330005                 r1 = r1 + 5;
0x0007E0        2103006E                 Null = r1 - 110;
0x0007E1        00300000                 if EQ r1 = Null + Null;
0x0007E2        FD0000FF 19304F81        M[$message.queue_read_ptr] = r1 + Null;
0x0007E4        29031F82                 Null = r1 - M[$message.queue_write_ptr];
0x0007E5        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x0007E6        09401F23                 r2 = Null + M[0x1f23];
0x0007E7        E1F0036B                 call $timer.cancel_event;
0x0007E8        01301F20                 r1 = Null + 7968;
0x0007E9        014003E8                 r2 = Null + 1000;
0x0007EA        015007C2                 r3 = Null + 1986;
0x0007EB        E1F0054B                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x0007EC        E1F004FD                 call $interrupt.unblock;
0x0007ED        DDF00553                 jump $pop_rLink_and_rts;

 <$wall_clock.message_handler>
0x0007EE        F3D00000                 push rLink;
0x0007EF        E455002F                 r3 = r3 + 1;
0x0007F0        01C00007                 r10 = Null + 7;
0x0007F1        09801F86                 r6 = Null + M[$wall_clock.last_addr];
0x0007F2        E5F00014                 do $M.wall_clock.message_handler.loop;
0x0007F3        E408002F                 Null = r6 + 1;
0x0007F4        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x0007F5        D1280001                 r0 = M[r6 + 1];
0x0007F6        D135FFFF                 r1 = M[r3 + -1];
0x0007F7        813300FF                 r1 = r1 AND 0xff;
0x0007F8        2002003F                 Null = r0 - r1;
0x0007F9        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x0007FA        D1280002                 r0 = M[r6 + 2];
0x0007FB        2802005F                 Null = r0 - M[r3];
0x0007FC        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x0007FD        D1280003                 r0 = M[r6 + 3];
0x0007FE        D1350001                 r1 = M[r3 + 1];
0x0007FF        2002003F                 Null = r0 - r1;
0x000800        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000801        D1280004                 r0 = M[r6 + 4];
0x000802        D1350002                 r1 = M[r3 + 2];
0x000803        2002003F                 Null = r0 - r1;
0x000804        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000805        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000806        E1F01437                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000807        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000808        D1350003                 r1 = M[r3 + 3];
0x000809        D1450004                 r2 = M[r3 + 4];
0x00080A        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x00080B        811100FF                 rMAC = rMAC AND 0xff;
0x00080C        991104E2                 rMAC = rMAC * 1250 (int);
0x00080D        8D330010                 r1 = r1 LSHIFT 16;
0x00080E        8144FFFF                 r2 = r2 AND 0xffff;
0x00080F        03430000                 r2 = r2 + r1;
0x000810        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000812        8D410016                 r2 = rMAC LSHIFT 22;
0x000813        D1650006                 r4 = M[r3 + 6];
0x000814        D1550005                 r3 = M[r3 + 5];
0x000815        8D550010                 r3 = r3 LSHIFT 16;
0x000816        8166FFFF                 r4 = r4 AND 0xffff;
0x000817        03650000                 r4 = r4 + r3;
0x000818        23460000                 r2 = r2 - r4;
0x000819        D5480005                 M[r6 + 5] = r2;
0x00081A        D1280006                 r0 = M[r6 + 6];
0x00081B        E0020001                 if NE call r0;
0x00081C        DDF00524                 jump $pop_rLink_and_rts;

 <$set_tone_rate_from_vm>
0x00081D        8133FFFF                 r1 = r1 AND 0xffff;
0x00081E        011005DC                 rMAC = Null + 1500;
0x00081F        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x000821        D9030000                 Div = rMAC / r1;
0x000822        19301F68                 M[$current_tone_sampling_rate] = r1 + Null;
0x000823        01200003                 r0 = Null + 3;
0x000824        81040002                 Null = r2 AND 0x2;
0x000825        00200001                 if NE r0 = Null + Null;
0x000826        01220008                 r0 = r0 + 8;
0x000827        19201BF5                 M[0x1bf5] = r0 + Null;
0x000828        19201BD3                 M[0x1bd3] = r0 + Null;
0x000829        D9500001                 r3 = DivResult;
0x00082A        81240001                 r0 = r2 AND 0x1;
0x00082B        00550050                 if EQ r3 = r3 + r3;
0x00082C        FD0000FF 19504F6E        M[$tmr_period_tone_copy] = r3 + Null;
0x00082E        FD0000FF 19204F68        M[$stereo_tone] = r0 + Null;
0x000830        DD000006                 if EQ jump $M.set_tone_rate_from_vm.mono_tone;

 <$M.set_tone_rate_from_vm.stereo_tone>
0x000831        E420003F                 r0 = Null - 1;
0x000832        09301AF8                 r1 = Null + M[0x1af8];
0x000833        9143007F                 r2 = r1 ASHIFT -1;
0x000834        0054000F                 r3 = r2 + Null;
0x000835        DDF00005                 jump $M.set_tone_rate_from_vm.set_op;

 <$M.set_tone_rate_from_vm.mono_tone>
0x000836        E420002F                 r0 = Null + 1;
0x000837        01300000                 r1 = Null + 0;
0x000838        09401AF8                 r2 = Null + M[0x1af8];
0x000839        01500000                 r3 = Null + 0;

 <$M.set_tone_rate_from_vm.set_op>
0x00083A        19201AF2                 M[0x1af2] = r0 + Null;
0x00083B        FD0000FF 19304DE3        M[0xff4de3] = r1 + Null;
0x00083D        19401B0C                 M[0x1b0c] = r2 + Null;
0x00083E        FD0000FF 19504DF7        M[0xff4df7] = r3 + Null;
0x000840        09201F42                 r0 = Null + M[0x1f42];
0x000841        19201F41                 M[0x1f41] = r0 + Null;
0x000842        FD0000FF 09204F40        r0 = Null + M[0xff4f40];
0x000844        FD0000FF 19204F3F        M[0xff4f3f] = r0 + Null;
0x000846        E420002F                 r0 = Null + 1;
0x000847        19201F6C                 M[$aux_input_stream_available] = r0 + Null;
0x000848        DC0D000F                 rts;

 <$iir_1stStage_upsample>
0x000849        59330002                 I3 = I3 + 2;
0x00084A        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x00084B        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x00084C        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x00084D        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x00084E        70A0006F                 M2 = Null - r4;
0x00084F        99460006                 r2 = r4 * 6 (int);
0x000850        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000851        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000852        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000853        5000002F                 I0 = Null + r0;
0x000854        51C00006                 L0 = Null + 6;
0x000855        F3E20000                 push FP;
0x000856        F3A60000                 pop B0;
0x000857        F1070006                 FP = FP + 6;
0x000858        9845007F                 r2 = r3 * r5 (int);
0x000859        004400B4                 if NEG r2 = r2 + r9;
0x00085A        9434006F                 r1 = r2 * r4 (frac);
0x00085B        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x00085C        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x00085D        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x00085E        5876003F                 I7 = I6 + r1;
0x00085F        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000860        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000861        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000862        7C7B007F                 I7 = M3 - I7;
0x000863        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000864        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000865        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000866        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000867        903100AF                 r1 = rMAC ASHIFT r8;
0x000868        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000869        2005006F                 Null = r3 - r4;
0x00086A        2055005A                 if GE r3 = r3 - r3;
0x00086B        9845007F                 r2 = r3 * r5 (int);
0x00086C        004400B4                 if NEG r2 = r2 + r9;
0x00086D        9434006F                 r1 = r2 * r4 (frac);
0x00086E        2007004F                 Null = r5 - r2;
0x00086F        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000870        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000871        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000872        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000873        5F280000                 I2 = I2 + M0;
0x000874        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000875        8132001F                 r1 = r0 AND 0x1f;
0x000876        2133000C                 r1 = r1 - 12;
0x000877        19401F64                 M[$cbuffer.tmp] = r2 + Null;
0x000878        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x00087A        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x00087B        19501F65                 M[0x1f65] = r3 + Null;
0x00087C        01400066                 r2 = Null + 102;
0x00087D        65030007                 Null = 7 - r1;
0x00087E        00330044                 if NEG r1 = r1 + r2;
0x00087F        D153FE73                 r3 = M[r1 + -397];
0x000880        FD000030 81420000        r2 = r0 AND 0x300000;
0x000882        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000883        8155FFFB                 r3 = r3 AND 0xfffb;
0x000884        8D44006B                 r2 = r2 LSHIFT -21;
0x000885        8D440002                 r2 = r2 LSHIFT 2;
0x000886        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000887        FD000003 81428000        r2 = r0 AND 0x38000;
0x000889        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x00088A        8155FFFC                 r3 = r3 AND 0xfffc;
0x00088B        8D440070                 r2 = r2 LSHIFT -16;
0x00088C        8D440000                 r2 = r2 LSHIFT 0;
0x00088D        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x00088E        81426000                 r2 = r0 AND 0x6000;
0x00088F        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000890        8155FFF7                 r3 = r3 AND 0xfff7;
0x000891        8D440072                 r2 = r2 LSHIFT -14;
0x000892        8D440003                 r2 = r2 LSHIFT 3;
0x000893        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000894        D553FE73                 M[r1 + -397] = r3;
0x000895        09501F65                 r3 = Null + M[0x1f65];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000896        8132001F                 r1 = r0 AND 0x1f;
0x000897        2133000C                 r1 = r1 - 12;
0x000898        01400009                 r2 = Null + 9;
0x000899        65030007                 Null = 7 - r1;
0x00089A        00330044                 if NEG r1 = r1 + r2;
0x00089B        09401F64                 r2 = Null + M[$cbuffer.tmp];
0x00089C        0123FE23                 r0 = r1 + -477;
0x00089D        E430002F                 r1 = Null + 1;
0x00089E        DC0D000F                 rts;

 <$apply_hardware_warp_rate>
0x00089F        F3D00000                 push rLink;
0x0008A0        09201F72                 r0 = Null + M[$rate_apply_cntr];
0x0008A1        E422002F                 r0 = r0 + 1;
0x0008A2        19201F72                 M[$rate_apply_cntr] = r0 + Null;
0x0008A3        21020040                 Null = r0 - 64;
0x0008A4        DD400021                 if NEG jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x0008A5        19001F72                 M[$rate_apply_cntr] = Null + Null;
0x0008A6        FD0000FF 09704F71        r5 = Null + M[$current_hw_rate];
0x0008A8        FD0000FF 09604D0F        r4 = Null + M[0xff4d0f];
0x0008AA        01300040                 r1 = Null + 64;
0x0008AB        2027006F                 r0 = r5 - r4;
0x0008AC        20200024                 if NEG r0 = Null - r0;
0x0008AD        FD000008 95423127        r2 = r0 * 0.06400001049041748 (frac);
0x0008AF        21023127                 Null = r0 - 12583;
0x0008B0        00430004                 if NEG r2 = r1 + Null;
0x0008B1        21340500                 r1 = r2 - 1280;
0x0008B2        20440035                 if POS r2 = r2 - r1;
0x0008B3        2037006F                 r1 = r5 - r4;
0x0008B4        2023004F                 r0 = r1 - r2;
0x0008B5        20330025                 if POS r1 = r1 - r0;
0x0008B6        0023004F                 r0 = r1 + r2;
0x0008B7        20330024                 if NEG r1 = r1 - r0;
0x0008B8        23730000                 r5 = r5 - r1;
0x0008B9        9167007A                 r4 = r5 ASHIFT -6;
0x0008BA        91760006                 r5 = r4 ASHIFT 6;
0x0008BB        FD0000FF 29374F71        r1 = r5 - M[$current_hw_rate];
0x0008BD        DD000008                 if EQ jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x0008BE        FD0000FF 19704F71        M[$current_hw_rate] = r5 + Null;
0x0008C0        2060006F                 r4 = Null - r4;
0x0008C1        FD000000 01408004        r2 = Null + 32772;
0x0008C3        01500003                 r3 = Null + 3;
0x0008C4        E1F00200                 call $message.send_short;

 <$M.apply_hardware_warp_rate.end_hw_rate_apply>
0x0008C5        DDF0047B                 jump $pop_rLink_and_rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x0008C6        8132001F                 r1 = r0 AND 0x1f;
0x0008C7        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x0008C9        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x0008CA        19401F64                 M[$cbuffer.tmp] = r2 + Null;
0x0008CB        19501F65                 M[0x1f65] = r3 + Null;
0x0008CC        01400062                 r2 = Null + 98;
0x0008CD        65030007                 Null = 7 - r1;
0x0008CE        00330044                 if NEG r1 = r1 + r2;
0x0008CF        D153FE7B                 r3 = M[r1 + -389];
0x0008D0        FD000030 81420000        r2 = r0 AND 0x300000;
0x0008D2        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x0008D3        8155FFFB                 r3 = r3 AND 0xfffb;
0x0008D4        8D44006B                 r2 = r2 LSHIFT -21;
0x0008D5        8D440002                 r2 = r2 LSHIFT 2;
0x0008D6        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x0008D7        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x0008D9        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x0008DA        8155FFF7                 r3 = r3 AND 0xfff7;
0x0008DB        8D44006D                 r2 = r2 LSHIFT -19;
0x0008DC        8D440003                 r2 = r2 LSHIFT 3;
0x0008DD        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x0008DE        FD000003 81428000        r2 = r0 AND 0x38000;
0x0008E0        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x0008E1        8155FFFC                 r3 = r3 AND 0xfffc;
0x0008E2        8D440070                 r2 = r2 LSHIFT -16;
0x0008E3        8D440000                 r2 = r2 LSHIFT 0;
0x0008E4        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x0008E5        D553FE7B                 M[r1 + -389] = r3;
0x0008E6        09401F64                 r2 = Null + M[$cbuffer.tmp];
0x0008E7        09501F65                 r3 = Null + M[0x1f65];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x0008E8        8122001F                 r0 = r0 AND 0x1f;
0x0008E9        01300005                 r1 = Null + 5;
0x0008EA        65020007                 Null = 7 - r0;
0x0008EB        00220034                 if NEG r0 = r0 + r1;
0x0008EC        0122FE2B                 r0 = r0 + -469;
0x0008ED        E430002F                 r1 = Null + 1;
0x0008EE        DC0D000F                 rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x0008EF        19001F8F                 M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x0008F0        D14A0002                 r2 = M[r8 + 2];
0x0008F1        DC0D0000                 if EQ rts;
0x0008F2        51800001                 M0 = Null + 1;
0x0008F3        5020004F                 I2 = Null + r2;
0x0008F4        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x0008F5        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x0008F6        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x0008F7        67180000                 rMAC = rMAC - M0;
0x0008F8        00100004                 if NEG rMAC = Null + Null;
0x0008F9        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x0008FA        00710005                 if POS r5 = rMAC + Null;
0x0008FB        D16A0006                 r4 = M[r8 + 6];
0x0008FC        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x0008FD        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x0008FE        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x0008FF        67180000                 rMAC = rMAC - M0;
0x000900        00100004                 if NEG rMAC = Null + Null;
0x000901        2007001F                 Null = r5 - rMAC;
0x000902        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x000903        D10A000F                 Null = M[r8 + 15];
0x000904        DC0D0001                 if NE rts;
0x000905        F3D00000                 push rLink;
0x000906        D15A0002                 r3 = M[r8 + 2];
0x000907        D55A000F                 M[r8 + 15] = r3;
0x000908        016A0010                 r4 = r8 + 16;
0x000909        512A000B                 I2 = r8 + 11;
0x00090A        51350005                 I3 = r3 + 5;
0x00090B        D1050004                 Null = M[r3 + 4];
0x00090C        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x00090D        512A0007                 I2 = r8 + 7;
0x00090E        E1F002AC                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x00090F        5F380000                 I3 = I3 + M0;
0x000910        E1F002AA                 call $reset_iir_resampler;
0x000911        50C0000F                 L0 = Null + Null;
0x000912        DDF0042E                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x000913        F3D00000                 push rLink;
0x000914        E1F003E5                 call $block_interrupts;
0x000915        01C00032                 r10 = Null + 50;
0x000916        FD0000FF 01604F85        r4 = Null + -45179;
0x000918        FD0000FF 09204F85        r0 = Null + M[$timer.last_addr];
0x00091A        E5F00008                 do $M.timer.schedule_event_at.loop;
0x00091B        E402002F                 Null = r0 + 1;
0x00091C        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x00091D        D1720001                 r5 = M[r0 + 1];
0x00091E        2004007F                 Null = r2 - r5;
0x00091F        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000920        0062000F                 r4 = r0 + Null;
0x000921        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x000922        E1F0131B                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x000923        D5360000                 M[r4 + 0] = r1;
0x000924        D5230000                 M[r1 + 0] = r0;
0x000925        D5430001                 M[r1 + 1] = r2;
0x000926        D5530002                 M[r1 + 2] = r3;
0x000927        09501F85                 r3 = Null + M[$timer.id];
0x000928        D5530003                 M[r1 + 3] = r3;
0x000929        E425002F                 r0 = r3 + 1;
0x00092A        20200050                 if EQ r0 = Null - r3;
0x00092B        19201F85                 M[$timer.id] = r0 + Null;
0x00092C        0900FE1F                 Null = Null + M[0xfffe1f];
0x00092D        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x00092E        2904FE21                 Null = r2 - M[0xfffe21];
0x00092F        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x000930        1940FE21                 M[0xfffe21] = r2 + Null;
0x000931        E420002F                 r0 = Null + 1;
0x000932        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x000933        E1F003B6                 call $interrupt.unblock;
0x000934        DDF0040C                 jump $pop_rLink_and_rts;

 <$detect_end_of_aux_stream>
0x000935        F3D00000                 push rLink;
0x000936        09501F6C                 r3 = Null + M[$aux_input_stream_available];
0x000937        DD000409                 if EQ jump $pop_rLink_and_rts;
0x000938        01201F40                 r0 = Null + 8000;
0x000939        E1F003A8                 call $cbuffer.calc_amount_data;
0x00093A        81050002                 Null = r3 AND 0x2;
0x00093B        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x00093C        0002000F                 Null = r0 + Null;
0x00093D        DD000403                 if EQ jump $pop_rLink_and_rts;
0x00093E        85550002                 r3 = r3 OR 0x2;
0x00093F        19501F6C                 M[$aux_input_stream_available] = r3 + Null;
0x000940        19001F71                 M[$no_tone_timer] = Null + Null;
0x000941        DDF003FF                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x000942        09301F71                 r1 = Null + M[$no_tone_timer];
0x000943        FD0000FF 09334F6E        r1 = r1 + M[$tmr_period_tone_copy];
0x000945        0002000F                 Null = r0 + Null;
0x000946        00300001                 if NE r1 = Null + Null;
0x000947        19301F71                 M[$no_tone_timer] = r1 + Null;
0x000948        21037530                 Null = r1 - 30000;
0x000949        DD4003F7                 if NEG jump $pop_rLink_and_rts;
0x00094A        01401080                 r2 = Null + 4224;
0x00094B        01500000                 r3 = Null + 0;
0x00094C        01600000                 r4 = Null + 0;
0x00094D        01700000                 r5 = Null + 0;
0x00094E        01800000                 r6 = Null + 0;
0x00094F        E1F00175                 call $message.send_short;
0x000950        19001F6C                 M[$aux_input_stream_available] = Null + Null;
0x000951        19001F71                 M[$no_tone_timer] = Null + Null;
0x000952        DDF003EE                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x000953        8132001F                 r1 = r0 AND 0x1f;
0x000954        2133000C                 r1 = r1 - 12;
0x000955        D1431AE3                 r2 = M[r1 + 6883];
0x000956        00200000                 if EQ r0 = Null + Null;
0x000957        DC0D0000                 if EQ rts;
0x000958        19501F64                 M[$cbuffer.tmp] = r3 + Null;
0x000959        D054000F                 r3 = M[r2 + Null];
0x00095A        FD0000FF D1434DB9        r2 = M[r1 + -45639];
0x00095C        D3400000                 r2 = M[r2 + Null];
0x00095D        23540000                 r3 = r3 - r2;
0x00095E        D1431ACB                 r2 = M[r1 + 6859];
0x00095F        E434003F                 r1 = r2 - 1;
0x000960        8035003F                 r1 = r3 AND r1;
0x000961        00340000                 if EQ r1 = r2 + Null;
0x000962        E433003F                 r1 = r1 - 1;
0x000963        09501F64                 r3 = Null + M[$cbuffer.tmp];
0x000964        FD000003 81228000        r0 = r0 AND 0x38000;
0x000966        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000967        FD000001 21028000        Null = r0 - 98304;
0x000969        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x00096A        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x00096B        FD000002 21028000        Null = r0 - 163840;
0x00096D        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x00096E        9123007E                 r0 = r1 ASHIFT -2;
0x00096F        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x000970        E423003F                 r0 = r1 - 1;
0x000971        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000972        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x000973        0023000F                 r0 = r1 + Null;
0x000974        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x000975        9123007F                 r0 = r1 ASHIFT -1;
0x000976        DC0D000F                 rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x000977        F3D00000                 push rLink;
0x000978        D1290000                 r0 = M[r7 + 0];
0x000979        E1F003A4                 call $frmbuffer.get_buffer;
0x00097A        5000002F                 I0 = Null + r0;
0x00097B        50C0003F                 L0 = Null + r1;
0x00097C        D1290001                 r0 = M[r7 + 1];
0x00097D        E1F003A0                 call $frmbuffer.get_buffer;
0x00097E        5040002F                 I4 = Null + r0;
0x00097F        50E0003F                 L4 = Null + r1;
0x000980        00C5000F                 r10 = r3 + Null;
0x000981        D1290002                 r0 = M[r7 + 2];
0x000982        E1F003BC                 call $frmbuffer.set_frame_size;
0x000983        E1F0039A                 call $frmbuffer.get_buffer;
0x000984        5010002F                 I1 = Null + r0;
0x000985        50D0003F                 L1 = Null + r1;
0x000986        005C000F                 r3 = r10 + Null;
0x000987        D1290003                 r0 = M[r7 + 3];
0x000988        E1F003B6                 call $frmbuffer.set_frame_size;
0x000989        E1F00394                 call $frmbuffer.get_buffer;
0x00098A        5050002F                 I5 = Null + r0;
0x00098B        50F0003F                 L5 = Null + r1;
0x00098C        F3D40000                 pop rLink;
0x00098D        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x00098E        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x00098F        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x000990        50C0000F                 L0 = Null + Null;
0x000991        50D0000F                 L1 = Null + Null;
0x000992        50E0000F                 L4 = Null + Null;
0x000993        50F0000F                 L5 = Null + Null;
0x000994        DC0D000F                 rts;

 <$cbops.noise_gate.main>
0x000995        D12A0000                 r0 = M[r8 + 0];
0x000996        D038002F                 r1 = M[r6 + r0];
0x000997        5000003F                 I0 = Null + r1;
0x000998        D039002F                 r1 = M[r7 + r0];
0x000999        50C0003F                 L0 = Null + r1;
0x00099A        D12A0001                 r0 = M[r8 + 1];
0x00099B        D038002F                 r1 = M[r6 + r0];
0x00099C        5040003F                 I4 = Null + r1;
0x00099D        D039002F                 r1 = M[r7 + r0];
0x00099E        50E0003F                 L4 = Null + r1;
0x00099F        D13A0002                 r1 = M[r8 + 2];
0x0009A0        D14A0003                 r2 = M[r8 + 3];
0x0009A1        0950005E                 r3 = Null + M[$cbops.noise_gate.monostable_count_init];
0x0009A2        E5F00011                 do $M.cbops.noise_gate.main.loop;
0x0009A3        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0009A4        0021000F                 r0 = rMAC + Null;
0x0009A5        20200024                 if NEG r0 = Null - r0;
0x0009A6        2902005D                 Null = r0 - M[$cbops.noise_gate.monostable_trigger_level];
0x0009A7        00350005                 if POS r1 = r3 + Null;
0x0009A8        E433003F                 r1 = r1 - 1;
0x0009A9        00300004                 if NEG r1 = Null + Null;
0x0009AA        DD000005                 if EQ jump $M.cbops.noise_gate.main.noise_gate_decay;

 <$M.cbops.noise_gate.main.noise_gate_attack>
0x0009AB        0924006C                 r0 = r2 + M[$cbops.noise_gate.attack_step];
0x0009AC        DD400006                 if NEG jump $M.cbops.noise_gate.main.noise_gate_off;
0x0009AD        0042000F                 r2 = r0 + Null;
0x0009AE        DDF00003                 jump $M.cbops.noise_gate.main.noise_gate_active;

 <$M.cbops.noise_gate.main.noise_gate_decay>
0x0009AF        2944005F                 r2 = r2 - M[$cbops.noise_gate.decay_step];
0x0009B0        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.noise_gate.main.noise_gate_active>
0x0009B1        97140000                 rMAC = rMAC * r2 (frac);

 <$M.cbops.noise_gate.main.noise_gate_off>
0x0009B2        03000091                 Null = Null + Null, M[I4,1] = rMAC;

 <$M.cbops.noise_gate.main.loop>
0x0009B3        D53A0002                 M[r8 + 2] = r1;
0x0009B4        D54A0003                 M[r8 + 3] = r2;
0x0009B5        51C00000                 L0 = Null + 0;
0x0009B6        51E00000                 L4 = Null + 0;
0x0009B7        DC0D000F                 rts;

 <$cbops.shift_24bit.main>
0x0009B8        51800001                 M0 = Null + 1;
0x0009B9        DDF00002                 jump $M.cbops.shift.main.ready;

 <$cbops.shift.main>
0x0009BA        51800000                 M0 = Null + 0;

 <$M.cbops.shift.main.ready>
0x0009BB        D12A0000                 r0 = M[r8 + 0];
0x0009BC        D038002F                 r1 = M[r6 + r0];
0x0009BD        5000003F                 I0 = Null + r1;
0x0009BE        D039002F                 r1 = M[r7 + r0];
0x0009BF        50C0003F                 L0 = Null + r1;
0x0009C0        D12A0001                 r0 = M[r8 + 1];
0x0009C1        D038002F                 r1 = M[r6 + r0];
0x0009C2        5040003F                 I4 = Null + r1;
0x0009C3        D039002F                 r1 = M[r7 + r0];
0x0009C4        50E0003F                 L4 = Null + r1;
0x0009C5        D14A0002                 r2 = M[r8 + 2];
0x0009C6        E4CC003F                 r10 = r10 - 1;
0x0009C7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0009C8        93240000                 r0 = r0 ASHIFT r2;
0x0009C9        47080000                 Null = Null + M0;
0x0009CA        DD100005                 if NE jump $M.cbops.shift.main.do_double_write;
0x0009CB        E5F00003                 do $M.cbops.shift.main.loop;
0x0009CC        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x0009CD        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x0009CE        DDF0000A                 jump $M.cbops.shift.main.done;

 <$M.cbops.shift.main.do_double_write>
0x0009CF        8D320008                 r1 = r0 LSHIFT 8;
0x0009D0        8D220078                 r0 = r0 LSHIFT -8;
0x0009D1        E5F00006                 do $M.cbops.shift.main.two_write_loop;
0x0009D2        030051B1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r1;
0x0009D3        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0009D4        93540000                 r3 = r3 ASHIFT r2;
0x0009D5        8D350008                 r1 = r3 LSHIFT 8;
0x0009D6        8D250078                 r0 = r3 LSHIFT -8;

 <$M.cbops.shift.main.two_write_loop>
0x0009D7        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.shift.main.done>
0x0009D8        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x0009D9        51E00000                 L4 = Null + 0;
0x0009DA        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x0009DB        8132001F                 r1 = r0 AND 0x1f;
0x0009DC        D1431AD7                 r2 = M[r1 + 6871];
0x0009DD        00200000                 if EQ r0 = Null + Null;
0x0009DE        DC0D0000                 if EQ rts;
0x0009DF        D3400000                 r2 = M[r2 + Null];
0x0009E0        19501F64                 M[$cbuffer.tmp] = r3 + Null;
0x0009E1        FD0000FF D1534DAD        r3 = M[r1 + -45651];
0x0009E3        D3500000                 r3 = M[r3 + Null];
0x0009E4        2054005F                 r3 = r2 - r3;
0x0009E5        D1431ABF                 r2 = M[r1 + 6847];
0x0009E6        E434003F                 r1 = r2 - 1;
0x0009E7        8035003F                 r1 = r3 AND r1;
0x0009E8        09501F64                 r3 = Null + M[$cbuffer.tmp];
0x0009E9        FD000003 81228000        r0 = r0 AND 0x38000;
0x0009EB        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0009EC        FD000001 21028000        Null = r0 - 98304;
0x0009EE        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0009EF        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x0009F0        FD000002 21028000        Null = r0 - 163840;
0x0009F2        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x0009F3        9123007E                 r0 = r1 ASHIFT -2;
0x0009F4        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x0009F5        E423003F                 r0 = r1 - 1;
0x0009F6        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0009F7        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x0009F8        0023000F                 r0 = r1 + Null;
0x0009F9        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x0009FA        9123007F                 r0 = r1 ASHIFT -1;
0x0009FB        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x0009FC        5020009F                 I2 = Null + r7;
0x0009FD        51900001                 M1 = Null + 1;
0x0009FE        F3D00000                 push rLink;
0x0009FF        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x000A00        E1F0031D                 call $frmbuffer.get_buffer;
0x000A01        5000002F                 I0 = Null + r0;
0x000A02        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x000A03        E1F0031A                 call $frmbuffer.get_buffer;
0x000A04        5010002F                 I1 = Null + r0;
0x000A05        50D0003F                 L1 = Null + r1;
0x000A06        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x000A07        E1F00337                 call $frmbuffer.set_frame_size;
0x000A08        E1F00315                 call $frmbuffer.get_buffer;
0x000A09        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x000A0A        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x000A0B        F3D40000                 pop rLink;
0x000A0C        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x000A0D        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x000A0E        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x000A0F        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x000A10        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x000A11        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x000A12        9041008F                 r2 = rMAC ASHIFT r6;
0x000A13        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x000A14        51C00000                 L0 = Null + 0;
0x000A15        51D00000                 L1 = Null + 0;
0x000A16        51E00000                 L4 = Null + 0;
0x000A17        DC0D000F                 rts;

 <$audio_out_copy_handler>
0x000A18        F3D00000                 push rLink;
0x000A19        19001F92                 M[$frame_sync.sync_flag] = Null + Null;
0x000A1A        FD000080 0120000D        r0 = Null + -8388595;
0x000A1C        E1F002EB                 call $cbuffer.is_it_enabled;
0x000A1D        DD000008                 if EQ jump $M.audio_out_copy_handler.mono;
0x000A1E        FD0000FF 01A04E9C        r8 = Null + -45412;
0x000A20        E1F0F9F1                 call $cbops.copy;
0x000A21        FD0000FF 01A04E8E        r8 = Null + -45426;
0x000A23        E1F00AC3                 call $cbops.dac_av_copy;
0x000A24        DDF00006                 jump $M.audio_out_copy_handler.repost;

 <$M.audio_out_copy_handler.mono>
0x000A25        01A01EDF                 r8 = Null + 7903;
0x000A26        E1F0F9EB                 call $cbops.copy;
0x000A27        FD0000FF 01A04EA9        r8 = Null + -45399;
0x000A29        E1F00ABD                 call $cbops.dac_av_copy;

 <$M.audio_out_copy_handler.repost>
0x000A2A        FD0000FF 01304EF8        r1 = Null + -45320;
0x000A2C        014001F4                 r2 = Null + 500;
0x000A2D        01500A18                 r3 = Null + 2584;
0x000A2E        E1F00305                 call $timer.schedule_event_in_period;
0x000A2F        DDF00311                 jump $pop_rLink_and_rts;

 <$pskey.result_message_handler>
0x000A30        FD000000 21028008        Null = r0 - 32776;
0x000A32        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x000A33        D035000F                 r1 = M[r3 + Null];
0x000A34        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000A35        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000A36        19001F84                 M[$pskey.request_in_progress] = Null + Null;
0x000A37        FD0000FF 01704F84        r5 = Null + -45180;
0x000A39        FD0000FF 09204F84        r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000A3B        D1620001                 r4 = M[r0 + 1];
0x000A3C        2003006F                 Null = r1 - r4;
0x000A3D        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000A3E        0072000F                 r5 = r0 + Null;
0x000A3F        D1220000                 r0 = M[r0 + 0];
0x000A40        E402002F                 Null = r0 + 1;
0x000A41        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x000A42        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x000A43        F3D00000                 push rLink;
0x000A44        D1620000                 r4 = M[r0 + 0];
0x000A45        D5670000                 M[r5 + 0] = r4;
0x000A46        D1220002                 r0 = M[r0 + 2];
0x000A47        E002000F                 call r0;
0x000A48        FD0000FF 09304F84        r1 = Null + M[$pskey.last_addr];
0x000A4A        E403002F                 Null = r1 + 1;
0x000A4B        E1100090                 if NE call $pskey.private.send_request;
0x000A4C        DDF002F4                 jump $pop_rLink_and_rts;

 <$cbops.copy_op_24bit_audio.main>
0x000A4D        51800001                 M0 = Null + 1;
0x000A4E        DDF00002                 jump $M.cbops.copy_op.main.ready;

 <$cbops.copy_op.main>
0x000A4F        51800000                 M0 = Null + 0;

 <$M.cbops.copy_op.main.ready>
0x000A50        D12A0000                 r0 = M[r8 + 0];
0x000A51        D038002F                 r1 = M[r6 + r0];
0x000A52        5000003F                 I0 = Null + r1;
0x000A53        D039002F                 r1 = M[r7 + r0];
0x000A54        50C0003F                 L0 = Null + r1;
0x000A55        D12A0001                 r0 = M[r8 + 1];
0x000A56        D038002F                 r1 = M[r6 + r0];
0x000A57        5040003F                 I4 = Null + r1;
0x000A58        D039002F                 r1 = M[r7 + r0];
0x000A59        50E0003F                 L4 = Null + r1;
0x000A5A        E4CC003F                 r10 = r10 - 1;
0x000A5B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000A5C        47080000                 Null = Null + M0;
0x000A5D        DD100004                 if NE jump $M.cbops.copy_op.main.do_double_write;
0x000A5E        E5F00002                 do $M.cbops.copy_op.main.loop;
0x000A5F        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x000A60        DDF00009                 jump $M.cbops.copy_op.main.done;

 <$M.cbops.copy_op.main.do_double_write>
0x000A61        8D320008                 r1 = r0 LSHIFT 8;
0x000A62        8D220078                 r0 = r0 LSHIFT -8;
0x000A63        E5F00005                 do $M.cbops.copy_op.main.two_write_loop;
0x000A64        030041B1                 Null = Null + Null, r2 = M[I0,1], M[I4,1] = r1;
0x000A65        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x000A66        8D340008                 r1 = r2 LSHIFT 8;
0x000A67        8D240078                 r0 = r2 LSHIFT -8;

 <$M.cbops.copy_op.main.two_write_loop>
0x000A68        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.cbops.copy_op.main.done>
0x000A69        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000A6A        51E00000                 L4 = Null + 0;
0x000A6B        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x000A6C        D12A0000                 r0 = M[r8 + 0];
0x000A6D        D038002F                 r1 = M[r6 + r0];
0x000A6E        5000003F                 I0 = Null + r1;
0x000A6F        D039002F                 r1 = M[r7 + r0];
0x000A70        50C0003F                 L0 = Null + r1;
0x000A71        D12A0001                 r0 = M[r8 + 1];
0x000A72        D038002F                 r1 = M[r6 + r0];
0x000A73        5040003F                 I4 = Null + r1;
0x000A74        D039002F                 r1 = M[r7 + r0];
0x000A75        50E0003F                 L4 = Null + r1;
0x000A76        D12A0002                 r0 = M[r8 + 2];
0x000A77        D038002F                 r1 = M[r6 + r0];
0x000A78        5050003F                 I5 = Null + r1;
0x000A79        D039002F                 r1 = M[r7 + r0];
0x000A7A        50F0003F                 L5 = Null + r1;
0x000A7B        D14A0003                 r2 = M[r8 + 3];
0x000A7C        8DCC007F                 r10 = r10 LSHIFT -1;
0x000A7D        FD0000FF 19C04F87        M[$cbops.amount_written] = r10 + Null;
0x000A7F        E4CC003F                 r10 = r10 - 1;
0x000A80        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000A81        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x000A82        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000A83        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000A84        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x000A85        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000A86        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000A87        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x000A88        51F00000                 L5 = Null + 0;
0x000A89        DC0D000F                 rts;

 <$cbops.dc_remove.main>
0x000A8A        D12A0000                 r0 = M[r8 + 0];
0x000A8B        D038002F                 r1 = M[r6 + r0];
0x000A8C        5000003F                 I0 = Null + r1;
0x000A8D        D039002F                 r1 = M[r7 + r0];
0x000A8E        50C0003F                 L0 = Null + r1;
0x000A8F        D12A0001                 r0 = M[r8 + 1];
0x000A90        D038002F                 r1 = M[r6 + r0];
0x000A91        5040003F                 I4 = Null + r1;
0x000A92        D039002F                 r1 = M[r7 + r0];
0x000A93        50E0003F                 L4 = Null + r1;
0x000A94        D11A0002                 rMAC = M[r8 + 2];
0x000A95        013009D5                 r1 = Null + 2517;
0x000A96        FD000080 01500000        r3 = Null + -8388608;
0x000A98        2045003F                 r2 = r3 - r1;
0x000A99        E4CC003F                 r10 = r10 - 1;
0x000A9A        CF142100                 rMAC = rMAC * r2 (SS), r0 = M[I0,1];
0x000A9B        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000A9C        23210000                 r0 = r0 - rMAC;
0x000A9D        9C220056                 if V r0 = r0 * r3 (int) (sat);
0x000A9E        E5F00005                 do $M.cbops.dc_remove.main.loop;
0x000A9F        CF1421A1                 rMAC = rMAC * r2 (SS), r0 = M[I0,1], M[I4,1] = r0;
0x000AA0        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000AA1        23210000                 r0 = r0 - rMAC;
0x000AA2        9C220056                 if V r0 = r0 * r3 (int) (sat);

 <$M.cbops.dc_remove.main.loop>
0x000AA3        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x000AA4        51E00000                 L4 = Null + 0;
0x000AA5        D51A0002                 M[r8 + 2] = rMAC;
0x000AA6        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x000AA7        01300019                 r1 = Null + 25;
0x000AA8        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x000AA9        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000AAA        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AAB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AAC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AAD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AAE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AAF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB1        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000AB2        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000AB3        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000AB4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AB9        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000ABA        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000ABB        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000ABC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000ABD        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000ABE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000ABF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AC0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AC1        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000AC2        93E30000                 rMAC = rMAC ASHIFT r1;
0x000AC3        DC0D000F                 rts;

 <$message.send_short>
0x000AC4        F3D00000                 push rLink;
0x000AC5        E1F00234                 call $block_interrupts;
0x000AC6        09301F82                 r1 = Null + M[$message.queue_write_ptr];
0x000AC7        01230005                 r0 = r1 + 5;
0x000AC8        2102006E                 Null = r0 - 110;
0x000AC9        00200000                 if EQ r0 = Null + Null;
0x000ACA        FD0000FF 29024F81        Null = r0 - M[$message.queue_read_ptr];
0x000ACC        DD00000D                 if EQ jump $M.message.send_short.all_done;
0x000ACD        19201F82                 M[$message.queue_write_ptr] = r0 + Null;
0x000ACE        FD0000FF D5434B5A        M[r1 + -46246] = r2;
0x000AD0        FD0000FF D5534B5B        M[r1 + -46245] = r3;
0x000AD2        FD0000FF D5634B5C        M[r1 + -46244] = r4;
0x000AD4        FD0000FF D5734B5D        M[r1 + -46243] = r5;
0x000AD6        FD0000FF D5834B5E        M[r1 + -46242] = r6;
0x000AD8        E1F0FCEA                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x000AD9        E1F00210                 call $interrupt.unblock;
0x000ADA        DDF00266                 jump $pop_rLink_and_rts;

 <$pskey.private.send_request>
0x000ADB        09001F84                 Null = Null + M[$pskey.request_in_progress];
0x000ADC        DC0D0001                 if NE rts;
0x000ADD        F3D00000                 push rLink;
0x000ADE        09401F2B                 r2 = Null + M[0x1f2b];
0x000ADF        E1F00073                 call $timer.cancel_event;
0x000AE0        E1F00220                 call $message.send_queue_space;
0x000AE1        21020005                 Null = r0 - 5;
0x000AE2        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x000AE3        FD0000FF 09304F84        r1 = Null + M[$pskey.last_addr];
0x000AE5        85408006                 r2 = Null OR 0x8006;
0x000AE6        D1530001                 r3 = M[r1 + 1];
0x000AE7        E1F0FFDD                 call $message.send_short;
0x000AE8        E420002F                 r0 = Null + 1;
0x000AE9        19201F84                 M[$pskey.request_in_progress] = r0 + Null;
0x000AEA        DDF00256                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x000AEB        01301F28                 r1 = Null + 7976;
0x000AEC        01402710                 r2 = Null + 10000;
0x000AED        01500ADB                 r3 = Null + 2779;
0x000AEE        E1F00248                 call $timer.schedule_event_in;
0x000AEF        DDF00251                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x000AF0        01300017                 r1 = Null + 23;
0x000AF1        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x000AF2        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000AF3        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AF9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AFA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AFB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AFC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000AFD        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000AFE        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000AFF        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000B00        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B01        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B02        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B03        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B04        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B05        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B06        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B07        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B08        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000B09        93E30000                 rMAC = rMAC ASHIFT r1;
0x000B0A        DC0D000F                 rts;

 <$timer.service_routine>
0x000B0B        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000B0C        FD0000FF 09304F85        r1 = Null + M[$timer.last_addr];
0x000B0E        E403002F                 Null = r1 + 1;
0x000B0F        DD000012                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000B10        D1230001                 r0 = M[r1 + 1];
0x000B11        2942FE71                 r2 = r0 - M[0xfffe71];
0x000B12        21040000                 Null = r2 - 0;
0x000B13        DDC00009                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000B14        D1D30002                 rLink = M[r1 + 2];
0x000B15        D1230003                 r0 = M[r1 + 3];
0x000B16        D5030003                 M[r1 + 3] = Null;
0x000B17        D1430000                 r2 = M[r1 + 0];
0x000B18        FD0000FF 19404F85        M[$timer.last_addr] = r2 + Null;
0x000B1A        E00D000F                 call rLink;
0x000B1B        DDF0FFF1                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000B1C        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000B1D        1920FE21                 M[0xfffe21] = r0 + Null;
0x000B1E        E450002F                 r3 = Null + 1;
0x000B1F        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000B20        DDF00220                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x000B21        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000B22        DDF0021E                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x000B23        01300015                 r1 = Null + 21;
0x000B24        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x000B25        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000B26        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B27        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B28        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B29        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B2A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B2B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B2C        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000B2D        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000B2E        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000B2F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B30        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B31        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B32        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B33        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000B34        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000B35        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000B36        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B37        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B38        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000B39        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000B3A        93E30000                 rMAC = rMAC ASHIFT r1;
0x000B3B        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x000B3C        F3D00000                 push rLink;
0x000B3D        51900001                 M1 = Null + 1;
0x000B3E        E1F001BB                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000B3F        D0B9000F                 r9 = M[r7 + Null];
0x000B40        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000B41        D14B0006                 r2 = M[r9 + 6];
0x000B42        D12B0000                 r0 = M[r9 + 0];
0x000B43        D1320000                 r1 = M[r0 + 0];
0x000B44        D16B0003                 r4 = M[r9 + 3];
0x000B45        50D0003F                 L1 = Null + r1;
0x000B46        E004000F                 call r2;
0x000B47        5080006F                 M0 = Null + r4;
0x000B48        D042000F                 r2 = M[r0 + Null];
0x000B49        5010004F                 I1 = Null + r2;
0x000B4A        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000B4B        4440001F                 r2 = Null + I1;
0x000B4C        1824000F                 M[r0] = r2 + Null;
0x000B4D        E499002F                 r7 = r7 + 1;
0x000B4E        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000B4F        E1F0019A                 call $interrupt.unblock;
0x000B50        50D0000F                 L1 = Null + Null;
0x000B51        DDF001EF                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x000B52        F3D00000                 push rLink;
0x000B53        E1F001A6                 call $block_interrupts;
0x000B54        01C00032                 r10 = Null + 50;
0x000B55        FD0000FF 01604F85        r4 = Null + -45179;
0x000B57        FD0000FF 09204F85        r0 = Null + M[$timer.last_addr];
0x000B59        E5F00008                 do $M.timer.cancel_event.loop;
0x000B5A        E402002F                 Null = r0 + 1;
0x000B5B        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x000B5C        D1720003                 r5 = M[r0 + 3];
0x000B5D        2004007F                 Null = r2 - r5;
0x000B5E        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x000B5F        0062000F                 r4 = r0 + Null;
0x000B60        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x000B61        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x000B62        D1320000                 r1 = M[r0 + 0];
0x000B63        D5360000                 M[r4 + 0] = r1;
0x000B64        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x000B65        E1F00184                 call $interrupt.unblock;
0x000B66        DDF001DA                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x000B67        D5CB0008                 M[r9 + 8] = r10;
0x000B68        D14B000A                 r2 = M[r9 + 10];
0x000B69        200400CF                 Null = r2 - r10;
0x000B6A        004C0005                 if POS r2 = r10 + Null;
0x000B6B        D15B000B                 r3 = M[r9 + 11];
0x000B6C        200500CF                 Null = r3 - r10;
0x000B6D        005C0004                 if NEG r3 = r10 + Null;
0x000B6E        D1CB0007                 r10 = M[r9 + 7];
0x000B6F        67C90000                 r10 = r10 - M1;
0x000B70        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x000B71        D54B000A                 M[r9 + 10] = r2;
0x000B72        D55B000B                 M[r9 + 11] = r3;
0x000B73        D5CB0007                 M[r9 + 7] = r10;
0x000B74        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x000B75        D50B000B                 M[r9 + 11] = Null;
0x000B76        D56B000A                 M[r9 + 10] = r4;
0x000B77        D1CB0004                 r10 = M[r9 + 4];
0x000B78        23540000                 r3 = r3 - r2;
0x000B79        035C0000                 r3 = r3 + r10;
0x000B7A        00500004                 if NEG r3 = Null + Null;
0x000B7B        D55B0009                 M[r9 + 9] = r3;
0x000B7C        01C00078                 r10 = Null + 120;
0x000B7D        D5CB0007                 M[r9 + 7] = r10;
0x000B7E        DC0D000F                 rts;

 <$frame_sync.distribute_streams_ind>
0x000B7F        F3D00000                 push rLink;
0x000B80        E1F00179                 call $block_interrupts;
0x000B81        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x000B82        D0B9000F                 r9 = M[r7 + Null];
0x000B83        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x000B84        D15B0005                 r3 = M[r9 + 5];
0x000B85        D12B0000                 r0 = M[r9 + 0];
0x000B86        D1320000                 r1 = M[r0 + 0];
0x000B87        D1820001                 r6 = M[r0 + 1];
0x000B88        D1A20002                 r8 = M[r0 + 2];
0x000B89        50D0003F                 L1 = Null + r1;
0x000B8A        D16B0003                 r4 = M[r9 + 3];
0x000B8B        D56B0002                 M[r9 + 2] = r4;
0x000B8C        E005000F                 call r3;
0x000B8D        D58B0001                 M[r9 + 1] = r6;
0x000B8E        E499002F                 r7 = r7 + 1;
0x000B8F        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x000B90        E1F00159                 call $interrupt.unblock;
0x000B91        50D0000F                 L1 = Null + Null;
0x000B92        DDF001AE                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x000B93        F3D00000                 push rLink;
0x000B94        D1820002                 r6 = M[r0 + 2];
0x000B95        D1A20001                 r8 = M[r0 + 1];
0x000B96        20C800AF                 r10 = r6 - r8;
0x000B97        00CC0034                 if NEG r10 = r10 + r1;
0x000B98        E1F0FFCF                 call $frame_sync.analyze_stream_ind;
0x000B99        D15B0008                 r3 = M[r9 + 8];
0x000B9A        D14B0009                 r2 = M[r9 + 9];
0x000B9B        23540000                 r3 = r3 - r2;
0x000B9C        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x000B9D        D14B0004                 r2 = M[r9 + 4];
0x000B9E        9144007F                 r2 = r2 ASHIFT -1;
0x000B9F        03540000                 r3 = r3 + r2;
0x000BA0        2006005F                 Null = r4 - r3;
0x000BA1        00560004                 if NEG r3 = r4 + Null;
0x000BA2        D14B000C                 r2 = M[r9 + 12];
0x000BA3        23450000                 r2 = r2 - r3;
0x000BA4        D54B000C                 M[r9 + 12] = r2;
0x000BA5        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x000BA6        01220002                 r0 = r0 + 2;
0x000BA7        DDF00199                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x000BA8        F3D00000                 push rLink;
0x000BA9        E1F00150                 call $block_interrupts;
0x000BAA        D5430001                 M[r1 + 1] = r2;
0x000BAB        D5530002                 M[r1 + 2] = r3;
0x000BAC        E450003F                 r3 = Null - 1;
0x000BAD        D5530000                 M[r1 + 0] = r3;
0x000BAE        FD0000FF 01204F84        r0 = Null + -45180;

 <$M.pskey.read_key.find_end_of_list>
0x000BB0        0042000F                 r2 = r0 + Null;
0x000BB1        D1240000                 r0 = M[r2 + 0];
0x000BB2        E402002F                 Null = r0 + 1;
0x000BB3        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x000BB4        D5340000                 M[r2 + 0] = r1;
0x000BB5        FD0000FF 21044F84        Null = r2 - -45180;
0x000BB7        E100FF24                 if EQ call $pskey.private.send_request;
0x000BB8        E1F00131                 call $interrupt.unblock;
0x000BB9        DDF00187                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x000BBA        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000BBB        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x000BBC        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000BBD        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000BBE        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x000BBF        03650000                 r4 = r4 + r3;
0x000BC0        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x000BC1        03620000                 r4 = r4 + r0;
0x000BC2        59330004                 I3 = I3 + 4;
0x000BC3        00C2000F                 r10 = r0 + Null;
0x000BC4        DC0D0000                 if EQ rts;
0x000BC5        5000003F                 I0 = Null + r1;
0x000BC6        59330002                 I3 = I3 + 2;
0x000BC7        F2D03C00                 push rLink, r1 = M[I3,M0];
0x000BC8        21330002                 r1 = r1 - 2;
0x000BC9        E003000F                 call r1;
0x000BCA        5B330000                 I3 = I3 + r1;
0x000BCB        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x000BCC        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x000BCD        DDF00173                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x000BCE        F3D00000                 push rLink;
0x000BCF        01A01BEC                 r8 = Null + 7148;
0x000BD0        FD0000FF 01903EFA        r7 = Null + -49414;
0x000BD2        FD0000FF 09004F68        Null = Null + M[$stereo_tone];
0x000BD4        00A90001                 if NE r8 = r7 + Null;
0x000BD5        E1F0F83C                 call $cbops.copy;
0x000BD6        E1F0FD5F                 call $detect_end_of_aux_stream;
0x000BD7        FD0000FF 01304EFC        r1 = Null + -45316;
0x000BD9        FD0000FF 09404F6E        r2 = Null + M[$tmr_period_tone_copy];
0x000BDB        01500BCE                 r3 = Null + 3022;
0x000BDC        E1F00157                 call $timer.schedule_event_in_period;
0x000BDD        DDF00163                 jump $pop_rLink_and_rts;

 <$cbops.switch_op.helper>
0x000BDE        E440002F                 r2 = Null + 1;
0x000BDF        D12A0000                 r0 = M[r8 + 0];
0x000BE0        D13A0002                 r1 = M[r8 + 2];
0x000BE1        00340000                 if EQ r1 = r2 + Null;
0x000BE2        D3200000                 r0 = M[r0 + Null];
0x000BE3        D14A0003                 r2 = M[r8 + 3];
0x000BE4        88220031                 if NE r0 = r0 XOR r1;
0x000BE5        83230000                 r0 = r0 AND r1;
0x000BE6        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x000BE7        D12A0001                 r0 = M[r8 + 1];
0x000BE8        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x000BE9        21AAFFFD                 r8 = r8 - -3;
0x000BEA        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x000BEB        D12AFFFE                 r0 = M[r8 + -2];
0x000BEC        E402002F                 Null = r0 + 1;
0x000BED        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x000BEE        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x000BEF        DC0D000F                 rts;

 <$math.log2_abs_table>
0x000BF0        D881000F                 r6 = SIGNDET rMAC;
0x000BF1        93E80000                 rMAC = rMAC ASHIFT r6;
0x000BF2        20100014                 if NEG rMAC = Null - rMAC;
0x000BF3        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x000BF4        D881000F                 r6 = SIGNDET rMAC;
0x000BF5        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x000BF6        E488002F                 r6 = r6 + 1;
0x000BF7        91880010                 r6 = r6 ASHIFT 16;
0x000BF8        8D310002                 r1 = rMAC LSHIFT 2;
0x000BF9        8D33006D                 r1 = r1 LSHIFT -19;
0x000BFA        8D210007                 r0 = rMAC LSHIFT 7;
0x000BFB        8D22007F                 r0 = r0 LSHIFT -1;
0x000BFC        D11301C0                 rMAC = M[r1 + 448];
0x000BFD        D13301C1                 r1 = M[r1 + 449];
0x000BFE        23310000                 r1 = r1 - rMAC;
0x000BFF        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x000C00        2021008F                 r0 = rMAC - r6;
0x000C01        DC0D000F                 rts;

 <$math.pow2_taylor>
0x000C02        F3010000                 push I0;
0x000C03        51000539                 I0 = Null + 1337;
0x000C04        91920070                 r7 = r0 ASHIFT -16;
0x000C05        8D820008                 r6 = r0 LSHIFT 8;
0x000C06        8D88007F                 r6 = r6 LSHIFT -1;
0x000C07        F3913100                 push M1, r1 = M[I0,1];
0x000C08        51900001                 M1 = Null + 1;
0x000C09        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x000C0A        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x000C0B        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x000C0C        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x000C0D        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x000C0E        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x000C0F        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x000C10        9023009F                 r0 = r1 ASHIFT r7;
0x000C11        F3950000                 pop M1;
0x000C12        F3050000                 pop I0;
0x000C13        DC0D000F                 rts;

 <$flash.copy_to_dm>
0x000C14        F3D00000                 push rLink;
0x000C15        0062000F                 r4 = r0 + Null;
0x000C16        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x000C17        0026000F                 r0 = r4 + Null;
0x000C18        0037000F                 r1 = r5 + Null;
0x000C19        E1F000D8                 call $flash.map_page_into_dm;
0x000C1A        00C3000F                 r10 = r1 + Null;
0x000C1B        5010002F                 I1 = Null + r0;
0x000C1C        E5F00003                 do $M.flash.copy_to_dm.loop;
0x000C1D        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000C1E        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x000C1F        03630000                 r4 = r4 + r1;
0x000C20        23730000                 r5 = r5 - r1;
0x000C21        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x000C22        DDF0011E                 jump $pop_rLink_and_rts;

 <$M.MUTE_CONTROL.Process.func>
0x000C23        F3D00000                 push rLink;
0x000C24        D1290000                 r0 = M[r7 + 0];
0x000C25        E1F000F8                 call $frmbuffer.get_buffer;
0x000C26        F3D40000                 pop rLink;
0x000C27        D1490001                 r2 = M[r7 + 1];
0x000C28        D1690002                 r4 = M[r7 + 2];
0x000C29        D3400000                 r2 = M[r2 + Null];
0x000C2A        23640000                 r4 = r4 - r2;
0x000C2B        DD100006                 if NE jump $M.MUTE_CONTROL.Process.loop_mute;
0x000C2C        00C5000F                 r10 = r3 + Null;
0x000C2D        5000002F                 I0 = Null + r0;
0x000C2E        50C0003F                 L0 = Null + r1;
0x000C2F        E5F00002                 do $M.MUTE_CONTROL.Process.loop_mute;
0x000C30        0300E100                 Null = Null + Null, M[I0,1] = r4;

 <$M.MUTE_CONTROL.Process.loop_mute>
0x000C31        51C00000                 L0 = Null + 0;
0x000C32        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x000C33        91820070                 r6 = r0 ASHIFT -16;
0x000C34        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x000C35        FD00007F 0120FFFE        r0 = Null + 8388606;
0x000C37        DC0D000F                 rts;

 <$math.pow2_table>
0x000C38        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x000C39        8D920008                 r7 = r0 LSHIFT 8;
0x000C3A        8D99006D                 r7 = r7 LSHIFT -19;
0x000C3B        E488002F                 r6 = r6 + 1;
0x000C3C        D13904C0                 r1 = M[r7 + 1216];
0x000C3D        D19904C1                 r7 = M[r7 + 1217];
0x000C3E        23930000                 r7 = r7 - r1;
0x000C3F        8D22000D                 r0 = r0 LSHIFT 13;
0x000C40        8D22007F                 r0 = r0 LSHIFT -1;
0x000C41        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x000C42        9023008F                 r0 = r1 ASHIFT r6;
0x000C43        DC0D000F                 rts;

 <$audio_in_copy_handler>
0x000C44        F3D00000                 push rLink;
0x000C45        FD0000FF 01A04ED0        r8 = Null + -45360;
0x000C47        E1F00B88                 call $cbops.adc_av_copy;
0x000C48        FD0000FF 01A04EDF        r8 = Null + -45345;
0x000C4A        E1F0F7C7                 call $cbops.copy;
0x000C4B        01301F04                 r1 = Null + 7940;
0x000C4C        014001F4                 r2 = Null + 500;
0x000C4D        01500C44                 r3 = Null + 3140;
0x000C4E        E1F000E5                 call $timer.schedule_event_in_period;
0x000C4F        DDF000F1                 jump $pop_rLink_and_rts;

 <$cbuffer.set_write_address.its_a_port>
0x000C50        F3D00000                 push rLink;
0x000C51        8122001F                 r0 = r0 AND 0x1f;
0x000C52        2122000C                 r0 = r0 - 12;
0x000C53        0900FE33                 Null = Null + M[0xfffe33];
0x000C54        FD0000FF 09004F7E        Null = Null + M[$cbuffer.auto_mcu_message];
0x000C56        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000C57        D1321AE3                 r1 = M[r0 + 6883];
0x000C58        2103F000                 Null = r1 - -4096;
0x000C59        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000C5A        85408003                 r2 = Null OR 0x8003;
0x000C5B        ED520001                 r3 = 0x1 ASHIFT r0;
0x000C5C        E1F0FE68                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x000C5D        DDF000E3                 jump $pop_rLink_and_rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x000C5E        F3D00000                 push rLink;
0x000C5F        D1290000                 r0 = M[r7 + 0];
0x000C60        E1F000BD                 call $frmbuffer.get_buffer;
0x000C61        5000002F                 I0 = Null + r0;
0x000C62        50C0003F                 L0 = Null + r1;
0x000C63        F3D40000                 pop rLink;
0x000C64        51900001                 M1 = Null + 1;
0x000C65        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x000C66        D1590001                 r3 = M[r7 + 1];
0x000C67        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x000C68        E466004F                 r4 = ABS r4;
0x000C69        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x000C6A        50C0000F                 L0 = Null + Null;
0x000C6B        D5590001                 M[r7 + 1] = r3;
0x000C6C        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x000C6D        F3D00000                 push rLink;
0x000C6E        8122001F                 r0 = r0 AND 0x1f;
0x000C6F        0900FE33                 Null = Null + M[0xfffe33];
0x000C70        FD0000FF 09004F7E        Null = Null + M[$cbuffer.auto_mcu_message];
0x000C72        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000C73        D1321AD7                 r1 = M[r0 + 6871];
0x000C74        2103F000                 Null = r1 - -4096;
0x000C75        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000C76        85408002                 r2 = Null OR 0x8002;
0x000C77        ED520001                 r3 = 0x1 ASHIFT r0;
0x000C78        E1F0FE4C                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x000C79        DDF000C7                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x000C7A        F3D00000                 push rLink;
0x000C7B        F3200000                 push r0;
0x000C7C        E1F00091                 call $cbuffer.get_read_address_and_size;
0x000C7D        5000002F                 I0 = Null + r0;
0x000C7E        50C0003F                 L0 = Null + r1;
0x000C7F        50B000CF                 M3 = Null + r10;
0x000C80        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x000C81        F3240000                 pop r0;
0x000C82        4430000F                 r1 = Null + I0;
0x000C83        E1F0009F                 call $cbuffer.set_read_address;
0x000C84        51C00000                 L0 = Null + 0;
0x000C85        DDF000BB                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x000C86        20C000CF                 r10 = Null - r10;
0x000C87        D14B0004                 r2 = M[r9 + 4];
0x000C88        9144007F                 r2 = r2 ASHIFT -1;
0x000C89        03C40000                 r10 = r10 + r2;
0x000C8A        D14B000C                 r2 = M[r9 + 12];
0x000C8B        034C0000                 r2 = r2 + r10;
0x000C8C        D54B000C                 M[r9 + 12] = r2;
0x000C8D        5010008F                 I1 = Null + r6;
0x000C8E        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x000C8F        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x000C90        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x000C91        03004500                 Null = Null + Null, r2 = M[I1,1];
0x000C92        4480001F                 r6 = Null + I1;
0x000C93        D5820001                 M[r0 + 1] = r6;
0x000C94        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x000C95        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x000C96        D036000F                 r1 = M[r4 + Null];
0x000C97        DD0000A9                 if EQ jump $pop_rLink_and_rts;
0x000C98        D1460001                 r2 = M[r4 + 1];
0x000C99        D1560002                 r3 = M[r4 + 2];
0x000C9A        D1260003                 r0 = M[r4 + 3];
0x000C9B        01660004                 r4 = r4 + 4;
0x000C9C        FD0000FF 19604F92        M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x000C9E        E002000F                 call r0;
0x000C9F        FD0000FF 09604F92        r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x000CA1        DDF0FFF5                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.update_input_streams_ind>
0x000CA2        D15B0008                 r3 = M[r9 + 8];
0x000CA3        D14B0009                 r2 = M[r9 + 9];
0x000CA4        23540000                 r3 = r3 - r2;
0x000CA5        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x000CA6        D14B0004                 r2 = M[r9 + 4];
0x000CA7        9144007F                 r2 = r2 ASHIFT -1;
0x000CA8        03540000                 r3 = r3 + r2;
0x000CA9        D14B000C                 r2 = M[r9 + 12];
0x000CAA        23450000                 r2 = r2 - r3;
0x000CAB        D54B000C                 M[r9 + 12] = r2;
0x000CAC        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x000CAD        E422002F                 r0 = r0 + 1;
0x000CAE        DC0D000F                 rts;

 <$frame_sync.distribute_output_stream_ind>
0x000CAF        501000AF                 I1 = Null + r8;
0x000CB0        238A0000                 r6 = r6 - r8;
0x000CB1        0088003D                 if LE r6 = r6 + r1;
0x000CB2        67890000                 r6 = r6 - M1;
0x000CB3        70A8006F                 M2 = r6 - r4;
0x000CB4        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x000CB5        444000AF                 r2 = Null + M2;
0x000CB6        D54B000C                 M[r9 + 12] = r2;
0x000CB7        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x000CB8        4480001F                 r6 = Null + I1;
0x000CB9        D5820002                 M[r0 + 2] = r6;
0x000CBA        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x000CBB        D1C90002                 r10 = M[r7 + 2];
0x000CBC        0189000A                 r6 = r7 + 10;
0x000CBD        D1590004                 r3 = M[r7 + 4];
0x000CBE        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x000CBF        D1280002                 r0 = M[r6 + 2];
0x000CC0        CC15002F                 rMAC = r3 * r0 (SS);
0x000CC1        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x000CC2        D5180003                 M[r6 + 3] = rMAC;
0x000CC3        D5180004                 M[r6 + 4] = rMAC;
0x000CC4        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x000CC5        D5090008                 M[r7 + 8] = Null;
0x000CC6        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x000CC7        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x000CC8        D076000F                 r5 = M[r4 + Null];
0x000CC9        DD000077                 if EQ jump $pop_rLink_and_rts;
0x000CCA        D1960001                 r7 = M[r4 + 1];
0x000CCB        D1A60002                 r8 = M[r4 + 2];
0x000CCC        01660003                 r4 = r4 + 3;
0x000CCD        F3600000                 push r4;
0x000CCE        E007000F                 call r5;
0x000CCF        F3640000                 pop r4;
0x000CD0        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x000CD1        D802000F                 Null = SIGNDET r0;
0x000CD2        DD00FC81                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x000CD3        D1420000                 r2 = M[r0 + 0];
0x000CD4        D1320002                 r1 = M[r0 + 2];
0x000CD5        D1220001                 r0 = M[r0 + 1];
0x000CD6        23230000                 r0 = r0 - r1;
0x000CD7        0022004D                 if LE r0 = r0 + r2;
0x000CD8        E422003F                 r0 = r0 - 1;
0x000CD9        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x000CDA        F3D00000                 push rLink;
0x000CDB        23A80000                 r8 = r8 - r6;
0x000CDC        00AA0034                 if NEG r8 = r8 + r1;
0x000CDD        20CA006F                 r10 = r8 - r4;
0x000CDE        E140FFA8                 if NEG call $frame_sync.distribute_read_insert_ind;
0x000CDF        E1F0FE88                 call $frame_sync.analyze_stream_ind;
0x000CE0        DDF00060                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x000CE1        D802000F                 Null = SIGNDET r0;
0x000CE2        DD00FCF9                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x000CE3        D1420000                 r2 = M[r0 + 0];
0x000CE4        D1320002                 r1 = M[r0 + 2];
0x000CE5        D1220001                 r0 = M[r0 + 1];
0x000CE6        2023002F                 r0 = r1 - r0;
0x000CE7        00220044                 if NEG r0 = r0 + r2;
0x000CE8        DC0D000F                 rts;

 <$interrupt.unblock>
0x000CE9        09201F80                 r0 = Null + M[$interrupt.block_count];
0x000CEA        E1000F53                 if EQ call $error;
0x000CEB        E422003F                 r0 = r0 - 1;
0x000CEC        19201F80                 M[$interrupt.block_count] = r0 + Null;
0x000CED        DC0D0001                 if NE rts;
0x000CEE        E420002F                 r0 = Null + 1;
0x000CEF        1920FE12                 M[0xfffe12] = r0 + Null;
0x000CF0        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x000CF1        9152007F                 r3 = r0 ASHIFT -1;
0x000CF2        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x000CF3        81520001                 r3 = r0 AND 0x1;
0x000CF4        65251000                 r0 = 4096 - r3;
0x000CF5        2023002F                 r0 = r1 - r0;
0x000CF6        20330025                 if POS r1 = r1 - r0;
0x000CF7        0125D000                 r0 = r3 + -12288;
0x000CF8        DC0D000F                 rts;

 <$block_interrupts>
0x000CF9        09201F80                 r0 = Null + M[$interrupt.block_count];
0x000CFA        E422002F                 r0 = r0 + 1;
0x000CFB        19201F80                 M[$interrupt.block_count] = r0 + Null;
0x000CFC        1900FE12                 M[0xfffe12] = Null + Null;
0x000CFD        03000000                 Null = Null + Null;
0x000CFE        03000000                 Null = Null + Null;
0x000CFF        DC0D000F                 rts;

 <$message.send_queue_space>
0x000D00        FD0000FF 09204F81        r0 = Null + M[$message.queue_read_ptr];
0x000D02        29221F82                 r0 = r0 - M[$message.queue_write_ptr];
0x000D03        E422003F                 r0 = r0 - 1;
0x000D04        DC0D0005                 if POS rts;
0x000D05        0122006E                 r0 = r0 + 110;
0x000D06        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x000D07        D802000F                 Null = SIGNDET r0;
0x000D08        DC0D0001                 if NE rts;
0x000D09        8122001F                 r0 = r0 AND 0x1f;
0x000D0A        FD0000FF D1024DAD        Null = M[r0 + -45651];
0x000D0C        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x000D0D        D802000F                 Null = SIGNDET r0;
0x000D0E        DD00FBB8                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x000D0F        D1320000                 r1 = M[r0 + 0];
0x000D10        D1220001                 r0 = M[r0 + 1];
0x000D11        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x000D12        D802000F                 Null = SIGNDET r0;
0x000D13        DD00FB62                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x000D14        D1320000                 r1 = M[r0 + 0];
0x000D15        D1220002                 r0 = M[r0 + 2];
0x000D16        DC0D000F                 rts;

 <$cbops.noise_gate.reset>
0x000D17        0920005E                 r0 = Null + M[$cbops.noise_gate.monostable_count_init];
0x000D18        D52A0002                 M[r8 + 2] = r0;
0x000D19        FD00007F 0120FFFF        r0 = Null + 8388607;
0x000D1B        D52A0003                 M[r8 + 3] = r0;
0x000D1C        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x000D1D        D1520002                 r3 = M[r0 + 2];
0x000D1E        D1420000                 r2 = M[r0 + 0];
0x000D1F        D1220001                 r0 = M[r0 + 1];
0x000D20        D1340000                 r1 = M[r2 + 0];
0x000D21        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x000D22        D802000F                 Null = SIGNDET r0;
0x000D23        DD00FF4A                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x000D24        D5320001                 M[r0 + 1] = r1;
0x000D25        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x000D26        D802000F                 Null = SIGNDET r0;
0x000D27        DD00FF29                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x000D28        D5320002                 M[r0 + 2] = r1;
0x000D29        DC0D000F                 rts;

 <$cbops.deinterleave.amount_to_use>
0x000D2A        8D77007F                 r5 = r5 LSHIFT -1;
0x000D2B        2007009F                 Null = r5 - r7;
0x000D2C        00790005                 if POS r5 = r7 + Null;
0x000D2D        8D770001                 r5 = r5 LSHIFT 1;
0x000D2E        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x000D2F        D5320002                 M[r0 + 2] = r1;
0x000D30        D5320001                 M[r0 + 1] = r1;
0x000D31        D5420000                 M[r0 + 0] = r2;
0x000D32        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x000D33        D1230001                 r0 = M[r1 + 1];
0x000D34        03420000                 r2 = r2 + r0;
0x000D35        DDF0FBDE                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x000D36        0944FE71                 r2 = r2 + M[0xfffe71];
0x000D37        DDF0FBDC                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x000D38        01500000                 r3 = Null + 0;
0x000D39        DDF0FEA5                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x000D3A        E450002F                 r3 = Null + 1;
0x000D3B        DDF0FEA3                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x000D3C        01500002                 r3 = Null + 2;
0x000D3D        DDF0FEA1                 jump $cbops.switch_op.helper;

 <$frmbuffer.set_frame_size>
0x000D3E        D5520002                 M[r0 + 2] = r3;
0x000D3F        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x000D40        F3D40000                 pop rLink;
0x000D41        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x000D42        D50A0002                 M[r8 + 2] = Null;
0x000D43        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x000D44        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x000D45        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x000D46        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x000D47        F3010000                 push I0;
0x000D48        FD0000FF 510049F1        I0 = Null + -46607;
0x000D4A        E1F00657                 call $kal_float_lib.div;
0x000D4B        03004100                 Null = Null + Null, r2 = M[I0,1];
0x000D4C        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000D4D        E1F00622                 call $kal_float_lib.mul;
0x000D4E        0042000F                 r2 = r0 + Null;
0x000D4F        0053000F                 r3 = r1 + Null;
0x000D50        0062000F                 r4 = r0 + Null;
0x000D51        0073000F                 r5 = r1 + Null;
0x000D52        E1F0061D                 call $kal_float_lib.mul;
0x000D53        0082000F                 r6 = r0 + Null;
0x000D54        0093000F                 r7 = r1 + Null;
0x000D55        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000D56        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000D57        01C00005                 r10 = Null + 5;
0x000D58        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x000D59        0048000F                 r2 = r6 + Null;
0x000D5A        0059000F                 r3 = r7 + Null;
0x000D5B        E1F00614                 call $kal_float_lib.mul;
0x000D5C        03004100                 Null = Null + Null, r2 = M[I0,1];
0x000D5D        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000D5E        E1F005FF                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x000D5F        0046000F                 r2 = r4 + Null;
0x000D60        0057000F                 r3 = r5 + Null;
0x000D61        E1F0060E                 call $kal_float_lib.mul;
0x000D62        F3050000                 pop I0;
0x000D63        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x000D64        F3D40000                 pop rLink;
0x000D65        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x000D66        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x000D67        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x000D68        F3010000                 push I0;
0x000D69        FD0000FF 51004E73        I0 = Null + -45453;
0x000D6B        0062000F                 r4 = r0 + Null;
0x000D6C        0073000F                 r5 = r1 + Null;
0x000D6D        03004100                 Null = Null + Null, r2 = M[I0,1];
0x000D6E        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x000D6F        E1F00632                 call $kal_float_lib.div;
0x000D70        0042000F                 r2 = r0 + Null;
0x000D71        0053000F                 r3 = r1 + Null;
0x000D72        E1F005DE                 call $kal_float_lib.float_to_int;
0x000D73        0082000F                 r6 = r0 + Null;
0x000D74        E1F005D6                 call $kal_float_lib.int_to_float;
0x000D75        03004100                 Null = Null + Null, r2 = M[I0,1];
0x000D76        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000D77        E1F005F8                 call $kal_float_lib.mul;
0x000D78        0042000F                 r2 = r0 + Null;
0x000D79        0053000F                 r3 = r1 + Null;
0x000D7A        0026000F                 r0 = r4 + Null;
0x000D7B        0037000F                 r1 = r5 + Null;
0x000D7C        E1F005EA                 call $kal_float_lib.sub;
0x000D7D        0062000F                 r4 = r0 + Null;
0x000D7E        0073000F                 r5 = r1 + Null;
0x000D7F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000D80        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000D81        01C00003                 r10 = Null + 3;
0x000D82        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x000D83        0046000F                 r2 = r4 + Null;
0x000D84        0057000F                 r3 = r5 + Null;
0x000D85        E1F005EA                 call $kal_float_lib.mul;
0x000D86        03004100                 Null = Null + Null, r2 = M[I0,1];
0x000D87        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000D88        E1F005D5                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x000D89        03280000                 r0 = r0 + r6;
0x000D8A        F3050000                 pop I0;
0x000D8B        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x000D8C        F3D40000                 pop rLink;
0x000D8D        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x000D8E        F1002001                 pushm <FP(=SP), rLink>;
0x000D8F        012000FF                 r0 = Null + 255;
0x000D90        F1387FF6                 r1 = M[FP + -0xa];
0x000D91        83320000                 r1 = r1 AND r0;
0x000D92        F1487FF8                 r2 = M[FP + -0x8];
0x000D93        83420000                 r2 = r2 AND r0;
0x000D94        E434006F                 r1 = MAX r2;
0x000D95        F1487FFA                 r2 = M[FP + -0x6];
0x000D96        83420000                 r2 = r2 AND r0;
0x000D97        E434006F                 r1 = MAX r2;
0x000D98        F1487FFC                 r2 = M[FP + -0x4];
0x000D99        83420000                 r2 = r2 AND r0;
0x000D9A        E434006F                 r1 = MAX r2;
0x000D9B        F1487FFE                 r2 = M[FP + -0x2];
0x000D9C        83420000                 r2 = r2 AND r0;
0x000D9D        E434006F                 r1 = MAX r2;
0x000D9E        2143007F                 r2 = r1 - 127;
0x000D9F        F1287FF6                 r0 = M[FP + -0xa];
0x000DA0        F1387FF7                 r1 = M[FP + -0x9];
0x000DA1        23240000                 r0 = r0 - r2;
0x000DA2        E1F005B3                 call $kal_float_lib.float_to_frac;
0x000DA3        F12C7FF0                 M[FP + -0x10] = r0;
0x000DA4        F1287FF8                 r0 = M[FP + -0x8];
0x000DA5        F1387FF9                 r1 = M[FP + -0x7];
0x000DA6        23240000                 r0 = r0 - r2;
0x000DA7        E1F005AE                 call $kal_float_lib.float_to_frac;
0x000DA8        F12C7FF1                 M[FP + -0xf] = r0;
0x000DA9        F1287FFA                 r0 = M[FP + -0x6];
0x000DAA        F1387FFB                 r1 = M[FP + -0x5];
0x000DAB        23240000                 r0 = r0 - r2;
0x000DAC        E1F005A9                 call $kal_float_lib.float_to_frac;
0x000DAD        F12C7FF2                 M[FP + -0xe] = r0;
0x000DAE        F1287FFC                 r0 = M[FP + -0x4];
0x000DAF        F1387FFD                 r1 = M[FP + -0x3];
0x000DB0        23240000                 r0 = r0 - r2;
0x000DB1        E1F005A4                 call $kal_float_lib.float_to_frac;
0x000DB2        F12C7FF3                 M[FP + -0xd] = r0;
0x000DB3        F1287FFE                 r0 = M[FP + -0x2];
0x000DB4        F1387FFF                 r1 = M[FP + -0x1];
0x000DB5        23240000                 r0 = r0 - r2;
0x000DB6        E1F0059F                 call $kal_float_lib.float_to_frac;
0x000DB7        F12C7FF4                 M[FP + -0xc] = r0;
0x000DB8        F14C7FF5                 M[FP + -0xb] = r2;
0x000DB9        F1042001                 popm <FP, rLink>;
0x000DBA        F103FFF6                 SP = SP + -10;
0x000DBB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x000DBC        F1002005                 pushm <FP(=SP), r0, rLink>;
0x000DBD        E420002F                 r0 = Null + 1;
0x000DBE        F12C7FFA                 M[FP + -0x6] = r0;
0x000DBF        01200000                 r0 = Null + 0;
0x000DC0        F12C7FFC                 M[FP + -0x4] = r0;
0x000DC1        F12C7FFB                 M[FP + -0x5] = r0;
0x000DC2        F12C7FFF                 M[FP + -0x1] = r0;
0x000DC3        F12C7FFE                 M[FP + -0x2] = r0;
0x000DC4        FD000040 01200000        r0 = Null + 4194304;
0x000DC6        F12C7FFD                 M[FP + -0x3] = r0;
0x000DC7        F1042005                 popm <FP, r0, rLink>;
0x000DC8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x000DC9        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000DCA        F1287FFC                 r0 = M[FP + -0x4];
0x000DCB        F1387FFD                 r1 = M[FP + -0x3];
0x000DCC        F1487FFE                 r2 = M[FP + -0x2];
0x000DCD        F1587FFF                 r3 = M[FP + -0x1];
0x000DCE        E1F0FF77                 call $kal_filter_coef_lib.__warp;
0x000DCF        0062000F                 r4 = r0 + Null;
0x000DD0        0073000F                 r5 = r1 + Null;
0x000DD1        01400080                 r2 = Null + 128;
0x000DD2        FD000080 01500000        r3 = Null + -8388608;
0x000DD4        E1F00589                 call $kal_float_lib.add;
0x000DD5        E1F005AF                 call $kal_float_lib.recip;
0x000DD6        0082000F                 r6 = r0 + Null;
0x000DD7        0093000F                 r7 = r1 + Null;
0x000DD8        0046000F                 r2 = r4 + Null;
0x000DD9        0057000F                 r3 = r5 + Null;
0x000DDA        E1F00595                 call $kal_float_lib.mul;
0x000DDB        F1030006                 SP = SP + 6;
0x000DDC        F100000C                 pushm <r0, r1>;
0x000DDD        F100000C                 pushm <r0, r1>;
0x000DDE        01200000                 r0 = Null + 0;
0x000DDF        01300000                 r1 = Null + 0;
0x000DE0        F100000C                 pushm <r0, r1>;
0x000DE1        0026000F                 r0 = r4 + Null;
0x000DE2        0037000F                 r1 = r5 + Null;
0x000DE3        01400080                 r2 = Null + 128;
0x000DE4        FD000080 01500000        r3 = Null + -8388608;
0x000DE6        E1F00580                 call $kal_float_lib.sub;
0x000DE7        0048000F                 r2 = r6 + Null;
0x000DE8        0059000F                 r3 = r7 + Null;
0x000DE9        E1F00586                 call $kal_float_lib.mul;
0x000DEA        F100000C                 pushm <r0, r1>;
0x000DEB        01200000                 r0 = Null + 0;
0x000DEC        01300000                 r1 = Null + 0;
0x000DED        F100000C                 pushm <r0, r1>;
0x000DEE        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x000DEF        F3240000                 pop r0;
0x000DF0        F12C7FF6                 M[FP + -0xa] = r0;
0x000DF1        F3240000                 pop r0;
0x000DF2        F12C7FF8                 M[FP + -0x8] = r0;
0x000DF3        F3240000                 pop r0;
0x000DF4        F12C7FF7                 M[FP + -0x9] = r0;
0x000DF5        F3240000                 pop r0;
0x000DF6        F12C7FFB                 M[FP + -0x5] = r0;
0x000DF7        F3240000                 pop r0;
0x000DF8        F12C7FFA                 M[FP + -0x6] = r0;
0x000DF9        F3240000                 pop r0;
0x000DFA        F12C7FF9                 M[FP + -0x7] = r0;
0x000DFB        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000DFC        F103FFFC                 SP = SP + -4;
0x000DFD        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x000DFE        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000DFF        F1287FFC                 r0 = M[FP + -0x4];
0x000E00        F1387FFD                 r1 = M[FP + -0x3];
0x000E01        F1487FFE                 r2 = M[FP + -0x2];
0x000E02        F1587FFF                 r3 = M[FP + -0x1];
0x000E03        E1F0FF42                 call $kal_filter_coef_lib.__warp;
0x000E04        0062000F                 r4 = r0 + Null;
0x000E05        0073000F                 r5 = r1 + Null;
0x000E06        01400080                 r2 = Null + 128;
0x000E07        FD000080 01500000        r3 = Null + -8388608;
0x000E09        E1F00554                 call $kal_float_lib.add;
0x000E0A        E1F0057A                 call $kal_float_lib.recip;
0x000E0B        0082000F                 r6 = r0 + Null;
0x000E0C        0093000F                 r7 = r1 + Null;
0x000E0D        F1030006                 SP = SP + 6;
0x000E0E        F100000C                 pushm <r0, r1>;
0x000E0F        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000E11        F100000C                 pushm <r0, r1>;
0x000E12        01200000                 r0 = Null + 0;
0x000E13        01300000                 r1 = Null + 0;
0x000E14        F100000C                 pushm <r0, r1>;
0x000E15        0026000F                 r0 = r4 + Null;
0x000E16        0037000F                 r1 = r5 + Null;
0x000E17        01400080                 r2 = Null + 128;
0x000E18        FD000080 01500000        r3 = Null + -8388608;
0x000E1A        E1F0054C                 call $kal_float_lib.sub;
0x000E1B        0048000F                 r2 = r6 + Null;
0x000E1C        0059000F                 r3 = r7 + Null;
0x000E1D        E1F00552                 call $kal_float_lib.mul;
0x000E1E        F100000C                 pushm <r0, r1>;
0x000E1F        01200000                 r0 = Null + 0;
0x000E20        01300000                 r1 = Null + 0;
0x000E21        F100000C                 pushm <r0, r1>;
0x000E22        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x000E23        F3240000                 pop r0;
0x000E24        F12C7FF6                 M[FP + -0xa] = r0;
0x000E25        F3240000                 pop r0;
0x000E26        F12C7FF8                 M[FP + -0x8] = r0;
0x000E27        F3240000                 pop r0;
0x000E28        F12C7FF7                 M[FP + -0x9] = r0;
0x000E29        F3240000                 pop r0;
0x000E2A        F12C7FFB                 M[FP + -0x5] = r0;
0x000E2B        F3240000                 pop r0;
0x000E2C        F12C7FFA                 M[FP + -0x6] = r0;
0x000E2D        F3240000                 pop r0;
0x000E2E        F12C7FF9                 M[FP + -0x7] = r0;
0x000E2F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000E30        F103FFFC                 SP = SP + -4;
0x000E31        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x000E32        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000E33        F1287FFC                 r0 = M[FP + -0x4];
0x000E34        F1387FFD                 r1 = M[FP + -0x3];
0x000E35        F1487FFE                 r2 = M[FP + -0x2];
0x000E36        F1587FFF                 r3 = M[FP + -0x1];
0x000E37        E1F0FF0E                 call $kal_filter_coef_lib.__warp;
0x000E38        0062000F                 r4 = r0 + Null;
0x000E39        0073000F                 r5 = r1 + Null;
0x000E3A        01400080                 r2 = Null + 128;
0x000E3B        FD000080 01500000        r3 = Null + -8388608;
0x000E3D        E1F00520                 call $kal_float_lib.add;
0x000E3E        E1F00546                 call $kal_float_lib.recip;
0x000E3F        0082000F                 r6 = r0 + Null;
0x000E40        0093000F                 r7 = r1 + Null;
0x000E41        F1030006                 SP = SP + 6;
0x000E42        01200080                 r0 = Null + 128;
0x000E43        FD000080 01300000        r1 = Null + -8388608;
0x000E45        0046000F                 r2 = r4 + Null;
0x000E46        0057000F                 r3 = r5 + Null;
0x000E47        E1F0051F                 call $kal_float_lib.sub;
0x000E48        0048000F                 r2 = r6 + Null;
0x000E49        0059000F                 r3 = r7 + Null;
0x000E4A        E1F00525                 call $kal_float_lib.mul;
0x000E4B        F100000C                 pushm <r0, r1>;
0x000E4C        0042000F                 r2 = r0 + Null;
0x000E4D        0053000F                 r3 = r1 + Null;
0x000E4E        01200080                 r0 = Null + 128;
0x000E4F        FD000080 01300000        r1 = Null + -8388608;
0x000E51        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000E53        F100000C                 pushm <r0, r1>;
0x000E54        01200000                 r0 = Null + 0;
0x000E55        01300000                 r1 = Null + 0;
0x000E56        F100000C                 pushm <r0, r1>;
0x000E57        0024000F                 r0 = r2 + Null;
0x000E58        0035000F                 r1 = r3 + Null;
0x000E59        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000E5B        F100000C                 pushm <r0, r1>;
0x000E5C        01200000                 r0 = Null + 0;
0x000E5D        01300000                 r1 = Null + 0;
0x000E5E        F100000C                 pushm <r0, r1>;
0x000E5F        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x000E60        F3240000                 pop r0;
0x000E61        F12C7FF6                 M[FP + -0xa] = r0;
0x000E62        F3240000                 pop r0;
0x000E63        F12C7FF8                 M[FP + -0x8] = r0;
0x000E64        F3240000                 pop r0;
0x000E65        F12C7FF7                 M[FP + -0x9] = r0;
0x000E66        F3240000                 pop r0;
0x000E67        F12C7FFB                 M[FP + -0x5] = r0;
0x000E68        F3240000                 pop r0;
0x000E69        F12C7FFA                 M[FP + -0x6] = r0;
0x000E6A        F3240000                 pop r0;
0x000E6B        F12C7FF9                 M[FP + -0x7] = r0;
0x000E6C        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000E6D        F103FFFC                 SP = SP + -4;
0x000E6E        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x000E6F        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000E70        F1030004                 SP = SP + 4;
0x000E71        F1287FF8                 r0 = M[FP + -0x8];
0x000E72        F1387FF9                 r1 = M[FP + -0x7];
0x000E73        F1487FFE                 r2 = M[FP + -0x2];
0x000E74        F1587FFF                 r3 = M[FP + -0x1];
0x000E75        E1F0FED0                 call $kal_filter_coef_lib.__warp;
0x000E76        0062000F                 r4 = r0 + Null;
0x000E77        0073000F                 r5 = r1 + Null;
0x000E78        F1287FFC                 r0 = M[FP + -0x4];
0x000E79        F1387FFD                 r1 = M[FP + -0x3];
0x000E7A        E1F0FEEC                 call $kal_filter_coef_lib.__db2lin;
0x000E7B        F12C000C                 M[FP + 0xc] = r0;
0x000E7C        F13C000D                 M[FP + 0xd] = r1;
0x000E7D        F1287FFA                 r0 = M[FP + -0x6];
0x000E7E        F1387FFB                 r1 = M[FP + -0x5];
0x000E7F        E422003F                 r0 = r0 - 1;
0x000E80        E1F0FEE6                 call $kal_filter_coef_lib.__db2lin;
0x000E81        0042000F                 r2 = r0 + Null;
0x000E82        0053000F                 r3 = r1 + Null;
0x000E83        0026000F                 r0 = r4 + Null;
0x000E84        0037000F                 r1 = r5 + Null;
0x000E85        E1F0051C                 call $kal_float_lib.div;
0x000E86        0082000F                 r6 = r0 + Null;
0x000E87        0093000F                 r7 = r1 + Null;
0x000E88        0026000F                 r0 = r4 + Null;
0x000E89        0037000F                 r1 = r5 + Null;
0x000E8A        E1F004E5                 call $kal_float_lib.mul;
0x000E8B        0062000F                 r4 = r0 + Null;
0x000E8C        0073000F                 r5 = r1 + Null;
0x000E8D        0028000F                 r0 = r6 + Null;
0x000E8E        0039000F                 r1 = r7 + Null;
0x000E8F        01400080                 r2 = Null + 128;
0x000E90        FD000080 01500000        r3 = Null + -8388608;
0x000E92        E1F004CB                 call $kal_float_lib.add;
0x000E93        E1F004F1                 call $kal_float_lib.recip;
0x000E94        F12C000A                 M[FP + 0xa] = r0;
0x000E95        F13C000B                 M[FP + 0xb] = r1;
0x000E96        F1030006                 SP = SP + 6;
0x000E97        0026000F                 r0 = r4 + Null;
0x000E98        0037000F                 r1 = r5 + Null;
0x000E99        01400080                 r2 = Null + 128;
0x000E9A        FD000080 01500000        r3 = Null + -8388608;
0x000E9C        E1F004C1                 call $kal_float_lib.add;
0x000E9D        F148000A                 r2 = M[FP + 0xa];
0x000E9E        F158000B                 r3 = M[FP + 0xb];
0x000E9F        E1F004D0                 call $kal_float_lib.mul;
0x000EA0        F148000C                 r2 = M[FP + 0xc];
0x000EA1        F158000D                 r3 = M[FP + 0xd];
0x000EA2        E1F004CD                 call $kal_float_lib.mul;
0x000EA3        F100000C                 pushm <r0, r1>;
0x000EA4        0026000F                 r0 = r4 + Null;
0x000EA5        0037000F                 r1 = r5 + Null;
0x000EA6        01400080                 r2 = Null + 128;
0x000EA7        FD000080 01500000        r3 = Null + -8388608;
0x000EA9        E1F004BD                 call $kal_float_lib.sub;
0x000EAA        F148000A                 r2 = M[FP + 0xa];
0x000EAB        F158000B                 r3 = M[FP + 0xb];
0x000EAC        E1F004C3                 call $kal_float_lib.mul;
0x000EAD        F148000C                 r2 = M[FP + 0xc];
0x000EAE        F158000D                 r3 = M[FP + 0xd];
0x000EAF        E1F004C0                 call $kal_float_lib.mul;
0x000EB0        F100000C                 pushm <r0, r1>;
0x000EB1        01200000                 r0 = Null + 0;
0x000EB2        01300000                 r1 = Null + 0;
0x000EB3        F100000C                 pushm <r0, r1>;
0x000EB4        0028000F                 r0 = r6 + Null;
0x000EB5        0039000F                 r1 = r7 + Null;
0x000EB6        01400080                 r2 = Null + 128;
0x000EB7        FD000080 01500000        r3 = Null + -8388608;
0x000EB9        E1F004AD                 call $kal_float_lib.sub;
0x000EBA        F148000A                 r2 = M[FP + 0xa];
0x000EBB        F158000B                 r3 = M[FP + 0xb];
0x000EBC        E1F004B3                 call $kal_float_lib.mul;
0x000EBD        F100000C                 pushm <r0, r1>;
0x000EBE        01200000                 r0 = Null + 0;
0x000EBF        01300000                 r1 = Null + 0;
0x000EC0        F100000C                 pushm <r0, r1>;
0x000EC1        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x000EC2        F3240000                 pop r0;
0x000EC3        F12C7FF7                 M[FP + -0x9] = r0;
0x000EC4        F3240000                 pop r0;
0x000EC5        F12C7FF6                 M[FP + -0xa] = r0;
0x000EC6        F3240000                 pop r0;
0x000EC7        F12C7FF5                 M[FP + -0xb] = r0;
0x000EC8        F3240000                 pop r0;
0x000EC9        F12C7FF4                 M[FP + -0xc] = r0;
0x000ECA        F3240000                 pop r0;
0x000ECB        F12C7FF3                 M[FP + -0xd] = r0;
0x000ECC        F3240000                 pop r0;
0x000ECD        F12C7FF2                 M[FP + -0xe] = r0;
0x000ECE        F103FFFC                 SP = SP + -4;
0x000ECF        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000ED0        F103FFF8                 SP = SP + -8;
0x000ED1        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x000ED2        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x000ED3        F1030006                 SP = SP + 6;
0x000ED4        F1287FFA                 r0 = M[FP + -0x6];
0x000ED5        F1387FFB                 r1 = M[FP + -0x5];
0x000ED6        F100000C                 pushm <r0, r1>;
0x000ED7        F1287FFC                 r0 = M[FP + -0x4];
0x000ED8        F1387FFD                 r1 = M[FP + -0x3];
0x000ED9        F100000C                 pushm <r0, r1>;
0x000EDA        01200000                 r0 = Null + 0;
0x000EDB        01300000                 r1 = Null + 0;
0x000EDC        F100000C                 pushm <r0, r1>;
0x000EDD        F1287FFE                 r0 = M[FP + -0x2];
0x000EDE        F1387FFF                 r1 = M[FP + -0x1];
0x000EDF        F100000C                 pushm <r0, r1>;
0x000EE0        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x000EE1        F3240000                 pop r0;
0x000EE2        F12C7FF4                 M[FP + -0xc] = r0;
0x000EE3        F3240000                 pop r0;
0x000EE4        F12C7FF6                 M[FP + -0xa] = r0;
0x000EE5        F3240000                 pop r0;
0x000EE6        F12C7FF5                 M[FP + -0xb] = r0;
0x000EE7        F3240000                 pop r0;
0x000EE8        F12C7FF9                 M[FP + -0x7] = r0;
0x000EE9        F3240000                 pop r0;
0x000EEA        F12C7FF8                 M[FP + -0x8] = r0;
0x000EEB        F3240000                 pop r0;
0x000EEC        F12C7FF7                 M[FP + -0x9] = r0;
0x000EED        F104200D                 popm <FP, r0, r1, rLink>;
0x000EEE        F103FFFA                 SP = SP + -6;
0x000EEF        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x000EF0        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x000EF1        F1030006                 SP = SP + 6;
0x000EF2        F1287FFA                 r0 = M[FP + -0x6];
0x000EF3        F1387FFB                 r1 = M[FP + -0x5];
0x000EF4        F100000C                 pushm <r0, r1>;
0x000EF5        F1287FFC                 r0 = M[FP + -0x4];
0x000EF6        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000EF8        F1387FFD                 r1 = M[FP + -0x3];
0x000EF9        F100000C                 pushm <r0, r1>;
0x000EFA        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000EFC        F100000C                 pushm <r0, r1>;
0x000EFD        F1287FFE                 r0 = M[FP + -0x2];
0x000EFE        F1387FFF                 r1 = M[FP + -0x1];
0x000EFF        F100000C                 pushm <r0, r1>;
0x000F00        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x000F01        F3240000                 pop r0;
0x000F02        F12C7FF4                 M[FP + -0xc] = r0;
0x000F03        F3240000                 pop r0;
0x000F04        F12C7FF6                 M[FP + -0xa] = r0;
0x000F05        F3240000                 pop r0;
0x000F06        F12C7FF5                 M[FP + -0xb] = r0;
0x000F07        F3240000                 pop r0;
0x000F08        F12C7FF9                 M[FP + -0x7] = r0;
0x000F09        F3240000                 pop r0;
0x000F0A        F12C7FF8                 M[FP + -0x8] = r0;
0x000F0B        F3240000                 pop r0;
0x000F0C        F12C7FF7                 M[FP + -0x9] = r0;
0x000F0D        F104200D                 popm <FP, r0, r1, rLink>;
0x000F0E        F103FFFA                 SP = SP + -6;
0x000F0F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x000F10        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x000F11        F1030006                 SP = SP + 6;
0x000F12        F1287FFA                 r0 = M[FP + -0x6];
0x000F13        F1387FFB                 r1 = M[FP + -0x5];
0x000F14        F100000C                 pushm <r0, r1>;
0x000F15        F1287FFC                 r0 = M[FP + -0x4];
0x000F16        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000F18        F1387FFD                 r1 = M[FP + -0x3];
0x000F19        F100000C                 pushm <r0, r1>;
0x000F1A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000F1C        E422003F                 r0 = r0 - 1;
0x000F1D        F100000C                 pushm <r0, r1>;
0x000F1E        F1287FFE                 r0 = M[FP + -0x2];
0x000F1F        F1387FFF                 r1 = M[FP + -0x1];
0x000F20        F100000C                 pushm <r0, r1>;
0x000F21        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x000F22        F3240000                 pop r0;
0x000F23        F12C7FF4                 M[FP + -0xc] = r0;
0x000F24        F3240000                 pop r0;
0x000F25        F12C7FF6                 M[FP + -0xa] = r0;
0x000F26        F3240000                 pop r0;
0x000F27        F12C7FF5                 M[FP + -0xb] = r0;
0x000F28        F3240000                 pop r0;
0x000F29        F12C7FF9                 M[FP + -0x7] = r0;
0x000F2A        F3240000                 pop r0;
0x000F2B        F12C7FF8                 M[FP + -0x8] = r0;
0x000F2C        F3240000                 pop r0;
0x000F2D        F12C7FF7                 M[FP + -0x9] = r0;
0x000F2E        F104200D                 popm <FP, r0, r1, rLink>;
0x000F2F        F103FFFA                 SP = SP + -6;
0x000F30        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x000F31        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000F32        F1030002                 SP = SP + 2;
0x000F33        F1287FFA                 r0 = M[FP + -0x6];
0x000F34        F1387FFB                 r1 = M[FP + -0x5];
0x000F35        F1487FFE                 r2 = M[FP + -0x2];
0x000F36        F1587FFF                 r3 = M[FP + -0x1];
0x000F37        E1F0FE0E                 call $kal_filter_coef_lib.__warp;
0x000F38        0042000F                 r2 = r0 + Null;
0x000F39        0053000F                 r3 = r1 + Null;
0x000F3A        E1F00435                 call $kal_float_lib.mul;
0x000F3B        0082000F                 r6 = r0 + Null;
0x000F3C        0093000F                 r7 = r1 + Null;
0x000F3D        0024000F                 r0 = r2 + Null;
0x000F3E        0035000F                 r1 = r3 + Null;
0x000F3F        F1487FFC                 r2 = M[FP + -0x4];
0x000F40        F1587FFD                 r3 = M[FP + -0x3];
0x000F41        E1F00460                 call $kal_float_lib.div;
0x000F42        0062000F                 r4 = r0 + Null;
0x000F43        0073000F                 r5 = r1 + Null;
0x000F44        0048000F                 r2 = r6 + Null;
0x000F45        0059000F                 r3 = r7 + Null;
0x000F46        E1F00417                 call $kal_float_lib.add;
0x000F47        01400080                 r2 = Null + 128;
0x000F48        FD000080 01500000        r3 = Null + -8388608;
0x000F4A        E1F00413                 call $kal_float_lib.add;
0x000F4B        E1F00439                 call $kal_float_lib.recip;
0x000F4C        F12C000A                 M[FP + 0xa] = r0;
0x000F4D        F13C000B                 M[FP + 0xb] = r1;
0x000F4E        F1030006                 SP = SP + 6;
0x000F4F        0028000F                 r0 = r6 + Null;
0x000F50        0039000F                 r1 = r7 + Null;
0x000F51        F148000A                 r2 = M[FP + 0xa];
0x000F52        F158000B                 r3 = M[FP + 0xb];
0x000F53        E1F0041C                 call $kal_float_lib.mul;
0x000F54        F100000C                 pushm <r0, r1>;
0x000F55        E422002F                 r0 = r0 + 1;
0x000F56        F100000C                 pushm <r0, r1>;
0x000F57        E422003F                 r0 = r0 - 1;
0x000F58        F100000C                 pushm <r0, r1>;
0x000F59        0028000F                 r0 = r6 + Null;
0x000F5A        0039000F                 r1 = r7 + Null;
0x000F5B        01400081                 r2 = Null + 129;
0x000F5C        FD000080 01500000        r3 = Null + -8388608;
0x000F5E        E1F00411                 call $kal_float_lib.mul;
0x000F5F        E1F00407                 call $kal_float_lib.sub;
0x000F60        F148000A                 r2 = M[FP + 0xa];
0x000F61        F158000B                 r3 = M[FP + 0xb];
0x000F62        E1F0040D                 call $kal_float_lib.mul;
0x000F63        F100000C                 pushm <r0, r1>;
0x000F64        0028000F                 r0 = r6 + Null;
0x000F65        0039000F                 r1 = r7 + Null;
0x000F66        0046000F                 r2 = r4 + Null;
0x000F67        0057000F                 r3 = r5 + Null;
0x000F68        E1F003FE                 call $kal_float_lib.sub;
0x000F69        01400080                 r2 = Null + 128;
0x000F6A        FD000080 01500000        r3 = Null + -8388608;
0x000F6C        E1F003F1                 call $kal_float_lib.add;
0x000F6D        F148000A                 r2 = M[FP + 0xa];
0x000F6E        F158000B                 r3 = M[FP + 0xb];
0x000F6F        E1F00400                 call $kal_float_lib.mul;
0x000F70        F100000C                 pushm <r0, r1>;
0x000F71        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x000F72        F3240000                 pop r0;
0x000F73        F12C7FF4                 M[FP + -0xc] = r0;
0x000F74        F3240000                 pop r0;
0x000F75        F12C7FF6                 M[FP + -0xa] = r0;
0x000F76        F3240000                 pop r0;
0x000F77        F12C7FF5                 M[FP + -0xb] = r0;
0x000F78        F3240000                 pop r0;
0x000F79        F12C7FF9                 M[FP + -0x7] = r0;
0x000F7A        F3240000                 pop r0;
0x000F7B        F12C7FF8                 M[FP + -0x8] = r0;
0x000F7C        F3240000                 pop r0;
0x000F7D        F12C7FF7                 M[FP + -0x9] = r0;
0x000F7E        F103FFFE                 SP = SP + -2;
0x000F7F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000F80        F103FFFA                 SP = SP + -6;
0x000F81        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x000F82        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000F83        F1030002                 SP = SP + 2;
0x000F84        F1287FFA                 r0 = M[FP + -0x6];
0x000F85        F1387FFB                 r1 = M[FP + -0x5];
0x000F86        F1487FFE                 r2 = M[FP + -0x2];
0x000F87        F1587FFF                 r3 = M[FP + -0x1];
0x000F88        E1F0FDBD                 call $kal_filter_coef_lib.__warp;
0x000F89        0042000F                 r2 = r0 + Null;
0x000F8A        0053000F                 r3 = r1 + Null;
0x000F8B        E1F003E4                 call $kal_float_lib.mul;
0x000F8C        0082000F                 r6 = r0 + Null;
0x000F8D        0093000F                 r7 = r1 + Null;
0x000F8E        0024000F                 r0 = r2 + Null;
0x000F8F        0035000F                 r1 = r3 + Null;
0x000F90        F1487FFC                 r2 = M[FP + -0x4];
0x000F91        F1587FFD                 r3 = M[FP + -0x3];
0x000F92        E1F0040F                 call $kal_float_lib.div;
0x000F93        0062000F                 r4 = r0 + Null;
0x000F94        0073000F                 r5 = r1 + Null;
0x000F95        0048000F                 r2 = r6 + Null;
0x000F96        0059000F                 r3 = r7 + Null;
0x000F97        E1F003C6                 call $kal_float_lib.add;
0x000F98        01400080                 r2 = Null + 128;
0x000F99        FD000080 01500000        r3 = Null + -8388608;
0x000F9B        E1F003C2                 call $kal_float_lib.add;
0x000F9C        E1F003E8                 call $kal_float_lib.recip;
0x000F9D        F12C000A                 M[FP + 0xa] = r0;
0x000F9E        F13C000B                 M[FP + 0xb] = r1;
0x000F9F        F1030006                 SP = SP + 6;
0x000FA0        F100000C                 pushm <r0, r1>;
0x000FA1        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000FA3        E422002F                 r0 = r0 + 1;
0x000FA4        F100000C                 pushm <r0, r1>;
0x000FA5        FD000080 89220000        r0 = r0 XOR 0x800000;
0x000FA7        E422003F                 r0 = r0 - 1;
0x000FA8        F100000C                 pushm <r0, r1>;
0x000FA9        0028000F                 r0 = r6 + Null;
0x000FAA        0039000F                 r1 = r7 + Null;
0x000FAB        01400081                 r2 = Null + 129;
0x000FAC        FD000080 01500000        r3 = Null + -8388608;
0x000FAE        E1F003C1                 call $kal_float_lib.mul;
0x000FAF        E1F003B7                 call $kal_float_lib.sub;
0x000FB0        F148000A                 r2 = M[FP + 0xa];
0x000FB1        F158000B                 r3 = M[FP + 0xb];
0x000FB2        E1F003BD                 call $kal_float_lib.mul;
0x000FB3        F100000C                 pushm <r0, r1>;
0x000FB4        0028000F                 r0 = r6 + Null;
0x000FB5        0039000F                 r1 = r7 + Null;
0x000FB6        0046000F                 r2 = r4 + Null;
0x000FB7        0057000F                 r3 = r5 + Null;
0x000FB8        E1F003AE                 call $kal_float_lib.sub;
0x000FB9        01400080                 r2 = Null + 128;
0x000FBA        FD000080 01500000        r3 = Null + -8388608;
0x000FBC        E1F003A1                 call $kal_float_lib.add;
0x000FBD        F148000A                 r2 = M[FP + 0xa];
0x000FBE        F158000B                 r3 = M[FP + 0xb];
0x000FBF        E1F003B0                 call $kal_float_lib.mul;
0x000FC0        F100000C                 pushm <r0, r1>;
0x000FC1        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x000FC2        F3240000                 pop r0;
0x000FC3        F12C7FF4                 M[FP + -0xc] = r0;
0x000FC4        F3240000                 pop r0;
0x000FC5        F12C7FF6                 M[FP + -0xa] = r0;
0x000FC6        F3240000                 pop r0;
0x000FC7        F12C7FF5                 M[FP + -0xb] = r0;
0x000FC8        F3240000                 pop r0;
0x000FC9        F12C7FF9                 M[FP + -0x7] = r0;
0x000FCA        F3240000                 pop r0;
0x000FCB        F12C7FF8                 M[FP + -0x8] = r0;
0x000FCC        F3240000                 pop r0;
0x000FCD        F12C7FF7                 M[FP + -0x9] = r0;
0x000FCE        F103FFFE                 SP = SP + -2;
0x000FCF        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000FD0        F103FFFA                 SP = SP + -6;
0x000FD1        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x000FD2        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x000FD3        F1030002                 SP = SP + 2;
0x000FD4        F1287FFA                 r0 = M[FP + -0x6];
0x000FD5        F1387FFB                 r1 = M[FP + -0x5];
0x000FD6        F1487FFE                 r2 = M[FP + -0x2];
0x000FD7        F1587FFF                 r3 = M[FP + -0x1];
0x000FD8        E1F0FD6D                 call $kal_filter_coef_lib.__warp;
0x000FD9        0042000F                 r2 = r0 + Null;
0x000FDA        0053000F                 r3 = r1 + Null;
0x000FDB        E1F00394                 call $kal_float_lib.mul;
0x000FDC        0082000F                 r6 = r0 + Null;
0x000FDD        0093000F                 r7 = r1 + Null;
0x000FDE        0024000F                 r0 = r2 + Null;
0x000FDF        0035000F                 r1 = r3 + Null;
0x000FE0        F1487FFC                 r2 = M[FP + -0x4];
0x000FE1        F1587FFD                 r3 = M[FP + -0x3];
0x000FE2        E1F003BF                 call $kal_float_lib.div;
0x000FE3        0062000F                 r4 = r0 + Null;
0x000FE4        0073000F                 r5 = r1 + Null;
0x000FE5        0048000F                 r2 = r6 + Null;
0x000FE6        0059000F                 r3 = r7 + Null;
0x000FE7        E1F00376                 call $kal_float_lib.add;
0x000FE8        01400080                 r2 = Null + 128;
0x000FE9        FD000080 01500000        r3 = Null + -8388608;
0x000FEB        E1F00372                 call $kal_float_lib.add;
0x000FEC        E1F00398                 call $kal_float_lib.recip;
0x000FED        F12C000A                 M[FP + 0xa] = r0;
0x000FEE        F13C000B                 M[FP + 0xb] = r1;
0x000FEF        F1030006                 SP = SP + 6;
0x000FF0        0028000F                 r0 = r6 + Null;
0x000FF1        0039000F                 r1 = r7 + Null;
0x000FF2        0046000F                 r2 = r4 + Null;
0x000FF3        0057000F                 r3 = r5 + Null;
0x000FF4        E1F00372                 call $kal_float_lib.sub;
0x000FF5        01400080                 r2 = Null + 128;
0x000FF6        FD000080 01500000        r3 = Null + -8388608;
0x000FF8        E1F00365                 call $kal_float_lib.add;
0x000FF9        F148000A                 r2 = M[FP + 0xa];
0x000FFA        F158000B                 r3 = M[FP + 0xb];
0x000FFB        E1F00374                 call $kal_float_lib.mul;
0x000FFC        F100000C                 pushm <r0, r1>;
0x000FFD        0062000F                 r4 = r0 + Null;
0x000FFE        0073000F                 r5 = r1 + Null;
0x000FFF        0028000F                 r0 = r6 + Null;
0x001000        0039000F                 r1 = r7 + Null;
0x001001        01400081                 r2 = Null + 129;
0x001002        FD000080 01500000        r3 = Null + -8388608;
0x001004        E1F0036B                 call $kal_float_lib.mul;
0x001005        E1F00361                 call $kal_float_lib.sub;
0x001006        F148000A                 r2 = M[FP + 0xa];
0x001007        F158000B                 r3 = M[FP + 0xb];
0x001008        E1F00367                 call $kal_float_lib.mul;
0x001009        F100000C                 pushm <r0, r1>;
0x00100A        0082000F                 r6 = r0 + Null;
0x00100B        0093000F                 r7 = r1 + Null;
0x00100C        01200080                 r0 = Null + 128;
0x00100D        FD000080 01300000        r1 = Null + -8388608;
0x00100F        F100000C                 pushm <r0, r1>;
0x001010        F1000300                 pushm <r6, r7>;
0x001011        F10000C0                 pushm <r4, r5>;
0x001012        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x001013        F3240000                 pop r0;
0x001014        F12C7FF4                 M[FP + -0xc] = r0;
0x001015        F3240000                 pop r0;
0x001016        F12C7FF6                 M[FP + -0xa] = r0;
0x001017        F3240000                 pop r0;
0x001018        F12C7FF5                 M[FP + -0xb] = r0;
0x001019        F3240000                 pop r0;
0x00101A        F12C7FF9                 M[FP + -0x7] = r0;
0x00101B        F3240000                 pop r0;
0x00101C        F12C7FF8                 M[FP + -0x8] = r0;
0x00101D        F3240000                 pop r0;
0x00101E        F12C7FF7                 M[FP + -0x9] = r0;
0x00101F        F103FFFE                 SP = SP + -2;
0x001020        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001021        F103FFFA                 SP = SP + -6;
0x001022        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x001023        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001024        F1030008                 SP = SP + 8;
0x001025        F1287FF6                 r0 = M[FP + -0xa];
0x001026        F1387FF7                 r1 = M[FP + -0x9];
0x001027        F1487FFE                 r2 = M[FP + -0x2];
0x001028        F1587FFF                 r3 = M[FP + -0x1];
0x001029        E1F0FD1C                 call $kal_filter_coef_lib.__warp;
0x00102A        0062000F                 r4 = r0 + Null;
0x00102B        0073000F                 r5 = r1 + Null;
0x00102C        F1287FFC                 r0 = M[FP + -0x4];
0x00102D        F1387FFD                 r1 = M[FP + -0x3];
0x00102E        E1F0FD38                 call $kal_filter_coef_lib.__db2lin;
0x00102F        F12C000C                 M[FP + 0xc] = r0;
0x001030        F13C000D                 M[FP + 0xd] = r1;
0x001031        F1287FF8                 r0 = M[FP + -0x8];
0x001032        F1387FF9                 r1 = M[FP + -0x7];
0x001033        21220002                 r0 = r0 - 2;
0x001034        E1F0FD32                 call $kal_filter_coef_lib.__db2lin;
0x001035        0042000F                 r2 = r0 + Null;
0x001036        0053000F                 r3 = r1 + Null;
0x001037        0026000F                 r0 = r4 + Null;
0x001038        0037000F                 r1 = r5 + Null;
0x001039        E1F00368                 call $kal_float_lib.div;
0x00103A        0082000F                 r6 = r0 + Null;
0x00103B        0093000F                 r7 = r1 + Null;
0x00103C        0026000F                 r0 = r4 + Null;
0x00103D        0037000F                 r1 = r5 + Null;
0x00103E        E1F00331                 call $kal_float_lib.mul;
0x00103F        0062000F                 r4 = r0 + Null;
0x001040        0073000F                 r5 = r1 + Null;
0x001041        F1487FFA                 r2 = M[FP + -0x6];
0x001042        F1587FFB                 r3 = M[FP + -0x5];
0x001043        E1F0035E                 call $kal_float_lib.div;
0x001044        F12C000E                 M[FP + 0xe] = r0;
0x001045        F13C000F                 M[FP + 0xf] = r1;
0x001046        0028000F                 r0 = r6 + Null;
0x001047        0039000F                 r1 = r7 + Null;
0x001048        E1F00359                 call $kal_float_lib.div;
0x001049        F12C0010                 M[FP + 0x10] = r0;
0x00104A        F13C0011                 M[FP + 0x11] = r1;
0x00104B        0028000F                 r0 = r6 + Null;
0x00104C        0039000F                 r1 = r7 + Null;
0x00104D        0048000F                 r2 = r6 + Null;
0x00104E        0059000F                 r3 = r7 + Null;
0x00104F        E1F00320                 call $kal_float_lib.mul;
0x001050        0082000F                 r6 = r0 + Null;
0x001051        0093000F                 r7 = r1 + Null;
0x001052        F1480010                 r2 = M[FP + 0x10];
0x001053        F1580011                 r3 = M[FP + 0x11];
0x001054        E1F00309                 call $kal_float_lib.add;
0x001055        01400080                 r2 = Null + 128;
0x001056        FD000080 01500000        r3 = Null + -8388608;
0x001058        E1F00305                 call $kal_float_lib.add;
0x001059        E1F0032B                 call $kal_float_lib.recip;
0x00105A        F12C000A                 M[FP + 0xa] = r0;
0x00105B        F13C000B                 M[FP + 0xb] = r1;
0x00105C        F1030006                 SP = SP + 6;
0x00105D        0026000F                 r0 = r4 + Null;
0x00105E        0037000F                 r1 = r5 + Null;
0x00105F        0046000F                 r2 = r4 + Null;
0x001060        0057000F                 r3 = r5 + Null;
0x001061        E1F0030E                 call $kal_float_lib.mul;
0x001062        0062000F                 r4 = r0 + Null;
0x001063        0073000F                 r5 = r1 + Null;
0x001064        F148000E                 r2 = M[FP + 0xe];
0x001065        F158000F                 r3 = M[FP + 0xf];
0x001066        E1F002F7                 call $kal_float_lib.add;
0x001067        01400080                 r2 = Null + 128;
0x001068        FD000080 01500000        r3 = Null + -8388608;
0x00106A        E1F002F3                 call $kal_float_lib.add;
0x00106B        F148000A                 r2 = M[FP + 0xa];
0x00106C        F158000B                 r3 = M[FP + 0xb];
0x00106D        E1F00302                 call $kal_float_lib.mul;
0x00106E        F148000C                 r2 = M[FP + 0xc];
0x00106F        F158000D                 r3 = M[FP + 0xd];
0x001070        E1F002FF                 call $kal_float_lib.mul;
0x001071        F100000C                 pushm <r0, r1>;
0x001072        0026000F                 r0 = r4 + Null;
0x001073        0037000F                 r1 = r5 + Null;
0x001074        01400081                 r2 = Null + 129;
0x001075        FD000080 01500000        r3 = Null + -8388608;
0x001077        E1F002F8                 call $kal_float_lib.mul;
0x001078        E1F002EE                 call $kal_float_lib.sub;
0x001079        F148000A                 r2 = M[FP + 0xa];
0x00107A        F158000B                 r3 = M[FP + 0xb];
0x00107B        E1F002F4                 call $kal_float_lib.mul;
0x00107C        F148000C                 r2 = M[FP + 0xc];
0x00107D        F158000D                 r3 = M[FP + 0xd];
0x00107E        E1F002F1                 call $kal_float_lib.mul;
0x00107F        F100000C                 pushm <r0, r1>;
0x001080        0026000F                 r0 = r4 + Null;
0x001081        0037000F                 r1 = r5 + Null;
0x001082        F148000E                 r2 = M[FP + 0xe];
0x001083        F158000F                 r3 = M[FP + 0xf];
0x001084        E1F002E2                 call $kal_float_lib.sub;
0x001085        01400080                 r2 = Null + 128;
0x001086        FD000080 01500000        r3 = Null + -8388608;
0x001088        E1F002D5                 call $kal_float_lib.add;
0x001089        F148000A                 r2 = M[FP + 0xa];
0x00108A        F158000B                 r3 = M[FP + 0xb];
0x00108B        E1F002E4                 call $kal_float_lib.mul;
0x00108C        F148000C                 r2 = M[FP + 0xc];
0x00108D        F158000D                 r3 = M[FP + 0xd];
0x00108E        E1F002E1                 call $kal_float_lib.mul;
0x00108F        F100000C                 pushm <r0, r1>;
0x001090        0028000F                 r0 = r6 + Null;
0x001091        0039000F                 r1 = r7 + Null;
0x001092        01400081                 r2 = Null + 129;
0x001093        FD000080 01500000        r3 = Null + -8388608;
0x001095        E1F002DA                 call $kal_float_lib.mul;
0x001096        E1F002D0                 call $kal_float_lib.sub;
0x001097        F148000A                 r2 = M[FP + 0xa];
0x001098        F158000B                 r3 = M[FP + 0xb];
0x001099        E1F002D6                 call $kal_float_lib.mul;
0x00109A        F100000C                 pushm <r0, r1>;
0x00109B        0028000F                 r0 = r6 + Null;
0x00109C        0039000F                 r1 = r7 + Null;
0x00109D        F1480010                 r2 = M[FP + 0x10];
0x00109E        F1580011                 r3 = M[FP + 0x11];
0x00109F        E1F002C7                 call $kal_float_lib.sub;
0x0010A0        01400080                 r2 = Null + 128;
0x0010A1        FD000080 01500000        r3 = Null + -8388608;
0x0010A3        E1F002BA                 call $kal_float_lib.add;
0x0010A4        F148000A                 r2 = M[FP + 0xa];
0x0010A5        F158000B                 r3 = M[FP + 0xb];
0x0010A6        E1F002C9                 call $kal_float_lib.mul;
0x0010A7        F100000C                 pushm <r0, r1>;
0x0010A8        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0010A9        F3240000                 pop r0;
0x0010AA        F12C7FF5                 M[FP + -0xb] = r0;
0x0010AB        F3240000                 pop r0;
0x0010AC        F12C7FF4                 M[FP + -0xc] = r0;
0x0010AD        F3240000                 pop r0;
0x0010AE        F12C7FF3                 M[FP + -0xd] = r0;
0x0010AF        F3240000                 pop r0;
0x0010B0        F12C7FF2                 M[FP + -0xe] = r0;
0x0010B1        F3240000                 pop r0;
0x0010B2        F12C7FF1                 M[FP + -0xf] = r0;
0x0010B3        F3240000                 pop r0;
0x0010B4        F12C7FF0                 M[FP + -0x10] = r0;
0x0010B5        F103FFF8                 SP = SP + -8;
0x0010B6        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0010B7        F103FFF6                 SP = SP + -10;
0x0010B8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x0010B9        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0010BA        F1030006                 SP = SP + 6;
0x0010BB        F1287FF8                 r0 = M[FP + -0x8];
0x0010BC        F1387FF9                 r1 = M[FP + -0x7];
0x0010BD        F100000C                 pushm <r0, r1>;
0x0010BE        F1287FFA                 r0 = M[FP + -0x6];
0x0010BF        F1387FFB                 r1 = M[FP + -0x5];
0x0010C0        F100000C                 pushm <r0, r1>;
0x0010C1        F1287FFC                 r0 = M[FP + -0x4];
0x0010C2        F1387FFD                 r1 = M[FP + -0x3];
0x0010C3        F100000C                 pushm <r0, r1>;
0x0010C4        01200000                 r0 = Null + 0;
0x0010C5        01300000                 r1 = Null + 0;
0x0010C6        F100000C                 pushm <r0, r1>;
0x0010C7        F1287FFE                 r0 = M[FP + -0x2];
0x0010C8        F1387FFF                 r1 = M[FP + -0x1];
0x0010C9        F100000C                 pushm <r0, r1>;
0x0010CA        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0010CB        F3240000                 pop r0;
0x0010CC        F12C7FF2                 M[FP + -0xe] = r0;
0x0010CD        F3240000                 pop r0;
0x0010CE        F12C7FF4                 M[FP + -0xc] = r0;
0x0010CF        F3240000                 pop r0;
0x0010D0        F12C7FF3                 M[FP + -0xd] = r0;
0x0010D1        F3240000                 pop r0;
0x0010D2        F12C7FF7                 M[FP + -0x9] = r0;
0x0010D3        F3240000                 pop r0;
0x0010D4        F12C7FF6                 M[FP + -0xa] = r0;
0x0010D5        F3240000                 pop r0;
0x0010D6        F12C7FF5                 M[FP + -0xb] = r0;
0x0010D7        F104200D                 popm <FP, r0, r1, rLink>;
0x0010D8        F103FFF8                 SP = SP + -8;
0x0010D9        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x0010DA        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0010DB        F1030006                 SP = SP + 6;
0x0010DC        F1287FF8                 r0 = M[FP + -0x8];
0x0010DD        F1387FF9                 r1 = M[FP + -0x7];
0x0010DE        F100000C                 pushm <r0, r1>;
0x0010DF        F1287FFA                 r0 = M[FP + -0x6];
0x0010E0        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0010E2        F1387FFB                 r1 = M[FP + -0x5];
0x0010E3        F100000C                 pushm <r0, r1>;
0x0010E4        F1287FFC                 r0 = M[FP + -0x4];
0x0010E5        F1387FFD                 r1 = M[FP + -0x3];
0x0010E6        F100000C                 pushm <r0, r1>;
0x0010E7        F1287FFA                 r0 = M[FP + -0x6];
0x0010E8        F1387FFB                 r1 = M[FP + -0x5];
0x0010E9        F100000C                 pushm <r0, r1>;
0x0010EA        F1287FFE                 r0 = M[FP + -0x2];
0x0010EB        F1387FFF                 r1 = M[FP + -0x1];
0x0010EC        F100000C                 pushm <r0, r1>;
0x0010ED        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0010EE        F3240000                 pop r0;
0x0010EF        F12C7FF2                 M[FP + -0xe] = r0;
0x0010F0        F3240000                 pop r0;
0x0010F1        F12C7FF4                 M[FP + -0xc] = r0;
0x0010F2        F3240000                 pop r0;
0x0010F3        F12C7FF3                 M[FP + -0xd] = r0;
0x0010F4        F3240000                 pop r0;
0x0010F5        F12C7FF7                 M[FP + -0x9] = r0;
0x0010F6        F3240000                 pop r0;
0x0010F7        F12C7FF6                 M[FP + -0xa] = r0;
0x0010F8        F3240000                 pop r0;
0x0010F9        F12C7FF5                 M[FP + -0xb] = r0;
0x0010FA        F104200D                 popm <FP, r0, r1, rLink>;
0x0010FB        F103FFF8                 SP = SP + -8;
0x0010FC        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x0010FD        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0010FE        F1030006                 SP = SP + 6;
0x0010FF        F1287FF8                 r0 = M[FP + -0x8];
0x001100        F1387FF9                 r1 = M[FP + -0x7];
0x001101        F100000C                 pushm <r0, r1>;
0x001102        F1287FFA                 r0 = M[FP + -0x6];
0x001103        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001105        F1387FFB                 r1 = M[FP + -0x5];
0x001106        F100000C                 pushm <r0, r1>;
0x001107        F1287FFC                 r0 = M[FP + -0x4];
0x001108        F1387FFD                 r1 = M[FP + -0x3];
0x001109        F100000C                 pushm <r0, r1>;
0x00110A        F1287FFA                 r0 = M[FP + -0x6];
0x00110B        E422003F                 r0 = r0 - 1;
0x00110C        F1387FFB                 r1 = M[FP + -0x5];
0x00110D        F100000C                 pushm <r0, r1>;
0x00110E        F1287FFE                 r0 = M[FP + -0x2];
0x00110F        F1387FFF                 r1 = M[FP + -0x1];
0x001110        F100000C                 pushm <r0, r1>;
0x001111        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001112        F3240000                 pop r0;
0x001113        F12C7FF2                 M[FP + -0xe] = r0;
0x001114        F3240000                 pop r0;
0x001115        F12C7FF4                 M[FP + -0xc] = r0;
0x001116        F3240000                 pop r0;
0x001117        F12C7FF3                 M[FP + -0xd] = r0;
0x001118        F3240000                 pop r0;
0x001119        F12C7FF7                 M[FP + -0x9] = r0;
0x00111A        F3240000                 pop r0;
0x00111B        F12C7FF6                 M[FP + -0xa] = r0;
0x00111C        F3240000                 pop r0;
0x00111D        F12C7FF5                 M[FP + -0xb] = r0;
0x00111E        F104200D                 popm <FP, r0, r1, rLink>;
0x00111F        F103FFF8                 SP = SP + -8;
0x001120        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x001121        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001122        F1030004                 SP = SP + 4;
0x001123        F1287FFC                 r0 = M[FP + -0x4];
0x001124        E422002F                 r0 = r0 + 1;
0x001125        F1387FFD                 r1 = M[FP + -0x3];
0x001126        E1F0025E                 call $kal_float_lib.recip;
0x001127        FD000080 85220000        r0 = r0 OR 0x800000;
0x001129        0042000F                 r2 = r0 + Null;
0x00112A        0053000F                 r3 = r1 + Null;
0x00112B        0062000F                 r4 = r0 + Null;
0x00112C        0073000F                 r5 = r1 + Null;
0x00112D        E1F00242                 call $kal_float_lib.mul;
0x00112E        01400080                 r2 = Null + 128;
0x00112F        FD000080 01500000        r3 = Null + -8388608;
0x001131        E1F0022C                 call $kal_float_lib.add;
0x001132        E1F0027B                 call $kal_float_lib.rsqrt;
0x001133        E1F00251                 call $kal_float_lib.recip;
0x001134        0046000F                 r2 = r4 + Null;
0x001135        0057000F                 r3 = r5 + Null;
0x001136        E1F00227                 call $kal_float_lib.add;
0x001137        F1487FF8                 r2 = M[FP + -0x8];
0x001138        F1587FF9                 r3 = M[FP + -0x7];
0x001139        E1F00236                 call $kal_float_lib.mul;
0x00113A        F1487FFE                 r2 = M[FP + -0x2];
0x00113B        F1587FFF                 r3 = M[FP + -0x1];
0x00113C        E1F0FC09                 call $kal_filter_coef_lib.__warp;
0x00113D        0062000F                 r4 = r0 + Null;
0x00113E        0073000F                 r5 = r1 + Null;
0x00113F        F1287FF8                 r0 = M[FP + -0x8];
0x001140        F1387FF9                 r1 = M[FP + -0x7];
0x001141        E1F0FC04                 call $kal_filter_coef_lib.__warp;
0x001142        F12C000A                 M[FP + 0xa] = r0;
0x001143        F13C000B                 M[FP + 0xb] = r1;
0x001144        0042000F                 r2 = r0 + Null;
0x001145        0053000F                 r3 = r1 + Null;
0x001146        E1F00229                 call $kal_float_lib.mul;
0x001147        F1000030                 pushm <r2, r3>;
0x001148        F100000C                 pushm <r0, r1>;
0x001149        0026000F                 r0 = r4 + Null;
0x00114A        0037000F                 r1 = r5 + Null;
0x00114B        0046000F                 r2 = r4 + Null;
0x00114C        0057000F                 r3 = r5 + Null;
0x00114D        E1F00222                 call $kal_float_lib.mul;
0x00114E        F1040030                 popm <r2, r3>;
0x00114F        E1F00217                 call $kal_float_lib.sub;
0x001150        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001152        E1F00232                 call $kal_float_lib.recip;
0x001153        F1040030                 popm <r2, r3>;
0x001154        E1F0021B                 call $kal_float_lib.mul;
0x001155        0046000F                 r2 = r4 + Null;
0x001156        0057000F                 r3 = r5 + Null;
0x001157        E1F00218                 call $kal_float_lib.mul;
0x001158        0062000F                 r4 = r0 + Null;
0x001159        0073000F                 r5 = r1 + Null;
0x00115A        F1287FFA                 r0 = M[FP + -0x6];
0x00115B        F1387FFB                 r1 = M[FP + -0x5];
0x00115C        0140007F                 r2 = Null + 127;
0x00115D        FD000080 01500000        r3 = Null + -8388608;
0x00115F        E1F00210                 call $kal_float_lib.mul;
0x001160        E1F0FC06                 call $kal_filter_coef_lib.__db2lin;
0x001161        0042000F                 r2 = r0 + Null;
0x001162        0053000F                 r3 = r1 + Null;
0x001163        0026000F                 r0 = r4 + Null;
0x001164        0037000F                 r1 = r5 + Null;
0x001165        E1F0020A                 call $kal_float_lib.mul;
0x001166        0082000F                 r6 = r0 + Null;
0x001167        0093000F                 r7 = r1 + Null;
0x001168        0026000F                 r0 = r4 + Null;
0x001169        0037000F                 r1 = r5 + Null;
0x00116A        E1F00237                 call $kal_float_lib.div;
0x00116B        0042000F                 r2 = r0 + Null;
0x00116C        0053000F                 r3 = r1 + Null;
0x00116D        F128000A                 r0 = M[FP + 0xa];
0x00116E        F138000B                 r1 = M[FP + 0xb];
0x00116F        E1F00232                 call $kal_float_lib.div;
0x001170        0062000F                 r4 = r0 + Null;
0x001171        0073000F                 r5 = r1 + Null;
0x001172        F128000A                 r0 = M[FP + 0xa];
0x001173        F138000B                 r1 = M[FP + 0xb];
0x001174        0048000F                 r2 = r6 + Null;
0x001175        0059000F                 r3 = r7 + Null;
0x001176        E1F0022B                 call $kal_float_lib.div;
0x001177        0082000F                 r6 = r0 + Null;
0x001178        0093000F                 r7 = r1 + Null;
0x001179        F128000A                 r0 = M[FP + 0xa];
0x00117A        F138000B                 r1 = M[FP + 0xb];
0x00117B        0042000F                 r2 = r0 + Null;
0x00117C        0053000F                 r3 = r1 + Null;
0x00117D        E1F001F2                 call $kal_float_lib.mul;
0x00117E        F12C000A                 M[FP + 0xa] = r0;
0x00117F        F13C000B                 M[FP + 0xb] = r1;
0x001180        0048000F                 r2 = r6 + Null;
0x001181        0059000F                 r3 = r7 + Null;
0x001182        E1F001DB                 call $kal_float_lib.add;
0x001183        01400080                 r2 = Null + 128;
0x001184        FD000080 01500000        r3 = Null + -8388608;
0x001186        E1F001D7                 call $kal_float_lib.add;
0x001187        E1F001FD                 call $kal_float_lib.recip;
0x001188        F12C000C                 M[FP + 0xc] = r0;
0x001189        F13C000D                 M[FP + 0xd] = r1;
0x00118A        F1030006                 SP = SP + 6;
0x00118B        F128000A                 r0 = M[FP + 0xa];
0x00118C        F138000B                 r1 = M[FP + 0xb];
0x00118D        0046000F                 r2 = r4 + Null;
0x00118E        0057000F                 r3 = r5 + Null;
0x00118F        E1F001CE                 call $kal_float_lib.add;
0x001190        01400080                 r2 = Null + 128;
0x001191        FD000080 01500000        r3 = Null + -8388608;
0x001193        E1F001CA                 call $kal_float_lib.add;
0x001194        F148000C                 r2 = M[FP + 0xc];
0x001195        F158000D                 r3 = M[FP + 0xd];
0x001196        E1F001D9                 call $kal_float_lib.mul;
0x001197        F100000C                 pushm <r0, r1>;
0x001198        F128000A                 r0 = M[FP + 0xa];
0x001199        F138000B                 r1 = M[FP + 0xb];
0x00119A        01400081                 r2 = Null + 129;
0x00119B        FD000080 01500000        r3 = Null + -8388608;
0x00119D        E1F001D2                 call $kal_float_lib.mul;
0x00119E        E1F001C8                 call $kal_float_lib.sub;
0x00119F        F148000C                 r2 = M[FP + 0xc];
0x0011A0        F158000D                 r3 = M[FP + 0xd];
0x0011A1        E1F001CE                 call $kal_float_lib.mul;
0x0011A2        F100000C                 pushm <r0, r1>;
0x0011A3        F128000A                 r0 = M[FP + 0xa];
0x0011A4        F138000B                 r1 = M[FP + 0xb];
0x0011A5        0046000F                 r2 = r4 + Null;
0x0011A6        0057000F                 r3 = r5 + Null;
0x0011A7        E1F001BF                 call $kal_float_lib.sub;
0x0011A8        01400080                 r2 = Null + 128;
0x0011A9        FD000080 01500000        r3 = Null + -8388608;
0x0011AB        E1F001B2                 call $kal_float_lib.add;
0x0011AC        F148000C                 r2 = M[FP + 0xc];
0x0011AD        F158000D                 r3 = M[FP + 0xd];
0x0011AE        E1F001C1                 call $kal_float_lib.mul;
0x0011AF        F100000C                 pushm <r0, r1>;
0x0011B0        F128000A                 r0 = M[FP + 0xa];
0x0011B1        F138000B                 r1 = M[FP + 0xb];
0x0011B2        01400081                 r2 = Null + 129;
0x0011B3        FD000080 01500000        r3 = Null + -8388608;
0x0011B5        E1F001BA                 call $kal_float_lib.mul;
0x0011B6        E1F001B0                 call $kal_float_lib.sub;
0x0011B7        F148000C                 r2 = M[FP + 0xc];
0x0011B8        F158000D                 r3 = M[FP + 0xd];
0x0011B9        E1F001B6                 call $kal_float_lib.mul;
0x0011BA        F100000C                 pushm <r0, r1>;
0x0011BB        F128000A                 r0 = M[FP + 0xa];
0x0011BC        F138000B                 r1 = M[FP + 0xb];
0x0011BD        0048000F                 r2 = r6 + Null;
0x0011BE        0059000F                 r3 = r7 + Null;
0x0011BF        E1F001A7                 call $kal_float_lib.sub;
0x0011C0        01400080                 r2 = Null + 128;
0x0011C1        FD000080 01500000        r3 = Null + -8388608;
0x0011C3        E1F0019A                 call $kal_float_lib.add;
0x0011C4        F148000C                 r2 = M[FP + 0xc];
0x0011C5        F158000D                 r3 = M[FP + 0xd];
0x0011C6        E1F001A9                 call $kal_float_lib.mul;
0x0011C7        F100000C                 pushm <r0, r1>;
0x0011C8        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0011C9        F3240000                 pop r0;
0x0011CA        F12C7FF2                 M[FP + -0xe] = r0;
0x0011CB        F3240000                 pop r0;
0x0011CC        F12C7FF4                 M[FP + -0xc] = r0;
0x0011CD        F3240000                 pop r0;
0x0011CE        F12C7FF3                 M[FP + -0xd] = r0;
0x0011CF        F3240000                 pop r0;
0x0011D0        F12C7FF7                 M[FP + -0x9] = r0;
0x0011D1        F3240000                 pop r0;
0x0011D2        F12C7FF6                 M[FP + -0xa] = r0;
0x0011D3        F3240000                 pop r0;
0x0011D4        F12C7FF5                 M[FP + -0xb] = r0;
0x0011D5        F103FFFC                 SP = SP + -4;
0x0011D6        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0011D7        F103FFF8                 SP = SP + -8;
0x0011D8        DC0D000F                 rts;

 <$sbc.calc_bit_allocation>
0x0011D9        F3D00000                 push rLink;
0x0011DA        51900001                 M1 = Null + 1;
0x0011DB        D12B001E                 r0 = M[r9 + 30];
0x0011DC        81220002                 r0 = r0 AND 0x2;
0x0011DD        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x0011DE        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x0011DF        D13B0020                 r1 = M[r9 + 32];
0x0011E0        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x0011E1        D1CB0021                 r10 = M[r9 + 33];
0x0011E2        983200CF                 r1 = r0 * r10 (int);
0x0011E3        D1CB0018                 r10 = M[r9 + 24];
0x0011E4        501300CF                 I1 = r1 + r10;
0x0011E5        D1CB001A                 r10 = M[r9 + 26];
0x0011E6        502300CF                 I2 = r1 + r10;
0x0011E7        D1CB0021                 r10 = M[r9 + 33];
0x0011E8        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x0011E9        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0011EA        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x0011EB        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x0011EC        D1CB0021                 r10 = M[r9 + 33];
0x0011ED        983200CF                 r1 = r0 * r10 (int);
0x0011EE        D16B0018                 r4 = M[r9 + 24];
0x0011EF        5013006F                 I1 = r1 + r4;
0x0011F0        D16B001A                 r4 = M[r9 + 26];
0x0011F1        5023006F                 I2 = r1 + r4;
0x0011F2        E460003F                 r4 = Null - 1;
0x0011F3        D13B001C                 r1 = M[r9 + 28];
0x0011F4        9B3C0000                 r1 = r1 * r10 (int);
0x0011F5        D14B0017                 r2 = M[r9 + 23];
0x0011F6        5033004F                 I3 = r1 + r2;
0x0011F7        51440010                 I4 = r2 + 16;
0x0011F8        210C0008                 Null = r10 - 8;
0x0011F9        54330040                 if EQ I3 = r1 + I4;
0x0011FA        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x0011FB        0140FFFB                 r2 = Null + -5;
0x0011FC        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0011FD        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x0011FE        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x0011FF        2043005F                 r2 = r1 - r3;
0x001200        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x001201        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x001202        D1CB0021                 r10 = M[r9 + 33];
0x001203        983200CF                 r1 = r0 * r10 (int);
0x001204        D14B001A                 r2 = M[r9 + 26];
0x001205        5023004F                 I2 = r1 + r2;
0x001206        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x001207        D1CB0021                 r10 = M[r9 + 33];
0x001208        983200CF                 r1 = r0 * r10 (int);
0x001209        D17B001A                 r5 = M[r9 + 26];
0x00120A        5023007F                 I2 = r1 + r5;
0x00120B        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x00120C        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x00120D        D1CB0021                 r10 = M[r9 + 33];
0x00120E        983200CF                 r1 = r0 * r10 (int);
0x00120F        D1CB001B                 r10 = M[r9 + 27];
0x001210        501300CF                 I1 = r1 + r10;
0x001211        D1CB001A                 r10 = M[r9 + 26];
0x001212        502300CF                 I2 = r1 + r10;
0x001213        D1CB0021                 r10 = M[r9 + 33];
0x001214        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001215        D1CB0021                 r10 = M[r9 + 33];
0x001216        983200CF                 r1 = r0 * r10 (int);
0x001217        D16B001B                 r4 = M[r9 + 27];
0x001218        5013006F                 I1 = r1 + r4;
0x001219        D16B001A                 r4 = M[r9 + 26];
0x00121A        5023006F                 I2 = r1 + r4;
0x00121B        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x00121C        D13B0022                 r1 = M[r9 + 34];
0x00121D        2005003F                 Null = r3 - r1;
0x00121E        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x00121F        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001220        E466002F                 r4 = r4 + 1;
0x001221        200600CF                 Null = r4 - r10;
0x001222        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x001223        983200CF                 r1 = r0 * r10 (int);
0x001224        D16B001B                 r4 = M[r9 + 27];
0x001225        5013006F                 I1 = r1 + r4;
0x001226        D16B001A                 r4 = M[r9 + 26];
0x001227        5023006F                 I2 = r1 + r4;
0x001228        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x001229        D13B0022                 r1 = M[r9 + 34];
0x00122A        2005003F                 Null = r3 - r1;
0x00122B        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x00122C        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00122D        03007900                 Null = Null + Null, r5 = M[I2,1];
0x00122E        21030010                 Null = r1 - 16;
0x00122F        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x001230        E433002F                 r1 = r1 + 1;
0x001231        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x001232        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001233        E466002F                 r4 = r4 + 1;
0x001234        200600CF                 Null = r4 - r10;
0x001235        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x001236        E422002F                 r0 = r0 + 1;
0x001237        D13B001F                 r1 = M[r9 + 31];
0x001238        2002003F                 Null = r0 - r1;
0x001239        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x00123A        DDF0FB06                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x00123B        D13B0020                 r1 = M[r9 + 32];
0x00123C        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x00123D        D1CB0021                 r10 = M[r9 + 33];
0x00123E        99CC0002                 r10 = r10 * 2 (int);
0x00123F        D13B0018                 r1 = M[r9 + 24];
0x001240        5010003F                 I1 = Null + r1;
0x001241        D13B001A                 r1 = M[r9 + 26];
0x001242        5020003F                 I2 = Null + r1;
0x001243        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x001244        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001245        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x001246        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x001247        D12B0021                 r0 = M[r9 + 33];
0x001248        E460003F                 r4 = Null - 1;
0x001249        D13B0018                 r1 = M[r9 + 24];
0x00124A        5010003F                 I1 = Null + r1;
0x00124B        D13B001A                 r1 = M[r9 + 26];
0x00124C        5020003F                 I2 = Null + r1;
0x00124D        D13B001C                 r1 = M[r9 + 28];
0x00124E        9B320000                 r1 = r1 * r0 (int);
0x00124F        D14B0017                 r2 = M[r9 + 23];
0x001250        5043004F                 I4 = r1 + r2;
0x001251        51340010                 I3 = r2 + 16;
0x001252        21020008                 Null = r0 - 8;
0x001253        54430030                 if EQ I4 = r1 + I3;
0x001254        01200002                 r0 = Null + 2;
0x001255        0170FFF6                 r5 = Null + -10;
0x001256        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001257        D1CB0021                 r10 = M[r9 + 33];
0x001258        59340001                 I3 = I4 + 1;
0x001259        03000050                 Null = Null + Null, r3 = M[I4,0];
0x00125A        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x00125B        0003000F                 Null = r1 + Null;
0x00125C        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x00125D        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x00125E        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x00125F        E422003F                 r0 = r0 - 1;
0x001260        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x001261        D1CB0021                 r10 = M[r9 + 33];
0x001262        99CC0002                 r10 = r10 * 2 (int);
0x001263        D14B001A                 r2 = M[r9 + 26];
0x001264        5020004F                 I2 = Null + r2;
0x001265        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x001266        D1CB0021                 r10 = M[r9 + 33];
0x001267        99CC0002                 r10 = r10 * 2 (int);
0x001268        D17B001A                 r5 = M[r9 + 26];
0x001269        5020007F                 I2 = Null + r5;
0x00126A        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x00126B        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x00126C        D1CB001B                 r10 = M[r9 + 27];
0x00126D        501000CF                 I1 = Null + r10;
0x00126E        D1CB001A                 r10 = M[r9 + 26];
0x00126F        502000CF                 I2 = Null + r10;
0x001270        D1CB0021                 r10 = M[r9 + 33];
0x001271        99CC0002                 r10 = r10 * 2 (int);
0x001272        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001273        D1CB0021                 r10 = M[r9 + 33];
0x001274        01600000                 r4 = Null + 0;
0x001275        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x001276        5022006F                 I2 = r0 + r4;
0x001277        D13B001B                 r1 = M[r9 + 27];
0x001278        5812003F                 I1 = I2 + r1;
0x001279        D13B001A                 r1 = M[r9 + 26];
0x00127A        5B230000                 I2 = I2 + r1;
0x00127B        D13B0022                 r1 = M[r9 + 34];
0x00127C        2005003F                 Null = r3 - r1;
0x00127D        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x00127E        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x00127F        200200CF                 Null = r0 - r10;
0x001280        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x001281        002C000F                 r0 = r10 + Null;
0x001282        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x001283        01200000                 r0 = Null + 0;
0x001284        E466002F                 r4 = r4 + 1;
0x001285        200600CF                 Null = r4 - r10;
0x001286        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001287        01600000                 r4 = Null + 0;
0x001288        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001289        5022006F                 I2 = r0 + r4;
0x00128A        D13B001B                 r1 = M[r9 + 27];
0x00128B        5812003F                 I1 = I2 + r1;
0x00128C        D13B001A                 r1 = M[r9 + 26];
0x00128D        5B230000                 I2 = I2 + r1;
0x00128E        D13B0022                 r1 = M[r9 + 34];
0x00128F        2005003F                 Null = r3 - r1;
0x001290        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x001291        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001292        03007800                 Null = Null + Null, r5 = M[I2,0];
0x001293        21030010                 Null = r1 - 16;
0x001294        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x001295        E433002F                 r1 = r1 + 1;
0x001296        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001297        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001298        200200CF                 Null = r0 - r10;
0x001299        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x00129A        002C000F                 r0 = r10 + Null;
0x00129B        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x00129C        01200000                 r0 = Null + 0;
0x00129D        E466002F                 r4 = r4 + 1;
0x00129E        200600CF                 Null = r4 - r10;
0x00129F        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x0012A0        DDF0FAA0                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x0012A1        01400000                 r2 = Null + 0;
0x0012A2        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x0012A3        03003900                 Null = Null + Null, r1 = M[I2,1];
0x0012A4        2004003F                 Null = r2 - r1;
0x0012A5        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x0012A6        01500000                 r3 = Null + 0;
0x0012A7        01600000                 r4 = Null + 0;
0x0012A8        E444002F                 r2 = r2 + 1;
0x0012A9        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x0012AA        E444003F                 r2 = r2 - 1;
0x0012AB        03560000                 r3 = r3 + r4;
0x0012AC        01600000                 r4 = Null + 0;
0x0012AD        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x0012AE        03003900                 Null = Null + Null, r1 = M[I2,1];
0x0012AF        2073004F                 r5 = r1 - r2;
0x0012B0        21070002                 Null = r5 - 2;
0x0012B1        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x0012B2        21070010                 Null = r5 - 16;
0x0012B3        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x0012B4        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x0012B5        E407003F                 Null = r5 - 1;
0x0012B6        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x0012B7        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x0012B8        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x0012B9        0075006F                 r5 = r3 + r4;
0x0012BA        D1CB0022                 r10 = M[r9 + 34];
0x0012BB        200700CF                 Null = r5 - r10;
0x0012BC        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x0012BD        D13B0022                 r1 = M[r9 + 34];
0x0012BE        2007003F                 Null = r5 - r1;
0x0012BF        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x0012C0        03560000                 r3 = r3 + r4;
0x0012C1        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x0012C2        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x0012C3        03003900                 Null = Null + Null, r1 = M[I2,1];
0x0012C4        2073004F                 r5 = r1 - r2;
0x0012C5        01300000                 r1 = Null + 0;
0x0012C6        21070002                 Null = r5 - 2;
0x0012C7        00370005                 if POS r1 = r5 + Null;
0x0012C8        01700010                 r5 = Null + 16;
0x0012C9        21030010                 Null = r1 - 16;
0x0012CA        00370005                 if POS r1 = r5 + Null;
0x0012CB        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x0012CC        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x0012CD        03003400                 Null = Null + Null, r1 = M[I1,0];
0x0012CE        03007900                 Null = Null + Null, r5 = M[I2,1];
0x0012CF        21030002                 Null = r1 - 2;
0x0012D0        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x0012D1        21030010                 Null = r1 - 16;
0x0012D2        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x0012D3        E433002F                 r1 = r1 + 1;
0x0012D4        E455002F                 r3 = r3 + 1;
0x0012D5        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x0012D6        23740000                 r5 = r5 - r2;
0x0012D7        E407003F                 Null = r5 - 1;
0x0012D8        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x0012D9        D17B0022                 r5 = M[r9 + 34];
0x0012DA        23750000                 r5 = r5 - r3;
0x0012DB        21070002                 Null = r5 - 2;
0x0012DC        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x0012DD        01300002                 r1 = Null + 2;
0x0012DE        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x0012DF        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0012E0        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x0012E1        E420002F                 r0 = Null + 1;
0x0012E2        D52B0036                 M[r9 + 54] = r0;
0x0012E3        DDF0FA5D                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x0012E4        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x0012E5        01200000                 r0 = Null + 0;
0x0012E6        01300000                 r1 = Null + 0;
0x0012E7        F3D40000                 pop rLink;
0x0012E8        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x0012E9        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x0012EA        0003000F                 Null = r1 + Null;
0x0012EB        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0012EC        F3600000                 push r4;
0x0012ED        816200FF                 r4 = r0 AND 0xff;
0x0012EE        FD000080 81220000        r0 = r0 AND 0x800000;
0x0012F0        0003000F                 Null = r1 + Null;
0x0012F1        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x0012F2        E466003F                 r4 = r4 - 1;
0x0012F3        8D330001                 r1 = r1 LSHIFT 1;
0x0012F4        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x0012F5        816600FF                 r4 = r4 AND 0xff;
0x0012F6        87260000                 r0 = r0 OR r4;
0x0012F7        F3640000                 pop r4;
0x0012F8        F3D40000                 pop rLink;
0x0012F9        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x0012FA        F1000330                 pushm <r2, r3, r6, r7>;
0x0012FB        0003000F                 Null = r1 + Null;
0x0012FC        00240000                 if EQ r0 = r2 + Null;
0x0012FD        0005000F                 Null = r3 + Null;
0x0012FE        00420000                 if EQ r2 = r0 + Null;
0x0012FF        817200FF                 r5 = r0 AND 0xff;
0x001300        818400FF                 r6 = r2 AND 0xff;
0x001301        2097008F                 r7 = r5 - r6;
0x001302        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x001303        2090009F                 r7 = Null - r7;
0x001304        8F590000                 r3 = r3 LSHIFT r7;
0x001305        E427002F                 r0 = r5 + 1;
0x001306        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x001307        8F390000                 r1 = r1 LSHIFT r7;
0x001308        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x001309        8D33007F                 r1 = r1 LSHIFT -1;
0x00130A        8D55007F                 r3 = r3 LSHIFT -1;
0x00130B        03350000                 r1 = r1 + r3;
0x00130C        87260000                 r0 = r0 OR r4;
0x00130D        F1040330                 popm <r2, r3, r6, r7>;
0x00130E        F10400C0                 popm <r4, r5>;
0x00130F        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x001310        F1000330                 pushm <r2, r3, r6, r7>;
0x001311        0003000F                 Null = r1 + Null;
0x001312        00240000                 if EQ r0 = r2 + Null;
0x001313        0005000F                 Null = r3 + Null;
0x001314        00420000                 if EQ r2 = r0 + Null;
0x001315        817200FF                 r5 = r0 AND 0xff;
0x001316        818400FF                 r6 = r2 AND 0xff;
0x001317        2097008F                 r7 = r5 - r6;
0x001318        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x001319        2090009F                 r7 = Null - r7;
0x00131A        8F590000                 r3 = r3 LSHIFT r7;
0x00131B        E427002F                 r0 = r5 + 1;
0x00131C        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x00131D        8F390000                 r1 = r1 LSHIFT r7;
0x00131E        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x00131F        8D33007F                 r1 = r1 LSHIFT -1;
0x001320        8D55007F                 r3 = r3 LSHIFT -1;
0x001321        2003005F                 Null = r1 - r3;
0x001322        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x001323        23350000                 r1 = r1 - r3;
0x001324        87260000                 r0 = r0 OR r4;
0x001325        F1040330                 popm <r2, r3, r6, r7>;
0x001326        F10400C0                 popm <r4, r5>;
0x001327        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x001328        2035003F                 r1 = r3 - r1;
0x001329        FD000080 89660000        r4 = r4 XOR 0x800000;
0x00132B        87260000                 r0 = r0 OR r4;
0x00132C        F1040330                 popm <r2, r3, r6, r7>;
0x00132D        F10400C0                 popm <r4, r5>;
0x00132E        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x00132F        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x001330        0002000F                 Null = r0 + Null;
0x001331        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001332        F1000050                 pushm <r2, r4>;
0x001333        0042000F                 r2 = r0 + Null;
0x001334        FD000080 81620000        r4 = r0 AND 0x800000;
0x001336        20400041                 if NE r2 = Null - r2;
0x001337        0123007F                 r0 = r1 + 127;
0x001338        87260000                 r0 = r0 OR r4;
0x001339        0034000F                 r1 = r2 + Null;
0x00133A        F1040050                 popm <r2, r4>;
0x00133B        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x00133C        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x00133D        F1000060                 pushm <r3, r4>;
0x00133E        8D33007F                 r1 = r1 LSHIFT -1;
0x00133F        815200FF                 r3 = r0 AND 0xff;
0x001340        E455003F                 r3 = r3 - 1;
0x001341        FD000080 81620000        r4 = r0 AND 0x800000;
0x001343        20300031                 if NE r1 = Null - r1;
0x001344        21550097                 r3 = r3 - 151;
0x001345        03540000                 r3 = r3 + r2;
0x001346        9023005F                 r0 = r1 ASHIFT r3;
0x001347        F1040060                 popm <r3, r4>;
0x001348        F3D40000                 pop rLink;
0x001349        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x00134A        F3D00000                 push rLink;
0x00134B        01300018                 r1 = Null + 24;
0x00134C        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x00134D        F3D00000                 push rLink;
0x00134E        E430002F                 r1 = Null + 1;
0x00134F        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x001350        F1002010                 pushm <r2, rLink>;
0x001351        01400002                 r2 = Null + 2;
0x001352        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x001353        F1042010                 popm <r2, rLink>;
0x001354        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x001355        F1002010                 pushm <r2, rLink>;
0x001356        01400019                 r2 = Null + 25;
0x001357        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001358        F1042010                 popm <r2, rLink>;
0x001359        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x00135A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00135C        DC0D000F                 rts;

 <$kal_float_lib.add>
0x00135D        F3D00000                 push rLink;
0x00135E        F10000C0                 pushm <r4, r5>;
0x00135F        FD000080 81620000        r4 = r0 AND 0x800000;
0x001361        FD000080 81740000        r5 = r2 AND 0x800000;
0x001363        2006007F                 Null = r4 - r5;
0x001364        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x001365        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x001366        F3D00000                 push rLink;
0x001367        F10000C0                 pushm <r4, r5>;
0x001368        FD000080 81620000        r4 = r0 AND 0x800000;
0x00136A        FD000080 81740000        r5 = r2 AND 0x800000;
0x00136C        2006007F                 Null = r4 - r5;
0x00136D        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x00136E        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x00136F        F3D00000                 push rLink;
0x001370        0003000F                 Null = r1 + Null;
0x001371        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001372        0005000F                 Null = r3 + Null;
0x001373        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001374        F10000E0                 pushm <r3, r4, r5>;
0x001375        816200FF                 r4 = r0 AND 0xff;
0x001376        817400FF                 r5 = r2 AND 0xff;
0x001377        03670000                 r4 = r4 + r5;
0x001378        2166007F                 r4 = r4 - 127;
0x001379        8872004F                 r5 = r0 XOR r2;
0x00137A        FD000080 81770000        r5 = r5 AND 0x800000;
0x00137C        8426007F                 r0 = r4 OR r5;
0x00137D        8D33007F                 r1 = r1 LSHIFT -1;
0x00137E        8D55007F                 r3 = r3 LSHIFT -1;
0x00137F        CC13005F                 rMAC = r1 * r3 (SS);
0x001380        0031000F                 r1 = rMAC + Null;
0x001381        8D330001                 r1 = r1 LSHIFT 1;
0x001382        F10400E0                 popm <r3, r4, r5>;
0x001383        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x001384        F3D00000                 push rLink;
0x001385        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001386        654200FF                 r2 = 255 - r0;
0x001387        91530017                 r3 = r1 ASHIFT 23;
0x001388        F100000C                 pushm <r0, r1>;
0x001389        01C00006                 r10 = Null + 6;
0x00138A        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x00138B        F104000C                 popm <r0, r1>;
0x00138C        F100000C                 pushm <r0, r1>;
0x00138D        E1F0FFE2                 call $kal_float_lib.mul;
0x00138E        F100003C                 pushm <r0, r1, r2, r3>;
0x00138F        F10400F0                 popm <r2, r3, r4, r5>;
0x001390        01200080                 r0 = Null + 128;
0x001391        FD000080 01300000        r1 = Null + -8388608;
0x001393        E1F0FFD3                 call $kal_float_lib.sub;
0x001394        0046000F                 r2 = r4 + Null;
0x001395        0057000F                 r3 = r5 + Null;
0x001396        E1F0FFD9                 call $kal_float_lib.mul;
0x001397        0046000F                 r2 = r4 + Null;
0x001398        0057000F                 r3 = r5 + Null;
0x001399        E1F0FFC4                 call $kal_float_lib.add;
0x00139A        0042000F                 r2 = r0 + Null;
0x00139B        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x00139C        F104000C                 popm <r0, r1>;
0x00139D        0024000F                 r0 = r2 + Null;
0x00139E        0035000F                 r1 = r3 + Null;
0x00139F        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x0013A0        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x0013A1        F3D00000                 push rLink;
0x0013A2        F1000030                 pushm <r2, r3>;
0x0013A3        F100000C                 pushm <r0, r1>;
0x0013A4        0024000F                 r0 = r2 + Null;
0x0013A5        0035000F                 r1 = r3 + Null;
0x0013A6        E1F0FFDE                 call $kal_float_lib.recip;
0x0013A7        0042000F                 r2 = r0 + Null;
0x0013A8        0053000F                 r3 = r1 + Null;
0x0013A9        F104000C                 popm <r0, r1>;
0x0013AA        E1F0FFC5                 call $kal_float_lib.mul;
0x0013AB        F1040030                 popm <r2, r3>;
0x0013AC        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x0013AD        F3D00000                 push rLink;
0x0013AE        0002000F                 Null = r0 + Null;
0x0013AF        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x0013B0        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x0013B1        0062000F                 r4 = r0 + Null;
0x0013B2        0073000F                 r5 = r1 + Null;
0x0013B3        E482003F                 r6 = r0 - 1;
0x0013B4        0093000F                 r7 = r1 + Null;
0x0013B5        E466003F                 r4 = r4 - 1;
0x0013B6        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x0013B8        8D66000E                 r4 = r4 LSHIFT 14;
0x0013B9        8D770077                 r5 = r5 LSHIFT -9;
0x0013BA        87670000                 r4 = r4 OR r5;
0x0013BB        FD00005F 01703759        r5 = Null + 6240089;
0x0013BD        2067006F                 r4 = r5 - r4;
0x0013BE        8D760008                 r5 = r4 LSHIFT 8;
0x0013BF        FD000080 85770000        r5 = r5 OR 0x800000;
0x0013C1        8D660071                 r4 = r4 LSHIFT -15;
0x0013C2        E466002F                 r4 = r4 + 1;
0x0013C3        01C00003                 r10 = Null + 3;
0x0013C4        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x0013C5        0026000F                 r0 = r4 + Null;
0x0013C6        0037000F                 r1 = r5 + Null;
0x0013C7        0046000F                 r2 = r4 + Null;
0x0013C8        0057000F                 r3 = r5 + Null;
0x0013C9        E1F0FFA6                 call $kal_float_lib.mul;
0x0013CA        0048000F                 r2 = r6 + Null;
0x0013CB        0059000F                 r3 = r7 + Null;
0x0013CC        E1F0FFA3                 call $kal_float_lib.mul;
0x0013CD        0042000F                 r2 = r0 + Null;
0x0013CE        0053000F                 r3 = r1 + Null;
0x0013CF        01200080                 r0 = Null + 128;
0x0013D0        FD0000C0 01300000        r1 = Null + -4194304;
0x0013D2        E1F0FF94                 call $kal_float_lib.sub;
0x0013D3        0046000F                 r2 = r4 + Null;
0x0013D4        0057000F                 r3 = r5 + Null;
0x0013D5        E1F0FF9A                 call $kal_float_lib.mul;
0x0013D6        0062000F                 r4 = r0 + Null;
0x0013D7        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x0013D8        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x0013D9        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$sbcenc.frame_encode>
0x0013DA        F3D00000                 push rLink;
0x0013DB        19700075                 M[$sbcenc.codec_struc] = r5 + Null;
0x0013DC        D1B70004                 r9 = M[r5 + 4];
0x0013DD        E1F005ED                 call $sbcenc.encoder_set_parameters;
0x0013DE        D12B0021                 r0 = M[r9 + 33];
0x0013DF        D13B001D                 r1 = M[r9 + 29];
0x0013E0        9862003F                 r4 = r0 * r1 (int);
0x0013E1        D1270001                 r0 = M[r5 + 1];
0x0013E2        DD000005                 if EQ jump $M.sbcenc.frame_encode.enough_input_data_left;
0x0013E3        E1F0F8FE                 call $cbuffer.calc_amount_data;
0x0013E4        2002006F                 Null = r0 - r4;
0x0013E5        DD500002                 if POS jump $M.sbcenc.frame_encode.enough_input_data_left;
0x0013E6        DDF00006                 jump $M.sbcenc.frame_encode.not_enough_data;

 <$M.sbcenc.frame_encode.enough_input_data_left>
0x0013E7        D1270002                 r0 = M[r5 + 2];
0x0013E8        DD000007                 if EQ jump $M.sbcenc.frame_encode.enough_input_data_right;
0x0013E9        E1F0F8F8                 call $cbuffer.calc_amount_data;
0x0013EA        2002006F                 Null = r0 - r4;
0x0013EB        DD500004                 if POS jump $M.sbcenc.frame_encode.enough_input_data_right;

 <$M.sbcenc.frame_encode.not_enough_data>
0x0013EC        E420002F                 r0 = Null + 1;
0x0013ED        D5270003                 M[r5 + 3] = r0;
0x0013EE        DDF00052                 jump $M.sbcenc.frame_encode.exit;

 <$M.sbcenc.frame_encode.enough_input_data_right>
0x0013EF        E1F00694                 call $sbc.calc_frame_length;
0x0013F0        9162007F                 r4 = r0 ASHIFT -1;
0x0013F1        01660003                 r4 = r4 + 3;
0x0013F2        D1270000                 r0 = M[r5 + 0];
0x0013F3        E1F0F8DE                 call $cbuffer.calc_amount_space;
0x0013F4        2002006F                 Null = r0 - r4;
0x0013F5        DD500004                 if POS jump $M.sbcenc.frame_encode.enough_output_space;
0x0013F6        01200002                 r0 = Null + 2;
0x0013F7        D5270003                 M[r5 + 3] = r0;
0x0013F8        DDF00048                 jump $M.sbcenc.frame_encode.exit;

 <$M.sbcenc.frame_encode.enough_output_space>
0x0013F9        D1270001                 r0 = M[r5 + 1];
0x0013FA        19201F74                 M[$scratch.s0] = r0 + Null;
0x0013FB        D1270002                 r0 = M[r5 + 2];
0x0013FC        FD0000FF 19204F74        M[$scratch.s1] = r0 + Null;
0x0013FE        01200000                 r0 = Null + 0;
0x0013FF        19201F75                 M[$scratch.s2] = r0 + Null;
0x001400        E1F00041                 call $M.sbcenc.frame_encode.channel_processing;
0x001401        D1270001                 r0 = M[r5 + 1];
0x001402        FD0000FF 19204F74        M[$scratch.s1] = r0 + Null;
0x001404        D1270002                 r0 = M[r5 + 2];
0x001405        19201F74                 M[$scratch.s0] = r0 + Null;
0x001406        E420002F                 r0 = Null + 1;
0x001407        19201F75                 M[$scratch.s2] = r0 + Null;
0x001408        E1F00039                 call $M.sbcenc.frame_encode.channel_processing;
0x001409        D12B001F                 r0 = M[r9 + 31];
0x00140A        E402003F                 Null = r0 - 1;
0x00140B        DD100017                 if NE jump $M.sbcenc.frame_encode.dont_merge_left_and_right;
0x00140C        D1270001                 r0 = M[r5 + 1];
0x00140D        DD000015                 if EQ jump $M.sbcenc.frame_encode.dont_merge_left_and_right;
0x00140E        D1270002                 r0 = M[r5 + 2];
0x00140F        DD000013                 if EQ jump $M.sbcenc.frame_encode.dont_merge_left_and_right;
0x001410        D14B0014                 r2 = M[r9 + 20];
0x001411        5000004F                 I0 = Null + r2;
0x001412        D1CB0021                 r10 = M[r9 + 33];
0x001413        581000CF                 I1 = I0 + r10;
0x001414        5820000F                 I2 = I0 + Null;
0x001415        D14B001D                 r2 = M[r9 + 29];

 <$M.sbcenc.frame_encode.mono_merge_block_loop>
0x001416        E5F00007                 do $M.sbcenc.frame_encode.mono_merge_subband_loop;
0x001417        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001418        95224000                 r0 = r0 * 0.5 (frac);
0x001419        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00141A        95334000                 r1 = r1 * 0.5 (frac);
0x00141B        03230000                 r0 = r0 + r1;
0x00141C        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.sbcenc.frame_encode.mono_merge_subband_loop>
0x00141D        D1CB0021                 r10 = M[r9 + 33];
0x00141E        5B0C0000                 I0 = I0 + r10;
0x00141F        5B1C0000                 I1 = I1 + r10;
0x001420        E444003F                 r2 = r2 - 1;
0x001421        DD10FFF5                 if NE jump $M.sbcenc.frame_encode.mono_merge_block_loop;

 <$M.sbcenc.frame_encode.dont_merge_left_and_right>
0x001422        E1F005BE                 call $sbc.calc_scale_factors;
0x001423        D12B001E                 r0 = M[r9 + 30];
0x001424        21020003                 Null = r0 - 3;
0x001425        E10001A1                 if EQ call $sbcenc.joint_stereo_encode;
0x001426        09700075                 r5 = Null + M[$sbcenc.codec_struc];
0x001427        D1270000                 r0 = M[r5 + 0];
0x001428        E1F0F8EA                 call $cbuffer.get_write_address_and_size;
0x001429        5000002F                 I0 = Null + r0;
0x00142A        50C0003F                 L0 = Null + r1;
0x00142B        09700075                 r5 = Null + M[$sbcenc.codec_struc];
0x00142C        D13B0007                 r1 = M[r9 + 7];
0x00142D        D1230000                 r0 = M[r1 + 0];
0x00142E        E0020001                 if NE call r0;
0x00142F        E1F00316                 call $sbcenc.write_frame_header;
0x001430        E1F0070D                 call $sbcenc.write_scale_factors;
0x001431        E1F0FDA8                 call $sbc.calc_bit_allocation;
0x001432        E1F004BF                 call $sbcenc.quantize_samples;
0x001433        E1F00672                 call $sbcenc.write_audio_samples;
0x001434        E1F00728                 call $sbcenc.write_padding_bits;
0x001435        D13B0007                 r1 = M[r9 + 7];
0x001436        09700075                 r5 = Null + M[$sbcenc.codec_struc];
0x001437        D1230003                 r0 = M[r1 + 3];
0x001438        E0020001                 if NE call r0;
0x001439        09700075                 r5 = Null + M[$sbcenc.codec_struc];
0x00143A        4430000F                 r1 = Null + I0;
0x00143B        D1270000                 r0 = M[r5 + 0];
0x00143C        E1F0F8EA                 call $cbuffer.set_write_address;
0x00143D        51C00000                 L0 = Null + 0;
0x00143E        01200000                 r0 = Null + 0;
0x00143F        D5270003                 M[r5 + 3] = r0;

 <$M.sbcenc.frame_encode.exit>
0x001440        DDF0F900                 jump $pop_rLink_and_rts;

 <$M.sbcenc.frame_encode.channel_processing>
0x001441        F3D00000                 push rLink;
0x001442        09201F74                 r0 = Null + M[$scratch.s0];
0x001443        DD000026                 if EQ jump $M.sbcenc.frame_encode.dont_repeat_cur_channel;
0x001444        E1F0F8C9                 call $cbuffer.get_read_address_and_size;
0x001445        5010002F                 I1 = Null + r0;
0x001446        50D0003F                 L1 = Null + r1;
0x001447        01800000                 r6 = Null + 0;
0x001448        D13B0021                 r1 = M[r9 + 33];
0x001449        D12B001F                 r0 = M[r9 + 31];
0x00144A        21020002                 Null = r0 - 2;
0x00144B        00830000                 if EQ r6 = r1 + Null;
0x00144C        FD0000FF 09204F74        r0 = Null + M[$scratch.s1];
0x00144E        00830001                 if NE r6 = r1 + Null;
0x00144F        09701F75                 r5 = Null + M[$scratch.s2];
0x001450        E1F0010A                 call $sbcenc.analysis_subband_filter;
0x001451        09700075                 r5 = Null + M[$sbcenc.codec_struc];
0x001452        4430001F                 r1 = Null + I1;
0x001453        09201F74                 r0 = Null + M[$scratch.s0];
0x001454        E1F0F8CE                 call $cbuffer.set_read_address;
0x001455        51D00000                 L1 = Null + 0;
0x001456        D12B001F                 r0 = M[r9 + 31];
0x001457        E402003F                 Null = r0 - 1;
0x001458        DD000011                 if EQ jump $M.sbcenc.frame_encode.dont_repeat_cur_channel;
0x001459        FD0000FF 09204F74        r0 = Null + M[$scratch.s1];
0x00145B        DD10000E                 if NE jump $M.sbcenc.frame_encode.dont_repeat_cur_channel;
0x00145C        D16B0021                 r4 = M[r9 + 33];
0x00145D        D15B0014                 r3 = M[r9 + 20];
0x00145E        5010005F                 I1 = Null + r3;
0x00145F        5821006F                 I2 = I1 + r4;
0x001460        D15B001D                 r3 = M[r9 + 29];

 <$M.sbcenc.frame_encode.repeat_cur_channel_block_loop>
0x001461        D1CB0021                 r10 = M[r9 + 33];
0x001462        E5F00003                 do $M.sbcenc.frame_encode.repeat_cur_channel_subband_loop;
0x001463        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001464        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.sbcenc.frame_encode.repeat_cur_channel_subband_loop>
0x001465        5B160000                 I1 = I1 + r4;
0x001466        5B260000                 I2 = I2 + r4;
0x001467        E455003F                 r3 = r3 - 1;
0x001468        DD10FFF9                 if NE jump $M.sbcenc.frame_encode.repeat_cur_channel_block_loop;

 <$M.sbcenc.frame_encode.dont_repeat_cur_channel>
0x001469        DDF0F8D7                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x00146A        F3D00000                 push rLink;
0x00146B        1970006D                 M[$sbcdec.codec_struc] = r5 + Null;
0x00146C        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x00146D        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x00146E        D1270000                 r0 = M[r5 + 0];
0x00146F        E1F0F89E                 call $cbuffer.get_read_address_and_size;
0x001470        5000002F                 I0 = Null + r0;
0x001471        50C0003F                 L0 = Null + r1;
0x001472        D1270000                 r0 = M[r5 + 0];
0x001473        E1F0F86E                 call $cbuffer.calc_amount_data;
0x001474        00C2002F                 r10 = r0 + r0;
0x001475        21CC0002                 r10 = r10 - 2;
0x001476        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x001477        006C000F                 r4 = r10 + Null;
0x001478        E1F0064A                 call $sbcdec.find_sync;
0x001479        21080063                 Null = r6 - 99;
0x00147A        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x00147B        236C0000                 r4 = r4 - r10;
0x00147C        D1270003                 r0 = M[r5 + 3];
0x00147D        21020002                 Null = r0 - 2;
0x00147E        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x00147F        D1270001                 r0 = M[r5 + 1];
0x001480        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001481        E1F0F850                 call $cbuffer.calc_amount_space;
0x001482        21020080                 Null = r0 - 128;
0x001483        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001484        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x001485        D1270002                 r0 = M[r5 + 2];
0x001486        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001487        E1F0F84A                 call $cbuffer.calc_amount_space;
0x001488        21020080                 Null = r0 - 128;
0x001489        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x00148A        01200002                 r0 = Null + 2;
0x00148B        D5270003                 M[r5 + 3] = r0;
0x00148C        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x00148D        D1270000                 r0 = M[r5 + 0];
0x00148E        E1F0F853                 call $cbuffer.calc_amount_data;
0x00148F        03220000                 r0 = r0 + r0;
0x001490        23260000                 r0 = r0 - r4;
0x001491        21020016                 Null = r0 - 22;
0x001492        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x001493        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x001494        E420002F                 r0 = Null + 1;
0x001495        D5270003                 M[r5 + 3] = r0;
0x001496        D1270000                 r0 = M[r5 + 0];
0x001497        4430000F                 r1 = Null + I0;
0x001498        E1F0F88A                 call $cbuffer.set_read_address;
0x001499        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x00149A        D52B0037                 M[r9 + 55] = r0;
0x00149B        E1F002F1                 call $sbcdec.read_frame_header;
0x00149C        D12B0039                 r0 = M[r9 + 57];
0x00149D        D13B0037                 r1 = M[r9 + 55];
0x00149E        2002003F                 Null = r0 - r1;
0x00149F        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x0014A0        5802000F                 I0 = I2 + Null;
0x0014A1        D58B003B                 M[r9 + 59] = r6;
0x0014A2        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x0014A3        D10B0036                 Null = M[r9 + 54];
0x0014A4        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x0014A5        E1F0064A                 call $sbcdec.read_scale_factors;
0x0014A6        D12B0023                 r0 = M[r9 + 35];
0x0014A7        D13B0024                 r1 = M[r9 + 36];
0x0014A8        23230000                 r0 = r0 - r1;
0x0014A9        812200FF                 r0 = r0 AND 0xff;
0x0014AA        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x0014AB        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014AC        4430000F                 r1 = Null + I0;
0x0014AD        D1270000                 r0 = M[r5 + 0];
0x0014AE        E1F0F874                 call $cbuffer.set_read_address;
0x0014AF        51C00000                 L0 = Null + 0;
0x0014B0        D12B003A                 r0 = M[r9 + 58];
0x0014B1        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x0014B2        01200005                 r0 = Null + 5;
0x0014B3        D5270003                 M[r5 + 3] = r0;
0x0014B4        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x0014B5        E1F0FD24                 call $sbc.calc_bit_allocation;
0x0014B6        E1F005BB                 call $sbcdec.read_audio_samples;
0x0014B7        E1F006CA                 call $sbcdec.byte_align;
0x0014B8        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014B9        4430000F                 r1 = Null + I0;
0x0014BA        D1270000                 r0 = M[r5 + 0];
0x0014BB        E1F0F867                 call $cbuffer.set_read_address;
0x0014BC        51C00000                 L0 = Null + 0;
0x0014BD        D1270003                 r0 = M[r5 + 3];
0x0014BE        21020000                 Null = r0 - 0;
0x0014BF        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x0014C0        E1F003DD                 call $sbcdec.sample_reconstruction;
0x0014C1        D12B001E                 r0 = M[r9 + 30];
0x0014C2        21020003                 Null = r0 - 3;
0x0014C3        E10004D4                 if EQ call $sbcdec.joint_stereo_decode;
0x0014C4        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014C5        D1270001                 r0 = M[r5 + 1];
0x0014C6        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x0014C7        E1F0F84B                 call $cbuffer.get_write_address_and_size;
0x0014C8        5010002F                 I1 = Null + r0;
0x0014C9        50D0003F                 L1 = Null + r1;
0x0014CA        01700000                 r5 = Null + 0;
0x0014CB        E1F0021B                 call $sbcdec.synthesis_subband_filter;
0x0014CC        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014CD        4430001F                 r1 = Null + I1;
0x0014CE        D1270001                 r0 = M[r5 + 1];
0x0014CF        E1F0F857                 call $cbuffer.set_write_address;
0x0014D0        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x0014D1        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014D2        D1270002                 r0 = M[r5 + 2];
0x0014D3        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x0014D4        E1F0F83E                 call $cbuffer.get_write_address_and_size;
0x0014D5        5010002F                 I1 = Null + r0;
0x0014D6        50D0003F                 L1 = Null + r1;
0x0014D7        E470002F                 r5 = Null + 1;
0x0014D8        E1F0020E                 call $sbcdec.synthesis_subband_filter;
0x0014D9        0970006D                 r5 = Null + M[$sbcdec.codec_struc];
0x0014DA        4430001F                 r1 = Null + I1;
0x0014DB        D1270002                 r0 = M[r5 + 2];
0x0014DC        E1F0F84A                 call $cbuffer.set_write_address;
0x0014DD        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x0014DE        01200000                 r0 = Null + 0;
0x0014DF        D5270003                 M[r5 + 3] = r0;
0x0014E0        D12B001D                 r0 = M[r9 + 29];
0x0014E1        D13B0021                 r1 = M[r9 + 33];
0x0014E2        9B230000                 r0 = r0 * r1 (int);
0x0014E3        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x0014E4        51C00000                 L0 = Null + 0;
0x0014E5        DDF0F85B                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy>
0x0014E6        F3D00000                 push rLink;
0x0014E7        E1F00526                 call $cbops.av_copy.init_avcopy_struct;
0x0014E8        19301F88                 M[$M.cbops.av_copy.control_port] = r1 + Null;
0x0014E9        FD0000FF 19204F88        M[$M.cbops.av_copy.control_cbuffer] = r0 + Null;
0x0014EB        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0014EC        E1F0F81B                 call $cbuffer.is_it_enabled;
0x0014ED        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x0014EE        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0014F0        E1F0F7F1                 call $cbuffer.calc_amount_data;
0x0014F1        FD0000FF 19204F8B        M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x0014F3        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0014F4        E1F0F7DD                 call $cbuffer.calc_amount_space;
0x0014F5        9144007F                 r2 = r2 ASHIFT -1;
0x0014F6        29321F8A                 r1 = r0 - M[$M.cbops.dac_av_copy.prev_port_mnt_space];
0x0014F7        19201F8A                 M[$M.cbops.dac_av_copy.prev_port_mnt_space] = r0 + Null;
0x0014F8        09331F8C                 r1 = r1 + M[$M.cbops.dac_av_copy.port_amount_written];
0x0014F9        00330044                 if NEG r1 = r1 + r2;
0x0014FA        DD40000C                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x0014FB        91230008                 r0 = r1 ASHIFT 8;
0x0014FC        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x0014FE        FD0000FF 09304F89        r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001500        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x001502        03320000                 r1 = r1 + r0;
0x001503        FD0000FF 19304F89        M[$M.cbops.dac_av_copy.port_mnt_data_avg] = r1 + Null;
0x001505        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x001506        FD0000FF 19004F87        M[$cbops.amount_written] = Null + Null;
0x001508        E1F0EF09                 call $cbops.copy;
0x001509        FD0000FF 09204F87        r0 = Null + M[$cbops.amount_written];
0x00150B        19201F8C                 M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;
0x00150C        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x00150D        E1F0F7C4                 call $cbuffer.calc_amount_space;
0x00150E        9144007F                 r2 = r2 ASHIFT -1;
0x00150F        2024002F                 r0 = r2 - r0;
0x001510        FD0000FF 09304F89        r1 = Null + M[$M.cbops.dac_av_copy.port_mnt_data_avg];
0x001512        91330078                 r1 = r1 ASHIFT -8;
0x001513        FD0000FF 09004F8B        Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x001515        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x001516        2093002F                 r7 = r1 - r0;
0x001517        DDB00014                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x001518        0093000F                 r7 = r1 + Null;
0x001519        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x00151A        6592006E                 r7 = 110 - r0;
0x00151B        DD400010                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x00151C        00C9000F                 r10 = r7 + Null;
0x00151D        FD0000FF 01204F4A        r0 = Null + -45238;
0x00151F        E1F00632                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001520        00C9000F                 r10 = r7 + Null;
0x001521        01201F4F                 r0 = Null + 8015;
0x001522        E1F0062F                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x001523        01A01BC7                 r8 = Null + 7111;
0x001524        FD0000FF 19004F87        M[$cbops.amount_written] = Null + Null;
0x001526        E1F0EEEB                 call $cbops.copy;
0x001527        FD0000FF 09204F87        r0 = Null + M[$cbops.amount_written];
0x001529        09221F8C                 r0 = r0 + M[$M.cbops.dac_av_copy.port_amount_written];
0x00152A        19201F8C                 M[$M.cbops.dac_av_copy.port_amount_written] = r0 + Null;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x00152B        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x00152D        E1F0F7B4                 call $cbuffer.calc_amount_data;
0x00152E        0082000F                 r6 = r0 + Null;
0x00152F        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001531        E1F0F7DC                 call $cbuffer.get_read_address_and_size;
0x001532        0092000F                 r7 = r0 + Null;
0x001533        09501F8B                 r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x001534        2105000A                 Null = r3 - 10;
0x001535        DD00000C                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x001536        01500000                 r3 = Null + 0;
0x001537        FD0000FF 29494F8A        r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001539        DD100006                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x00153A        8D43007F                 r2 = r1 LSHIFT -1;
0x00153B        2008004F                 Null = r6 - r2;
0x00153C        DD400003                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x00153D        09501F8B                 r3 = Null + M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter];
0x00153E        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x00153F        19501F8B                 M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = r3 + Null;
0x001540        DDF00017                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x001541        FD0000FF 29494F8A        r2 = r7 - M[$M.cbops.dac_av_copy.prev_buffer_read_addr];
0x001543        DD000003                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x001544        19001F8B                 M[$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter] = Null + Null;
0x001545        DDF00012                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x001546        09201F89                 r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001547        E110F79A                 if NE call $cbuffer.calc_amount_data;
0x001548        2008002F                 Null = r6 - r0;
0x001549        00820005                 if POS r6 = r0 + Null;
0x00154A        21280048                 r0 = r6 - 72;
0x00154B        20880025                 if POS r6 = r6 - r0;
0x00154C        00C8000F                 r10 = r6 + Null;
0x00154D        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x00154F        E1F0F72B                 call $cbuffer.advance_read_ptr;
0x001550        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001552        E1F0F7BB                 call $cbuffer.get_read_address_and_size;
0x001553        0092000F                 r7 = r0 + Null;
0x001554        00C8000F                 r10 = r6 + Null;
0x001555        09201F89                 r0 = Null + M[$M.cbops.av_copy.right_channel];
0x001556        E110F724                 if NE call $cbuffer.advance_read_ptr;

 <$M.cbops.dac_av_copy.remove_end>
0x001557        FD0000FF 19904F8A        M[$M.cbops.dac_av_copy.prev_buffer_read_addr] = r7 + Null;
0x001559        DDF0F7E7                 jump $pop_rLink_and_rts;

 <$sbcenc.analysis_subband_filter>
0x00155A        F3D00000                 push rLink;
0x00155B        D15B0021                 r3 = M[r9 + 33];
0x00155C        5085005F                 M0 = r3 + r3;
0x00155D        51900001                 M1 = Null + 1;
0x00155E        7CA9008F                 M2 = M1 - M0;
0x00155F        99250008                 r0 = r3 * 8 (int);
0x001560        78B9002F                 M3 = M1 - r0;
0x001561        9825007F                 r0 = r3 * r5 (int);
0x001562        0008000F                 Null = r6 + Null;
0x001563        00200000                 if EQ r0 = Null + Null;
0x001564        D16B0014                 r4 = M[r9 + 20];
0x001565        5022006F                 I2 = r0 + r4;
0x001566        016B0011                 r4 = r9 + 17;
0x001567        D027006F                 r0 = M[r5 + r4];
0x001568        5060002F                 I6 = Null + r0;
0x001569        D16B001D                 r4 = M[r9 + 29];
0x00156A        21050004                 Null = r3 - 4;
0x00156B        DD000029                 if EQ jump $M.sbcenc.analysis_subband_filter.M_equals_4;
0x00156C        51E00050                 L4 = Null + 80;
0x00156D        0140FFFC                 r2 = Null + -4;

 <$M.sbcenc.analysis_subband_filter.block_loop_M8>
0x00156E        D12B0015                 r0 = M[r9 + 21];
0x00156F        5000002F                 I0 = Null + r0;
0x001570        D12B0001                 r0 = M[r9 + 1];
0x001571        5050002F                 I5 = Null + r0;
0x001572        5846000F                 I4 = I6 + Null;
0x001573        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001574        93243500                 r0 = r0 ASHIFT r2, r1 = M[I1,1];
0x001575        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x001576        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x001577        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x001578        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x001579        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x00157A        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x00157B        933400A3                 r1 = r1 ASHIFT r2, M[I4,-1] = r0;
0x00157C        030000B3                 Null = Null + Null, M[I4,-1] = r1;
0x00157D        E1F00037                 call $M.sbcenc.analysis_subband_filter.share_code;
0x00157E        E5F00012                 do $M.sbcenc.analysis_subband_filter.matrix_loop_M8;
0x00157F        CF232D35                 rMAC = r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001580        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001581        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001582        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001583        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001584        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001585        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001586        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001587        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001588        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x001589        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00158A        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00158B        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00158C        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00158D        AE232E35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,M2], r1 = M[I5,M1];
0x00158E        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00158F        03009900                 Null = Null + Null, M[I2,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.matrix_loop_M8>
0x001590        5B280000                 I2 = I2 + r6;
0x001591        E466003F                 r4 = r4 - 1;
0x001592        DD10FFDC                 if NE jump $M.sbcenc.analysis_subband_filter.block_loop_M8;
0x001593        DDF0001C                 jump $M.sbcenc.analysis_subband_filter.all_done;

 <$M.sbcenc.analysis_subband_filter.M_equals_4>
0x001594        51E00028                 L4 = Null + 40;
0x001595        0140FFFD                 r2 = Null + -3;

 <$M.sbcenc.analysis_subband_filter.block_loop_M4>
0x001596        D12B0016                 r0 = M[r9 + 22];
0x001597        5000002F                 I0 = Null + r0;
0x001598        D12B0002                 r0 = M[r9 + 2];
0x001599        5050002F                 I5 = Null + r0;
0x00159A        5846000F                 I4 = I6 + Null;
0x00159B        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00159C        93243500                 r0 = r0 ASHIFT r2, r1 = M[I1,1];
0x00159D        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x00159E        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x00159F        933400A3                 r1 = r1 ASHIFT r2, M[I4,-1] = r0;
0x0015A0        030000B3                 Null = Null + Null, M[I4,-1] = r1;
0x0015A1        E1F00013                 call $M.sbcenc.analysis_subband_filter.share_code;
0x0015A2        E5F0000A                 do $M.sbcenc.analysis_subband_filter.matrix_loop_M4;
0x0015A3        CF232D35                 rMAC = r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A4        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A5        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A6        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A7        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A8        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015A9        AE232E35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,M2], r1 = M[I5,M1];
0x0015AA        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x0015AB        03009900                 Null = Null + Null, M[I2,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.matrix_loop_M4>
0x0015AC        5B280000                 I2 = I2 + r6;
0x0015AD        E466003F                 r4 = r4 - 1;
0x0015AE        DD10FFE8                 if NE jump $M.sbcenc.analysis_subband_filter.block_loop_M4;

 <$M.sbcenc.analysis_subband_filter.all_done>
0x0015AF        4420006F                 r0 = Null + I6;
0x0015B0        016B0011                 r4 = r9 + 17;
0x0015B1        D427006F                 M[r5 + r4] = r0;
0x0015B2        51E00000                 L4 = Null + 0;
0x0015B3        DDF0F78D                 jump $pop_rLink_and_rts;

 <$M.sbcenc.analysis_subband_filter.share_code>
0x0015B4        5864000F                 I6 = I4 + Null;
0x0015B5        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x0015B6        D12B0005                 r0 = M[r9 + 5];
0x0015B7        5030002F                 I3 = Null + r0;
0x0015B8        44C0008F                 r10 = Null + M0;
0x0015B9        02003020                 Null = Null + Null, r1 = M[I0,M0], r0 = M[I4,M0];
0x0015BA        E5F00007                 do $M.sbcenc.analysis_subband_filter.window_calc_loop_M4;
0x0015BB        CE233020                 rMAC = r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x0015BC        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x0015BD        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x0015BE        AE233323                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M3], r0 = M[I4,M3];
0x0015BF        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x0015C0        03009D00                 Null = Null + Null, M[I3,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.window_calc_loop_M4>
0x0015C1        D12B0005                 r0 = M[r9 + 5];
0x0015C2        5030002F                 I3 = Null + r0;
0x0015C3        00C5000F                 r10 = r3 + Null;
0x0015C4        03002D35                 Null = Null + Null, r0 = M[I3,1], r1 = M[I5,1];
0x0015C5        DC0D000F                 rts;

 <$sbcenc.joint_stereo_encode>
0x0015C6        D17B0021                 r5 = M[r9 + 33];
0x0015C7        D18B001D                 r6 = M[r9 + 29];
0x0015C8        98C7008F                 r10 = r5 * r6 (int);
0x0015C9        D15B0014                 r3 = M[r9 + 20];
0x0015CA        5000005F                 I0 = Null + r3;
0x0015CB        D15B0000                 r3 = M[r9 + 0];
0x0015CC        5020005F                 I2 = Null + r3;
0x0015CD        5810007F                 I1 = I0 + r5;
0x0015CE        5832007F                 I3 = I2 + r5;
0x0015CF        FD000040 01500000        r3 = Null + 4194304;
0x0015D1        FD00007F 0160FFFF        r4 = Null + 8388607;

 <$M.sbcenc.joint_stereo_encode.gen_ms_blkloop>
0x0015D3        00C7000F                 r10 = r5 + Null;
0x0015D4        E5F00006                 do $M.sbcenc.joint_stereo_encode.gen_ms_subbandloop;
0x0015D5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0015D6        CF253500                 rMAC = r0 * r3 (SS), r1 = M[I1,1];
0x0015D7        AC13005F                 rMAC = rMAC + r1 * r3 (SS);
0x0015D8        BF369900                 rMAC = rMAC - r1 * r4 (SS), M[I2,1] = rMAC;
0x0015D9        03009D00                 Null = Null + Null, M[I3,1] = rMAC;

 <$M.sbcenc.joint_stereo_encode.gen_ms_subbandloop>
0x0015DA        5B070000                 I0 = I0 + r5;
0x0015DB        5B170000                 I1 = I1 + r5;
0x0015DC        5B270000                 I2 = I2 + r5;
0x0015DD        5B370000                 I3 = I3 + r5;
0x0015DE        E488003F                 r6 = r6 - 1;
0x0015DF        DD10FFF4                 if NE jump $M.sbcenc.joint_stereo_encode.gen_ms_blkloop;
0x0015E0        D18B0019                 r6 = M[r9 + 25];
0x0015E1        5010008F                 I1 = Null + r6;
0x0015E2        D18B0000                 r6 = M[r9 + 0];
0x0015E3        5000008F                 I0 = Null + r6;
0x0015E4        5087007F                 M0 = r5 + r5;
0x0015E5        D18B001D                 r6 = M[r9 + 29];
0x0015E6        9827008F                 r0 = r5 * r6 (int);
0x0015E7        03220000                 r0 = r0 + r0;
0x0015E8        7090002F                 M1 = Null - r0;
0x0015E9        59990001                 M1 = M1 + 1;
0x0015EA        01400010                 r2 = Null + 16;
0x0015EB        99570002                 r3 = r5 * 2 (int);

 <$M.sbcenc.joint_stereo_encode.sf_subbandchloop>
0x0015EC        01300010                 r1 = Null + 16;
0x0015ED        E4C8003F                 r10 = r6 - 1;
0x0015EE        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0015EF        E5F00002                 do $M.sbcenc.joint_stereo_encode.sf_blkloop;
0x0015F0        DA322000                 r1 = BLKSIGNDET r0, r0 = M[I0,M0];

 <$M.sbcenc.joint_stereo_encode.sf_blkloop>
0x0015F1        DB320000                 r1 = BLKSIGNDET r0;
0x0015F2        2034213F                 r1 = r2 - r1, r0 = M[I0,M1];
0x0015F3        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0015F4        E455003F                 r3 = r3 - 1;
0x0015F5        DD10FFF7                 if NE jump $M.sbcenc.joint_stereo_encode.sf_subbandchloop;
0x0015F6        D15B0019                 r3 = M[r9 + 25];
0x0015F7        5000005F                 I0 = Null + r3;
0x0015F8        D15B0018                 r3 = M[r9 + 24];
0x0015F9        5020005F                 I2 = Null + r3;
0x0015FA        5840007F                 I4 = I0 + r5;
0x0015FB        5832007F                 I3 = I2 + r5;
0x0015FC        511B0026                 I1 = r9 + 38;
0x0015FD        E4C7003F                 r10 = r5 - 1;
0x0015FE        E450002F                 r3 = Null + 1;
0x0015FF        E5F00007                 do $M.sbcenc.joint_stereo_encode.join_loop;
0x001600        23442131                 r2 = r2 - r2, r0 = M[I0,1], r1 = M[I4,1];
0x001601        03233900                 r0 = r0 + r1, r1 = M[I2,1];
0x001602        23233D00                 r0 = r0 - r1, r1 = M[I3,1];
0x001603        23230000                 r0 = r0 - r1;
0x001604        00450004                 if NEG r2 = r3 + Null;
0x001605        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcenc.joint_stereo_encode.join_loop>
0x001606        01400000                 r2 = Null + 0;
0x001607        0300C500                 Null = Null + Null, M[I1,1] = r2;
0x001608        514B0026                 I4 = r9 + 38;
0x001609        D12B0000                 r0 = M[r9 + 0];
0x00160A        5000002F                 I0 = Null + r0;
0x00160B        D12B0014                 r0 = M[r9 + 20];
0x00160C        5050002F                 I5 = Null + r0;
0x00160D        D12B0019                 r0 = M[r9 + 25];
0x00160E        5020002F                 I2 = Null + r0;
0x00160F        D12B0018                 r0 = M[r9 + 24];
0x001610        5030002F                 I3 = Null + r0;
0x001611        5080007F                 M0 = Null + r5;
0x001612        9827008F                 r0 = r5 * r6 (int);
0x001613        9922FFFE                 r0 = r0 * -2 (int);
0x001614        51920001                 M1 = r0 + 1;
0x001615        51A00001                 M2 = Null + 1;
0x001616        7FA80000                 M2 = M2 - M0;

 <$M.sbcenc.joint_stereo_encode.copy_subbandloop>
0x001617        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001618        0002000F                 Null = r0 + Null;
0x001619        DD100008                 if NE jump $M.sbcenc.joint_stereo_encode.joint_subband;
0x00161A        59000001                 I0 = I0 + 1;
0x00161B        59550001                 I5 = I5 + 1;
0x00161C        59220001                 I2 = I2 + 1;
0x00161D        59330001                 I3 = I3 + 1;
0x00161E        E477003F                 r5 = r5 - 1;
0x00161F        DD10FFF8                 if NE jump $M.sbcenc.joint_stereo_encode.copy_subbandloop;
0x001620        DC0D000F                 rts;

 <$M.sbcenc.joint_stereo_encode.joint_subband>
0x001621        E4C8003F                 r10 = r6 - 1;
0x001622        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x001623        E5F00003                 do $M.sbcenc.joint_stereo_encode.copy_blkloop;
0x001624        020020B4                 Null = Null + Null, r0 = M[I0,M0], M[I5,M0] = r1;
0x001625        020030A4                 Null = Null + Null, r1 = M[I0,M0], M[I5,M0] = r0;

 <$M.sbcenc.joint_stereo_encode.copy_blkloop>
0x001626        020020B4                 Null = Null + Null, r0 = M[I0,M0], M[I5,M0] = r1;
0x001627        020028A4                 Null = Null + Null, r0 = M[I2,M0], M[I5,M0] = r0;
0x001628        0200AC00                 Null = Null + Null, M[I3,M0] = r0;
0x001629        02002A00                 Null = Null + Null, r0 = M[I2,M2];
0x00162A        0200AE00                 Null = Null + Null, M[I3,M2] = r0;
0x00162B        5F090000                 I0 = I0 + M1;
0x00162C        5F590000                 I5 = I5 + M1;
0x00162D        E477003F                 r5 = r5 - 1;
0x00162E        DD10FFE9                 if NE jump $M.sbcenc.joint_stereo_encode.copy_subbandloop;

 <$codec.av_decode>
0x00162F        F3D00000                 push rLink;
0x001630        19701F90                 M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x001631        E420002F                 r0 = Null + 1;
0x001632        D5270006                 M[r5 + 6] = r0;
0x001633        0980FE71                 r6 = Null + M[0xfffe71];
0x001634        D1270013                 r0 = M[r5 + 19];
0x001635        D5870013                 M[r5 + 19] = r6;
0x001636        23820000                 r6 = r6 - r0;
0x001637        20800084                 if NEG r6 = Null - r6;
0x001638        D1270003                 r0 = M[r5 + 3];
0x001639        E1F0F6D9                 call $cbuffer.get_write_address_and_size;
0x00163A        D137000F                 r1 = M[r5 + 15];
0x00163B        D527000F                 M[r5 + 15] = r0;
0x00163C        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x00163E        D1570010                 r3 = M[r5 + 16];
0x00163F        0045008F                 r2 = r3 + r6;
0x001640        00410006                 if V r2 = rMAC + Null;
0x001641        2003002F                 Null = r1 - r0;
0x001642        00400001                 if NE r2 = Null + Null;
0x001643        D5470010                 M[r5 + 16] = r2;
0x001644        D107000D                 Null = M[r5 + 13];
0x001645        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x001646        FD000002 210449F0        Null = r2 - 150000;
0x001648        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x001649        FD000002 210549F0        Null = r3 - 150000;
0x00164B        DD40002D                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x00164C        D1070011                 Null = M[r5 + 17];
0x00164D        DD100017                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x00164E        E420002F                 r0 = Null + 1;
0x00164F        D1370012                 r1 = M[r5 + 18];
0x001650        0004000F                 Null = r2 + Null;
0x001651        00320000                 if EQ r1 = r0 + Null;
0x001652        D5370012                 M[r5 + 18] = r1;
0x001653        DD000007                 if EQ jump $M.codec_av_decode.check_buf_level;
0x001654        FD000001 21041170        Null = r2 - 70000;
0x001656        DD400004                 if NEG jump $M.codec_av_decode.check_buf_level;
0x001657        FD000001 21051170        Null = r3 - 70000;
0x001659        DD400008                 if NEG jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x00165A        D1270003                 r0 = M[r5 + 3];
0x00165B        D1620000                 r4 = M[r0 + 0];
0x00165C        E1F0F685                 call $cbuffer.calc_amount_data;
0x00165D        D147000B                 r2 = M[r5 + 11];
0x00165E        97460000                 r2 = r2 * r4 (frac);
0x00165F        2002004F                 Null = r0 - r2;
0x001660        DD40002F                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x001661        D5070012                 M[r5 + 18] = Null;
0x001662        E430002F                 r1 = Null + 1;
0x001663        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.decoding_proc>
0x001664        01200000                 r0 = Null + 0;
0x001665        D5270006                 M[r5 + 6] = r0;
0x001666        D1270000                 r0 = M[r5 + 0];
0x001667        01770003                 r5 = r5 + 3;
0x001668        E002000F                 call r0;
0x001669        09701F90                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x00166A        D1370010                 r1 = M[r5 + 16];
0x00166B        D1270006                 r0 = M[r5 + 6];
0x00166C        21020000                 Null = r0 - 0;
0x00166D        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x00166E        00300000                 if EQ r1 = Null + Null;
0x00166F        D5370010                 M[r5 + 16] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x001670        D1270006                 r0 = M[r5 + 6];
0x001671        E402003F                 Null = r0 - 1;
0x001672        DD10001D                 if NE jump $M.codec_av_decode.end;
0x001673        D1370010                 r1 = M[r5 + 16];
0x001674        D127000A                 r0 = M[r5 + 10];
0x001675        2003002F                 Null = r1 - r0;
0x001676        DD500018                 if POS jump $M.codec_av_decode.switchto_stall;
0x001677        DDF00018                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x001678        E1F0F681                 call $block_interrupts;
0x001679        D1370003                 r1 = M[r5 + 3];
0x00167A        D1230002                 r0 = M[r1 + 2];
0x00167B        D5230001                 M[r1 + 1] = r0;
0x00167C        D527000F                 M[r5 + 15] = r0;
0x00167D        D1370004                 r1 = M[r5 + 4];
0x00167E        D1230001                 r0 = M[r1 + 1];
0x00167F        D5230002                 M[r1 + 2] = r0;
0x001680        D1370005                 r1 = M[r5 + 5];
0x001681        D1230001                 r0 = M[r1 + 1];
0x001682        D5230002                 M[r1 + 2] = r0;
0x001683        01770003                 r5 = r5 + 3;
0x001684        D127FFFE                 r0 = M[r5 + -2];
0x001685        E0020001                 if NE call r0;
0x001686        09701F90                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001687        D127000E                 r0 = M[r5 + 14];
0x001688        E0020001                 if NE call r0;
0x001689        09701F90                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x00168A        E420002F                 r0 = Null + 1;
0x00168B        FD0000FF 19204F90        M[$master_reset_needed] = r0 + Null;
0x00168D        E1F0F65C                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x00168E        D5070011                 M[r5 + 17] = Null;

 <$M.codec_av_decode.end>
0x00168F        DDF0F6B1                 jump $pop_rLink_and_rts;

 <$conn_init>
0x001690        F3D00000                 push rLink;
0x001691        015002D0                 r3 = Null + 720;
0x001692        01600400                 r4 = Null + 1024;
0x001693        E1F003CD                 call $conn_init_cbuffers;
0x001694        FD0000FF 09204F66        r0 = Null + M[$app_config.io];
0x001696        21020004                 Null = r0 - 4;
0x001697        DD1005A6                 if NE jump $error;
0x001698        012003E8                 r0 = Null + 1000;
0x001699        FD0000FF 19204CFD        M[$sra_struct] = r0 + Null;
0x00169B        FD000080 01200002        r0 = Null + -8388606;
0x00169D        FD0000FF 19204CFE        M[0xff4cfe] = r0 + Null;
0x00169F        FD0000FF 01204F35        r0 = Null + -45259;
0x0016A1        FD0000FF 19204CFF        M[0xff4cff] = r0 + Null;
0x0016A3        01201F3A                 r0 = Null + 7994;
0x0016A4        FD0000FF 19204D00        M[0xff4d00] = r0 + Null;
0x0016A6        FD0000FF 09304F67        r1 = Null + M[$current_codec_sampling_rate];
0x0016A8        FD000000 2103AC44        Null = r1 - 44100;
0x0016AA        DD100010                 if NE jump $M.conn_init.not_44100;
0x0016AB        FD000000 0120A3D7        r0 = Null + 41943;
0x0016AD        FD0000FF 19204D01        M[0xff4d01] = r0 + Null;
0x0016AF        99230001                 r0 = r1 * 1 (int);
0x0016B0        FD0000FF 19204D02        M[0xff4d02] = r0 + Null;
0x0016B2        01200144                 r0 = Null + 324;
0x0016B3        FD0000FF 19204F70        M[$monitor_level] = r0 + Null;
0x0016B5        FD000014 01208F5C        r0 = Null + 1347420;
0x0016B7        FD0000FF 19204D03        M[0xff4d03] = r0 + Null;
0x0016B9        DDF00014                 jump $M.conn_init.sra_conf_done;

 <$M.conn_init.not_44100>
0x0016BA        FD000000 2103BB80        Null = r1 - 48000;
0x0016BC        DD100010                 if NE jump $M.conn_init.not_48000;
0x0016BD        FD000000 0120A3D7        r0 = Null + 41943;
0x0016BF        FD0000FF 19204D01        M[0xff4d01] = r0 + Null;
0x0016C1        99230001                 r0 = r1 * 1 (int);
0x0016C2        FD0000FF 19204D02        M[0xff4d02] = r0 + Null;
0x0016C4        01200168                 r0 = Null + 360;
0x0016C5        FD0000FF 19204F70        M[$monitor_level] = r0 + Null;
0x0016C7        FD000016 012060A4        r0 = Null + 1466532;
0x0016C9        FD0000FF 19204D03        M[0xff4d03] = r0 + Null;
0x0016CB        DDF00002                 jump $M.conn_init.sra_conf_done;

 <$M.conn_init.not_48000>
0x0016CC        DDF00571                 jump $error;

 <$M.conn_init.sra_conf_done>
0x0016CD        012003E8                 r0 = Null + 1000;
0x0016CE        19201F6E                 M[$tmr_period_con_copy] = r0 + Null;
0x0016CF        FD0000FF 09204F66        r0 = Null + M[$app_config.io];
0x0016D1        21020004                 Null = r0 - 4;
0x0016D2        DD100012                 if NE jump $M.conn_init.skip_sbc;
0x0016D3        0120146A                 r0 = Null + 5226;
0x0016D4        192001E1                 M[$decoder_codec_stream_struc] = r0 + Null;
0x0016D5        01201B6C                 r0 = Null + 7020;
0x0016D6        192001E2                 M[0x1e2] = r0 + Null;
0x0016D7        01201ACF                 r0 = Null + 6863;
0x0016D8        192001E3                 M[0x1e3] = r0 + Null;
0x0016D9        017001E4                 r5 = Null + 484;
0x0016DA        E1F001F1                 call $sbcdec.init_static_decoder;
0x0016DB        012013DA                 r0 = Null + 5082;
0x0016DC        192001F5                 M[$encoder_codec_stream_struc] = r0 + Null;
0x0016DD        01201AFC                 r0 = Null + 6908;
0x0016DE        192001F6                 M[0x1f6] = r0 + Null;
0x0016DF        017001F7                 r5 = Null + 503;
0x0016E0        E1F00138                 call $sbcenc.init_static_encoder;
0x0016E1        51001B2B                 I0 = Null + 6955;
0x0016E2        E1F01DFF                 call $copy_codec_stats_pointers;
0x0016E3        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x0016E4        DDF00559                 jump $error;

 <$M.conn_init.exit>
0x0016E5        DDF0F65B                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x0016E6        F3D00000                 push rLink;
0x0016E7        D13B0021                 r1 = M[r9 + 33];
0x0016E8        5080003F                 M0 = Null + r1;
0x0016E9        D14B001F                 r2 = M[r9 + 31];
0x0016EA        9854003F                 r3 = r2 * r1 (int);
0x0016EB        E455003F                 r3 = r3 - 1;
0x0016EC        9823007F                 r0 = r1 * r5 (int);
0x0016ED        E404003F                 Null = r2 - 1;
0x0016EE        00200000                 if EQ r0 = Null + Null;
0x0016EF        D16B0014                 r4 = M[r9 + 20];
0x0016F0        5022006F                 I2 = r0 + r4;
0x0016F1        012B003C                 r0 = r9 + 60;
0x0016F2        D027002F                 r0 = M[r5 + r0];
0x0016F3        5000002F                 I0 = Null + r0;
0x0016F4        D16B001D                 r4 = M[r9 + 29];
0x0016F5        69080004                 Null = M0 - 4;
0x0016F6        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x0016F7        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x0016F8        D12B0015                 r0 = M[r9 + 21];
0x0016F9        5040002F                 I4 = Null + r0;
0x0016FA        D12B002E                 r0 = M[r9 + 46];
0x0016FB        5050002F                 I5 = Null + r0;
0x0016FC        51900001                 M1 = Null + 1;
0x0016FD        51A0FFF0                 M2 = Null + -16;
0x0016FE        51B0FFF9                 M3 = Null + -7;
0x0016FF        4CC8008F                 r10 = M0 + M0;
0x001700        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001701        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x001702        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001703        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001704        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001705        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001706        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001707        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001708        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001709        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x00170A        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x00170B        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x00170C        5B250000                 I2 = I2 + r3;
0x00170D        51900018                 M1 = Null + 24;
0x00170E        51A0FFB9                 M2 = Null + -71;
0x00170F        51B0FF69                 M3 = Null + -151;
0x001710        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001711        5190FFD0                 M1 = Null + -48;
0x001712        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001713        E466003F                 r4 = r4 - 1;
0x001714        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x001715        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x001716        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x001717        D12B0016                 r0 = M[r9 + 22];
0x001718        5040002F                 I4 = Null + r0;
0x001719        D12B002F                 r0 = M[r9 + 47];
0x00171A        5050002F                 I5 = Null + r0;
0x00171B        51900001                 M1 = Null + 1;
0x00171C        51A0FFF8                 M2 = Null + -8;
0x00171D        51B0FFFD                 M3 = Null + -3;
0x00171E        4CC8008F                 r10 = M0 + M0;
0x00171F        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001720        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x001721        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001722        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001723        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001724        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001725        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x001726        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001727        5B250000                 I2 = I2 + r3;
0x001728        5190000C                 M1 = Null + 12;
0x001729        51A0FFDD                 M2 = Null + -35;
0x00172A        51B0FFB5                 M3 = Null + -75;
0x00172B        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x00172C        5190FFE8                 M1 = Null + -24;
0x00172D        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x00172E        E466003F                 r4 = r4 - 1;
0x00172F        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x001730        4420000F                 r0 = Null + I0;
0x001731        016B003C                 r4 = r9 + 60;
0x001732        D427006F                 M[r5 + r4] = r0;
0x001733        51C00000                 L0 = Null + 0;
0x001734        DDF0F60C                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x001735        44C0008F                 r10 = Null + M0;
0x001736        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x001737        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x001738        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001739        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00173A        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x00173B        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00173C        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x00173D        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00173E        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x00173F        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001740        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x001741        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001742        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x001743        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x001744        DC0D000F                 rts;

 <$sbcenc.write_frame_header>
0x001745        F3D00000                 push rLink;
0x001746        0120000F                 r0 = Null + 15;
0x001747        D52B0024                 M[r9 + 36] = r0;
0x001748        01200008                 r0 = Null + 8;
0x001749        0130009C                 r1 = Null + 156;
0x00174A        E1F00301                 call $sbcenc.putbits;
0x00174B        01200002                 r0 = Null + 2;
0x00174C        D13B001C                 r1 = M[r9 + 28];
0x00174D        E1F002FE                 call $sbcenc.putbits;
0x00174E        E1F003E2                 call $sbc.crc_calc;
0x00174F        01200002                 r0 = Null + 2;
0x001750        D13B001D                 r1 = M[r9 + 29];
0x001751        9133007E                 r1 = r1 ASHIFT -2;
0x001752        E433003F                 r1 = r1 - 1;
0x001753        E1F002F8                 call $sbcenc.putbits;
0x001754        E1F003DC                 call $sbc.crc_calc;
0x001755        01200002                 r0 = Null + 2;
0x001756        D13B001E                 r1 = M[r9 + 30];
0x001757        E1F002F4                 call $sbcenc.putbits;
0x001758        E1F003D8                 call $sbc.crc_calc;
0x001759        E420002F                 r0 = Null + 1;
0x00175A        D13B0020                 r1 = M[r9 + 32];
0x00175B        E1F002F0                 call $sbcenc.putbits;
0x00175C        E1F003D4                 call $sbc.crc_calc;
0x00175D        E420002F                 r0 = Null + 1;
0x00175E        D13B0021                 r1 = M[r9 + 33];
0x00175F        9133007E                 r1 = r1 ASHIFT -2;
0x001760        E433003F                 r1 = r1 - 1;
0x001761        E1F002EA                 call $sbcenc.putbits;
0x001762        E1F003CE                 call $sbc.crc_calc;
0x001763        01200008                 r0 = Null + 8;
0x001764        D13B0022                 r1 = M[r9 + 34];
0x001765        E1F002E6                 call $sbcenc.putbits;
0x001766        E1F003CA                 call $sbc.crc_calc;
0x001767        D12B001E                 r0 = M[r9 + 30];
0x001768        21020003                 Null = r0 - 3;
0x001769        DD100008                 if NE jump $M.sbcenc.write_frame_header.crc_notjoint;
0x00176A        D18B0021                 r6 = M[r9 + 33];
0x00176B        511B0026                 I1 = r9 + 38;
0x00176C        E420002F                 r0 = Null + 1;

 <$M.sbcenc.write_frame_header.jointcrc_loop>
0x00176D        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00176E        E1F003C2                 call $sbc.crc_calc;
0x00176F        E488003F                 r6 = r6 - 1;
0x001770        DD10FFFD                 if NE jump $M.sbcenc.write_frame_header.jointcrc_loop;

 <$M.sbcenc.write_frame_header.crc_notjoint>
0x001771        D12B001F                 r0 = M[r9 + 31];
0x001772        D13B0021                 r1 = M[r9 + 33];
0x001773        9882003F                 r6 = r0 * r1 (int);
0x001774        D12B0018                 r0 = M[r9 + 24];
0x001775        5010002F                 I1 = Null + r0;
0x001776        01200004                 r0 = Null + 4;

 <$M.sbcenc.write_frame_header.scalefactor_loop>
0x001777        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001778        E1F003B8                 call $sbc.crc_calc;
0x001779        E488003F                 r6 = r6 - 1;
0x00177A        DD10FFFD                 if NE jump $M.sbcenc.write_frame_header.scalefactor_loop;
0x00177B        01200008                 r0 = Null + 8;
0x00177C        D13B0024                 r1 = M[r9 + 36];
0x00177D        813300FF                 r1 = r1 AND 0xff;
0x00177E        E1F002CD                 call $sbcenc.putbits;
0x00177F        D12B001E                 r0 = M[r9 + 30];
0x001780        21020003                 Null = r0 - 3;
0x001781        DD10000A                 if NE jump $M.sbcenc.write_frame_header.not_joint;
0x001782        511B0026                 I1 = r9 + 38;
0x001783        D1CB0021                 r10 = M[r9 + 33];
0x001784        E4CC003F                 r10 = r10 - 1;
0x001785        E420002F                 r0 = Null + 1;
0x001786        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001787        E5F00003                 do $M.sbcenc.write_frame_header.joint_loop;
0x001788        E1F002C3                 call $sbcenc.putbits;
0x001789        03003500                 Null = Null + Null, r1 = M[I1,1];

 <$M.sbcenc.write_frame_header.joint_loop>
0x00178A        E1F002C1                 call $sbcenc.putbits;

 <$M.sbcenc.write_frame_header.not_joint>
0x00178B        DDF0F5B5                 jump $pop_rLink_and_rts;

 <$sbcdec.read_frame_header>
0x00178C        F3D00000                 push rLink;
0x00178D        D50B0036                 M[r9 + 54] = Null;
0x00178E        E1F001EE                 call $sbcdec.get1byte;
0x00178F        0120000F                 r0 = Null + 15;
0x001790        D52B0024                 M[r9 + 36] = r0;
0x001791        E1F001EF                 call $sbcdec.get2bits;
0x001792        E1F0039E                 call $sbc.crc_calc;
0x001793        D53B001C                 M[r9 + 28] = r1;
0x001794        E1F001EC                 call $sbcdec.get2bits;
0x001795        E1F0039B                 call $sbc.crc_calc;
0x001796        99330004                 r1 = r1 * 4 (int);
0x001797        01330004                 r1 = r1 + 4;
0x001798        D53B001D                 M[r9 + 29] = r1;
0x001799        E1F001E7                 call $sbcdec.get2bits;
0x00179A        E1F00396                 call $sbc.crc_calc;
0x00179B        E420002F                 r0 = Null + 1;
0x00179C        D53B001E                 M[r9 + 30] = r1;
0x00179D        00220021                 if NE r0 = r0 + r0;
0x00179E        D52B001F                 M[r9 + 31] = r0;
0x00179F        E1F001E3                 call $sbcdec.get1bit;
0x0017A0        E1F00390                 call $sbc.crc_calc;
0x0017A1        D53B0020                 M[r9 + 32] = r1;
0x0017A2        E1F001E0                 call $sbcdec.get1bit;
0x0017A3        E1F0038D                 call $sbc.crc_calc;
0x0017A4        99330004                 r1 = r1 * 4 (int);
0x0017A5        01330004                 r1 = r1 + 4;
0x0017A6        D12B0021                 r0 = M[r9 + 33];
0x0017A7        2003002F                 Null = r1 - r0;
0x0017A8        E1100327                 if NE call $sbcdec.silence_decoder;
0x0017A9        D53B0021                 M[r9 + 33] = r1;
0x0017AA        E1F001D2                 call $sbcdec.get1byte;
0x0017AB        E1F00385                 call $sbc.crc_calc;
0x0017AC        D53B0022                 M[r9 + 34] = r1;
0x0017AD        D14B0021                 r2 = M[r9 + 33];
0x0017AE        99440010                 r2 = r2 * 16 (int);
0x0017AF        D12B001E                 r0 = M[r9 + 30];
0x0017B0        21020002                 Null = r0 - 2;
0x0017B1        00440045                 if POS r2 = r2 + r2;
0x0017B2        212400FA                 r0 = r2 - 250;
0x0017B3        2044002C                 if GT r2 = r2 - r0;
0x0017B4        2004003F                 Null = r2 - r1;
0x0017B5        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x0017B6        21030002                 Null = r1 - 2;
0x0017B7        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x0017B8        E1F001C4                 call $sbcdec.get1byte;
0x0017B9        D53B0023                 M[r9 + 35] = r1;
0x0017BA        D13B001E                 r1 = M[r9 + 30];
0x0017BB        21030003                 Null = r1 - 3;
0x0017BC        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x0017BD        D1AB0021                 r8 = M[r9 + 33];
0x0017BE        E4AA003F                 r8 = r8 - 1;
0x0017BF        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x0017C0        E1F001C2                 call $sbcdec.get1bit;
0x0017C1        E1F0036F                 call $sbc.crc_calc;
0x0017C2        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0017C3        E4AA003F                 r8 = r8 - 1;
0x0017C4        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x0017C5        01200000                 r0 = Null + 0;
0x0017C6        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x0017C7        E1F001BB                 call $sbcdec.get1bit;
0x0017C8        E1F00368                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x0017C9        E1F002BA                 call $sbc.calc_frame_length;
0x0017CA        D52B0039                 M[r9 + 57] = r0;
0x0017CB        DDF0F575                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x0017CC        E420002F                 r0 = Null + 1;
0x0017CD        D52B0036                 M[r9 + 54] = r0;
0x0017CE        DDF0F572                 jump $pop_rLink_and_rts;

 <$cbops.adc_av_copy>
0x0017CF        F3D00000                 push rLink;
0x0017D0        E1F0023D                 call $cbops.av_copy.init_avcopy_struct;
0x0017D1        19201F88                 M[$M.cbops.av_copy.control_port] = r0 + Null;
0x0017D2        FD0000FF 19304F88        M[$M.cbops.av_copy.control_cbuffer] = r1 + Null;
0x0017D4        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0017D5        E1F0F532                 call $cbuffer.is_it_enabled;
0x0017D6        DD00000F                 if EQ jump $M.cbops.adc_av_copy.end_of_averaging;
0x0017D7        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0017D8        E1F0F509                 call $cbuffer.calc_amount_data;
0x0017D9        29221F8D                 r0 = r0 - M[$M.cbops.adc_av_copy.prev_port_mnt_data];
0x0017DA        DD40000B                 if NEG jump $M.cbops.adc_av_copy.end_of_averaging;
0x0017DB        91220008                 r0 = r0 ASHIFT 8;
0x0017DC        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x0017DE        FD0000FF 09304F8C        r1 = Null + M[$M.cbops.adc_av_copy.port_mnt_data_avg];
0x0017E0        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x0017E2        03320000                 r1 = r1 + r0;
0x0017E3        FD0000FF 19304F8C        M[$M.cbops.adc_av_copy.port_mnt_data_avg] = r1 + Null;

 <$M.cbops.adc_av_copy.end_of_averaging>
0x0017E5        E1F0EC2C                 call $cbops.copy;
0x0017E6        09201F88                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0017E7        E1F0F4FA                 call $cbuffer.calc_amount_data;
0x0017E8        19201F8D                 M[$M.cbops.adc_av_copy.prev_port_mnt_data] = r0 + Null;
0x0017E9        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0017EB        E1F0F4F6                 call $cbuffer.calc_amount_data;
0x0017EC        0082000F                 r6 = r0 + Null;
0x0017ED        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0017EF        E1F0F523                 call $cbuffer.get_write_address_and_size;
0x0017F0        0092000F                 r7 = r0 + Null;
0x0017F1        09501F8E                 r3 = Null + M[$M.cbops.adc_av_copy.buffer_write_addr_nochange_counter];
0x0017F2        2105000A                 Null = r3 - 10;
0x0017F3        DD00000C                 if EQ jump $M.cbops.adc_av_copy.check_write_pointer_only;
0x0017F4        01500000                 r3 = Null + 0;
0x0017F5        FD0000FF 29494F8D        r2 = r7 - M[$M.cbops.adc_av_copy.prev_buffer_write_addr];
0x0017F7        DD100006                 if NE jump $M.cbops.adc_av_copy.reset_counter;
0x0017F8        8D43007E                 r2 = r1 LSHIFT -2;
0x0017F9        2008004F                 Null = r6 - r2;
0x0017FA        DD500003                 if POS jump $M.cbops.adc_av_copy.reset_counter;
0x0017FB        09501F8E                 r3 = Null + M[$M.cbops.adc_av_copy.buffer_write_addr_nochange_counter];
0x0017FC        E455002F                 r3 = r3 + 1;

 <$M.cbops.adc_av_copy.reset_counter>
0x0017FD        19501F8E                 M[$M.cbops.adc_av_copy.buffer_write_addr_nochange_counter] = r3 + Null;
0x0017FE        DDF00017                 jump $M.cbops.adc_av_copy.insert_end;

 <$M.cbops.adc_av_copy.check_write_pointer_only>
0x0017FF        FD0000FF 29494F8D        r2 = r7 - M[$M.cbops.adc_av_copy.prev_buffer_write_addr];
0x001801        DD000003                 if EQ jump $M.cbops.adc_av_copy.insert_samples_to_cbuffer;
0x001802        19001F8E                 M[$M.cbops.adc_av_copy.buffer_write_addr_nochange_counter] = Null + Null;
0x001803        DDF00012                 jump $M.cbops.adc_av_copy.insert_end;

 <$M.cbops.adc_av_copy.insert_samples_to_cbuffer>
0x001804        FD0000FF 09904F8C        r7 = Null + M[$M.cbops.adc_av_copy.port_mnt_data_avg];
0x001806        21290060                 r0 = r7 - 96;
0x001807        20990024                 if NEG r7 = r7 - r0;
0x001808        00C9000F                 r10 = r7 + Null;
0x001809        FD0000FF 01204F4A        r0 = Null + -45238;
0x00180B        E1F00346                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x00180C        00C9000F                 r10 = r7 + Null;
0x00180D        01201F4F                 r0 = Null + 8015;
0x00180E        E1F00343                 call $cbops.av_copy.fill_silence_buffer_with_zeros;
0x00180F        01A01BC7                 r8 = Null + 7111;
0x001810        E1F0EC01                 call $cbops.copy;
0x001811        FD0000FF 09204F88        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001813        E1F0F4FF                 call $cbuffer.get_write_address_and_size;
0x001814        0092000F                 r7 = r0 + Null;

 <$M.cbops.adc_av_copy.insert_end>
0x001815        FD0000FF 19904F8D        M[$M.cbops.adc_av_copy.prev_buffer_write_addr] = r7 + Null;
0x001817        DDF0F529                 jump $pop_rLink_and_rts;

 <$sbcenc.init_static_encoder>
0x001818        F3D00000                 push rLink;
0x001819        FD0000FF 01B04CB8        r9 = Null + -45896;
0x00181B        D5B70004                 M[r5 + 4] = r9;
0x00181C        E1F0036E                 call $sbc.init_static_common;
0x00181D        012002C0                 r0 = Null + 704;
0x00181E        D52B0000                 M[r9 + 0] = r0;
0x00181F        FD0000FF 01203390        r0 = Null + -52336;
0x001821        D52B0001                 M[r9 + 1] = r0;
0x001822        FD0000FF 012030D0        r0 = Null + -53040;
0x001824        D52B0002                 M[r9 + 2] = r0;
0x001825        FD0000FF 01203200        r0 = Null + -52736;
0x001827        D52B0003                 M[r9 + 3] = r0;
0x001828        FD0000FF 01203280        r0 = Null + -52608;
0x00182A        D52B0004                 M[r9 + 4] = r0;
0x00182B        012004E1                 r0 = Null + 1249;
0x00182C        D52B0005                 M[r9 + 5] = r0;
0x00182D        FD0000FF 012030F0        r0 = Null + -53008;
0x00182F        D52B0006                 M[r9 + 6] = r0;
0x001830        FD0000FF 01204EBB        r0 = Null + -45381;
0x001832        D52B0007                 M[r9 + 7] = r0;
0x001833        01200008                 r0 = Null + 8;
0x001834        D52B0008                 M[r9 + 8] = r0;
0x001835        01200010                 r0 = Null + 16;
0x001836        D52B0009                 M[r9 + 9] = r0;
0x001837        01200002                 r0 = Null + 2;
0x001838        D52B000A                 M[r9 + 10] = r0;
0x001839        01200003                 r0 = Null + 3;
0x00183A        D52B000B                 M[r9 + 11] = r0;
0x00183B        01200000                 r0 = Null + 0;
0x00183C        D52B000C                 M[r9 + 12] = r0;
0x00183D        01200037                 r0 = Null + 55;
0x00183E        D52B000D                 M[r9 + 13] = r0;
0x00183F        01200010                 r0 = Null + 16;
0x001840        D52B0010                 M[r9 + 16] = r0;
0x001841        E1F002BB                 call $sbcenc.reset_encoder;
0x001842        E1F00335                 call $sbcenc.init_tables;
0x001843        FD0000FF 01304F24        r1 = Null + -45276;
0x001845        01407020                 r2 = Null + 28704;
0x001846        0150184D                 r3 = Null + 6221;
0x001847        E1F0038C                 call $message.register_handler;
0x001848        01301F30                 r1 = Null + 7984;
0x001849        01407021                 r2 = Null + 28705;
0x00184A        0150184F                 r3 = Null + 6223;
0x00184B        E1F00388                 call $message.register_handler;
0x00184C        DDF0F4F4                 jump $pop_rLink_and_rts;

 <$sbcenc.set_bitpool_handler>
0x00184D        D53B000D                 M[r9 + 13] = r1;
0x00184E        DC0D000F                 rts;

 <$sbcenc.set_encoder_params_handler>
0x00184F        8D230078                 r0 = r1 LSHIFT -8;
0x001850        81220001                 r0 = r0 AND 0x1;
0x001851        D52B000E                 M[r9 + 14] = r0;
0x001852        8D23007A                 r0 = r1 LSHIFT -6;
0x001853        81220003                 r0 = r0 AND 0x3;
0x001854        D52B000A                 M[r9 + 10] = r0;
0x001855        8D23007C                 r0 = r1 LSHIFT -4;
0x001856        81220003                 r0 = r0 AND 0x3;
0x001857        E422002F                 r0 = r0 + 1;
0x001858        8D220002                 r0 = r0 LSHIFT 2;
0x001859        D52B0009                 M[r9 + 9] = r0;
0x00185A        8D23007E                 r0 = r1 LSHIFT -2;
0x00185B        81220003                 r0 = r0 AND 0x3;
0x00185C        D52B000B                 M[r9 + 11] = r0;
0x00185D        8D23007F                 r0 = r1 LSHIFT -1;
0x00185E        81220001                 r0 = r0 AND 0x1;
0x00185F        D52B000C                 M[r9 + 12] = r0;
0x001860        81230001                 r0 = r1 AND 0x1;
0x001861        E422002F                 r0 = r0 + 1;
0x001862        8D220002                 r0 = r0 LSHIFT 2;
0x001863        D52B0008                 M[r9 + 8] = r0;
0x001864        DC0D000F                 rts;
0x001865        DDF0F4DB                 jump $pop_rLink_and_rts;

 <$codec.av_encode>
0x001866        F3D00000                 push rLink;
0x001867        19701F91                 M[$M.codec_av_encode.data_ptr] = r5 + Null;
0x001868        D1270002                 r0 = M[r5 + 2];
0x001869        D1320002                 r1 = M[r0 + 2];
0x00186A        FD0000FF 19304F91        M[$M.codec_av_encode.WritePointer] = r1 + Null;
0x00186C        E1F0F465                 call $cbuffer.calc_amount_space;
0x00186D        D1370007                 r1 = M[r5 + 7];
0x00186E        2002003F                 Null = r0 - r1;
0x00186F        DD40F4D1                 if NEG jump $pop_rLink_and_rts;
0x001870        D1270000                 r0 = M[r5 + 0];
0x001871        01770002                 r5 = r5 + 2;
0x001872        E002000F                 call r0;
0x001873        09701F91                 r5 = Null + M[$M.codec_av_encode.data_ptr];
0x001874        D1270005                 r0 = M[r5 + 5];
0x001875        21020000                 Null = r0 - 0;
0x001876        DD000019                 if EQ jump $M.codec_av_encode.jp_encode_successful;
0x001877        21020002                 Null = r0 - 2;
0x001878        DD10F4C8                 if NE jump $pop_rLink_and_rts;
0x001879        D1270008                 r0 = M[r5 + 8];
0x00187A        E422002F                 r0 = r0 + 1;
0x00187B        D5270008                 M[r5 + 8] = r0;
0x00187C        2102000A                 Null = r0 - 10;
0x00187D        DD40F4C3                 if NEG jump $pop_rLink_and_rts;
0x00187E        0037000F                 r1 = r5 + Null;
0x00187F        01770002                 r5 = r5 + 2;
0x001880        D1230001                 r0 = M[r1 + 1];
0x001881        E0020001                 if NE call r0;
0x001882        09701F91                 r5 = Null + M[$M.codec_av_encode.data_ptr];
0x001883        D1270003                 r0 = M[r5 + 3];
0x001884        DD000003                 if EQ jump $M.codec_av_encode.skip_left_channel;
0x001885        D1320002                 r1 = M[r0 + 2];
0x001886        D5320001                 M[r0 + 1] = r1;

 <$M.codec_av_encode.skip_left_channel>
0x001887        D1270004                 r0 = M[r5 + 4];
0x001888        DD000003                 if EQ jump $M.codec_av_encode.skip_right_channel;
0x001889        D1320002                 r1 = M[r0 + 2];
0x00188A        D5320001                 M[r0 + 1] = r1;

 <$M.codec_av_encode.skip_right_channel>
0x00188B        D1270002                 r0 = M[r5 + 2];
0x00188C        D1420000                 r2 = M[r0 + 0];
0x00188D        95344000                 r1 = r2 * 0.5 (frac);
0x00188E        DDF0000D                 jump $M.codec_av_encode.update_threshold_and_exit;

 <$M.codec_av_encode.jp_encode_successful>
0x00188F        D5070008                 M[r5 + 8] = Null;
0x001890        D1270002                 r0 = M[r5 + 2];
0x001891        D1320002                 r1 = M[r0 + 2];
0x001892        D1420000                 r2 = M[r0 + 0];
0x001893        FD0000FF 29334F91        r1 = r1 - M[$M.codec_av_encode.WritePointer];
0x001895        00330044                 if NEG r1 = r1 + r2;
0x001896        FD000019 9523999A        r0 = r1 * 0.20000004768371582 (frac);
0x001898        03320000                 r1 = r1 + r0;
0x001899        2003004F                 Null = r1 - r2;
0x00189A        00340005                 if POS r1 = r2 + Null;

 <$M.codec_av_encode.update_threshold_and_exit>
0x00189B        D5370007                 M[r5 + 7] = r1;
0x00189C        DDF0F4A4                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x00189D        01700080                 r5 = Null + 128;
0x00189E        D1AB0030                 r8 = M[r9 + 48];
0x00189F        21AA0002                 r8 = r8 - 2;
0x0018A0        D13B0014                 r1 = M[r9 + 20];
0x0018A1        5000003F                 I0 = Null + r1;
0x0018A2        D13B001B                 r1 = M[r9 + 27];
0x0018A3        5010003F                 I1 = Null + r1;
0x0018A4        D13B0018                 r1 = M[r9 + 24];
0x0018A5        5020003F                 I2 = Null + r1;
0x0018A6        D19B001F                 r7 = M[r9 + 31];
0x0018A7        D13B0021                 r1 = M[r9 + 33];
0x0018A8        9B390000                 r1 = r1 * r7 (int);
0x0018A9        5080003F                 M0 = Null + r1;
0x0018AA        70A0003F                 M2 = Null - r1;
0x0018AB        50B3003F                 M3 = r1 + r1;
0x0018AC        D14B001D                 r2 = M[r9 + 29];
0x0018AD        9843004F                 r2 = r1 * r2 (int);
0x0018AE        7090004F                 M1 = Null - r2;
0x0018AF        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x0018B0        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x0018B1        D1CB001D                 r10 = M[r9 + 29];
0x0018B2        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0018B3        03034900                 Null = Null + r1, r2 = M[I2,1];
0x0018B4        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x0018B5        E444002F                 r2 = r2 + 1;
0x0018B6        D05A003F                 r3 = M[r8 + r1];
0x0018B7        2034003F                 r1 = r2 - r1;
0x0018B8        9067004F                 r4 = r5 ASHIFT r2;
0x0018B9        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0018BA        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x0018BB        8D220008                 r0 = r0 LSHIFT 8;
0x0018BC        01220080                 r0 = r0 + 128;
0x0018BD        C012005F                 rMAC = r0 * r3 (UU);
0x0018BE        8C21003F                 r0 = rMAC LSHIFT r1;
0x0018BF        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x0018C0        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x0018C1        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0018C2        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x0018C3        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x0018C4        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x0018C5        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x0018C6        E488003F                 r6 = r6 - 1;
0x0018C7        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x0018C8        E499003F                 r7 = r7 - 1;
0x0018C9        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x0018CA        DC0D000F                 rts;

 <$sbcdec.init_static_decoder>
0x0018CB        F3D00000                 push rLink;
0x0018CC        FD0000FF 01B04CB8        r9 = Null + -45896;
0x0018CE        D5B70005                 M[r5 + 5] = r9;
0x0018CF        E1F002BB                 call $sbc.init_static_common;
0x0018D0        FD0000FF 01203410        r0 = Null + -52208;
0x0018D2        D52B002E                 M[r9 + 46] = r0;
0x0018D3        FD0000FF 012031A0        r0 = Null + -52832;
0x0018D5        D52B002F                 M[r9 + 47] = r0;
0x0018D6        FD0000FF 01203571        r0 = Null + -51855;
0x0018D8        D52B0030                 M[r9 + 48] = r0;
0x0018D9        FD0000FF 01203265        r0 = Null + -52635;
0x0018DB        D52B0031                 M[r9 + 49] = r0;
0x0018DC        FD0000FF 01203000        r0 = Null + -53248;
0x0018DE        D52B0032                 M[r9 + 50] = r0;
0x0018DF        FD0000FF 01203100        r0 = Null + -52992;
0x0018E1        D52B0033                 M[r9 + 51] = r0;
0x0018E2        D50B003A                 M[r9 + 58] = Null;
0x0018E3        01200010                 r0 = Null + 16;
0x0018E4        D52B003B                 M[r9 + 59] = r0;
0x0018E5        01200540                 r0 = Null + 1344;
0x0018E6        D52B003E                 M[r9 + 62] = r0;
0x0018E7        E1F00285                 call $sbcdec.reset_decoder;
0x0018E8        E1F0028A                 call $sbcdec.init_tables;
0x0018E9        FD0000FF 01304F28        r1 = Null + -45272;
0x0018EB        01407010                 r2 = Null + 28688;
0x0018EC        015018EF                 r3 = Null + 6383;
0x0018ED        E1F002E6                 call $message.register_handler;
0x0018EE        DDF0F452                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x0018EF        D53B0034                 M[r9 + 52] = r1;
0x0018F0        DC0D000F                 rts;

 <$sbcenc.quantize_samples>
0x0018F1        D14B0006                 r2 = M[r9 + 6];
0x0018F2        21440002                 r2 = r2 - 2;
0x0018F3        D12B0014                 r0 = M[r9 + 20];
0x0018F4        5010002F                 I1 = Null + r0;
0x0018F5        D12B001B                 r0 = M[r9 + 27];
0x0018F6        5020002F                 I2 = Null + r0;
0x0018F7        D12B0018                 r0 = M[r9 + 24];
0x0018F8        5030002F                 I3 = Null + r0;
0x0018F9        D1AB001F                 r8 = M[r9 + 31];
0x0018FA        D19B0021                 r7 = M[r9 + 33];
0x0018FB        982A009F                 r0 = r8 * r7 (int);
0x0018FC        5080002F                 M0 = Null + r0;
0x0018FD        70A0002F                 M2 = Null - r0;
0x0018FE        50B2002F                 M3 = r0 + r0;
0x0018FF        D13B001D                 r1 = M[r9 + 29];
0x001900        9832003F                 r1 = r0 * r1 (int);
0x001901        75930001                 M1 = 1 - r1;

 <$M.sbcenc.quantize_samples.chan_loop>
0x001902        D19B0021                 r7 = M[r9 + 33];

 <$M.sbcenc.quantize_samples.subband_loop>
0x001903        D1CB001D                 r10 = M[r9 + 29];
0x001904        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001905        03026D00                 Null = Null + r0, r4 = M[I3,1];
0x001906        DD00000C                 if EQ jump $M.sbcenc.quantize_samples.zero_sample;
0x001907        ED760080                 r5 = 0x80 ASHIFT r4;
0x001908        65660008                 r4 = 8 - r4;
0x001909        D084002F                 r6 = M[r2 + r0];
0x00190A        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x00190B        03370000                 r1 = r1 + r5;
0x00190C        E5F00004                 do $M.sbcenc.quantize_samples.block_loop;
0x00190D        CC13008F                 rMAC = r1 * r6 (SS);
0x00190E        92E63600                 rMAC = rMAC ASHIFT r4, r1 = M[I1,M2];
0x00190F        02379700                 r1 = r1 + r5, M[I1,M3] = rMAC;

 <$M.sbcenc.quantize_samples.block_loop>
0x001910        5F1A0000                 I1 = I1 + M2;
0x001911        DDF00003                 jump $M.sbcenc.quantize_samples.block_loop_done;

 <$M.sbcenc.quantize_samples.zero_sample>
0x001912        E5F00002                 do $M.sbcenc.quantize_samples.block_loop_done;
0x001913        0200A400                 Null = Null + Null, M[I1,M0] = r0;

 <$M.sbcenc.quantize_samples.block_loop_done>
0x001914        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x001915        E499003F                 r7 = r7 - 1;
0x001916        DD10FFED                 if NE jump $M.sbcenc.quantize_samples.subband_loop;
0x001917        E4AA003F                 r8 = r8 - 1;
0x001918        DD10FFEA                 if NE jump $M.sbcenc.quantize_samples.chan_loop;
0x001919        DC0D000F                 rts;

 <$cbops.signal_detect_op.timer_handler>
0x00191A        F3D00000                 push rLink;
0x00191B        D13A0000                 r1 = M[r8 + 0];
0x00191C        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x00191D        D12A0002                 r0 = M[r8 + 2];
0x00191E        2002003F                 Null = r0 - r1;
0x00191F        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x001920        D14A0003                 r2 = M[r8 + 3];
0x001921        E444002F                 r2 = r2 + 1;
0x001922        D54A0003                 M[r8 + 3] = r2;
0x001923        D13A0001                 r1 = M[r8 + 1];
0x001924        2004003F                 Null = r2 - r1;
0x001925        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x001926        D10A0004                 Null = M[r8 + 4];
0x001927        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x001928        01500000                 r3 = Null + 0;
0x001929        D55A0004                 M[r8 + 4] = r3;
0x00192A        D14A0005                 r2 = M[r8 + 5];
0x00192B        E1F0F199                 call $message.send_short;
0x00192C        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x00192D        D10A0004                 Null = M[r8 + 4];
0x00192E        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x00192F        E450002F                 r3 = Null + 1;
0x001930        D55A0004                 M[r8 + 4] = r3;
0x001931        D14A0005                 r2 = M[r8 + 5];
0x001932        E1F0F192                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x001933        01400000                 r2 = Null + 0;
0x001934        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x001935        01200000                 r0 = Null + 0;
0x001936        D52A0002                 M[r8 + 2] = r0;
0x001937        DDF0F409                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x001938        01200000                 r0 = Null + 0;
0x001939        D52A0003                 M[r8 + 3] = r0;
0x00193A        D52A0002                 M[r8 + 2] = r0;
0x00193B        E420002F                 r0 = Null + 1;
0x00193C        D52A0004                 M[r8 + 4] = r0;
0x00193D        DDF0F403                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x00193E        F3D00000                 push rLink;
0x00193F        00BC000F                 r9 = r10 + Null;
0x001940        D17A0002                 r5 = M[r8 + 2];
0x001941        511A0003                 I1 = r8 + 3;
0x001942        51D00000                 L1 = Null + 0;
0x001943        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x001944        00CB000F                 r10 = r9 + Null;
0x001945        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001946        D038002F                 r1 = M[r6 + r0];
0x001947        5000003F                 I0 = Null + r1;
0x001948        D039002F                 r1 = M[r7 + r0];
0x001949        50C0003F                 L0 = Null + r1;
0x00194A        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00194B        D038002F                 r1 = M[r6 + r0];
0x00194C        5040003F                 I4 = Null + r1;
0x00194D        D039002F                 r1 = M[r7 + r0];
0x00194E        50E0003F                 L4 = Null + r1;
0x00194F        D12A0001                 r0 = M[r8 + 1];
0x001950        D13A0000                 r1 = M[r8 + 0];
0x001951        E5F0000D                 do $M.cbops.soft_mute.sampleLoop;
0x001952        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x001953        00200004                 if NEG r0 = Null + Null;
0x001954        0160001F                 r4 = Null + 31;
0x001955        2006002F                 Null = r4 - r0;
0x001956        00260004                 if NEG r0 = r4 + Null;
0x001957        FD0000FF 01604D3A        r4 = Null + -45766;
0x001959        0062006F                 r4 = r0 + r4;
0x00195A        D3600000                 r4 = M[r4 + Null];
0x00195B        97460000                 r2 = r2 * r4 (frac);
0x00195C        2040004F                 r2 = Null - r2;
0x00195D        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x00195E        E477003F                 r5 = r5 - 1;
0x00195F        DD10FFE5                 if NE jump $M.cbops.soft_mute.channelLoop;
0x001960        D52A0001                 M[r8 + 1] = r0;
0x001961        51C00000                 L0 = Null + 0;
0x001962        51E00000                 L4 = Null + 0;
0x001963        DDF0F3DD                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x001964        F3D00000                 push rLink;
0x001965        FD0000FF 09404E41        r2 = Null + M[$flash.windowed_data16.address];
0x001967        D12B002E                 r0 = M[r9 + 46];
0x001968        5000002F                 I0 = Null + r0;
0x001969        01200000                 r0 = Null + 0;
0x00196A        01300080                 r1 = Null + 128;
0x00196B        E1F0EDFA                 call $flash.copy_to_dm_24;
0x00196C        D12B002F                 r0 = M[r9 + 47];
0x00196D        5000002F                 I0 = Null + r0;
0x00196E        01200234                 r0 = Null + 564;
0x00196F        01300020                 r1 = Null + 32;
0x001970        E1F0EDF5                 call $flash.copy_to_dm_24;
0x001971        D12B0030                 r0 = M[r9 + 48];
0x001972        5000002F                 I0 = Null + r0;
0x001973        012002DE                 r0 = Null + 734;
0x001974        0130000F                 r1 = Null + 15;
0x001975        E1F0EDF0                 call $flash.copy_to_dm_24;
0x001976        D12B0031                 r0 = M[r9 + 49];
0x001977        5000002F                 I0 = Null + r0;
0x001978        012002C4                 r0 = Null + 708;
0x001979        01300011                 r1 = Null + 17;
0x00197A        E1F0EDEB                 call $flash.copy_to_dm_24;
0x00197B        DDF0F3C5                 jump $pop_rLink_and_rts;

 <$sbcdec.get1byte>
0x00197C        01200008                 r0 = Null + 8;
0x00197D        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x00197E        01200004                 r0 = Null + 4;
0x00197F        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x001980        01200002                 r0 = Null + 2;
0x001981        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x001982        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x001983        D15B0031                 r3 = M[r9 + 49];
0x001984        D3520000                 r3 = M[r3 + r0];
0x001985        D14B003B                 r2 = M[r9 + 59];
0x001986        2042004F                 r2 = r0 - r2;
0x001987        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x001988        03003000                 Null = Null + Null, r1 = M[I0,0];
0x001989        8F340000                 r1 = r1 LSHIFT r2;
0x00198A        83350000                 r1 = r1 AND r3;
0x00198B        2040004F                 r2 = Null - r2;
0x00198C        D54B003B                 M[r9 + 59] = r2;
0x00198D        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x00198E        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00198F        8F340000                 r1 = r1 LSHIFT r2;
0x001990        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x001991        21440010                 r2 = r2 - 16;
0x001992        8F540000                 r3 = r3 LSHIFT r2;
0x001993        03350000                 r1 = r1 + r3;
0x001994        2040004F                 r2 = Null - r2;
0x001995        D54B003B                 M[r9 + 59] = r2;
0x001996        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x001997        D15B0014                 r3 = M[r9 + 20];
0x001998        5010005F                 I1 = Null + r3;
0x001999        D1CB0021                 r10 = M[r9 + 33];
0x00199A        D15B001D                 r3 = M[r9 + 29];
0x00199B        508000CF                 M0 = Null + r10;
0x00199C        709000CF                 M1 = Null - r10;
0x00199D        59A90001                 M2 = M1 + 1;
0x00199E        51B00001                 M3 = Null + 1;
0x00199F        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x0019A1        514B0026                 I4 = r9 + 38;
0x0019A2        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x0019A3        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x0019A4        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x0019A5        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x0019A6        0042003F                 r2 = r0 + r1;
0x0019A7        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x0019A8        2032003F                 r1 = r0 - r1;
0x0019A9        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x0019AA        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x0019AB        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x0019AC        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x0019AD        D1CB0021                 r10 = M[r9 + 33];
0x0019AE        5B1C0000                 I1 = I1 + r10;
0x0019AF        E455003F                 r3 = r3 - 1;
0x0019B0        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x0019B1        DC0D000F                 rts;

 <$cbops.signal_detect_op.main>
0x0019B2        F3D00000                 push rLink;
0x0019B3        00BC000F                 r9 = r10 + Null;
0x0019B4        D17A0000                 r5 = M[r8 + 0];
0x0019B5        D15A0001                 r3 = M[r8 + 1];
0x0019B6        514A0002                 I4 = r8 + 2;
0x0019B7        51E00000                 L4 = Null + 0;
0x0019B8        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x0019B9        00CB000F                 r10 = r9 + Null;
0x0019BA        03000021                 Null = Null + Null, r0 = M[I4,1];
0x0019BB        D038002F                 r1 = M[r6 + r0];
0x0019BC        5000003F                 I0 = Null + r1;
0x0019BD        D039002F                 r1 = M[r7 + r0];
0x0019BE        50C0003F                 L0 = Null + r1;
0x0019BF        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x0019C0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0019C1        0002000F                 Null = r0 + Null;
0x0019C2        20200024                 if NEG r0 = Null - r0;
0x0019C3        2004002F                 Null = r2 - r0;
0x0019C4        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x0019C5        E455003F                 r3 = r3 - 1;
0x0019C6        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x0019C7        D5470002                 M[r5 + 2] = r2;
0x0019C8        51C00000                 L0 = Null + 0;
0x0019C9        DDF0F377                 jump $pop_rLink_and_rts;

 <$sbcenc.encoder_set_parameters>
0x0019CA        F3D00000                 push rLink;
0x0019CB        E1F0F32E                 call $block_interrupts;
0x0019CC        D12B0008                 r0 = M[r9 + 8];
0x0019CD        D52B0021                 M[r9 + 33] = r0;
0x0019CE        D12B000E                 r0 = M[r9 + 14];
0x0019CF        D52B0025                 M[r9 + 37] = r0;
0x0019D0        D12B0009                 r0 = M[r9 + 9];
0x0019D1        D52B001D                 M[r9 + 29] = r0;
0x0019D2        D12B000A                 r0 = M[r9 + 10];
0x0019D3        D52B001C                 M[r9 + 28] = r0;
0x0019D4        D12B000B                 r0 = M[r9 + 11];
0x0019D5        D52B001E                 M[r9 + 30] = r0;
0x0019D6        E430002F                 r1 = Null + 1;
0x0019D7        21020000                 Null = r0 - 0;
0x0019D8        00330031                 if NE r1 = r1 + r1;
0x0019D9        D53B001F                 M[r9 + 31] = r1;
0x0019DA        D12B000C                 r0 = M[r9 + 12];
0x0019DB        D52B0020                 M[r9 + 32] = r0;
0x0019DC        D12B000D                 r0 = M[r9 + 13];
0x0019DD        D52B0022                 M[r9 + 34] = r0;
0x0019DE        E1F0F30B                 call $interrupt.unblock;
0x0019DF        DDF0F361                 jump $pop_rLink_and_rts;

 <$sbc.calc_scale_factors>
0x0019E0        D16B0018                 r4 = M[r9 + 24];
0x0019E1        5010006F                 I1 = Null + r4;
0x0019E2        D16B0014                 r4 = M[r9 + 20];
0x0019E3        5000006F                 I0 = Null + r4;
0x0019E4        D16B001F                 r4 = M[r9 + 31];
0x0019E5        D17B0021                 r5 = M[r9 + 33];
0x0019E6        D18B001D                 r6 = M[r9 + 29];
0x0019E7        9B670000                 r4 = r4 * r5 (int);
0x0019E8        5080006F                 M0 = Null + r4;
0x0019E9        9826008F                 r0 = r4 * r6 (int);
0x0019EA        75920001                 M1 = 1 - r0;
0x0019EB        01400010                 r2 = Null + 16;
0x0019EC        E488003F                 r6 = r6 - 1;
0x0019ED        00C8000F                 r10 = r6 + Null;
0x0019EE        51A00001                 M2 = Null + 1;

 <$M.sbc.calc_scale_factors.chan_subband_loop>
0x0019EF        0034200F                 r1 = r2 + Null, r0 = M[I0,M0];
0x0019F0        E5F00002                 do $M.sbc.calc_scale_factors.block_loop;
0x0019F1        DA322000                 r1 = BLKSIGNDET r0, r0 = M[I0,M0];

 <$M.sbc.calc_scale_factors.block_loop>
0x0019F2        DB320000                 r1 = BLKSIGNDET r0;
0x0019F3        2034213F                 r1 = r2 - r1, r0 = M[I0,M1];
0x0019F4        00C8B60F                 r10 = r6 + Null, M[I1,M2] = r1;
0x0019F5        E466003F                 r4 = r4 - 1;
0x0019F6        DD10FFF9                 if NE jump $M.sbc.calc_scale_factors.chan_subband_loop;
0x0019F7        DC0D000F                 rts;

 <$M.music_example_message.SetConfig.func>
0x0019F8        F3D00000                 push rLink;
0x0019F9        8144FFFF                 r2 = r2 AND 0xffff;
0x0019FA        8D330010                 r1 = r1 LSHIFT 16;
0x0019FB        87340000                 r1 = r1 OR r2;
0x0019FC        8166FFFF                 r4 = r4 AND 0xffff;
0x0019FD        8D550010                 r3 = r3 LSHIFT 16;
0x0019FE        87560000                 r3 = r3 OR r4;
0x0019FF        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x001A00        83530000                 r3 = r3 AND r1;
0x001A01        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x001A03        83230000                 r0 = r0 AND r1;
0x001A04        87250000                 r0 = r0 OR r3;
0x001A05        192006D0                 M[$M.system_config.data.CurParams] = r0 + Null;
0x001A06        0140100F                 r2 = Null + 4111;
0x001A07        8D520070                 r3 = r0 LSHIFT -16;
0x001A08        8162FFFF                 r4 = r0 AND 0xffff;
0x001A09        E1F0F0BB                 call $message.send_short;
0x001A0A        E430002F                 r1 = Null + 1;
0x001A0B        19301F78                 M[$music_example.reinit] = r1 + Null;
0x001A0C        DDF0F334                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.init_avcopy_struct>
0x001A0D        500000AF                 I0 = Null + r8;
0x001A0E        01C00007                 r10 = Null + 7;
0x001A0F        51101BC7                 I1 = Null + 7111;
0x001A10        E5F00003                 do $M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct;
0x001A11        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001A12        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.cbops.av_copy.init_avcopy_struct.loop_build_silence_struct>
0x001A13        D12A0001                 r0 = M[r8 + 1];
0x001A14        01320003                 r1 = r0 + 3;
0x001A15        D33A0000                 r1 = M[r1 + r8];
0x001A16        D12A0002                 r0 = M[r8 + 2];
0x001A17        19001F89                 M[$M.cbops.av_copy.right_channel] = Null + Null;
0x001A18        01901BC9                 r7 = Null + 7113;
0x001A19        FD0000FF 01404F4A        r2 = Null + -45238;
0x001A1B        D5490000                 M[r7 + 0] = r2;
0x001A1C        D14A0001                 r2 = M[r8 + 1];
0x001A1D        21040002                 Null = r2 - 2;
0x001A1E        DD100005                 if NE jump $M.cbops.av_copy.init_avcopy_struct.is_mono_struct;
0x001A1F        01401F4F                 r2 = Null + 8015;
0x001A20        D5490001                 M[r7 + 1] = r2;
0x001A21        D14A0003                 r2 = M[r8 + 3];
0x001A22        19401F89                 M[$M.cbops.av_copy.right_channel] = r2 + Null;

 <$M.cbops.av_copy.init_avcopy_struct.is_mono_struct>
0x001A23        DC0D000F                 rts;

 <$sbcenc.private.init_tables>
0x001A24        F3D00000                 push rLink;
0x001A25        FD0000FF 09404E41        r2 = Null + M[$flash.windowed_data16.address];
0x001A27        D12B0001                 r0 = M[r9 + 1];
0x001A28        5000002F                 I0 = Null + r0;
0x001A29        012000C0                 r0 = Null + 192;
0x001A2A        01300080                 r1 = Null + 128;
0x001A2B        E1F0ED3A                 call $flash.copy_to_dm_24;
0x001A2C        D12B0002                 r0 = M[r9 + 2];
0x001A2D        5000002F                 I0 = Null + r0;
0x001A2E        01200294                 r0 = Null + 660;
0x001A2F        01300020                 r1 = Null + 32;
0x001A30        E1F0ED35                 call $flash.copy_to_dm_24;
0x001A31        D12B0006                 r0 = M[r9 + 6];
0x001A32        5000002F                 I0 = Null + r0;
0x001A33        012002F5                 r0 = Null + 757;
0x001A34        0130000F                 r1 = Null + 15;
0x001A35        E1F0ED30                 call $flash.copy_to_dm_24;
0x001A36        DDF0F30A                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x001A37        F3D00000                 push rLink;
0x001A38        FD0000FF 09404E41        r2 = Null + M[$flash.windowed_data16.address];
0x001A3A        D12B0015                 r0 = M[r9 + 21];
0x001A3B        5000002F                 I0 = Null + r0;
0x001A3C        01200180                 r0 = Null + 384;
0x001A3D        01300050                 r1 = Null + 80;
0x001A3E        E1F0ED27                 call $flash.copy_to_dm_24;
0x001A3F        D12B0016                 r0 = M[r9 + 22];
0x001A40        5000002F                 I0 = Null + r0;
0x001A41        012001F8                 r0 = Null + 504;
0x001A42        01300028                 r1 = Null + 40;
0x001A43        E1F0ED22                 call $flash.copy_to_dm_24;
0x001A44        D12B0017                 r0 = M[r9 + 23];
0x001A45        5000002F                 I0 = Null + r0;
0x001A46        01200264                 r0 = Null + 612;
0x001A47        01300030                 r1 = Null + 48;
0x001A48        E1F0F1CC                 call $flash.copy_to_dm;
0x001A49        DDF0F2F7                 jump $pop_rLink_and_rts;

 <$sbcenc.putbits_external>
0x001A4A        D1B70004                 r9 = M[r5 + 4];

 <$sbcenc.putbits>
0x001A4B        D14B0010                 r2 = M[r9 + 16];
0x001A4C        23420000                 r2 = r2 - r0;
0x001A4D        DDD00007                 if LE jump $M.sbcenc.putbits.anotherword;
0x001A4E        8C53004F                 r3 = r1 LSHIFT r2;
0x001A4F        D54B0010                 M[r9 + 16] = r2;
0x001A50        D14B000F                 r2 = M[r9 + 15];
0x001A51        03540000                 r3 = r3 + r2;
0x001A52        D55B000F                 M[r9 + 15] = r3;
0x001A53        DC0D000F                 rts;

 <$M.sbcenc.putbits.anotherword>
0x001A54        F3200000                 push r0;
0x001A55        8C53004F                 r3 = r1 LSHIFT r2;
0x001A56        D12B000F                 r0 = M[r9 + 15];
0x001A57        03520000                 r3 = r3 + r0;
0x001A58        8155FFFF                 r3 = r3 AND 0xffff;
0x001A59        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x001A5A        01440010                 r2 = r2 + 16;
0x001A5B        8C53004F                 r3 = r1 LSHIFT r2;
0x001A5C        D55B000F                 M[r9 + 15] = r3;
0x001A5D        D54B0010                 M[r9 + 16] = r2;
0x001A5E        F3240000                 pop r0;
0x001A5F        DC0D000F                 rts;

 <$conn_init_cbuffers>
0x001A60        F3D00000                 push rLink;
0x001A61        01201F3A                 r0 = Null + 7994;
0x001A62        01300C00                 r1 = Null + 3072;
0x001A63        0045000F                 r2 = r3 + Null;
0x001A64        E1F0F2CB                 call $cbuffer.buffer_configure;
0x001A65        FD0000FF 01204F38        r0 = Null + -45256;
0x001A67        FD0000FF 01303C00        r1 = Null + -50176;
0x001A69        0045000F                 r2 = r3 + Null;
0x001A6A        E1F0F2C5                 call $cbuffer.buffer_configure;
0x001A6B        FD0000FF 01204F35        r0 = Null + -45259;
0x001A6D        01300800                 r1 = Null + 2048;
0x001A6E        0046000F                 r2 = r4 + Null;
0x001A6F        E1F0F2C0                 call $cbuffer.buffer_configure;
0x001A70        DDF0F2D0                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x001A71        F3D00000                 push rLink;
0x001A72        D17B0014                 r5 = M[r9 + 20];
0x001A73        5010007F                 I1 = Null + r5;
0x001A74        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x001A75        D17B001F                 r5 = M[r9 + 31];
0x001A76        D1CB001B                 r10 = M[r9 + 27];
0x001A77        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x001A78        D1CB0021                 r10 = M[r9 + 33];
0x001A79        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x001A7A        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x001A7B        0002000F                 Null = r0 + Null;
0x001A7C        E110FF07                 if NE call $sbcdec.getbits;
0x001A7D        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x001A7E        E477003F                 r5 = r5 - 1;
0x001A7F        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x001A80        E466003F                 r4 = r4 - 1;
0x001A81        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x001A82        DDF0F2BE                 jump $pop_rLink_and_rts;

 <$sbc.calc_frame_length>
0x001A83        D12B0021                 r0 = M[r9 + 33];
0x001A84        D13B001F                 r1 = M[r9 + 31];
0x001A85        9862003F                 r4 = r0 * r1 (int);
0x001A86        8D66007F                 r4 = r4 LSHIFT -1;
0x001A87        01660005                 r4 = r4 + 5;
0x001A88        D14B001D                 r2 = M[r9 + 29];
0x001A89        D15B0022                 r3 = M[r9 + 34];
0x001A8A        9854005F                 r3 = r2 * r3 (int);
0x001A8B        D14B001E                 r2 = M[r9 + 30];
0x001A8C        21440002                 r2 = r2 - 2;
0x001A8D        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x001A8E        9B420000                 r2 = r2 * r0 (int);
0x001A8F        03540000                 r3 = r3 + r2;
0x001A90        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x001A91        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x001A92        E455003F                 r3 = r3 - 1;
0x001A93        8D55007D                 r3 = r3 LSHIFT -3;
0x001A94        0026005F                 r0 = r4 + r3;
0x001A95        DC0D000F                 rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x001A96        F3D00000                 push rLink;
0x001A97        5000005F                 I0 = Null + r3;
0x001A98        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001A99        00C3000F                 r10 = r1 + Null;
0x001A9A        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x001A9B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001A9C        E1F015CD                 call $user_eq.calcParamAddrOffset;
0x001A9D        01220725                 r0 = r0 + 1829;
0x001A9E        D3200000                 r0 = M[r0 + Null];
0x001A9F        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x001AA0        0075000F                 r5 = r3 + Null;
0x001AA1        0064000F                 r4 = r2 + Null;
0x001AA2        0150329B                 r3 = Null + 12955;
0x001AA3        E1F0ECF1                 call $message.send_long;
0x001AA4        DDF0F29C                 jump $pop_rLink_and_rts;

 <$sbcenc.write_audio_samples>
0x001AA5        F3D00000                 push rLink;
0x001AA6        D16B001D                 r4 = M[r9 + 29];
0x001AA7        D17B0014                 r5 = M[r9 + 20];
0x001AA8        5040007F                 I4 = Null + r5;
0x001AA9        D17B001F                 r5 = M[r9 + 31];
0x001AAA        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcenc.write_audio_samples.block_loop>
0x001AAB        98C8007F                 r10 = r6 * r5 (int);
0x001AAC        D12B001B                 r0 = M[r9 + 27];
0x001AAD        5020002F                 I2 = Null + r0;
0x001AAE        E5F00004                 do $M.sbcenc.write_audio_samples.chan_subband_loop;
0x001AAF        03002931                 Null = Null + Null, r0 = M[I2,1], r1 = M[I4,1];
0x001AB0        0002000F                 Null = r0 + Null;
0x001AB1        E110FF9A                 if NE call $sbcenc.putbits;

 <$M.sbcenc.write_audio_samples.chan_subband_loop>
0x001AB2        E466003F                 r4 = r4 - 1;
0x001AB3        DD10FFF8                 if NE jump $M.sbcenc.write_audio_samples.block_loop;
0x001AB4        DDF0F28C                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x001AB5        F3D00000                 push rLink;
0x001AB6        0023000F                 r0 = r1 + Null;
0x001AB7        E1F015B2                 call $user_eq.calcParamAddrOffset;
0x001AB8        01220725                 r0 = r0 + 1829;
0x001AB9        8144FFFF                 r2 = r2 AND 0xffff;
0x001ABA        1824000F                 M[r0] = r2 + Null;
0x001ABB        21050000                 Null = r3 - 0;
0x001ABC        DD00F284                 if EQ jump $pop_rLink_and_rts;
0x001ABD        0023000F                 r0 = r1 + Null;
0x001ABE        FD0000FF 0190327E        r7 = Null + -52610;
0x001AC0        E1F0157E                 call $user_eq.calcBandCoefs;
0x001AC1        DDF0F27F                 jump $pop_rLink_and_rts;

 <$sbcdec.find_sync>
0x001AC2        F3D00000                 push rLink;
0x001AC3        E1F000BE                 call $sbcdec.byte_align;
0x001AC4        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x001AC5        D18B003B                 r6 = M[r9 + 59];
0x001AC6        5820000F                 I2 = I0 + Null;
0x001AC7        E1F0FEB5                 call $sbcdec.get1byte;
0x001AC8        2103009C                 Null = r1 - 156;
0x001AC9        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x001ACA        01800063                 r6 = Null + 99;
0x001ACB        DDF0F275                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x001ACC        5802000F                 I0 = I2 + Null;
0x001ACD        D58B003B                 M[r9 + 59] = r6;
0x001ACE        DDF0F272                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x001ACF        D12B0032                 r0 = M[r9 + 50];
0x001AD0        D52B003C                 M[r9 + 60] = r0;
0x001AD1        D12B0032                 r0 = M[r9 + 50];
0x001AD2        5010002F                 I1 = Null + r0;
0x001AD3        01C000A0                 r10 = Null + 160;
0x001AD4        01200000                 r0 = Null + 0;
0x001AD5        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x001AD6        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x001AD7        D12B0033                 r0 = M[r9 + 51];
0x001AD8        D52B003D                 M[r9 + 61] = r0;
0x001AD9        D12B0033                 r0 = M[r9 + 51];
0x001ADA        5010002F                 I1 = Null + r0;
0x001ADB        01C000A0                 r10 = Null + 160;
0x001ADC        01200000                 r0 = Null + 0;
0x001ADD        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x001ADE        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x001ADF        DC0D000F                 rts;

 <$M.music_example_message.SetPlugin.func>
0x001AE0        FD0000FF 09004F66        Null = Null + M[$app_config.io];
0x001AE2        DC0D0005                 if POS rts;
0x001AE3        FD0000FF 19304F66        M[$app_config.io] = r1 + Null;
0x001AE5        21030004                 Null = r1 - 4;
0x001AE6        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_faststream;
0x001AE7        01200002                 r0 = Null + 2;
0x001AE8        19201F6D                 M[$codec_type] = r0 + Null;
0x001AE9        0120011C                 r0 = Null + 284;
0x001AEA        FD0000FF 19204F6D        M[$codec_config] = r0 + Null;
0x001AEC        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_faststream>
0x001AED        DDF00150                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x001AEE        DC0D000F                 rts;

 <$sbcdec.read_scale_factors>
0x001AEF        F3D00000                 push rLink;
0x001AF0        D18B001F                 r6 = M[r9 + 31];
0x001AF1        D19B0021                 r7 = M[r9 + 33];
0x001AF2        9B890000                 r6 = r6 * r7 (int);
0x001AF3        D12B0018                 r0 = M[r9 + 24];
0x001AF4        5010002F                 I1 = Null + r0;
0x001AF5        51900001                 M1 = Null + 1;
0x001AF6        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x001AF7        E1F0FE8C                 call $sbcdec.getbits;
0x001AF8        E1F00038                 call $sbc.crc_calc;
0x001AF9        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x001AFA        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x001AFB        DDF0F245                 jump $pop_rLink_and_rts;

 <$sbcenc.reset_encoder>
0x001AFC        D1B70004                 r9 = M[r5 + 4];
0x001AFD        D12B0003                 r0 = M[r9 + 3];
0x001AFE        D52B0011                 M[r9 + 17] = r0;
0x001AFF        5000002F                 I0 = Null + r0;
0x001B00        01C00050                 r10 = Null + 80;
0x001B01        01200000                 r0 = Null + 0;
0x001B02        E5F00002                 do $M.sbcenc.reset_encoder.asf_init_loop1;
0x001B03        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.sbcenc.reset_encoder.asf_init_loop1>
0x001B04        D12B0004                 r0 = M[r9 + 4];
0x001B05        D52B0012                 M[r9 + 18] = r0;
0x001B06        5000002F                 I0 = Null + r0;
0x001B07        01C00050                 r10 = Null + 80;
0x001B08        01200000                 r0 = Null + 0;
0x001B09        E5F00002                 do $M.sbcenc.reset_encoder.asf_init_loop2;
0x001B0A        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.sbcenc.reset_encoder.asf_init_loop2>
0x001B0B        DC0D000F                 rts;

 <$M.music_example_message.SoftMute.func>
0x001B0C        F3D00000                 push rLink;
0x001B0D        0043000F                 r2 = r1 + Null;
0x001B0E        81330001                 r1 = r1 AND 0x1;
0x001B0F        01A01BA8                 r8 = Null + 7080;
0x001B10        E1F00055                 call $M.cbops.soft_mute.message_handler.func;
0x001B11        8D34007F                 r1 = r2 LSHIFT -1;
0x001B12        81330001                 r1 = r1 AND 0x1;
0x001B13        E420002F                 r0 = Null + 1;
0x001B14        2030003F                 r1 = Null - r1;
0x001B15        0003000F                 Null = r1 + Null;
0x001B16        00320000                 if EQ r1 = r0 + Null;
0x001B17        19301F66                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x001B18        DDF0F228                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x001B19        F3D00000                 push rLink;
0x001B1A        0053000F                 r3 = r1 + Null;
0x001B1B        0023000F                 r0 = r1 + Null;
0x001B1C        E1F0154D                 call $user_eq.calcParamAddrOffset;
0x001B1D        01220725                 r0 = r0 + 1829;
0x001B1E        D062000F                 r4 = M[r0 + Null];
0x001B1F        01700000                 r5 = Null + 0;
0x001B20        01800000                 r6 = Null + 0;
0x001B21        0140329A                 r2 = Null + 12954;
0x001B22        E1F0EFA2                 call $message.send_short;
0x001B23        DDF0F21D                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x001B24        F3D00000                 push rLink;
0x001B25        5000005F                 I0 = Null + r3;
0x001B26        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001B27        00C3000F                 r10 = r1 + Null;
0x001B28        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x001B29        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B2A        E1F0153F                 call $user_eq.calcParamAddrOffset;
0x001B2B        01220725                 r0 = r0 + 1829;
0x001B2C        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001B2D        8133FFFF                 r1 = r1 AND 0xffff;
0x001B2E        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x001B2F        DDF0F211                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x001B30        D14B0024                 r2 = M[r9 + 36];
0x001B31        0170001D                 r5 = Null + 29;
0x001B32        65520008                 r3 = 8 - r0;
0x001B33        00C2000F                 r10 = r0 + Null;
0x001B34        8C53005F                 r3 = r1 LSHIFT r3;
0x001B35        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x001B36        8865004F                 r4 = r3 XOR r2;
0x001B37        8D440001                 r2 = r2 LSHIFT 1;
0x001B38        81660080                 r4 = r4 AND 0x80;
0x001B39        88440071                 if NE r2 = r2 XOR r5;
0x001B3A        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x001B3B        D54B0024                 M[r9 + 36] = r2;
0x001B3C        DC0D000F                 rts;

 <$sbcenc.write_scale_factors>
0x001B3D        F3D00000                 push rLink;
0x001B3E        D16B001F                 r4 = M[r9 + 31];
0x001B3F        D17B0021                 r5 = M[r9 + 33];
0x001B40        D12B0018                 r0 = M[r9 + 24];
0x001B41        5010002F                 I1 = Null + r0;
0x001B42        98C6007F                 r10 = r4 * r5 (int);
0x001B43        01200004                 r0 = Null + 4;
0x001B44        E5F00003                 do $M.sbcenc.write_scale_factors.loop;
0x001B45        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001B46        E1F0FF05                 call $sbcenc.putbits;

 <$M.sbcenc.write_scale_factors.loop>
0x001B47        DDF0F1F9                 jump $pop_rLink_and_rts;

 <$signal_detect_timer_handler>
0x001B48        F3D00000                 push rLink;
0x001B49        01A01BD4                 r8 = Null + 7124;
0x001B4A        E1F0FDD0                 call $cbops.signal_detect_op.timer_handler;
0x001B4B        01301F08                 r1 = Null + 7944;
0x001B4C        FD00000F 01404240        r2 = Null + 1000000;
0x001B4E        01501B48                 r3 = Null + 6984;
0x001B4F        E1F0F1E4                 call $timer.schedule_event_in_period;
0x001B50        DDF0F1F0                 jump $pop_rLink_and_rts;

 <$cbops.av_copy.fill_silence_buffer_with_zeros>
0x001B51        D1320000                 r1 = M[r0 + 0];
0x001B52        50C0003F                 L0 = Null + r1;
0x001B53        D1320001                 r1 = M[r0 + 1];
0x001B54        5000003F                 I0 = Null + r1;
0x001B55        01300000                 r1 = Null + 0;
0x001B56        E5F00002                 do $M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero;
0x001B57        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.cbops.av_copy.fill_silence_buffer_with_zeros.loop_fill_zero>
0x001B58        51C00000                 L0 = Null + 0;
0x001B59        4430000F                 r1 = Null + I0;
0x001B5A        D5320002                 M[r0 + 2] = r1;
0x001B5B        DC0D000F                 rts;

 <$sbcenc.write_padding_bits>
0x001B5C        F3D00000                 push rLink;
0x001B5D        D12B0010                 r0 = M[r9 + 16];
0x001B5E        D15B000E                 r3 = M[r9 + 14];
0x001B5F        8D550003                 r3 = r3 LSHIFT 3;
0x001B60        85550007                 r3 = r3 OR 0x7;
0x001B61        01300000                 r1 = Null + 0;
0x001B62        83250000                 r0 = r0 AND r3;
0x001B63        E110FEE8                 if NE call $sbcenc.putbits;
0x001B64        DDF0F1DC                 jump $pop_rLink_and_rts;

 <$M.cbops.soft_mute.message_handler.func>
0x001B65        F3D00000                 push rLink;
0x001B66        E420002F                 r0 = Null + 1;
0x001B67        2030003F                 r1 = Null - r1;
0x001B68        0003000F                 Null = r1 + Null;
0x001B69        00320000                 if EQ r1 = r0 + Null;
0x001B6A        D53A0000                 M[r8 + 0] = r1;
0x001B6B        DDF0F1D5                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x001B6C        F3D00000                 push rLink;
0x001B6D        01200010                 r0 = Null + 16;
0x001B6E        D1B70005                 r9 = M[r5 + 5];
0x001B6F        D52B003B                 M[r9 + 59] = r0;
0x001B70        E1F0FF5F                 call $sbcdec.silence_decoder;
0x001B71        DDF0F1CF                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x001B72        F3D00000                 push rLink;
0x001B73        D1B70005                 r9 = M[r5 + 5];
0x001B74        E1F0FDF0                 call $sbcdec.private.init_tables;
0x001B75        E1F0FEC2                 call $sbc.private.init_tables_common;
0x001B76        DDF0F1CA                 jump $pop_rLink_and_rts;

 <$sbcenc.init_tables>
0x001B77        F3D00000                 push rLink;
0x001B78        D1B70004                 r9 = M[r5 + 4];
0x001B79        E1F0FEAB                 call $sbcenc.private.init_tables;
0x001B7A        E1F0FEBD                 call $sbc.private.init_tables_common;
0x001B7B        DDF0F1C5                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SignalDetect.func>
0x001B7C        F3D00000                 push rLink;
0x001B7D        8D330008                 r1 = r1 LSHIFT 8;
0x001B7E        01A01BD4                 r8 = Null + 7124;
0x001B7F        E1F00007                 call $M.cbops.signal_detect_op.message_handler.func;
0x001B80        DDF0F1C0                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x001B81        F3D00000                 push rLink;
0x001B82        D12B003B                 r0 = M[r9 + 59];
0x001B83        81220007                 r0 = r0 AND 0x7;
0x001B84        E1F0FDFF                 call $sbcdec.getbits;
0x001B85        DDF0F1BB                 jump $pop_rLink_and_rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x001B86        F3D00000                 push rLink;
0x001B87        D53A0000                 M[r8 + 0] = r1;
0x001B88        D54A0001                 M[r8 + 1] = r2;
0x001B89        DDF0F1B7                 jump $pop_rLink_and_rts;

 <$sbc.init_static_common>
0x001B8A        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x001B8B        FD000000 0120AAAA        r0 = Null + 43690;
0x001B8D        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x001B8E        DC0D0001                 if NE rts;
0x001B8F        F3D00000                 push rLink;
0x001B90        01C00032                 r10 = Null + 50;
0x001B91        FD0000FF 09304F95        r1 = Null + M[$M.spi_comm.last_addr];
0x001B93        09200045                 r0 = Null + M[$M.spi_block.command];
0x001B94        FD000000 0190AAAA        r7 = Null + 43690;
0x001B96        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x001B97        E403002F                 Null = r1 + 1;
0x001B98        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x001B99        D1430001                 r2 = M[r1 + 1];
0x001B9A        2002004F                 Null = r0 - r2;
0x001B9B        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x001B9C        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x001B9D        E1F000A0                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x001B9E        D1D30002                 rLink = M[r1 + 2];
0x001B9F        01300005                 r1 = Null + 5;
0x001BA0        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x001BA1        E00D000F                 call rLink;
0x001BA2        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x001BA3        01205555                 r0 = Null + 21845;
0x001BA4        FD000000 0130AAAA        r1 = Null + 43690;
0x001BA6        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x001BA7        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x001BA8        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x001BA9        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x001BAA        DDF0F196                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x001BAB        F3D00000                 push rLink;
0x001BAC        FD0000FF 01304F18        r1 = Null + -45288;
0x001BAE        01407000                 r2 = Null + 28672;
0x001BAF        01501BB2                 r3 = Null + 7090;
0x001BB0        E1F00023                 call $message.register_handler;
0x001BB1        DDF00005                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x001BB2        E420002F                 r0 = Null + 1;
0x001BB3        FD0000FF 19204F83        M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x001BB5        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x001BB6        85408000                 r2 = Null OR 0x8000;
0x001BB7        E1F0EF0D                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x001BB8        FD0000FF 09004F83        Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x001BBA        DD00FFFE                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x001BBB        DDF0F185                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x001BBC        D12A000A                 r0 = M[r8 + 10];
0x001BBD        D13A000B                 r1 = M[r8 + 11];
0x001BBE        D14A000C                 r2 = M[r8 + 12];
0x001BBF        D15A000E                 r3 = M[r8 + 14];
0x001BC0        D16A000F                 r4 = M[r8 + 15];
0x001BC1        2073002F                 r5 = r1 - r0;
0x001BC2        CC17005F                 rMAC = r5 * r3 (SS);
0x001BC3        D51A0012                 M[r8 + 18] = rMAC;
0x001BC4        2074003F                 r5 = r2 - r1;
0x001BC5        CC17006F                 rMAC = r5 * r4 (SS);
0x001BC6        D51A0013                 M[r8 + 19] = rMAC;
0x001BC7        D15A000D                 r3 = M[r8 + 13];
0x001BC8        D16A0010                 r4 = M[r8 + 16];
0x001BC9        2075004F                 r5 = r3 - r2;
0x001BCA        CC17006F                 rMAC = r5 * r4 (SS);
0x001BCB        D51A0014                 M[r8 + 20] = rMAC;
0x001BCC        01300000                 r1 = Null + 0;
0x001BCD        D16A0007                 r4 = M[r8 + 7];
0x001BCE        1863000F                 M[r4] = r1 + Null;
0x001BCF        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x001BD0        8966FFFF                 r4 = r4 XOR 0xffff;
0x001BD1        D5630003                 M[r1 + 3] = r4;
0x001BD2        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x001BD3        8520FFFF                 r0 = Null OR 0xffff;
0x001BD4        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x001BD5        F3D00000                 push rLink;
0x001BD6        E1F0F123                 call $block_interrupts;
0x001BD7        09201F81                 r0 = Null + M[$message.last_addr];
0x001BD8        D5230000                 M[r1 + 0] = r0;
0x001BD9        19301F81                 M[$message.last_addr] = r1 + Null;
0x001BDA        D5430001                 M[r1 + 1] = r2;
0x001BDB        D5530002                 M[r1 + 2] = r3;
0x001BDC        E1F0F10D                 call $interrupt.unblock;
0x001BDD        DDF0F163                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x001BDE        F3D00000                 push rLink;
0x001BDF        01301F24                 r1 = Null + 7972;
0x001BE0        FD000000 01408007        r2 = Null + 32775;
0x001BE2        01500A30                 r3 = Null + 2608;
0x001BE3        E1F0FFF0                 call $message.register_handler;
0x001BE4        FD0000FF 01304F1C        r1 = Null + -45284;
0x001BE6        85408008                 r2 = Null OR 0x8008;
0x001BE7        01500A30                 r3 = Null + 2608;
0x001BE8        E1F0FFEB                 call $message.register_handler;
0x001BE9        DDF0F157                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x001BEA        F3D00000                 push rLink;
0x001BEB        FD0000FF 01304F20        r1 = Null + -45280;
0x001BED        8540801C                 r2 = Null OR 0x801c;
0x001BEE        015007EE                 r3 = Null + 2030;
0x001BEF        E1F0FFE4                 call $message.register_handler;
0x001BF0        01301F2C                 r1 = Null + 7980;
0x001BF1        8540801D                 r2 = Null OR 0x801d;
0x001BF2        01500D44                 r3 = Null + 3396;
0x001BF3        E1F0FFE0                 call $message.register_handler;
0x001BF4        DDF0F14C                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x001BF5        01200015                 r0 = Null + 21;
0x001BF6        1920FE14                 M[0xfffe14] = r0 + Null;
0x001BF7        01200311                 r0 = Null + 785;
0x001BF8        1920FE15                 M[0xfffe15] = r0 + Null;
0x001BF9        E420002F                 r0 = Null + 1;
0x001BFA        1920FE11                 M[0xfffe11] = r0 + Null;
0x001BFB        1920FE12                 M[0xfffe12] = r0 + Null;
0x001BFC        1920FE13                 M[0xfffe13] = r0 + Null;
0x001BFD        1900FE4E                 M[0xfffe4e] = Null + Null;
0x001BFE        85EE0080                 rFlags = rFlags OR 0x80;
0x001BFF        DC0D000F                 rts;
0x001C00        DDF0E400                 jump $reset;
0x001C01        DDF0E401                 jump $interrupt.handler;

 <$audio_proc.peq.initialize>
0x001C02        D1A90003                 r8 = M[r7 + 3];
0x001C03        D12A0000                 r0 = M[r8 + 0];
0x001C04        812200FF                 r0 = r0 AND 0xff;
0x001C05        D5290006                 M[r7 + 6] = r0;
0x001C06        E432002F                 r1 = r0 + 1;
0x001C07        91C30001                 r10 = r1 ASHIFT 1;
0x001C08        D5C90007                 M[r7 + 7] = r10;
0x001C09        01390009                 r1 = r7 + 9;
0x001C0A        D5390004                 M[r7 + 4] = r1;
0x001C0B        99C20005                 r10 = r0 * 5 (int);
0x001C0C        D5C90008                 M[r7 + 8] = r10;
0x001C0D        012A0003                 r0 = r8 + 3;
0x001C0E        D5290005                 M[r7 + 5] = r0;
0x001C0F        DC0D000F                 rts;

 <$_stack_initialise>
0x001C10        FD0000FF 01B0338F        r9 = Null + -52337;
0x001C12        19B0FE67                 M[0xfffe67] = r9 + Null;
0x001C13        FD0000FF 01B032D0        r9 = Null + -52528;
0x001C15        19B0FE66                 M[0xfffe66] = r9 + Null;
0x001C16        19B0FE68                 M[0xfffe68] = r9 + Null;
0x001C17        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x001C18        E420002F                 r0 = Null + 1;
0x001C19        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x001C1A        DC0D000F                 rts;

 <$cbuffer.initialise>
0x001C1B        F3D00000                 push rLink;
0x001C1C        FD0000FF 01304F14        r1 = Null + -45292;
0x001C1E        85408001                 r2 = Null OR 0x8001;
0x001C1F        015005E3                 r3 = Null + 1507;
0x001C20        E1F0FFB3                 call $message.register_handler;
0x001C21        DDF0F11F                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x001C22        F3D00000                 push rLink;
0x001C23        FD0000FF 09204F95        r0 = Null + M[$M.spi_comm.last_addr];
0x001C25        D5230000                 M[r1 + 0] = r0;
0x001C26        FD0000FF 19304F95        M[$M.spi_comm.last_addr] = r1 + Null;
0x001C28        D5430001                 M[r1 + 1] = r2;
0x001C29        D5530002                 M[r1 + 2] = r3;
0x001C2A        DDF0F116                 jump $pop_rLink_and_rts;

 <$timer.1ms_delay>
0x001C2B        0930FE4D                 r1 = Null + M[0xfffe4d];
0x001C2C        0120003F                 r0 = Null + 63;
0x001C2D        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x001C2E        0920FE71                 r0 = Null + M[0xfffe71];
0x001C2F        012203E7                 r0 = r0 + 999;

 <$M.timer.1ms_delay.wait>
0x001C30        2902FE71                 Null = r0 - M[0xfffe71];
0x001C31        DD50FFFF                 if POS jump $M.timer.1ms_delay.wait;
0x001C32        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x001C33        DC0D000F                 rts;

 <$frame_sync.1ms_delay>
0x001C34        E430002F                 r1 = Null + 1;
0x001C35        19301F92                 M[$frame_sync.sync_flag] = r1 + Null;
0x001C36        0930FE4D                 r1 = Null + M[0xfffe4d];
0x001C37        0120003F                 r0 = Null + 63;
0x001C38        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.1ms_delay.frame_operator_sync_loop>
0x001C39        09001F92                 Null = Null + M[$frame_sync.sync_flag];
0x001C3A        DD10FFFF                 if NE jump $M.frame_sync.1ms_delay.frame_operator_sync_loop;
0x001C3B        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x001C3C        DC0D000F                 rts;

 <$error>
0x001C3D        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x001C3E        09B01F7F                 r9 = Null + M[$error.handler];
0x001C3F        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x001C40        E400001F                 break;
0x001C41        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x001C42        0920E000                 r0 = Null + M[0xffe000];
0x001C43        FD0000FF 19204F82        M[$message.last_seq_sent] = r0 + Null;
0x001C45        DC0D000F                 rts;

 <$spi_comm.initialize>
0x001C46        01205555                 r0 = Null + 21845;
0x001C47        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x001C48        DC0D000F                 rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.initialize>
0x003000        F3D00000                 push rLink;
0x003001        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x003002        81220007                 r0 = r0 AND 0x7;
0x003003        D03A000F                 r1 = M[r8 + Null];
0x003004        E423005F                 r0 = MIN r1;
0x003005        E422002F                 r0 = r0 + 1;
0x003006        03A20000                 r8 = r8 + r0;
0x003007        D3A00000                 r8 = M[r8 + Null];
0x003008        E1F00002                 call $user_eq.calcBankCoefs;
0x003009        DDF0DD37                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs>
0x00300A        F3D00000                 push rLink;
0x00300B        D029000F                 r0 = M[r7 + Null];
0x00300C        D1420003                 r2 = M[r0 + 3];
0x00300D        FD0000FF 012049D0        r0 = Null + -46640;
0x00300F        0130055E                 r1 = Null + 1374;
0x003010        2004002F                 Null = r2 - r0;
0x003011        00230000                 if EQ r0 = r1 + Null;
0x003012        F1000204                 pushm <r0, r7>;
0x003013        500000AF                 I0 = Null + r8;
0x003014        5010002F                 I1 = Null + r0;
0x003015        000A000F                 Null = r8 + Null;
0x003016        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x003017        01200000                 r0 = Null + 0;
0x003018        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003019        E420002F                 r0 = Null + 1;
0x00301A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301B        FD000040 01200000        r0 = Null + 4194304;
0x00301D        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00301E        DDF00016                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x00301F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003020        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003021        F3200000                 push r0;
0x003022        E1F000A6                 call $user_eq.calcPreGain.call_entry;
0x003023        4420001F                 r0 = Null + I1;
0x003024        01220019                 r0 = r0 + 25;
0x003025        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003026        F1010007                 pushm <I0, I1, I2>;
0x003027        E1F00070                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003028        F104001C                 popm <r0, r1, r2>;
0x003029        01220004                 r0 = r0 + 4;
0x00302A        5000002F                 I0 = Null + r0;
0x00302B        01330005                 r1 = r1 + 5;
0x00302C        5010003F                 I1 = Null + r1;
0x00302D        E444002F                 r2 = r2 + 1;
0x00302E        5020004F                 I2 = Null + r2;
0x00302F        F3240000                 pop r0;
0x003030        E422003F                 r0 = r0 - 1;
0x003031        F3200000                 push r0;
0x003032        DD10FFF4                 if NE jump $user_eq.calcBandLoop;
0x003033        F3240000                 pop r0;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x003034        F1040204                 popm <r0, r7>;
0x003035        F1000204                 pushm <r0, r7>;
0x003036        D3900000                 r7 = M[r7 + Null];
0x003037        D5290003                 M[r7 + 3] = r0;
0x003038        E1F0EBCA                 call $audio_proc.peq.initialize;
0x003039        F1040204                 popm <r0, r7>;
0x00303A        D1990001                 r7 = M[r7 + 1];
0x00303B        D5290003                 M[r7 + 3] = r0;
0x00303C        E1F0EBC6                 call $audio_proc.peq.initialize;
0x00303D        DDF0DD03                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x00303E        F3D00000                 push rLink;
0x00303F        0062000F                 r4 = r0 + Null;
0x003040        8122FFF0                 r0 = r0 AND 0xfff0;
0x003041        E1F00028                 call $user_eq.calcParamAddrOffset;
0x003042        01A20725                 r8 = r0 + 1829;
0x003043        D089000F                 r6 = M[r7 + Null];
0x003044        D1880003                 r6 = M[r6 + 3];
0x003045        FD0000FF 210849D0        Null = r6 - -46640;
0x003047        DD000005                 if EQ jump $user_eq.calcBandCoefsB;
0x003048        FD0000FF 014049D0        r2 = Null + -46640;
0x00304A        0150055E                 r3 = Null + 1374;
0x00304B        DDF00004                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x00304C        0140055E                 r2 = Null + 1374;
0x00304D        FD0000FF 015049D0        r3 = Null + -46640;

 <$user_eq.calcBandCoefsAorB>
0x00304F        5000005F                 I0 = Null + r3;
0x003050        5010004F                 I1 = Null + r2;
0x003051        01C00021                 r10 = Null + 33;
0x003052        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x003053        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003054        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x003055        500000AF                 I0 = Null + r8;
0x003056        0026000F                 r0 = r4 + Null;
0x003057        E1F00027                 call $user_eq.calcCoefAddrOffset;
0x003058        00A2004F                 r8 = r0 + r2;
0x003059        501000AF                 I1 = Null + r8;
0x00305A        00A3004F                 r8 = r1 + r2;
0x00305B        502000AF                 I2 = Null + r8;
0x00305C        F1000210                 pushm <r2, r7>;
0x00305D        0026000F                 r0 = r4 + Null;
0x00305E        E1F0002D                 call $user_eq.coefCalc;
0x00305F        F1040210                 popm <r2, r7>;
0x003060        F1000210                 pushm <r2, r7>;
0x003061        D3900000                 r7 = M[r7 + Null];
0x003062        D5490003                 M[r7 + 3] = r2;
0x003063        E1F0EB9F                 call $audio_proc.peq.initialize;
0x003064        F1040210                 popm <r2, r7>;
0x003065        D1990001                 r7 = M[r7 + 1];
0x003066        D5490003                 M[r7 + 3] = r2;
0x003067        E1F0EB9B                 call $audio_proc.peq.initialize;
0x003068        DDF0DCD8                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003069        F1000038                 pushm <r1, r2, r3>;
0x00306A        81320F00                 r1 = r0 AND 0xf00;
0x00306B        91330078                 r1 = r1 ASHIFT -8;
0x00306C        814200F0                 r2 = r0 AND 0xf0;
0x00306D        9144007C                 r2 = r2 ASHIFT -4;
0x00306E        8152000F                 r3 = r0 AND 0xf;
0x00306F        0025000F                 r0 = r3 + Null;
0x003070        21030000                 Null = r1 - 0;
0x003071        DD00000B                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003072        E433003F                 r1 = r1 - 1;
0x003073        99330016                 r1 = r1 * 22 (int);
0x003074        0023005F                 r0 = r1 + r3;
0x003075        E422002F                 r0 = r0 + 1;
0x003076        21040000                 Null = r2 - 0;
0x003077        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x003078        E444003F                 r2 = r2 - 1;
0x003079        99440004                 r2 = r2 * 4 (int);
0x00307A        03240000                 r0 = r0 + r2;
0x00307B        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x00307C        F1040038                 popm <r1, r2, r3>;
0x00307D        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x00307E        F1000030                 pushm <r2, r3>;
0x00307F        814200F0                 r2 = r0 AND 0xf0;
0x003080        9144007C                 r2 = r2 ASHIFT -4;
0x003081        8152000F                 r3 = r0 AND 0xf;
0x003082        0025000F                 r0 = r3 + Null;
0x003083        21040000                 Null = r2 - 0;
0x003084        DD000005                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x003085        E444003F                 r2 = r2 - 1;
0x003086        0134001C                 r1 = r2 + 28;
0x003087        99240005                 r0 = r2 * 5 (int);
0x003088        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x003089        F1040030                 popm <r2, r3>;
0x00308A        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x00308B        F3D00000                 push rLink;
0x00308C        814200F0                 r2 = r0 AND 0xf0;
0x00308D        9144007C                 r2 = r2 ASHIFT -4;
0x00308E        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x00308F        8122000F                 r0 = r0 AND 0xf;
0x003090        21020000                 Null = r0 - 0;
0x003091        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x003092        03004100                 Null = Null + Null, r2 = M[I0,1];
0x003093        E402003F                 Null = r0 - 1;
0x003094        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x003095        F3D40000                 pop rLink;
0x003096        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x003097        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x003098        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003099        21020000                 Null = r0 - 0;
0x00309A        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x00309B        01900DC9                 r7 = Null + 3529;
0x00309C        E402003F                 Null = r0 - 1;
0x00309D        DD000050                 if EQ jump $user_eq.calcXP1.jump_entry;
0x00309E        01900DFE                 r7 = Null + 3582;
0x00309F        21020002                 Null = r0 - 2;
0x0030A0        DD00004D                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A1        01900E32                 r7 = Null + 3634;
0x0030A2        21020003                 Null = r0 - 3;
0x0030A3        DD00004A                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030A4        01900F31                 r7 = Null + 3889;
0x0030A5        21020007                 Null = r0 - 7;
0x0030A6        DD00005E                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030A7        01900F82                 r7 = Null + 3970;
0x0030A8        21020008                 Null = r0 - 8;
0x0030A9        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030AA        01900FD2                 r7 = Null + 4050;
0x0030AB        21020009                 Null = r0 - 9;
0x0030AC        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030AD        01900ED2                 r7 = Null + 3794;
0x0030AE        21020004                 Null = r0 - 4;
0x0030AF        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B0        01900EF0                 r7 = Null + 3824;
0x0030B1        21020005                 Null = r0 - 5;
0x0030B2        DD000072                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B3        01900F10                 r7 = Null + 3856;
0x0030B4        21020006                 Null = r0 - 6;
0x0030B5        DD00006F                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030B6        019010B9                 r7 = Null + 4281;
0x0030B7        2102000A                 Null = r0 - 10;
0x0030B8        DD000091                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030B9        019010DA                 r7 = Null + 4314;
0x0030BA        2102000B                 Null = r0 - 11;
0x0030BB        DD00008E                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BC        019010FD                 r7 = Null + 4349;
0x0030BD        2102000C                 Null = r0 - 12;
0x0030BE        DD00008B                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030BF        2102000D                 Null = r0 - 13;
0x0030C0        DD0000B6                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030C1        F3D40000                 pop rLink;
0x0030C2        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030C3        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030C4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030C6        F3D40000                 pop rLink;
0x0030C7        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030C8        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030C9        0120003C                 r0 = Null + 60;
0x0030CA        E1F0E280                 call $kal_float_lib.int_to_float;
0x0030CB        0042000F                 r2 = r0 + Null;
0x0030CC        0053000F                 r3 = r1 + Null;
0x0030CD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030CE        8D220008                 r0 = r0 LSHIFT 8;
0x0030CF        91220078                 r0 = r0 ASHIFT -8;
0x0030D0        0130F790                 r1 = Null + -2160;
0x0030D1        E423006F                 r0 = MAX r1;
0x0030D2        013002D0                 r1 = Null + 720;
0x0030D3        E423005F                 r0 = MIN r1;
0x0030D4        E1F0E276                 call $kal_float_lib.int_to_float;
0x0030D5        E1F0E2CC                 call $kal_float_lib.div;
0x0030D6        E1F0DC90                 call $kal_filter_coef_lib.__db2lin;
0x0030D7        812200FF                 r0 = r0 AND 0xff;
0x0030D8        2122007F                 r0 = r0 - 127;
0x0030D9        8D33007F                 r1 = r1 LSHIFT -1;
0x0030DA        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030DB        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0030DC        F3D40000                 pop rLink;
0x0030DD        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x0030DE        F1030006                 SP = SP + 6;
0x0030DF        E1F0DCDD                 call $kal_filter_coef_lib.calc_bypass;
0x0030E0        DDF000C4                 jump $user_eq.pop_biquad_coefs_and_rts;
0x0030E1        FD000040 01200000        r0 = Null + 4194304;
0x0030E3        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E4        01200000                 r0 = Null + 0;
0x0030E5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E6        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E8        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030E9        E420002F                 r0 = Null + 1;
0x0030EA        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0030EB        F3D40000                 pop rLink;
0x0030EC        DC0D000F                 rts;

 <$user_eq.calcXP1.jump_entry>
0x0030ED        F1030006                 SP = SP + 6;
0x0030EE        01200003                 r0 = Null + 3;
0x0030EF        E1F0E25B                 call $kal_float_lib.int_to_float;
0x0030F0        0042000F                 r2 = r0 + Null;
0x0030F1        0053000F                 r3 = r1 + Null;
0x0030F2        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F3        E430002F                 r1 = Null + 1;
0x0030F4        E423006F                 r0 = MAX r1;
0x0030F5        FD000000 0130EA60        r1 = Null + 60000;
0x0030F7        E423005F                 r0 = MIN r1;
0x0030F8        E1F0E252                 call $kal_float_lib.int_to_float;
0x0030F9        E1F0E2A8                 call $kal_float_lib.div;
0x0030FA        F100000C                 pushm <r0, r1>;
0x0030FB        FD000000 0130BB80        r1 = Null + 48000;
0x0030FD        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x0030FF        00230000                 if EQ r0 = r1 + Null;
0x003100        E1F0E24A                 call $kal_float_lib.int_to_float;
0x003101        F100000C                 pushm <r0, r1>;
0x003102        E009000F                 call r7;
0x003103        DDF000A1                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003104        F1030006                 SP = SP + 6;
0x003105        01200003                 r0 = Null + 3;
0x003106        E1F0E244                 call $kal_float_lib.int_to_float;
0x003107        0042000F                 r2 = r0 + Null;
0x003108        0053000F                 r3 = r1 + Null;
0x003109        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00310A        01300078                 r1 = Null + 120;
0x00310B        E423006F                 r0 = MAX r1;
0x00310C        FD000000 0130EA60        r1 = Null + 60000;
0x00310E        E423005F                 r0 = MIN r1;
0x00310F        E1F0E23B                 call $kal_float_lib.int_to_float;
0x003110        E1F0E291                 call $kal_float_lib.div;
0x003111        F100000C                 pushm <r0, r1>;
0x003112        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003113        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003114        01300400                 r1 = Null + 1024;
0x003115        E423006F                 r0 = MAX r1;
0x003116        01302000                 r1 = Null + 8192;
0x003117        E423005F                 r0 = MIN r1;
0x003118        0130000C                 r1 = Null + 12;
0x003119        E1F0E216                 call $kal_float_lib.q_to_float;
0x00311A        F100000C                 pushm <r0, r1>;
0x00311B        FD000000 0130BB80        r1 = Null + 48000;
0x00311D        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x00311F        00230000                 if EQ r0 = r1 + Null;
0x003120        E1F0E22A                 call $kal_float_lib.int_to_float;
0x003121        F100000C                 pushm <r0, r1>;
0x003122        E009000F                 call r7;
0x003123        DDF00081                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x003124        F1030006                 SP = SP + 6;
0x003125        01200003                 r0 = Null + 3;
0x003126        E1F0E224                 call $kal_float_lib.int_to_float;
0x003127        0042000F                 r2 = r0 + Null;
0x003128        0053000F                 r3 = r1 + Null;
0x003129        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00312A        0130003C                 r1 = Null + 60;
0x00312B        E423006F                 r0 = MAX r1;
0x00312C        FD000000 0130EA60        r1 = Null + 60000;
0x00312E        E423005F                 r0 = MIN r1;
0x00312F        E1F0E21B                 call $kal_float_lib.int_to_float;
0x003130        E1F0E271                 call $kal_float_lib.div;
0x003131        F100000C                 pushm <r0, r1>;
0x003132        0120003C                 r0 = Null + 60;
0x003133        E1F0E217                 call $kal_float_lib.int_to_float;
0x003134        0042000F                 r2 = r0 + Null;
0x003135        0053000F                 r3 = r1 + Null;
0x003136        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003137        8D220008                 r0 = r0 LSHIFT 8;
0x003138        91220078                 r0 = r0 ASHIFT -8;
0x003139        0130FD30                 r1 = Null + -720;
0x00313A        E423006F                 r0 = MAX r1;
0x00313B        013002D0                 r1 = Null + 720;
0x00313C        E423005F                 r0 = MIN r1;
0x00313D        E1F0E20D                 call $kal_float_lib.int_to_float;
0x00313E        E1F0E263                 call $kal_float_lib.div;
0x00313F        F100000C                 pushm <r0, r1>;
0x003140        FD000000 0130BB80        r1 = Null + 48000;
0x003142        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x003144        00230000                 if EQ r0 = r1 + Null;
0x003145        E1F0E205                 call $kal_float_lib.int_to_float;
0x003146        F100000C                 pushm <r0, r1>;
0x003147        E009000F                 call r7;
0x003148        DDF0005C                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003149        F1030006                 SP = SP + 6;
0x00314A        01200003                 r0 = Null + 3;
0x00314B        E1F0E1FF                 call $kal_float_lib.int_to_float;
0x00314C        0042000F                 r2 = r0 + Null;
0x00314D        0053000F                 r3 = r1 + Null;
0x00314E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314F        01300078                 r1 = Null + 120;
0x003150        E423006F                 r0 = MAX r1;
0x003151        FD000000 0130EA60        r1 = Null + 60000;
0x003153        E423005F                 r0 = MIN r1;
0x003154        E1F0E1F6                 call $kal_float_lib.int_to_float;
0x003155        E1F0E24C                 call $kal_float_lib.div;
0x003156        F100000C                 pushm <r0, r1>;
0x003157        0120003C                 r0 = Null + 60;
0x003158        E1F0E1F2                 call $kal_float_lib.int_to_float;
0x003159        0042000F                 r2 = r0 + Null;
0x00315A        0053000F                 r3 = r1 + Null;
0x00315B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00315C        8D220008                 r0 = r0 LSHIFT 8;
0x00315D        91220078                 r0 = r0 ASHIFT -8;
0x00315E        0130FD30                 r1 = Null + -720;
0x00315F        E423006F                 r0 = MAX r1;
0x003160        013002D0                 r1 = Null + 720;
0x003161        E423005F                 r0 = MIN r1;
0x003162        E1F0E1E8                 call $kal_float_lib.int_to_float;
0x003163        E1F0E23E                 call $kal_float_lib.div;
0x003164        F100000C                 pushm <r0, r1>;
0x003165        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003166        01300400                 r1 = Null + 1024;
0x003167        E423006F                 r0 = MAX r1;
0x003168        01302000                 r1 = Null + 8192;
0x003169        E423005F                 r0 = MIN r1;
0x00316A        0130000C                 r1 = Null + 12;
0x00316B        E1F0E1C4                 call $kal_float_lib.q_to_float;
0x00316C        F100000C                 pushm <r0, r1>;
0x00316D        FD000000 0130BB80        r1 = Null + 48000;
0x00316F        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x003171        00230000                 if EQ r0 = r1 + Null;
0x003172        E1F0E1D8                 call $kal_float_lib.int_to_float;
0x003173        F100000C                 pushm <r0, r1>;
0x003174        E009000F                 call r7;
0x003175        DDF0002F                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x003176        F1030006                 SP = SP + 6;
0x003177        01200003                 r0 = Null + 3;
0x003178        E1F0E1D2                 call $kal_float_lib.int_to_float;
0x003179        0042000F                 r2 = r0 + Null;
0x00317A        0053000F                 r3 = r1 + Null;
0x00317B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00317C        0130003C                 r1 = Null + 60;
0x00317D        E423006F                 r0 = MAX r1;
0x00317E        FD000000 0130EA60        r1 = Null + 60000;
0x003180        E423005F                 r0 = MIN r1;
0x003181        E1F0E1C9                 call $kal_float_lib.int_to_float;
0x003182        E1F0E21F                 call $kal_float_lib.div;
0x003183        F100000C                 pushm <r0, r1>;
0x003184        0120003C                 r0 = Null + 60;
0x003185        E1F0E1C5                 call $kal_float_lib.int_to_float;
0x003186        0042000F                 r2 = r0 + Null;
0x003187        0053000F                 r3 = r1 + Null;
0x003188        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003189        8D220008                 r0 = r0 LSHIFT 8;
0x00318A        91220078                 r0 = r0 ASHIFT -8;
0x00318B        0130F790                 r1 = Null + -2160;
0x00318C        E423006F                 r0 = MAX r1;
0x00318D        013002D0                 r1 = Null + 720;
0x00318E        E423005F                 r0 = MIN r1;
0x00318F        E1F0E1BB                 call $kal_float_lib.int_to_float;
0x003190        E1F0E211                 call $kal_float_lib.div;
0x003191        F100000C                 pushm <r0, r1>;
0x003192        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003193        01300400                 r1 = Null + 1024;
0x003194        E423006F                 r0 = MAX r1;
0x003195        FD000000 01308000        r1 = Null + 32768;
0x003197        E423005F                 r0 = MIN r1;
0x003198        0130000C                 r1 = Null + 12;
0x003199        E1F0E196                 call $kal_float_lib.q_to_float;
0x00319A        F100000C                 pushm <r0, r1>;
0x00319B        FD000000 0130BB80        r1 = Null + 48000;
0x00319D        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x00319F        00230000                 if EQ r0 = r1 + Null;
0x0031A0        E1F0E1AA                 call $kal_float_lib.int_to_float;
0x0031A1        F100000C                 pushm <r0, r1>;
0x0031A2        E1F0DF7F                 call $kal_filter_coef_lib.calc_peq;
0x0031A3        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031A4        F3240000                 pop r0;
0x0031A5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A6        F3240000                 pop r0;
0x0031A7        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031A8        F3240000                 pop r0;
0x0031A9        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AA        F3240000                 pop r0;
0x0031AB        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AC        F3240000                 pop r0;
0x0031AD        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031AE        F3240000                 pop r0;
0x0031AF        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x0031B0        F3D40000                 pop rLink;
0x0031B1        DC0D000F                 rts;

 <$main>
0x0031B2        E1F0EA5E                 call $_stack_initialise;
0x0031B3        E1F0EA42                 call $interrupt.initialise;
0x0031B4        E1F0EA8E                 call $message.initialise;
0x0031B5        E1F0EA66                 call $cbuffer.initialise;
0x0031B6        E1F0EA28                 call $pskey.initialise;
0x0031B7        E1F0EA33                 call $wall_clock.initialise;
0x0031B8        E1F0CE85                 call $flash.init_dmconst;
0x0031B9        FD0000FF 01304EF0        r1 = Null + -45328;
0x0031BB        01401070                 r2 = Null + 4208;
0x0031BC        015034A7                 r3 = Null + 13479;
0x0031BD        E1F0EA16                 call $message.register_handler;
0x0031BE        01301EFC                 r1 = Null + 7932;
0x0031BF        01401071                 r2 = Null + 4209;
0x0031C0        015034C7                 r3 = Null + 13511;
0x0031C1        E1F0EA12                 call $message.register_handler;
0x0031C2        FD0000FF 01304EF4        r1 = Null + -45324;
0x0031C4        01401072                 r2 = Null + 4210;
0x0031C5        0150081D                 r3 = Null + 2077;
0x0031C6        E1F0EA0D                 call $message.register_handler;
0x0031C7        E1F0EA7F                 call $spi_comm.initialize;
0x0031C8        E1F00308                 call $music_example.power_up_reset;
0x0031C9        01401000                 r2 = Null + 4096;
0x0031CA        FD000000 0150E008        r3 = Null + 57352;
0x0031CC        09601F77                 r4 = Null + M[$music_example.Version];
0x0031CD        8D660078                 r4 = r4 LSHIFT -8;
0x0031CE        E1F0D8F6                 call $message.send_short;
0x0031CF        01200047                 r0 = Null + 71;
0x0031D0        FD0000FF 01304EBB        r1 = Null + -45381;
0x0031D2        D5230003                 M[r1 + 3] = r0;
0x0031D3        E1F0E9D8                 call $message.send_ready_wait_for_go;
0x0031D4        E1F0E4BC                 call $conn_init;
0x0031D5        E1F00308                 call $config_resampler;
0x0031D6        E1F000D2                 call $config_rate_matching;
0x0031D7        E470002F                 r5 = Null + 1;
0x0031D8        FD000080 0120000E        r0 = Null + -8388594;
0x0031DA        E1F0DB2D                 call $cbuffer.is_it_enabled;
0x0031DB        00700000                 if EQ r5 = Null + Null;
0x0031DC        FD0000FF 19704F6C        M[$voice_enabled] = r5 + Null;
0x0031DE        DD00000F                 if EQ jump $M.main.no_voice_channel;
0x0031DF        FD000080 01200000        r0 = Null + -8388608;
0x0031E1        E1F0DB26                 call $cbuffer.is_it_enabled;
0x0031E2        DD100002                 if NE jump $M.main.left_in_port_connected;
0x0031E3        190001F8                 M[$sbc.win_coefs_m4] = Null + Null;

 <$M.main.left_in_port_connected>
0x0031E4        FD000080 01200000        r0 = Null + -8388608;
0x0031E6        E1F0DAFB                 call $cbuffer.calc_amount_data;
0x0031E7        21020010                 Null = r0 - 16;
0x0031E8        DD50FFFC                 if POS jump $M.main.left_in_port_connected;
0x0031E9        01301F04                 r1 = Null + 7940;
0x0031EA        014001F4                 r2 = Null + 500;
0x0031EB        01500C44                 r3 = Null + 3140;
0x0031EC        E1F0DB4A                 call $timer.schedule_event_in;

 <$M.main.no_voice_channel>
0x0031ED        019000C8                 r7 = Null + 200;

 <$M.main.loop_discard_all_codec_data>
0x0031EE        E1F0EA3D                 call $timer.1ms_delay;
0x0031EF        FD000080 01200002        r0 = Null + -8388606;
0x0031F1        E1F0DAF0                 call $cbuffer.calc_amount_data;
0x0031F2        00C2000F                 r10 = r0 + Null;
0x0031F3        FD000080 01200002        r0 = Null + -8388606;
0x0031F5        E1F0DB18                 call $cbuffer.get_read_address_and_size;
0x0031F6        5000002F                 I0 = Null + r0;
0x0031F7        50C0003F                 L0 = Null + r1;
0x0031F8        E5F00003                 do $M.main.lp_read_port_data;
0x0031F9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031FA        03000000                 Null = Null + Null;

 <$M.main.lp_read_port_data>
0x0031FB        51C00000                 L0 = Null + 0;
0x0031FC        FD000080 01200002        r0 = Null + -8388606;
0x0031FE        4430000F                 r1 = Null + I0;
0x0031FF        E1F0DB23                 call $cbuffer.set_read_address;
0x003200        E499003F                 r7 = r7 - 1;
0x003201        DDC0FFED                 if GT jump $M.main.loop_discard_all_codec_data;

 <$M.main.wait_for_some_codec_data>
0x003202        E1F0EA29                 call $timer.1ms_delay;
0x003203        FD000080 01200002        r0 = Null + -8388606;
0x003205        E1F0DADC                 call $cbuffer.calc_amount_data;
0x003206        21C200D8                 r10 = r0 - 216;
0x003207        DD40FFFB                 if NEG jump $M.main.wait_for_some_codec_data;
0x003208        01301F00                 r1 = Null + 7936;
0x003209        09401F6E                 r2 = Null + M[$tmr_period_con_copy];
0x00320A        01500566                 r3 = Null + 1382;
0x00320B        E1F0DB2B                 call $timer.schedule_event_in;
0x00320C        FD0000FF 01304EFC        r1 = Null + -45316;
0x00320E        FD0000FF 09404F6E        r2 = Null + M[$tmr_period_tone_copy];
0x003210        01500BCE                 r3 = Null + 3022;
0x003211        E1F0DB25                 call $timer.schedule_event_in;
0x003212        01301F08                 r1 = Null + 7944;
0x003213        FD00000F 01404240        r2 = Null + 1000000;
0x003215        01501B48                 r3 = Null + 6984;
0x003216        E1F0DB20                 call $timer.schedule_event_in;

 <$M.main.wait_for_dac_buffer_wraparound>
0x003217        FD000080 0120000C        r0 = Null + -8388596;
0x003219        E1F0DAB8                 call $cbuffer.calc_amount_space;
0x00321A        21020010                 Null = r0 - 16;
0x00321B        DD50FFFC                 if POS jump $M.main.wait_for_dac_buffer_wraparound;
0x00321C        FD0000FF 01304EF8        r1 = Null + -45320;
0x00321E        014001F4                 r2 = Null + 500;
0x00321F        01500A18                 r3 = Null + 2584;
0x003220        E1F0DB16                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x003221        E1F0E96A                 call $spi_comm.polled_service_routine;
0x003222        FD0000FF 09204F66        r0 = Null + M[$app_config.io];
0x003224        21020004                 Null = r0 - 4;
0x003225        DD10EA18                 if NE jump $error;
0x003226        FD0000FF 01A04E5F        r8 = Null + -45473;
0x003228        E1F0D50A                 call $M.mips_profile.mainstart;
0x003229        017001E1                 r5 = Null + 481;
0x00322A        E1F0E405                 call $codec.av_decode;
0x00322B        E1F002AA                 call $M.music_example.extract_faststream_info.func;
0x00322C        E1F0D0EA                 call $sra_calcrate;
0x00322D        FD0000FF 01A04E5F        r8 = Null + -45473;
0x00322F        E1F0D510                 call $M.mips_profile.mainend;
0x003230        D12A0006                 r0 = M[r8 + 6];
0x003231        19201BC2                 M[$music_example.PeakMipsDecoder] = r0 + Null;
0x003232        017001E1                 r5 = Null + 481;
0x003233        D1270006                 r0 = M[r5 + 6];
0x003234        21020000                 Null = r0 - 0;
0x003235        E110E9FF                 if NE call $frame_sync.1ms_delay;
0x003236        015000A0                 r3 = Null + 160;
0x003237        01201F3A                 r0 = Null + 7994;
0x003238        E1F0DAA9                 call $cbuffer.calc_amount_data;
0x003239        2002005F                 Null = r0 - r3;
0x00323A        DD40FFE7                 if NEG jump $M.main.frame_loop;
0x00323B        FD0000FF 01204F38        r0 = Null + -45256;
0x00323D        E1F0DAA4                 call $cbuffer.calc_amount_data;
0x00323E        2002005F                 Null = r0 - r3;
0x00323F        DD40FFE2                 if NEG jump $M.main.frame_loop;
0x003240        01201F3D                 r0 = Null + 7997;
0x003241        E1F0DA90                 call $cbuffer.calc_amount_space;
0x003242        2002005F                 Null = r0 - r3;
0x003243        DD40FFDE                 if NEG jump $M.main.frame_loop;
0x003244        FD0000FF 01204F3B        r0 = Null + -45253;
0x003246        E1F0DA8B                 call $cbuffer.calc_amount_space;
0x003247        2002005F                 Null = r0 - r3;
0x003248        DD40FFD9                 if NEG jump $M.main.frame_loop;
0x003249        E1500018                 if POS call $music_example_process;
0x00324A        09001F6F                 Null = Null + M[$codec_reset_needed];
0x00324B        DD000006                 if EQ jump $M.main.no_codec_reset;
0x00324C        017001F5                 r5 = Null + 501;
0x00324D        D1270001                 r0 = M[r5 + 1];
0x00324E        01770002                 r5 = r5 + 2;
0x00324F        E002000F                 call r0;
0x003250        19001F6F                 M[$codec_reset_needed] = Null + Null;

 <$M.main.no_codec_reset>
0x003251        FD0000FF 09004F6C        Null = Null + M[$voice_enabled];
0x003253        DD00000D                 if EQ jump $M.main.no_encoder_run;
0x003254        01A01B92                 r8 = Null + 7058;
0x003255        E1F0D4DD                 call $M.mips_profile.mainstart;
0x003256        017001F5                 r5 = Null + 501;
0x003257        E1F0E60F                 call $codec.av_encode;
0x003258        01A01B92                 r8 = Null + 7058;
0x003259        E1F0D4E6                 call $M.mips_profile.mainend;
0x00325A        D12A0006                 r0 = M[r8 + 6];
0x00325B        19201BC6                 M[$music_example.PeakMipsEncoder] = r0 + Null;
0x00325C        017001F5                 r5 = Null + 501;
0x00325D        D1270005                 r0 = M[r5 + 5];
0x00325E        21020000                 Null = r0 - 0;
0x00325F        DD00FFC2                 if EQ jump $M.main.frame_loop;

 <$M.main.no_encoder_run>
0x003260        DDF0FFC1                 jump $M.main.frame_loop;

 <$music_example_process>
0x003261        F3D00000                 push rLink;
0x003262        1900FE93                 M[0xfffe93] = Null + Null;
0x003263        FD0000FF 01A04E69        r8 = Null + -45463;
0x003265        E1F0D4CD                 call $M.mips_profile.mainstart;
0x003266        09001F78                 Null = Null + M[$music_example.reinit];
0x003267        E11001DB                 if NE call $music_example_reinitialize;
0x003268        FD0000FF 09304F77        r1 = Null + M[$music_example.sys_mode];
0x00326A        FD0000FF 09204EDA        r0 = Null + M[$music_example.SpiSysControl];
0x00326C        FD0000FF 09604EDD        r4 = Null + M[$music_example.OvrMode];
0x00326E        81022000                 Null = r0 AND 0x2000;
0x00326F        00360001                 if NE r1 = r4 + Null;
0x003270        8D530001                 r3 = r1 LSHIFT 1;
0x003271        FD0000FF D1454E15        r2 = M[r3 + -45547];
0x003273        FD000080 0120000D        r0 = Null + -8388595;
0x003275        E1F0DA92                 call $cbuffer.is_it_enabled;
0x003276        00340000                 if EQ r1 = r2 + Null;
0x003277        E440002F                 r2 = Null + 1;
0x003278        01600004                 r4 = Null + 4;
0x003279        8D530001                 r3 = r1 LSHIFT 1;
0x00327A        FD0000FF D1054E16        Null = M[r3 + -45546];
0x00327C        00460000                 if EQ r2 = r4 + Null;
0x00327D        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x00327F        FD0000FF 09604F76        r4 = Null + M[$M.system_config.data.dithertype];
0x003281        FD000000 2102AC44        Null = r0 - 44100;
0x003283        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x003284        FD000000 2102BB80        Null = r0 - 48000;
0x003286        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x003287        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x003288        19301BC0                 M[$music_example.CurMode] = r1 + Null;
0x003289        01400000                 r2 = Null + 0;
0x00328A        E403003F                 Null = r1 - 1;
0x00328B        00640000                 if EQ r4 = r2 + Null;
0x00328C        21030004                 Null = r1 - 4;
0x00328D        00640000                 if EQ r4 = r2 + Null;
0x00328E        09201F67                 r0 = Null + M[$current_dac_sampling_rate];
0x00328F        FD000000 2102AC44        Null = r0 - 44100;
0x003291        00640004                 if NEG r4 = r2 + Null;
0x003292        FD0000FF 19603FFD        M[0xff3ffd] = r4 + Null;
0x003294        FD0000FF 19604E8B        M[0xff4e8b] = r4 + Null;
0x003296        19601BBD                 M[0x1bbd] = r4 + Null;
0x003297        8D530001                 r3 = r1 LSHIFT 1;
0x003298        FD0000FF D1254E16        r0 = M[r3 + -45546];
0x00329A        FD0000FF 19204F78        M[$music_example.stereo_processing] = r0 + Null;
0x00329C        FD0000FF D1634E7D        r4 = M[r1 + -45443];
0x00329E        E1F0DA29                 call $frame_sync.run_function_table;
0x00329F        FD0000FF 01A04E69        r8 = Null + -45463;
0x0032A1        E1F0D49E                 call $M.mips_profile.mainend;
0x0032A2        D12A0006                 r0 = M[r8 + 6];
0x0032A3        19201BC1                 M[$music_example.PeakMipsFunc] = r0 + Null;
0x0032A4        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x0032A6        19201BC3                 M[$music_example.SamplingRate] = r0 + Null;
0x0032A7        DDF0DA99                 jump $pop_rLink_and_rts;

 <$config_rate_matching>
0x0032A8        F3D00000                 push rLink;
0x0032A9        FD0000FF 09304F67        r1 = Null + M[$current_codec_sampling_rate];
0x0032AB        99330001                 r1 = r1 * 1 (int);
0x0032AC        FD0000FF 19304D02        M[0xff4d02] = r1 + Null;
0x0032AE        09401F6B                 r2 = Null + M[$max_clock_mismatch];
0x0032AF        8D240079                 r0 = r2 LSHIFT -7;
0x0032B0        81220001                 r0 = r0 AND 0x1;
0x0032B1        FD0000FF 19204F6F        M[$rate_match_disable] = r0 + Null;
0x0032B3        09601F6A                 r4 = Null + M[$local_play_back];
0x0032B4        DD10E989                 if NE jump $error;
0x0032B5        FD0000FF 09004F6F        Null = Null + M[$rate_match_disable];
0x0032B7        DD100034                 if NE jump $M.config_rate_matching.end;
0x0032B8        8144007F                 r2 = r2 AND 0x7f;
0x0032B9        21340003                 r1 = r2 - 3;
0x0032BA        20440034                 if NEG r2 = r2 - r1;
0x0032BB        994420C5                 r2 = r2 * 8389 (int);
0x0032BC        95342000                 r1 = r2 * 0.25 (frac);
0x0032BD        03430000                 r2 = r2 + r1;
0x0032BE        FD000003 2134D70A        r1 = r2 - 251658;
0x0032C0        20440035                 if POS r2 = r2 - r1;
0x0032C1        FD0000FF 19404D01        M[0xff4d01] = r2 + Null;
0x0032C3        FD000040 01400000        r2 = Null + 4194304;
0x0032C5        FD0000FF 19404D17        M[0xff4d17] = r2 + Null;
0x0032C7        FD0000FF 09504F6B        r3 = Null + M[$long_term_mismatch];
0x0032C9        81250001                 r0 = r3 AND 0x1;
0x0032CA        DD000021                 if EQ jump $M.config_rate_matching.end;
0x0032CB        9155007F                 r3 = r3 ASHIFT -1;
0x0032CC        91550006                 r3 = r3 ASHIFT 6;
0x0032CD        FD0000FF 29054D01        Null = r3 - M[0xff4d01];
0x0032CF        DD50001C                 if POS jump $M.config_rate_matching.end;
0x0032D0        FD0000FF 09054D01        Null = r3 + M[0xff4d01];
0x0032D2        DD400019                 if NEG jump $M.config_rate_matching.end;
0x0032D3        FD0000FF 19504D16        M[0xff4d16] = r3 + Null;
0x0032D5        FD0000FF 19504D0F        M[0xff4d0f] = r3 + Null;
0x0032D7        FD0000FF 09204D02        r0 = Null + M[0xff4d02];
0x0032D9        97250000                 r0 = r0 * r3 (frac);
0x0032DA        FD0000FF 19204D1A        M[0xff4d1a] = r0 + Null;
0x0032DC        FD0000FF 19204D1B        M[0xff4d1b] = r0 + Null;
0x0032DE        01200002                 r0 = Null + 2;
0x0032DF        FD0000FF 19204D11        M[0xff4d11] = r0 + Null;
0x0032E1        E420002F                 r0 = Null + 1;
0x0032E2        FD0000FF 19204D18        M[0xff4d18] = r0 + Null;
0x0032E4        FD0000FF 19504F71        M[$current_hw_rate] = r3 + Null;
0x0032E6        9565FE00                 r4 = r3 * -0.015625 (frac);
0x0032E7        FD000000 01408004        r2 = Null + 32772;
0x0032E9        01500003                 r3 = Null + 3;
0x0032EA        E1F0D7DA                 call $message.send_short;

 <$M.config_rate_matching.end>
0x0032EB        DDF0DA55                 jump $pop_rLink_and_rts;

 <$M.music_example.PsKeyReadHandler.func>
0x0032EC        F3D00000                 push rLink;
0x0032ED        E404002F                 Null = r2 + 1;
0x0032EE        DD10000A                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x0032EF        0920057F                 r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x0032F0        DD000005                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x0032F1        1900057F                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x0032F2        FD0000FF 094049FF        r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x0032F4        DDF00141                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x0032F5        E420002F                 r0 = Null + 1;
0x0032F6        1920057F                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x0032F7        DDF00143                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x0032F8        51050001                 I0 = r3 + 1;
0x0032F9        E4C4003F                 r10 = r2 - 1;
0x0032FA        5820000F                 I2 = I0 + Null;
0x0032FB        FD000000 0150FFFF        r3 = Null + 65535;
0x0032FD        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x0032FE        03002800                 Null = Null + Null, r0 = M[I2,0];
0x0032FF        83250000                 r0 = r0 AND r3;
0x003300        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x003301        01C00100                 r10 = Null + 256;
0x003302        79220001                 I2 = I2 - 1;
0x003303        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003304        2003002F                 Null = r1 - r0;
0x003305        DD100135                 if NE jump $M.music_example.LoadParams.done;
0x003306        03007100                 Null = Null + Null, r5 = M[I0,1];
0x003307        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003308        816200FF                 r4 = r0 AND 0xff;
0x003309        006C0000                 if EQ r4 = r10 + Null;
0x00330A        8D220078                 r0 = r0 LSHIFT -8;
0x00330B        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x00330C        8DAA007F                 r8 = r8 LSHIFT -1;
0x00330D        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x00330E        6C02000F                 Null = I2 - I0;
0x00330F        DD400017                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x003310        03005100                 Null = Null + Null, r3 = M[I0,1];
0x003311        FD000000 01A08000        r8 = Null + 32768;
0x003313        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x003314        800500AF                 Null = r3 AND r8;
0x003315        DD00000E                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x003316        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x003318        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x003319        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00331A        8D840078                 r6 = r2 LSHIFT -8;
0x00331B        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x00331C        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x00331D        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00331E        8D880010                 r6 = r6 LSHIFT 16;
0x00331F        87380000                 r1 = r1 OR r6;
0x003320        FD0000FF 098248FF        r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x003322        D53806D0                 M[r6 + 1744] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x003323        E422002F                 r0 = r0 + 1;
0x003324        2002006F                 Null = r0 - r4;
0x003325        DD40FFE7                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x003326        FD0000FF 094048FF        r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x003328        200600CF                 Null = r4 - r10;
0x003329        004400C0                 if EQ r2 = r2 + r10;
0x00332A        FD0000FF 194048FF        M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x00332C        0047000F                 r2 = r5 + Null;
0x00332D        DDF00108                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example_message.Volume.vmdB2vol>
0x00332E        FD000035 0130F5E3        r1 = Null + 3536355;
0x003330        991200B5                 rMAC = r0 * 181 (int);
0x003331        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x003332        FD000004 21210000        r0 = rMAC - 262144;
0x003334        00200005                 if POS r0 = Null + Null;
0x003335        DDF0D8CD                 jump $math.pow2_taylor;

 <$M.music_example_message.Volume.update_volumes>
0x003336        F3D00000                 push rLink;
0x003337        8133000F                 r1 = r1 AND 0xf;
0x003338        19301F79                 M[$music_example.SystemVolume] = r1 + Null;
0x003339        0004000F                 Null = r2 + Null;
0x00333A        00400005                 if POS r2 = Null + Null;
0x00333B        FD0000FF 19404F79        M[$music_example.MasterVolume] = r2 + Null;
0x00333D        0005000F                 Null = r3 + Null;
0x00333E        00500005                 if POS r3 = Null + Null;
0x00333F        19501F7A                 M[$music_example.ToneVolume] = r3 + Null;
0x003340        212602D2                 r0 = r4 - 722;
0x003341        20660025                 if POS r4 = r4 - r0;
0x003342        2126FD2E                 r0 = r4 - -722;
0x003343        20660024                 if NEG r4 = r4 - r0;
0x003344        FD0000FF 19604F7A        M[$music_example.LeftTrimVolume] = r4 + Null;
0x003346        212702D2                 r0 = r5 - 722;
0x003347        20770025                 if POS r5 = r5 - r0;
0x003348        2126FD2E                 r0 = r4 - -722;
0x003349        20770024                 if NEG r5 = r5 - r0;
0x00334A        19701F7B                 M[$music_example.RightTrimVolume] = r5 + Null;
0x00334B        0024000F                 r0 = r2 + Null;
0x00334C        E1F0FFE2                 call $M.music_example_message.Volume.vmdB2vol;
0x00334D        91220002                 r0 = r0 ASHIFT 2;
0x00334E        19201B1B                 M[0x1b1b] = r0 + Null;
0x00334F        19201B60                 M[0x1b60] = r0 + Null;
0x003350        09201F7A                 r0 = Null + M[$music_example.ToneVolume];
0x003351        E1F0FFDD                 call $M.music_example_message.Volume.vmdB2vol;
0x003352        91520003                 r3 = r0 ASHIFT 3;
0x003353        19501AF8                 M[0x1af8] = r3 + Null;
0x003354        19501B0C                 M[0x1b0c] = r3 + Null;
0x003355        FD0000FF 09204F7A        r0 = Null + M[$music_example.LeftTrimVolume];
0x003357        E1F0FFD7                 call $M.music_example_message.Volume.vmdB2vol;
0x003358        19201B23                 M[0x1b23] = r0 + Null;
0x003359        09201F7B                 r0 = Null + M[$music_example.RightTrimVolume];
0x00335A        E1F0FFD4                 call $M.music_example_message.Volume.vmdB2vol;
0x00335B        19201B28                 M[0x1b28] = r0 + Null;
0x00335C        09601F79                 r4 = Null + M[$music_example.SystemVolume];
0x00335D        0056000F                 r3 = r4 + Null;
0x00335E        01401006                 r2 = Null + 4102;
0x00335F        E1F0D765                 call $message.send_short;
0x003360        DDF0D9E0                 jump $pop_rLink_and_rts;

 <$M.music_example_message.Volume.func>
0x003361        F3D00000                 push rLink;
0x003362        D1350000                 r1 = M[r3 + 0];
0x003363        D1450001                 r2 = M[r3 + 1];
0x003364        D1650003                 r4 = M[r3 + 3];
0x003365        D1750004                 r5 = M[r3 + 4];
0x003366        D1550002                 r3 = M[r3 + 2];
0x003367        E1F0FFCF                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example_message.Volume.volume_msg_done>
0x003368        DDF0D9D8                 jump $pop_rLink_and_rts;

 <$config_dac_resampler>
0x003369        F3D00000                 push rLink;
0x00336A        FD0000FF 01304E52        r1 = Null + -45486;

 <$M.config_dac_resampler.lookup_loop>
0x00336C        D023000F                 r0 = M[r1 + Null];
0x00336D        DD000009                 if EQ jump $M.config_dac_resampler.rates_not_supported;
0x00336E        FD0000FF 29024F67        Null = r0 - M[$current_codec_sampling_rate];
0x003370        DD100004                 if NE jump $M.config_dac_resampler.skip;
0x003371        D1230001                 r0 = M[r1 + 1];
0x003372        29021F67                 Null = r0 - M[$current_dac_sampling_rate];
0x003373        DD000017                 if EQ jump $M.config_dac_resampler.done;

 <$M.config_dac_resampler.skip>
0x003374        01330003                 r1 = r1 + 3;
0x003375        DDF0FFF7                 jump $M.config_dac_resampler.lookup_loop;

 <$M.config_dac_resampler.rates_not_supported>
0x003376        FD0000FF 09504F67        r3 = Null + M[$current_codec_sampling_rate];
0x003378        09601F67                 r4 = Null + M[$current_dac_sampling_rate];
0x003379        0120000A                 r0 = Null + 10;
0x00337A        0015000F                 rMAC = r3 + Null;
0x00337B        D9020000                 Div = rMAC / r0;
0x00337C        D9500001                 r3 = DivResult;
0x00337D        0016000F                 rMAC = r4 + Null;
0x00337E        D9020000                 Div = rMAC / r0;
0x00337F        D9600001                 r4 = DivResult;
0x003380        01401090                 r2 = Null + 4240;
0x003381        E1F0D743                 call $message.send_short;
0x003382        E1F0E8BB                 call $error;
0x003383        FD0000FF 01304E52        r1 = Null + -45486;
0x003385        D023000F                 r0 = M[r1 + Null];
0x003386        FD0000FF 19204F67        M[$current_codec_sampling_rate] = r0 + Null;
0x003388        D1230001                 r0 = M[r1 + 1];
0x003389        19201F67                 M[$current_dac_sampling_rate] = r0 + Null;

 <$M.config_dac_resampler.done>
0x00338A        E1F0D96F                 call $block_interrupts;
0x00338B        E440002F                 r2 = Null + 1;
0x00338C        FD0000FF 19004C7D        M[0xff4c7d] = Null + Null;
0x00338E        FD0000FF 19004C31        M[0xff4c31] = Null + Null;
0x003390        19000FC3                 M[0xfc3] = Null + Null;
0x003391        D1230002                 r0 = M[r1 + 2];
0x003392        FD0000FF 19204C70        M[0xff4c70] = r0 + Null;
0x003394        FD0000FF 19204C24        M[0xff4c24] = r0 + Null;
0x003396        19200FB6                 M[0xfb6] = r0 + Null;
0x003397        00400000                 if EQ r2 = Null + Null;
0x003398        FD0000FF 19404F7B        M[$dac_resampler.resampler_active] = r2 + Null;
0x00339A        E1F0D94F                 call $interrupt.unblock;
0x00339B        DDF0D9A5                 jump $pop_rLink_and_rts;

 <$config_adc_resampler>
0x00339C        F3D00000                 push rLink;
0x00339D        01301B9C                 r1 = Null + 7068;

 <$M.config_adc_resampler.lookup_loop>
0x00339E        D023000F                 r0 = M[r1 + Null];
0x00339F        DD000009                 if EQ jump $M.config_adc_resampler.rates_not_supported;
0x0033A0        FD0000FF 29024F69        Null = r0 - M[$current_voice_codec_sampling_rate];
0x0033A2        DD100004                 if NE jump $M.config_adc_resampler.skip;
0x0033A3        D1230001                 r0 = M[r1 + 1];
0x0033A4        29021F69                 Null = r0 - M[$current_adc_sampling_rate];
0x0033A5        DD000016                 if EQ jump $M.config_adc_resampler.done;

 <$M.config_adc_resampler.skip>
0x0033A6        01330003                 r1 = r1 + 3;
0x0033A7        DDF0FFF7                 jump $M.config_adc_resampler.lookup_loop;

 <$M.config_adc_resampler.rates_not_supported>
0x0033A8        FD0000FF 09504F69        r3 = Null + M[$current_voice_codec_sampling_rate];
0x0033AA        09601F69                 r4 = Null + M[$current_adc_sampling_rate];
0x0033AB        0120000A                 r0 = Null + 10;
0x0033AC        0015000F                 rMAC = r3 + Null;
0x0033AD        D9020000                 Div = rMAC / r0;
0x0033AE        D9500001                 r3 = DivResult;
0x0033AF        0016000F                 rMAC = r4 + Null;
0x0033B0        D9020000                 Div = rMAC / r0;
0x0033B1        D9600001                 r4 = DivResult;
0x0033B2        01401090                 r2 = Null + 4240;
0x0033B3        E1F0D711                 call $message.send_short;
0x0033B4        E1F0E889                 call $error;
0x0033B5        01301B9C                 r1 = Null + 7068;
0x0033B6        D023000F                 r0 = M[r1 + Null];
0x0033B7        FD0000FF 19204F69        M[$current_voice_codec_sampling_rate] = r0 + Null;
0x0033B9        D1230001                 r0 = M[r1 + 1];
0x0033BA        19201F69                 M[$current_adc_sampling_rate] = r0 + Null;

 <$M.config_adc_resampler.done>
0x0033BB        E1F0D93E                 call $block_interrupts;
0x0033BC        E440002F                 r2 = Null + 1;
0x0033BD        D1230002                 r0 = M[r1 + 2];
0x0033BE        19201986                 M[0x1986] = r0 + Null;
0x0033BF        00400000                 if EQ r2 = Null + Null;
0x0033C0        19401F7C                 M[$adc_resampler.resampler_active] = r2 + Null;
0x0033C1        E1F0D928                 call $interrupt.unblock;
0x0033C2        DDF0D97E                 jump $pop_rLink_and_rts;

 <$M.music_example.GetControl.func>
0x0033C3        F3D00000                 push rLink;
0x0033C4        FD0000FF 51404EDA        I4 = Null + -45350;
0x0033C6        5000003F                 I0 = Null + r1;
0x0033C7        01C00005                 r10 = Null + 5;
0x0033C8        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x0033C9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0033CA        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x0033CB        E460002F                 r4 = Null + 1;
0x0033CC        19601AF2                 M[0x1af2] = r4 + Null;
0x0033CD        FD0000FF 09204EDD        r0 = Null + M[$music_example.OvrMode];
0x0033CF        03220000                 r0 = r0 + r0;
0x0033D0        FD0000FF D1024E16        Null = M[r0 + -45546];
0x0033D2        DD100009                 if NE jump $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033D3        39061AF2                 M[0x1af2] = Null - r4;
0x0033D4        0050000F                 r3 = Null + Null;
0x0033D5        19501BFF                 M[0x1bff] = r3 + Null;
0x0033D6        01C000D0                 r10 = Null + 208;
0x0033D7        FD0000FF 51003700        I0 = Null + -51456;
0x0033D9        E5F00002                 do $M.music_example.GetControl.clear_right_cbuffer_output;
0x0033DA        0300D100                 Null = Null + Null, M[I0,1] = r3;

 <$M.music_example.GetControl.clear_right_cbuffer_output>
0x0033DB        FD0000FF 09204EDA        r0 = Null + M[$music_example.SpiSysControl];
0x0033DD        81028000                 Null = r0 AND 0x8000;
0x0033DE        DD00000C                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x0033DF        FD0000FF 09304EDB        r1 = Null + M[$music_example.OvrMasterSystemVolume];
0x0033E1        9143007C                 r2 = r1 ASHIFT -4;
0x0033E2        8133000F                 r1 = r1 AND 0xf;
0x0033E3        09501F7A                 r3 = Null + M[$music_example.ToneVolume];
0x0033E4        FD0000FF 09604EDE        r4 = Null + M[$music_example.OvrTrimVolumes];
0x0033E6        91760074                 r5 = r4 ASHIFT -12;
0x0033E7        8D66000C                 r4 = r4 LSHIFT 12;
0x0033E8        91660074                 r4 = r4 ASHIFT -12;
0x0033E9        E1F0FF4D                 call $M.music_example_message.Volume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC>
0x0033EA        01A00000                 r8 = Null + 0;
0x0033EB        DDF0D955                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x0033EC        0004000F                 Null = r2 + Null;
0x0033ED        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x0033EE        01600007                 r4 = Null + 7;
0x0033EF        09700725                 r5 = Null + M[0x725];
0x0033F0        83760000                 r5 = r5 AND r4;
0x0033F1        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x0033F2        8082006F                 r6 = r0 AND r4;
0x0033F3        E488002F                 r6 = r6 + 1;
0x0033F4        21040002                 Null = r2 - 2;
0x0033F5        00850000                 if EQ r6 = r3 + Null;
0x0033F6        01A00200                 r8 = Null + 512;
0x0033F7        01500000                 r3 = Null + 0;
0x0033F8        E490002F                 r7 = Null + 1;
0x0033F9        800200AF                 Null = r0 AND r8;
0x0033FA        00590000                 if EQ r3 = r7 + Null;
0x0033FB        2007008F                 Null = r5 - r6;
0x0033FC        0085000B                 if LT r6 = r3 + Null;
0x0033FD        21080000                 Null = r6 - 0;
0x0033FE        00850000                 if EQ r6 = r3 + Null;
0x0033FF        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x003401        8092009F                 r7 = r0 AND r7;
0x003402        8489008F                 r6 = r7 OR r6;
0x003403        198006D0                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x003404        01500008                 r3 = Null + 8;
0x003405        2005003F                 Null = r3 - r1;
0x003406        00350004                 if NEG r1 = r3 + Null;
0x003407        01500000                 r3 = Null + 0;
0x003408        2005003F                 Null = r3 - r1;
0x003409        00350005                 if POS r1 = r3 + Null;
0x00340A        FD0000FF 19304F77        M[$music_example.sys_mode] = r1 + Null;
0x00340C        E430002F                 r1 = Null + 1;
0x00340D        19301F78                 M[$music_example.reinit] = r1 + Null;
0x00340E        DC0D000F                 rts;

 <$master_app_reset>
0x00340F        F3D00000                 push rLink;
0x003410        09001F6A                 Null = Null + M[$local_play_back];
0x003411        DD000007                 if EQ jump $M.master_app_reset.pause_happened;
0x003412        01401080                 r2 = Null + 4224;
0x003413        01500000                 r3 = Null + 0;
0x003414        01600000                 r4 = Null + 0;
0x003415        01700000                 r5 = Null + 0;
0x003416        01800000                 r6 = Null + 0;
0x003417        E1F0D6AD                 call $message.send_short;

 <$M.master_app_reset.pause_happened>
0x003418        E1F0D8E1                 call $block_interrupts;
0x003419        09201F3F                 r0 = Null + M[0x1f3f];
0x00341A        19201F3E                 M[0x1f3e] = r0 + Null;
0x00341B        FD0000FF 09204F3D        r0 = Null + M[0xff4f3d];
0x00341D        FD0000FF 19204F3C        M[0xff4f3c] = r0 + Null;
0x00341F        09201F4B                 r0 = Null + M[0x1f4b];
0x003420        19201F4A                 M[0x1f4a] = r0 + Null;
0x003421        FD0000FF 09204F49        r0 = Null + M[0xff4f49];
0x003423        FD0000FF 19204F48        M[0xff4f48] = r0 + Null;
0x003425        FD0000FF 01604D78        r4 = Null + -45704;
0x003427        E1F0D8A0                 call $frame_sync.run_function_table;
0x003428        E1F0D8C1                 call $interrupt.unblock;
0x003429        DDF0D917                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.func>
0x00342A        F3D00000                 push rLink;
0x00342B        01A00000                 r8 = Null + 0;
0x00342C        FD0000FF 19A04F77        M[$music_example.sys_mode] = r8 + Null;
0x00342E        F3300000                 push r1;
0x00342F        E1F00065                 call $M.music_example.load_default_params.func;
0x003430        FD0000FF 190048FF        M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x003432        F3440000                 pop r2;
0x003433        FD0000FF 194049FF        M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x003435        DD000005                 if EQ jump $M.music_example.LoadParams.done;
0x003436        01301F37                 r1 = Null + 7991;
0x003437        015032EC                 r3 = Null + 13036;
0x003438        E1F0D770                 call $pskey.read_key;
0x003439        DDF0D907                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x00343A        FD0000FF 09204F6D        r0 = Null + M[$codec_config];
0x00343C        D12206D0                 r0 = M[r0 + 1744];
0x00343D        192006D0                 M[$M.system_config.data.CurParams] = r0 + Null;
0x00343E        E1F000A9                 call $M.music_example.ReInit.func;
0x00343F        01401015                 r2 = Null + 4117;
0x003440        E1F0D684                 call $message.send_short;
0x003441        DDF0D8FF                 jump $pop_rLink_and_rts;

 <$music_example_reinitialize>
0x003442        F3D00000                 push rLink;
0x003443        51900001                 M1 = Null + 1;
0x003444        FD0000FF 5100350E        I0 = Null + -51954;
0x003446        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x003447        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x003448        D3200000                 r0 = M[r0 + Null];
0x003449        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x00344A        0002000F                 Null = r0 + Null;
0x00344B        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x00344C        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x00344D        FD0000FF 09404F6D        r2 = Null + M[$codec_config];
0x00344F        D52406D0                 M[r2 + 1744] = r0;
0x003450        01401014                 r2 = Null + 4116;
0x003451        81520007                 r3 = r0 AND 0x7;
0x003452        E1F0D672                 call $message.send_short;
0x003453        FD0000FF 01604D78        r4 = Null + -45704;
0x003455        E1F0D872                 call $frame_sync.run_function_table;
0x003456        19001F78                 M[$music_example.reinit] = Null + Null;
0x003457        DDF0D8E9                 jump $pop_rLink_and_rts;

 <$music_example.peq.initialize>
0x003458        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x003459        D07A000F                 r5 = M[r8 + Null];
0x00345A        81520007                 r3 = r0 AND 0x7;
0x00345B        E407003F                 Null = r5 - 1;
0x00345C        00500000                 if EQ r3 = Null + Null;
0x00345D        FD0000FF 09304F67        r1 = Null + M[$current_codec_sampling_rate];
0x00345F        FD000000 2103BB80        Null = r1 - 48000;
0x003461        00550070                 if EQ r3 = r3 + r5;
0x003462        E4AA002F                 r8 = r8 + 1;
0x003463        D02A005F                 r0 = M[r8 + r3];
0x003464        D5290003                 M[r7 + 3] = r0;
0x003465        DC0D0000                 if EQ rts;
0x003466        DDF0E79C                 jump $audio_proc.peq.initialize;

 <$music_example.peq.process>
0x003467        092006D0                 r0 = Null + M[$M.system_config.data.CurParams];
0x003468        800200AF                 Null = r0 AND r8;
0x003469        DC0D0001                 if NE rts;
0x00346A        D1090003                 Null = M[r7 + 3];
0x00346B        DC0D0000                 if EQ rts;
0x00346C        DDF0D1F4                 jump $audio_proc.peq.process;

 <$M.music_example.GetStatus.func>
0x00346D        5010003F                 I1 = Null + r1;
0x00346E        01C00023                 r10 = Null + 35;
0x00346F        00AC000F                 r8 = r10 + Null;
0x003470        51401A46                 I4 = Null + 6726;
0x003471        03000031                 Null = Null + Null, r1 = M[I4,1];
0x003472        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x003473        D3300000                 r1 = M[r1 + Null];
0x003474        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x003475        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x003476        01C00007                 r10 = Null + 7;
0x003477        51401BC0                 I4 = Null + 7104;
0x003478        8B440000                 r2 = r2 XOR r2;
0x003479        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x00347A        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x00347B        190007FF                 M[0x7ff] = Null + Null;
0x00347C        FD0000FF 19004F63        M[0xff4f63] = Null + Null;
0x00347E        19000FFF                 M[0xfff] = Null + Null;
0x00347F        FD0000FF 19004F65        M[0xff4f65] = Null + Null;
0x003481        DC0D000F                 rts;

 <$music_example.cmpd100.initialize>
0x003482        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x003484        FD000000 2102BB80        Null = r0 - 48000;
0x003486        00A90001                 if NE r8 = r7 + Null;
0x003487        DDF0E735                 jump $cmpd100.initialize;

 <$music_example.cmpd100.analysis>
0x003488        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x00348A        FD000000 2102BB80        Null = r0 - 48000;
0x00348C        00A90001                 if NE r8 = r7 + Null;
0x00348D        DDF0CF15                 jump $cmpd100.analysis;

 <$music_example.cmpd100.applygain>
0x00348E        FD0000FF 09204F67        r0 = Null + M[$current_codec_sampling_rate];
0x003490        FD000000 2102BB80        Null = r0 - 48000;
0x003492        00A90001                 if NE r8 = r7 + Null;
0x003493        DDF0D23D                 jump $cmpd100.applygain;

 <$M.music_example.load_default_params.func>
0x003494        51C00005                 L0 = Null + 5;
0x003495        51000080                 I0 = Null + 128;
0x003496        FD0000D0 51400000        I4 = Null + -3145728;
0x003498        511006D0                 I1 = Null + 1744;
0x003499        01C00124                 r10 = Null + 292;
0x00349A        91CC007F                 r10 = r10 ASHIFT -1;
0x00349B        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x00349C        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x00349D        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x00349E        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x00349F        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x0034A0        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x0034A1        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x0034A2        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x0034A3        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x0034A4        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x0034A5        51C00000                 L0 = Null + 0;
0x0034A6        DC0D000F                 rts;

 <$set_dac_rate_from_vm>
0x0034A7        8133FFFF                 r1 = r1 AND 0xffff;
0x0034A8        9933000A                 r1 = r1 * 10 (int);
0x0034A9        19301F67                 M[$current_dac_sampling_rate] = r1 + Null;
0x0034AA        19301F69                 M[$current_adc_sampling_rate] = r1 + Null;
0x0034AB        19401F6B                 M[$max_clock_mismatch] = r2 + Null;
0x0034AC        FD0000FF 19504F6B        M[$long_term_mismatch] = r3 + Null;
0x0034AE        81260100                 r0 = r4 AND 0x100;
0x0034AF        19201F6A                 M[$local_play_back] = r0 + Null;
0x0034B0        812600FF                 r0 = r4 AND 0xff;
0x0034B1        FD0000FF 19204F6A        M[$audio_if_mode] = r0 + Null;
0x0034B3        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x0034B4        FD000000 0150E008        r3 = Null + 57352;
0x0034B6        09701F77                 r5 = Null + M[$music_example.Version];
0x0034B7        FD0000FF 09804F67        r6 = Null + M[$current_codec_sampling_rate];
0x0034B9        1835000F                 M[r1] = r3 + Null;
0x0034BA        D5730001                 M[r1 + 1] = r5;
0x0034BB        D5830002                 M[r1 + 2] = r6;
0x0034BC        01A00003                 r8 = Null + 3;
0x0034BD        DC0D000F                 rts;

 <$M.music_example.GetParams.func>
0x0034BE        015006D0                 r3 = Null + 1744;
0x0034BF        01600124                 r4 = Null + 292;
0x0034C0        FD0000D0 01700000        r5 = Null + -3145728;
0x0034C2        1835000F                 M[r1] = r3 + Null;
0x0034C3        D5630001                 M[r1 + 1] = r4;
0x0034C4        D5730002                 M[r1 + 2] = r5;
0x0034C5        01A00003                 r8 = Null + 3;
0x0034C6        DC0D000F                 rts;

 <$set_codec_rate_from_vm>
0x0034C7        8133FFFF                 r1 = r1 AND 0xffff;
0x0034C8        9933000A                 r1 = r1 * 10 (int);
0x0034C9        8144FFFF                 r2 = r2 AND 0xffff;
0x0034CA        9944000A                 r2 = r2 * 10 (int);
0x0034CB        FD0000FF 19304F67        M[$current_codec_sampling_rate] = r1 + Null;
0x0034CD        FD0000FF 19404F69        M[$current_voice_codec_sampling_rate] = r2 + Null;
0x0034CF        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x0034D0        F3D00000                 push rLink;
0x0034D1        E1F0FFC3                 call $M.music_example.load_default_params.func;
0x0034D2        016019CE                 r4 = Null + 6606;
0x0034D3        E1F0D7C2                 call $frame_sync.register_handlers;
0x0034D4        DDF0D86C                 jump $pop_rLink_and_rts;

 <$M.music_example.extract_faststream_info.func>
0x0034D5        092001E7                 r0 = Null + M[0x1e7];
0x0034D6        21020000                 Null = r0 - 0;
0x0034D7        DC0D0001                 if NE rts;
0x0034D8        0920006E                 r0 = Null + M[$sbc.sampling_freq];
0x0034D9        19201BC4                 M[$music_example.dec_sampling_freq] = r0 + Null;
0x0034DA        0920006F                 r0 = Null + M[$sbc.bitpool];
0x0034DB        19201BC5                 M[$music_example.dec_bitpool] = r0 + Null;
0x0034DC        DC0D000F                 rts;

 <$config_resampler>
0x0034DD        F3D00000                 push rLink;
0x0034DE        E1F0FE8B                 call $config_dac_resampler;
0x0034DF        E1F0FEBD                 call $config_adc_resampler;
0x0034E0        DDF0D860                 jump $pop_rLink_and_rts;

 <$copy_codec_stats_pointers>
0x0034E1        01C00011                 r10 = Null + 17;
0x0034E2        51401A58                 I4 = Null + 6744;
0x0034E3        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x0034E4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0034E5        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x0034E6        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x0034E7        E4A0002F                 r8 = Null + 1;
0x0034E8        19A01F78                 M[$music_example.reinit] = r8 + Null;
0x0034E9        01A00000                 r8 = Null + 0;
0x0034EA        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.SPI_BLOCK
0x000000	$M.spi_block.signature
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$M.system_config.data.mute_cntrl_l_dm1
        FF4E45 FF4F72 000000 

0x00004D	$M.system_config.data.mute_cntrl_r_dm1
        001B85 FF4F72 000000 

0x000050	$tone_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00005C	$interrupt.start_time
        000000 

0x00005D	$cbops.noise_gate.monostable_trigger_level
        00415F 

0x00005E	$cbops.noise_gate.monostable_count_init
        001388 

0x00005F	$cbops.noise_gate.decay_step
        0000C8 

0x000060	$tone_right_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00006C	$cbops.noise_gate.attack_step
        007530 

0x00006D	$sbcdec.codec_struc
        000000 

0x00006E	$sbc.sampling_freq
        000000 

0x00006F	$sbc.bitpool
        000000 

0x000070	$dither_hist_left
        000000 000000 000000 000000 
        000000 

0x000075	$sbcenc.codec_struc
        000000 000000 000000 

0x000078	$dither_hist_right
        000000 000000 000000 000000 
        000000 

0x00007D	$M.sra_calcrate.mode_funtion_table
        00031D 000323 000335 

0x000080	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x000085	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000D5	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000FD	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0x000100	$tone_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001C0	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x0001E1	$decoder_codec_stream_struc
        000000 000000 000000 FF4F35 
        001F3A FF4F38 000000 000000 
        000000 007530 133333 000000 
        000001 00340F 000000 000000 
        000000 000000 000000 000000 

0x0001F5	$encoder_codec_stream_struc
        000000 000000 FF4F41 001F43 
        000000 000000 000000 000000 
        000000 

0x0001FE	$M.sra_tagtimes.mode_funtion_table
        00025F 00026E 

0x000200	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002C0	$sbcenc.audio_sample_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003C0	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004C0	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x0004E1	$sbcenc.analysis_y
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0004F1	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000501	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000511	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000521	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000531	$stereo_3d_enhancement.coeff_buf
        CF5C29 5EB852 C7AE14 27AE14 
        D47AE1 570A3D C7AE14 27AE14 

0x000539	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x000540	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00055E	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x00057F	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0x000580	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0005F9	$audio_mute_op_mono.next
0x0005F9	$audio_mute_op_mono
        001ED0 

0x0005FA	$audio_mute_op_mono.func
        FF4F5C 

0x0005FB	$audio_mute_op_mono.param
        000001 000000 000001 000000 
        000000 

0x000600	$dac_resampler.dac_out_temp_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0006D0	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0007F4	$audio_out_mix_op
0x0007F4	$audio_out_mix_op.next
        001B03 

0x0007F5	$audio_out_mix_op.func
        001F52 

0x0007F6	$audio_out_mix_op.param
        000000 000001 000000 FFFFFF 
        400000 400000 000000 000000 

0x0007FE	$M.system_config.data.pcmin_l_pk_dtct
        001B6B 000000 

0x000800	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000C00	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000ED0	$dac_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FB2	$dac_resampler.stereo_right_resampler_op
0x000FB2	$dac_resampler.stereo_right_resampler_op.next
        FFFFFF 

0x000FB3	$dac_resampler.stereo_right_resampler_op.func
        001F5B 

0x000FB4	$dac_resampler.stereo_right_resampler_op.param
        000001 000003 000000 FFFFF8 
        000008 000ED0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000FFE	$M.system_config.data.dac_l_pk_dtct
        FF4E45 000000 

0x001000	$stereo_3d_enhancement.delay1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0018A0	$adc_resampler.adc_iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001982	$adc_resampler.mono_resampler_op.next
0x001982	$adc_resampler.mono_resampler_op
        FFFFFF 

0x001983	$adc_resampler.mono_resampler_op.func
        001F5B 

0x001984	$adc_resampler.mono_resampler_op.param
        000000 000001 000000 FFFFF8 
        000008 0018A0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0019CE	$M.music_example.power_up_reset.message_handlers
        001EE4 001020 001AE0 001BD3 
        FF36FC 001001 0033EC 001BD3 
        FF37FC 00100E 0019F8 001BD3 
        001EE8 001002 003361 001BD3 
        001EEC 001012 00342A 001BD3 
        FF4EE4 001018 001B7C 001BD3 
        001EF0 00101A 001B0C 001BD3 
        FF4EE8 00121A 001AB5 001BD3 
        001EF4 00129A 001B19 001BD3 
        FF4EEC 00121B 001B24 001BD3 
        001EF8 00129B 001A96 001BD3 
        FF4F2C 001007 00346D 001C22 
        0000FD 00100A 0034B4 001C22 
        FF4F32 00100B 0033C3 001C22 
        FF4F2F 001009 0034E7 001C22 
        001F34 001008 0034BE 001C22 
        000000 

0x001A0F	$M.system_config.data.full_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 00069A 001F10 000000 
        00069A FF4F08 000000 0002AD 
        000000 FF359A 003467 FF31C0 
        000400 003467 FF31D5 000400 
        003467 FF3580 000080 003467 
        FF358D 000080 003467 FF31EA 
        000100 003467 FF3250 000100 
        003488 FF4D5A 001A88 00348E 
        FF4D5A 001A88 000144 001B17 
        000000 000C5E 000FFE 000000 
        000C5E FF4F64 000000 000B3C 
        001EDA 000000 000000 

0x001A46	$M.system_config.data.StatisticsPtrs
        001BC0 FF4EDA 001BC1 001BC2 
        0007FF FF4F63 FF4F72 000FFF 
        FF4F65 FF4F72 001F79 FF4F79 
        FF4F7A 001F7B 0006D0 FF4E98 
        FF4F73 001F6D 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x001A69	$M.system_config.data.pass_thru_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 00069A 001F10 000000 
        00069A FF4F08 000000 000977 
        FF4F04 000000 000144 001B17 
        000000 000C5E 000FFE 000000 
        000C5E FF4F64 000000 000B3C 
        001EDA 000000 000000 

0x001A88	$M.system_config.data.cmpd100_obj_48kHz
        000040 000020 FF4E45 001B85 
        FF4E45 001B85 080000 FF4F75 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 3E4859 02D026 3E4859 
        00D9BA 5E4273 009150 7B6F09 
        006D0B 020000 

0x001AA6	$M.system_config.data.StandBy_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 000C23 00004A 000000 
        000C23 00004D 000000 000C5E 
        000FFE 000000 000C5E FF4F64 
        000000 000B3C 001EDA 000000 
        000000 

0x001ABF	$cbuffer.port_buffer_size
0x001ABF	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001ACB	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001AD7	$cbuffer.port_limit_addr
0x001AD7	$cbuffer.read_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001AE3	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001AEF	$audio_out_tone_upsample_stereo_mix
0x001AEF	$audio_out_tone_upsample_stereo_mix.next
        FF4DDA 

0x001AF0	$audio_out_tone_upsample_stereo_mix.func
        FF4F59 

0x001AF1	$audio_out_tone_upsample_stereo_mix.param
        000000 000001 001F40 FF3490 
        001F67 000050 001F68 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001B03	$audio_out_tone_upsample_mono_mix.next
0x001B03	$audio_out_tone_upsample_mono_mix
        FF4DEE 

0x001B04	$audio_out_tone_upsample_mono_mix.func
        FF4F59 

0x001B05	$audio_out_tone_upsample_mono_mix.param
        000000 FFFFFF 001F40 FF3490 
        001F67 000050 001F68 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001B17	$M.system_config.data.stereo_volume_and_limit_block
0x001B17	$M.system_config.data.stereo_volume_and_limit_obj
        000000 001000 000002 FF4F67 
        200000 FBD57B 072148 79999A 
        000000 000000 

0x001B21	$M.system_config.data.left_channel_vol_struc
        FF4E45 FF4E45 080000 000000 
        000000 

0x001B26	$M.system_config.data.right_channel_vol_struc
        001B85 001B85 080000 000000 
        000000 

0x001B2B	$sbc_stats
        FF4CD4 FF4CD6 FF4CDA FF4CD5 
        FF4CD7 FF4CD9 FF4CD8 FF4F72 
        FF4F72 FF4F72 FF4F72 FF4F72 
        FF4F72 FF4F6A 001BC3 001F67 
        FF4F67 

0x001B3C	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001B4C	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001B5C	$M.system_config.data.mono_volume_and_limit_block
0x001B5C	$M.system_config.data.mono_volume_and_limit_obj
        000000 001000 000001 FF4F67 
        200000 FBD57B 072148 79999A 
        000000 000000 

0x001B66	$M.system_config.data.mono_channel_vol_struc
        FF4E45 FF4E45 080000 000000 
        000000 

0x001B6B	$M.system_config.data.stream_map_left_in
        001F3A 000000 000000 0000A0 
        000BB8 000CDA 000CA2 000000 
        000000 000000 000000 000000 
        000000 

0x001B78	$M.system_config.data.stream_map_right_in
        FF4F38 000000 000000 0000A0 
        000BB8 000CDA 000CA2 000000 
        000000 000000 000000 000000 
        000000 

0x001B85	$M.system_config.data.stream_map_right_out
        FF4F3B 000000 000000 0000A0 
        000BB8 000CAF 000B93 000000 
        000000 000000 000000 000000 
        000000 

0x001B92	$EncoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001B9C	$adc_resampler.filter_spec_lookup_table
        003E80 00AC44 FF3ED0 003E80 
        00BB80 FF3FD0 003E80 003E80 
        000000 000000 

0x001BA6	$audio_mute_op_stereo.next
0x001BA6	$audio_mute_op_stereo
        FF4EC6 

0x001BA7	$audio_mute_op_stereo.func
        FF4F5C 

0x001BA8	$audio_mute_op_stereo.param
        000001 000000 000002 000000 
        000000 000001 000001 

0x001BAF	$interrupt.isr_call_table
        000B0B 001C3D 00051E 001C3D 
        001C3D 001C3D 001C3D 001C3D 
        001C3D 

0x001BB8	$audio_out_dither_and_shift_op_mono
0x001BB8	$audio_out_dither_and_shift_op_mono.next
        FFFFFF 

0x001BB9	$audio_out_dither_and_shift_op_mono.func
        001F55 

0x001BBA	$audio_out_dither_and_shift_op_mono.param
        000000 000002 FFFFF8 000000 
        000070 000000 

0x001BC0	$music_example.Statistics
0x001BC0	$music_example.CurMode
        000000 

0x001BC1	$music_example.PeakMipsFunc
        000000 

0x001BC2	$music_example.PeakMipsDecoder
        000000 

0x001BC3	$music_example.SamplingRate
        000000 

0x001BC4	$music_example.dec_sampling_freq
        000000 

0x001BC5	$music_example.dec_bitpool
        000000 

0x001BC6	$music_example.PeakMipsEncoder
        000000 

0x001BC7	$M.cbops.av_copy.silence_buffer_struc
        000000 000000 000000 000000 
        000000 000000 000000 

0x001BCE	$stereo_tone_in_copy_op
0x001BCE	$stereo_tone_in_copy_op.next
        FFFFFF 

0x001BCF	$stereo_tone_in_copy_op.func
        FF4F5F 

0x001BD0	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0x001BD4	$signal_detect_op_coefs
        000A5B 000258 000000 000000 
        000001 001019 

0x001BDA	$audio_in_noise_gate_op_mono
0x001BDA	$M.main.audio_in_noise_gate_op_mono.next
        FFFFFF 

0x001BDB	$M.main.audio_in_noise_gate_op_mono.func
        001F58 

0x001BDC	$M.main.audio_in_noise_gate_op_mono.param
        000001 000001 000000 000000 

0x001BE0	$dac_resampler.stereo_copy_switch_op
0x001BE0	$dac_resampler.stereo_copy_switch_op.next
        FF4F0C 

0x001BE1	$dac_resampler.stereo_copy_switch_op.func
        001F61 

0x001BE2	$dac_resampler.stereo_copy_switch_op.param
        FF4F7B FF4C20 000000 000001 

0x001BE6	$adc_resampler.mono_copy_switch_op
0x001BE6	$adc_resampler.mono_copy_switch_op.next
        001F1C 

0x001BE7	$adc_resampler.mono_copy_switch_op.func
        001F61 

0x001BE8	$adc_resampler.mono_copy_switch_op.param
        001F7C 001982 000000 000001 

0x001BEC	$tone_in_copy_struc
        001BF1 000001 946003 000001 
        001F40 

0x001BF1	$tone_in_copy_op.next
0x001BF1	$tone_in_copy_op
        FFFFFF 

0x001BF2	$tone_in_copy_op.func
        FF4F56 

0x001BF3	$tone_in_copy_op.param
        000000 000001 00000B 

0x001BF6	$codec_out_copy_struc
        001F0C 000001 FF4F41 000001 
        80000E 

0x001BFB	$audio_out_dc_remove_op_right
0x001BFB	$M.main.audio_out_dc_remove_op_right.next
        FF3FF8 

0x001BFC	$M.main.audio_out_dc_remove_op_right.func
        FF4F50 

0x001BFD	$M.main.audio_out_dc_remove_op_right.param
        000001 000001 000000 

0x001C00	$audio_in_mono
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001ED0	$M.main.audio_out_dc_remove_op_mono.next
0x001ED0	$audio_out_dc_remove_op_mono
        001BB8 

0x001ED1	$M.main.audio_out_dc_remove_op_mono.func
        FF4F50 

0x001ED2	$M.main.audio_out_dc_remove_op_mono.param
        000000 000000 000000 

0x001ED5	$M.main.audio_in_shift_op_mono.next
0x001ED5	$audio_in_shift_op_mono
        FF4ED5 

0x001ED6	$M.main.audio_in_shift_op_mono.func
        FF4F56 

0x001ED7	$M.main.audio_in_shift_op_mono.param
        000000 000001 000008 

0x001EDA	$M.system_config.data.rcv_process_streams
        001B6B 001B78 FF4E45 001B85 
        000000 

0x001EDF	$dac_out_resampler_mono_copy_struc
        FF4EB5 000001 001F3D 000001 
        001F49 

0x001EE4	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0x001EE8	$M.music_example_message.volume_message_struc
        000000 000000 000000 000000 

0x001EEC	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0x001EF0	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0x001EF4	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0x001EF8	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x001EFC	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x001F00	$codec_timer_struc
        000000 000000 000000 000000 

0x001F04	$audio_in_timer_struc
        000000 000000 000000 000000 

0x001F08	$signal_detect_timer_struc
        000000 000000 000000 000000 

0x001F0C	$codec_out_copy_op
0x001F0C	$codec_out_copy_op.next
        FFFFFF 

0x001F0D	$codec_out_copy_op.func
        FF4F4D 

0x001F0E	$codec_out_copy_op.param
        000000 000001 

0x001F10	$M.system_config.data.left_headroom_obj
        001B6B 001B6B 001F76 FF4F72 

0x001F14	$M.system_config.data.mono_headroom_obj
        FF4E45 FF4E45 001F76 FF4F72 

0x001F18	$dac_resampler.stereo_right_copy_op.next
0x001F18	$dac_resampler.stereo_right_copy_op
        FFFFFF 

0x001F19	$dac_resampler.stereo_right_copy_op.func
        FF4F4D 

0x001F1A	$dac_resampler.stereo_right_copy_op.param
        000001 000003 

0x001F1C	$adc_resampler.mono_copy_op.next
0x001F1C	$adc_resampler.mono_copy_op
        FFFFFF 

0x001F1D	$adc_resampler.mono_copy_op.func
        FF4F4D 

0x001F1E	$adc_resampler.mono_copy_op.param
        000000 000001 

0x001F20	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0x001F24	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x001F28	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x001F2C	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x001F30	$sbcenc.set_encoder_params_message_struc
        000000 000000 000000 000000 

0x001F34	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0x001F37	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0x001F3A	$audio_out_left_cbuffer_struc
        0002D0 000C00 000C00 

0x001F3D	$dac_out_left_cbuffer_struc
        0000D0 FF3600 FF3600 

0x001F40	$tone_in_cbuffer_struc
        0000C0 000100 000100 

0x001F43	$audio_in_mono_cbuffer_struc
        0002D0 001C00 001C00 

0x001F46	$stereo_3d_enhancement_delay1_cbuffer_struc
        0008A0 001000 00126A 

0x001F49	$dac_out_temp_left_cbuffer_struc
        0000D0 FF3F00 FF3F00 

0x001F4C	$adc_in_temp_mono_cbuffer_struc
        0000D0 FF4900 FF4900 

0x001F4F	$M.cbops.av_copy.right_silence_cbuffer_struc
        000079 FF4A00 FF4A00 

0x001F52	$cbops.cross_mix
        000000 000000 0006FE 

0x001F55	$cbops.dither_and_shift
        000000 000000 000478 

0x001F58	$cbops.noise_gate
        000D17 000000 000995 

0x001F5B	$cbops_iir_resamplev2
        000000 0008EF 00059F 

0x001F5E	$cbops.signal_detect_op
        000000 000000 0019B2 

0x001F61	$cbops.switch_op
        000D38 000D3A 000D3C 

0x001F64	$cbuffer.tmp
        000000 000000 

0x001F66	$M.downsample_sub_to_1k2.mute_direction
        000000 

0x001F67	$current_dac_sampling_rate
        000000 

0x001F68	$current_tone_sampling_rate
        001F40 

0x001F69	$current_adc_sampling_rate
        000000 

0x001F6A	$local_play_back
        000000 

0x001F6B	$max_clock_mismatch
        000000 

0x001F6C	$aux_input_stream_available
        000000 

0x001F6D	$codec_type
        FFFFFF 

0x001F6E	$tmr_period_con_copy
        000000 

0x001F6F	$codec_reset_needed
        000000 

0x001F70	$glob_counter_removeframe
        000000 

0x001F71	$no_tone_timer
        000000 

0x001F72	$rate_apply_cntr
        000000 

0x001F73	$M.system_config.data.HalfValue
        400000 

0x001F74	$scratch.s0
        000000 

0x001F75	$scratch.s2
        000000 

0x001F76	$M.system_config.data.headroom_mant
        200000 

0x001F77	$music_example.Version
        000001 

0x001F78	$music_example.reinit
        000001 

0x001F79	$music_example.SystemVolume
        00000B 

0x001F7A	$music_example.ToneVolume
        000000 

0x001F7B	$music_example.RightTrimVolume
        000000 

0x001F7C	$adc_resampler.resampler_active
        000000 

0x001F7D	$cbuffer.write_port_disconnect_address
        000000 

0x001F7E	$cbuffer.read_port_disconnect_address
        000000 

0x001F7F	$error.handler
        000000 

0x001F80	$interrupt.block_count
        000000 

0x001F81	$message.last_addr
        FFFFFF 

0x001F82	$message.queue_write_ptr
        000000 

0x001F83	$message.long_message_size
        000000 

0x001F84	$pskey.request_in_progress
        000000 

0x001F85	$timer.id
        000001 

0x001F86	$wall_clock.last_addr
        FFFFFF 

0x001F87	$cbops.amount_to_use
        000000 

0x001F88	$M.cbops.av_copy.control_port
        000000 

0x001F89	$M.cbops.av_copy.right_channel
        000000 

0x001F8A	$M.cbops.dac_av_copy.prev_port_mnt_space
        000000 

0x001F8B	$M.cbops.dac_av_copy.buffer_read_addr_nochange_counter
        000000 

0x001F8C	$M.cbops.dac_av_copy.port_amount_written
        000000 

0x001F8D	$M.cbops.adc_av_copy.prev_port_mnt_data
        000000 

0x001F8E	$M.cbops.adc_av_copy.buffer_write_addr_nochange_counter
        000000 

0x001F8F	$M.cbops.iir_resamplev2.amount_used
        000000 

0x001F90	$M.codec_av_decode.data_ptr
        000000 

0x001F91	$M.codec_av_encode.data_ptr
        000000 

0x001F92	$frame_sync.sync_flag
        000000 

0x001F93	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0x001F94	$M.cmpd100.analysis.region
        000000 

0x001F95	$M.cmpd100.applygain.lin_gain
        000000 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m4_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$sbcenc.analysis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30F0	$sbcenc.level_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31C0	$M.system_config.data.spkr_eq_left_dm2
        FF4E45 FF4E45 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF31D5	$M.system_config.data.spkr_eq_right_dm2
        001B85 001B85 000005 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF31EA	$M.system_config.data.user_eq_left_dm2
        FF4E45 FF4E45 000005 FF49D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF31FF	$M.mips_profile.evalinterval_us
        0186A0 

0xFF3200	$sbcenc.analysis_xch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3250	$M.system_config.data.user_eq_right_dm2
        001B85 001B85 000005 FF49D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3265	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3276	$M.system_config.data.user_eq_bank_select
        000007 000000 000726 00073C 
        000752 000768 00077E 000794 

0xFF327E	$M.system_config.data.UserEqInitTable
        FF31EA FF3250 

0xFF3280	$sbcenc.analysis_xch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF32D0	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3390	$sbcenc.analysis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3410	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3490	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF350E	$M.system_config.data.ParameterMap
        0006D0 FF35A3 0007B9 FF35A1 
        0007BA FF35A2 0007AD FF4DC5 
        0007AE FF4DC6 0007AF FF4DC7 
        0007B0 FF4DC8 0007B1 FF4DC9 
        0007B2 FF4DCA 0007B8 FF4DCB 
        0006D0 FF4D5A 0006D0 001A88 
        0007BB FF4D64 0007BC FF4D65 
        0007BD FF4D66 0007BE FF4D67 
        0007BF FF4D68 0007C0 FF4D69 
        0007C1 FF4D6A 0007C2 FF4D6B 
        0007C3 FF4D6F 0007C4 FF4D70 
        0007C5 FF4D71 0007C6 FF4D72 
        0007C7 FF4D73 0007C8 FF4D74 
        0007C9 FF4D75 0007CA FF4D76 
        0007CB FF4D60 0007CC 001A92 
        0007CD 001A93 0007CE 001A94 
        0007CF 001A95 0007D0 001A96 
        0007D1 001A97 0007D2 001A98 
        0007D3 001A99 0007D4 001A9D 
        0007D5 001A9E 0007D6 001A9F 
        0007D7 001AA0 0007D8 001AA1 
        0007D9 001AA2 0007DA 001AA3 
        0007DB 001AA4 0007DC 001A8E 
        0007DD 001BD4 0007DE 001BD5 
        0007DF FF4F76 000000 

0xFF3571	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF3580	$M.system_config.data.boost_eq_left_dm2
        FF4E45 FF4E45 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF358D	$M.system_config.data.boost_eq_right_dm2
        001B85 001B85 000001 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF359A	$M.system_config.data.stereo_3d_obj
        001B6B 001B78 FF4E45 001B85 
        001F46 FF4F44 000531 00026A 
        000000 000000 000040 

0xFF35A5	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF35AC	$M.system_config.data.spkr_eq_bank_select
        000001 0006D1 0006F2 

0xFF35AF	$M.system_config.data.boost_eq_bank_select
        000001 000713 00071C 

0xFF35B2	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF35F1	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF3600	$dac_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF36D0	$M.iir_resamplev2.Up_160_Down_147.int_ratio
0xFF36D0	$M.iir_resamplev2.Up_160_Down_147.filter
        000000 

0xFF36D1	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF36D2	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF36D3	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF36D4	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000849 

0xFF36D5	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF36D6	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF36D7	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF36D8	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF36D9	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF4A79 

0xFF36DA	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF36DB	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        0004D1 

0xFF36DC	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF36DD	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF36DE	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF36DF	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF36E0	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF36E1	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF48C3 

0xFF36E2	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF36E3	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF36E4	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        000AF2 

0xFF36E5	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF36F0	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF36F1	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF36FB	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF36FC	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0xFF3700	$dac_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF37D0	$M.iir_resamplev2.Up_147_Down_160.filter
0xFF37D0	$M.iir_resamplev2.Up_147_Down_160.int_ratio
        000001 

0xFF37D1	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF37D2	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF37D3	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF37D4	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000849 

0xFF37D5	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF37D6	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF37D7	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF37D8	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF37D9	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF35B2 

0xFF37DA	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF37DB	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        0004D1 

0xFF37DC	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF37DD	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF37DE	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF37DF	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF37E0	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF37E1	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF48A0 

0xFF37E2	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF37E3	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF37E4	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        000AF2 

0xFF37E5	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF37F0	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF37F1	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF37FB	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF37FC	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0xFF3800	$codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3C00	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3ED0	$M.iir_resamplev2.Up_441_Down_160.filter
0xFF3ED0	$M.iir_resamplev2.Up_441_Down_160.int_ratio
        000000 

0xFF3ED1	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF3ED2	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF3ED3	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3ED4	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000849 

0xFF3ED5	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF3ED6	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF3ED7	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF3ED8	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF3ED9	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF35B2 

0xFF3EDA	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF3EDB	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000623 

0xFF3EDC	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF3EDD	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF3EDE	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF3EDF	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF3EE0	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF3EE1	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF4AF1 

0xFF3EE2	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF3EE3	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF3EE4	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        000B25 

0xFF3EE5	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF3EEC	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF3EED	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF3EF3	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF3EF4	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF3EF9	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF3EFA	$stereo_tone_in_copy_struc
        001BCE 000001 946003 000002 
        001F40 FF4F3E 

0xFF3F00	$dac_resampler.dac_out_temp_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3FD0	$M.iir_resamplev2.Up_3_Down_1.int_ratio
0xFF3FD0	$M.iir_resamplev2.Up_3_Down_1.filter
        000000 

0xFF3FD1	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF3FD2	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF3FD3	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF3FD4	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF3FD5	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000623 

0xFF3FD6	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF3FD7	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF3FD8	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF3FD9	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF3FDA	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF3FDB	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF35F1 

0xFF3FDC	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF3FDD	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF3FDE	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        000AA9 

0xFF3FDF	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF3FE7	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF3FE8	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF3FEF	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF3FF0	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF3FF7	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF3FF8	$audio_out_dither_and_shift_op_left.next
0xFF3FF8	$audio_out_dither_and_shift_op_left
        FF4E86 

0xFF3FF9	$audio_out_dither_and_shift_op_left.func
        001F55 

0xFF3FFA	$audio_out_dither_and_shift_op_left.param
        000000 000002 FFFFF8 000000 
        000070 000000 

0xFF4000	$stereo_3d_enhancement.delay2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF48A0	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF48C3	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF48D7	$M.system_config.data.mono_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 0009FC FF4EAF 000000 
        00069A 001F14 000000 003467 
        FF31C0 000400 003467 FF3580 
        000080 003467 FF31EA 000100 
        003488 FF4D5A 001A88 00348E 
        FF4D5A 001A88 000144 001B5C 
        000000 000C5E 000FFE 000000 
        000B3C 001EDA 000000 000000 

0xFF48FF	$M.music_example.LoadParams.paramoffset
        000000 

0xFF4900	$adc_resampler.adc_in_temp_mono
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF49D0	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0xFF49F1	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0xFF49FF	$M.music_example.LoadParams.Last_PsKey
        000000 

0xFF4A00	$M.cbops.av_copy.right_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4A79	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF4AF1	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF4B5A	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4BC8	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4C20	$dac_resampler.stereo_left_resampler_op.next
0xFF4C20	$dac_resampler.stereo_left_resampler_op
        000FB2 

0xFF4C21	$dac_resampler.stereo_left_resampler_op.func
        001F5B 

0xFF4C22	$dac_resampler.stereo_left_resampler_op.param
        000000 000002 000000 FFFFF8 
        000008 000ED0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4C6C	$dac_resampler.mono_resampler_op.next
0xFF4C6C	$dac_resampler.mono_resampler_op
        FFFFFF 

0xFF4C6D	$dac_resampler.mono_resampler_op.func
        001F5B 

0xFF4C6E	$dac_resampler.mono_resampler_op.param
        000000 000001 000000 FFFFF8 
        000008 000ED0 0000E2 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4CB8	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0003C0 000085 0000D5 FF30A0 
        0004F1 000501 000511 000521 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4CFD	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4D3A	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0xFF4D5A	$M.system_config.data.cmpd100_obj_44kHz
        000040 000020 FF4E45 001B85 
        FF4E45 001B85 080000 FF4F75 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF4D78	$M.system_config.data.reinitialize_table
        003458 FF31C0 FF35AC 003458 
        FF31D5 FF35AC 003458 FF3580 
        FF35AF 003458 FF358D FF35AF 
        003000 FF327E FF3276 00028D 
        000000 FF359A 003482 FF4D5A 
        001A88 000CBB 001B17 001B17 
        000CBB 001B5C 001B5C 000000 

0xFF4D94	$M.system_config.data.mono_pass_thru_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 0009FC FF4EAF 000000 
        00069A 001F14 000000 000144 
        001B5C 000000 000C5E 000FFE 
        000000 000B3C 001EDA 000000 
        000000 

0xFF4DAD	$cbuffer.port_offset_addr
0xFF4DAD	$cbuffer.read_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4DB9	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4DC5	$M.system_config.data.bass_manager_coefs
        000003 100000 200000 000000 
        000000 200000 000050 015725 
        000005 000006 7BA375 5A827A 
        2120FC 7BA375 2120FC 7BA375 
        5A827A 2120FC 7BA375 5A827A 
        2120FC 

0xFF4DDA	$audio_out_tone_right_upsample_stereo_mix
0xFF4DDA	$audio_out_tone_right_upsample_stereo_mix.next
        FF4EA3 

0xFF4DDB	$audio_out_tone_right_upsample_stereo_mix.func
        FF4F59 

0xFF4DDC	$audio_out_tone_right_upsample_stereo_mix.param
        000001 FFFFFF FF4F3E FF3490 
        001F67 000060 001F68 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4DEE	$audio_out_tone_right_upsample_mono_mix
0xFF4DEE	$audio_out_tone_right_upsample_mono_mix.next
        FF4ECB 

0xFF4DEF	$audio_out_tone_right_upsample_mono_mix.func
        FF4F59 

0xFF4DF0	$audio_out_tone_right_upsample_mono_mix.param
        000000 FFFFFF FF4F3E FF3490 
        001F67 000060 001F68 200000 
        7FFFFF 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4E02	$M.system_config.data.mono_StandBy_proc_funcs
        000B7F 001EDA 000000 000C5E 
        0007FE 000000 000C5E FF4F62 
        000000 000C23 00004A 000000 
        000C5E 000FFE 000000 000B3C 
        001EDA 000000 000000 

0xFF4E15	$M.music_example_process.mono_mode_conversion_table
        000005 000001 000004 000001 
        000003 000001 000003 000000 
        000004 000000 000005 000000 
        000007 000001 000007 000000 

0xFF4E25	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4E35	$flash.code.address
	-------- [0x000C octets]

0xFF4E39	$flash.data16.address
	-------- [0x000C octets]

0xFF4E3D	$flash.data24.address
	-------- [0x000C octets]

0xFF4E41	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF4E45	$M.system_config.data.stream_map_left_out
        001F3D 000000 000000 0000A0 
        000BB8 000CAF 000B93 000000 
        000000 000000 000000 000000 
        000000 

0xFF4E52	$dac_resampler.filter_spec_lookup_table
        00AC44 00AC44 000000 00BB80 
        00AC44 FF37D0 00AC44 00BB80 
        FF36D0 00BB80 00BB80 000000 
        000000 

0xFF4E5F	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4E69	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4E73	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0xFF4E7D	$M.system_config.data.mode_table
        001AA6 001A69 001A0F FF48D7 
        FF4D94 FF4E02 001A0F FF48D7 
        000000 

0xFF4E86	$audio_out_dither_and_shift_op_right
0xFF4E86	$audio_out_dither_and_shift_op_right.next
        FFFFFF 

0xFF4E87	$audio_out_dither_and_shift_op_right.func
        001F55 

0xFF4E88	$audio_out_dither_and_shift_op_right.param
        000001 000003 FFFFF8 000000 
        000078 000000 

0xFF4E8E	$stereo_out_copy_struc
        001AEF 000002 001F49 FF4F47 
        000002 80000C 80000D 

0xFF4E95	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
0xFF4E95	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
        00FEEB 

0xFF4E96	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0xFF4E97	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0xFF4E98	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BF00 

0xFF4E99	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0xFF4E9A	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0xFF4E9B	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0xFF4E9C	$dac_out_resampler_stereo_copy_struc
        001BE0 000002 001F3D FF4F3B 
        000002 001F49 FF4F47 

0xFF4EA3	$signal_detect_op_stereo
0xFF4EA3	$signal_detect_op_stereo.next
        001BA6 

0xFF4EA4	$signal_detect_op_stereo.func
        001F5E 

0xFF4EA5	$signal_detect_op_stereo.param
        001BD4 000002 000000 000001 

0xFF4EA9	$mono_out_copy_struc
        0007F4 000002 001F49 FF4F47 
        000001 80000C 

0xFF4EAF	$M.system_config.data.mix_dm1
        001B6B 001B78 FF4E45 001F73 
        001F73 FF4F72 

0xFF4EB5	$dac_resampler.mono_copy_switch_op
0xFF4EB5	$dac_resampler.mono_copy_switch_op.next
        FF4F10 

0xFF4EB6	$dac_resampler.mono_copy_switch_op.func
        001F61 

0xFF4EB7	$dac_resampler.mono_copy_switch_op.param
        FF4F7B FF4C6C 000000 000001 

0xFF4EBB	$sbcenc.pre_post_proc_struc
        000000 000000 000000 000000 
        000000 000000 

0xFF4EC1	$codec_in_copy_struc
        FF4F00 000001 800002 000001 
        FF4F35 

0xFF4EC6	$M.main.audio_out_dc_remove_op_left.next
0xFF4EC6	$audio_out_dc_remove_op_left
        001BFB 

0xFF4EC7	$M.main.audio_out_dc_remove_op_left.func
        FF4F50 

0xFF4EC8	$M.main.audio_out_dc_remove_op_left.param
        000000 000000 000000 

0xFF4ECB	$signal_detect_op_mono
0xFF4ECB	$signal_detect_op_mono.next
        0005F9 

0xFF4ECC	$signal_detect_op_mono.func
        001F5E 

0xFF4ECD	$signal_detect_op_mono.param
        001BD4 000001 000000 

0xFF4ED0	$mono_audio_in_copy_struc
        001ED5 000001 800000 000001 
        001F4C 

0xFF4ED5	$audio_in_dc_remove_op_mono
0xFF4ED5	$M.main.audio_in_dc_remove_op_mono.next
        001BDA 

0xFF4ED6	$M.main.audio_in_dc_remove_op_mono.func
        FF4F50 

0xFF4ED7	$M.main.audio_in_dc_remove_op_mono.param
        000001 000001 000000 

0xFF4EDA	$music_example.SpiSysControl
0xFF4EDA	$music_example.SysControl
        000000 

0xFF4EDB	$music_example.OvrMasterSystemVolume
        000009 

0xFF4EDC	$music_example.OvrCallState
        000000 

0xFF4EDD	$music_example.OvrMode
        000000 

0xFF4EDE	$music_example.OvrTrimVolumes
        000000 

0xFF4EDF	$adc_in_resampler_mono_copy_struc
        001BE6 000001 001F4C 000001 
        001F43 

0xFF4EE4	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0xFF4EE8	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF4EEC	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF4EF0	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF4EF4	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF4EF8	$audio_out_timer_struc
        000000 000000 000000 000000 

0xFF4EFC	$tone_copy_timer_struc
        000000 000000 000000 000000 

0xFF4F00	$codec_in_copy_op
0xFF4F00	$codec_in_copy_op.next
        FFFFFF 

0xFF4F01	$codec_in_copy_op.func
        FF4F4D 

0xFF4F02	$codec_in_copy_op.param
        000000 000001 

0xFF4F04	$M.system_config.data.pass_thru_obj
        001B6B 001B78 FF4E45 001B85 

0xFF4F08	$M.system_config.data.right_headroom_obj
        001B78 001B78 001F76 FF4F72 

0xFF4F0C	$dac_resampler.stereo_left_copy_op.next
0xFF4F0C	$dac_resampler.stereo_left_copy_op
        001F18 

0xFF4F0D	$dac_resampler.stereo_left_copy_op.func
        FF4F4D 

0xFF4F0E	$dac_resampler.stereo_left_copy_op.param
        000000 000002 

0xFF4F10	$dac_resampler.mono_copy_op.next
0xFF4F10	$dac_resampler.mono_copy_op
        FFFFFF 

0xFF4F11	$dac_resampler.mono_copy_op.func
        FF4F4D 

0xFF4F12	$dac_resampler.mono_copy_op.param
        000000 000001 

0xFF4F14	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0xFF4F18	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0xFF4F1C	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF4F20	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF4F24	$sbcenc.set_bitpool_message_struc
        000000 000000 000000 000000 

0xFF4F28	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0xFF4F2C	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0xFF4F2F	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0xFF4F32	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0xFF4F35	$codec_in_cbuffer_struc
        000400 000800 000800 

0xFF4F38	$audio_out_right_cbuffer_struc
        0002D0 FF3C00 FF3C00 

0xFF4F3B	$dac_out_right_cbuffer_struc
        0000D0 FF3700 FF3700 

0xFF4F3E	$tone_in_right_cbuffer_struc
        0000C0 000200 000200 

0xFF4F41	$codec_out_cbuffer_struc
        000400 FF3800 FF3800 

0xFF4F44	$stereo_3d_enhancement_delay2_cbuffer_struc
        0008A0 FF4000 FF426A 

0xFF4F47	$dac_out_temp_right_cbuffer_struc
        0000D0 000600 000600 

0xFF4F4A	$M.cbops.av_copy.left_silence_cbuffer_struc
        000079 000580 000580 

0xFF4F4D	$cbops.copy_op
        000000 000000 000A4F 

0xFF4F50	$cbops.dc_remove
        000D42 000000 000A8A 

0xFF4F53	$M.cbops.dither_and_shift.main.dither_func
        000490 00049D 0004AC 

0xFF4F56	$cbops.shift
        000000 000000 0009BA 

0xFF4F59	$cbops.auto_upsample_and_mix
        000000 000000 00004F 

0xFF4F5C	$cbops.soft_mute
        000000 000000 00193E 

0xFF4F5F	$cbops.deinterleave
        000000 000D2A 000A6C 

0xFF4F62	$M.system_config.data.pcmin_r_pk_dtct
        001B78 000000 

0xFF4F64	$M.system_config.data.dac_r_pk_dtct
        001B85 000000 

0xFF4F66	$app_config.io
        FFFFFF 

0xFF4F67	$current_codec_sampling_rate
        000000 

0xFF4F68	$stereo_tone
        000000 

0xFF4F69	$current_voice_codec_sampling_rate
        000000 

0xFF4F6A	$audio_if_mode
        000000 

0xFF4F6B	$long_term_mismatch
        000000 

0xFF4F6C	$voice_enabled
        000001 

0xFF4F6D	$codec_config
        FFFFFF 

0xFF4F6E	$tmr_period_tone_copy
        001770 

0xFF4F6F	$rate_match_disable
        000000 

0xFF4F70	$monitor_level
        000144 

0xFF4F71	$current_hw_rate
        000000 

0xFF4F72	$M.system_config.data.ZeroValue
        000000 

0xFF4F73	$M.system_config.data.MinusOne
        FFFFFF 

0xFF4F74	$scratch.s1
        000000 

0xFF4F75	$cmpd_gain
        000000 

0xFF4F76	$M.system_config.data.dithertype
        000000 

0xFF4F77	$music_example.sys_mode
        000002 

0xFF4F78	$music_example.stereo_processing
        000000 

0xFF4F79	$music_example.MasterVolume
        000000 

0xFF4F7A	$music_example.LeftTrimVolume
        000000 

0xFF4F7B	$dac_resampler.resampler_active
        000000 

0xFF4F7C	$cbuffer.write_port_connect_address
        000000 

0xFF4F7D	$cbuffer.read_port_connect_address
        000000 

0xFF4F7E	$cbuffer.auto_mcu_message
        000001 000000 

0xFF4F80	$interrupt.total_time
        000000 

0xFF4F81	$message.queue_read_ptr
        000000 

0xFF4F82	$message.last_seq_sent
        000000 

0xFF4F83	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0xFF4F84	$pskey.last_addr
        FFFFFF 

0xFF4F85	$timer.last_addr
        FFFFFF 

0xFF4F86	$cbops.struc_ptr
        000000 

0xFF4F87	$cbops.amount_written
        000000 

0xFF4F88	$M.cbops.av_copy.control_cbuffer
        000000 

0xFF4F89	$M.cbops.dac_av_copy.port_mnt_data_avg
        0016A8 

0xFF4F8A	$M.cbops.dac_av_copy.prev_buffer_read_addr
        000000 

0xFF4F8B	$M.cbops.dac_av_copy.buffer_level
        000000 

0xFF4F8C	$M.cbops.adc_av_copy.port_mnt_data_avg
        000000 

0xFF4F8D	$M.cbops.adc_av_copy.prev_buffer_write_addr
        000000 

0xFF4F8E	$M.cbops.dither_and_shift.main.rand_num
        005555 

0xFF4F8F	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0xFF4F90	$master_reset_needed
        000001 

0xFF4F91	$M.codec_av_encode.WritePointer
        000000 

0xFF4F92	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0xFF4F93	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0xFF4F94	$M.cmpd100.analysis.inst_gain
        000000 

0xFF4F95	$M.spi_comm.last_addr
        FFFFFF 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000003 00E000 000000 000000 
        000140 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000001 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000001 004000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000100 000000 
        000000 000000 000000 000000 
        000000 000401 000000 000140 
        000000 003B0B 001B85 002809 
        004000 00003B 000B1B 008528 
        000900 000001 000004 000100 
        000001 004000 00003B 006E6E 
        0084BC 00E040 000000 003B6E 
        006E84 00BCE0 000000 000100 
        000006 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000500 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000500 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000500 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000500 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 00000F 000000 000F00 
        000003 001000 000020 000000 
        000000 000000 000000 002000 
        000010 000000 002000 000065 
        003161 000000 000020 000000 
        000000 005000 00026A 007FFF 
        00FFF9 00B037 00FA05 0042FE 
        0056CC 00FF80 007110 000000 
        000800 000001 005555 0000CC 
        00CC42 000B8B 00030F 001042 
        000B8B 0000EC 00E962 00032E 
        00009E 00217C 00997B 000076 
        00AB08 000000 00F9B0 0037FA 
        000542 00FE56 00CCFF 008071 
        001000 000008 000000 000155 
        005500 00CCCC 003E48 005902 
        00D025 003E48 005900 00D9BA 
        005E42 007200 00914F 007B6F 
        000800 006D0B 000800 000000 
        000A5D 000002 005800 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbcenc.analysis_coefs_m8
        005A82 007A6A 006D99 007641 
        00AF7D 008A5F 007FFF 00FF7D 
        008A5F 007641 00AF6A 006D99 
        005A82 007A47 001CED 0030FB 
        00C518 00F8B8 000000 0000E7 
        000748 00CF04 003BB8 00E313 
        00A57D 0086E7 000748 0030FB 
        00C56A 006D99 007FFF 00FF6A 
        006D99 0030FB 00C5E7 000748 
        00A57D 008682 0075A1 0089BE 
        0051B8 00E313 000000 000047 
        001CED 007641 00AF7D 008A5F 
        00A57D 008682 0075A1 00CF04 
        003B47 001CED 007FFF 00FF47 
        001CED 00CF04 003B82 0075A1 
        00A57D 008618 00F8B8 007641 
        00AF6A 006D99 000000 000095 
        009267 0089BE 0051E7 000748 
        005A82 007AB8 00E313 0089BE 
        005118 00F8B8 007FFF 00FF18 
        00F8B8 0089BE 0051B8 00E313 
        005A82 007A6A 006D99 00CF04 
        003B82 0075A1 000000 00007D 
        008A5F 0030FB 00C595 009267 
        005A82 007A47 001CED 0089BE 
        0051E7 000748 007FFF 00FFE7 
        000748 0089BE 005147 001CED 
        005A82 007A95 009267 00CF04 
        003B7D 008A5F 000000 000082 
        0075A1 0030FB 00C56A 006D99 
        00A57D 00867D 008A5F 00CF04 
        003BB8 00E313 007FFF 00FFB8 
        00E313 00CF04 003B7D 008A5F 
        00A57D 0086E7 000748 007641 
        00AF95 009267 000000 00006A 
        006D99 0089BE 005118 00F8B8 
        00A57D 008618 00F8B8 0030FB 
        00C595 009267 007FFF 00FF95 
        009267 0030FB 00C518 00F8B8 
        00A57D 00867D 008A5F 0089BE 
        005147 001CED 000000 0000B8 
        00E313 007641 00AF82 0075A1 
        005A82 007A95 009267 007641 
        00AF82 0075A1 007FFF 00FF82 
        0075A1 007641 00AF95 009267 
        005A82 007AB8 00E313 0030FB 
        00C5E7 000748 000000 000018 
        00F8B8 00CF04 003B47 001CED 

0x000180	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x0001F8	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000234	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x000264	$sbc.loudness_offset_m4
0x000264	$sbc.loudness_offset
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x000274	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x000294	$sbcenc.analysis_coefs_m4
        005A82 007A76 0041AF 007FFF 
        00FF76 0041AF 005A82 007A30 
        00FBC5 000000 0000CF 00043B 
        00A57D 008630 00FBC5 007FFF 
        00FF30 00FBC5 00A57D 008689 
        00BE51 000000 000076 0041AF 
        00A57D 0086CF 00043B 007FFF 
        00FFCF 00043B 00A57D 008676 
        0041AF 000000 000089 00BE51 
        005A82 007A89 00BE51 007FFF 
        00FF89 00BE51 005A82 007ACF 
        00043B 000000 000030 00FBC5 

0x0002C4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0002DE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

0x0002F5	$sbcenc.level_coefs
        000001 008000 000380 000007 
        008000 000F80 00001F 008000 
        003F80 00007F 008000 00FF80 
        0001FF 008003 00FF80 0007FF 
        00800F 00FF80 001FFF 00803F 
        00FF80 007FFF 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 8086 of 32768 words used, 24682 words available in 1 blocks
  DM2_REGION: 8086 of 32768 words used, 24682 words available in 1 blocks
  flash.data16: 438 of 1048576 words used, 1048138 words available in 1 blocks
  flash.windowed_data16: 780 of 16777216 words used, 16776436 words available in 1 blocks
TOTAL: 17390 of 17891328 words used, 17873938 words available in 4 blocks

CODE:
  PM_REGION: 7241 of 11264 words used, 4023 words available in 1 blocks
  flash.code: 1259 of 16764928 words used, 16763669 words available in 1 blocks
TOTAL: 8500 of 16776192 words used, 16767692 words available in 2 blocks

