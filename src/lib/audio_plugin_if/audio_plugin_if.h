/****************************************************************************
Copyright (C) Cambridge Silicon Radio Ltd. 2004

FILE NAME
    audio_plugin_if.h

DESCRIPTION

*/

/*!
@file   audio_plugin_if.h
@brief  Header file for the audio plugin interface.

    The parameters / enums here define the message interface used for the
    audio plugin.
    i.e This defines the interface between the audio library and the underlying plugin

    The contents of these are similar to the parameters passed into the
    audio library itself

    These messages are generated by the audio library and received in the message handler
    associate with the constant task of an audio plugin.

    The company_name_action_plugin.c / h files contain the meessage handler which
    receives these messages.

    The plugin itself is responsible for acting upon these messages.

*/


#ifndef _AUDIO_PLUGIN_INTERFACE_H_
#define _AUDIO_PLUGIN_INTERFACE_H_

#include <library.h>
#include <power.h>
#include <stream.h>

#define TONE_VP_MIXING_DSP_PORT 3

/* Kalimba Message IDs */

#define LOW_LATENCY_READY_MSG       (0x1000)
#define LOW_LATENCY_SETMODE_MSG     (0x1001)
#define LOW_LATENCY_VOLUME_MSG      (0x1002)
#define LOW_LATENCY_SETPARAM_MSG    (0x1004)
#define LOW_LATENCY_CODEC_MSG       (0x1006)
#define LOW_LATENCY_PING            (0x1008)
#define LOW_LATENCY_PINGRESP        (0x1009)
#define LOW_LATENCY_CVC_SEC_PASSED  (0x100c)
#define LOW_LATENCY_SETSCOTYPE      (0x100d)
#define LOW_LATENCY_GETPARAM        (0x1010)
#define LOW_LATENCY_GETPARAM_RESP   (0x1011)
#define LOW_LATENCY_LOADPARAMS_MSG  (0x1012)
#define LOW_LATENCY_CVC_SEC_FAILED  (0x1013)
#define LOW_LATENCY_LOAD_PERSIST    (0x1014)
#define LOW_LATENCY_LOAD_PERSIST_RESP (0x1015)
#define LOW_LATENCY_STORE_PARAMS    (0x1033)
#define LOW_LATENCY_APTX_SEC_PASSED (0x1035)
#define LOW_LATENCY_SIGNAL_DET_SET_PARAMS_MSG (0x1018)
#define LOW_LATENCY_SIGNAL_DET_STATUS (0x1019)
#define LOW_LATENCY_SOFT_MUTE       (0x101A)
#define LOW_LATENCY_SET_PLUGIN_MSG  (0x1024)
#define LOW_LATENCY_APTX_SEC_FAILED (0x1034)
#define LOW_LATENCY_CUR_EQ_BANK     (0x1028)
#define LOW_LATENCY_STOREPERSIST_MSG (0x1016)
#define MESSAGE_SET_SAMPLE_RATE     (0x7050)
#define LOW_LATENCY_PARAMS_LOADED_MSG (0xffff)
#define LOW_LATENCY_SET_EQ_MSG      (0x1039)

#define MUSIC_READY_MSG             (0x1000)
#define MUSIC_SETMODE_MSG           (0x1001)
#define MUSIC_VOLUME_MSG            (0x1002)
#define MUSIC_SETPARAM_MSG          (0x1004)
#define MUSIC_CODEC_MSG             (0x1006)
#define MUSIC_FORWARD_UNDECODED_MSG (0x1007)
#define MUSIC_PING                  (0x1008)
#define MUSIC_PINGRESP              (0x1009)
#define MUSIC_SETSCOTYPE            (0x100d)
#define MUSIC_SETCONFIG             (0x100e)
#define MUSIC_SETCONFIG_RESP        (0x100f)
#define MUSIC_GETPARAM              (0x1010)
#define MUSIC_GETPARAM_RESP         (0x1011)
#define MUSIC_LOADPARAMS_MSG        (0x1012)
#define MUSIC_CUR_EQ_BANK           (0x1014)
#define MUSIC_PARAMS_LOADED_MSG     (0x1015)
#define MUSIC_SILENCE_DETECTION_PARAMS_MSG (0x1018)
#define MUSIC_SIGNAL_DETECT_STATUS  (0x1019)
#define MUSIC_SET_PLUGIN_MSG        (0x1020)
#define CONFIGURE_LATENCY_REPORTING (0x1027)
#define MUSIC_TONE_COMPLETE         (0x1080)

#define RELAY_MODE_NONE				(0)
#define RELAY_MODE_SHAREME			(1)
#define RELAY_MODE_TWS_MASTER		(2)
#define RELAY_MODE_TWS_SLAVE		(3)
#define MESSAGE_SET_RELAY_MODE      (0x1028)

#define TWS_ROUTING_STEREO          (0)
#define TWS_ROUTING_LEFT            (1)
#define TWS_ROUTING_RIGHT           (2)
#define TWS_ROUTING_DMIX            (3)
#define MESSAGE_SET_TWS_ROUTING     (0x7157)

#define MESSAGE_SET_DEVICE_TRIMS    (0x7158)
#define MESSAGE_ENABLE_EXT_VOLUME   (0x7159)


/*
Received when signal detector status has changed
Param1 == 0 => no audio - go into standby
Param1 == 1 => receiving audio - come out of standby
*/
#define MUSIC_SIGNAL_DETECTOR_STATUS_RESP  (0x1019)

#define MUSIC_PS_BASE               (0x2270) /* PSKEY_USERDSP_24 */
#define MUSIC_PS_BASE_WBS_BACK_CHANNEL (0x2270)  /* PSKEY_USERDSP_24 */

#define APTX_PARAMS_MSG             (0x1016)
#define APTX_SECURITY_MSG           (0x1017)
#define APTX_SECPASSED_MSG          (0x100c)
#define APTX_SECFAILED_MSG          (0x1013)
#define MESSAGE_SET_APTX_LL_PARAMS1 (0x1036)
#define MESSAGE_SET_APTX_LL_PARAMS2 (0x1037)
#define KALIMBA_MSG_LATENCY_REPORT	(0x1023)
#define KALIMBA_MSG_RELAY_MODE_RESP (0x1024)
#define KALIMBA_MSG_EXTERNAL_VOLUME (0x715A)
#define KALIMBA_MSG_TWS_ERROR       (0x715B)

#define MESSAGE_SET_DAC_SAMPLE_RATE      (0x1070)
#define MESSAGE_SET_CODEC_SAMPLE_RATE    (0x1071)
#define MESSAGE_SET_TONE_RATE_MESSAGE_ID (0x1072)
#define MESSAGE_SET_SPDIF_CONFIG_MSG     (0x1073)
#define MESSAGE_SET_AC3_CONFIG_MSG       (0x1074)
#define KALIMBA_MSG_DSP_SPDIF_EVENT_MSG  (0x1075)
#define MESSAGE_GET_AC3_USER_INFO_MSG    (0x1077)


#define DSP_GAIA_MSG_SET_USER_PARAM                (0x121a)
#define DSP_GAIA_MSG_GET_USER_PARAM                (0x129a)
#define DSP_GAIA_MSG_SET_USER_GROUP_PARAM          (0x121b)
#define DSP_GAIA_MSG_GET_USER_GROUP_PARAM          (0x129b)

#define DSP_GAIA_MSG_SET_USER_PARAM_RESP           (0x321a)
#define DSP_GAIA_MSG_GET_USER_PARAM_RESP           (0x329a)
#define DSP_GAIA_MSG_SET_USER_GROUP_PARAM_RESP     (0x321b)
#define DSP_GAIA_MSG_GET_USER_GROUP_PARAM_RESP     (0x329b)

#define MUSIC_SYSMODE_STANDBY        0
#define MUSIC_SYSMODE_PASSTHRU       1
#define MUSIC_SYSMODE_FULLPROC       2
#define MUSIC_SYSMODE_FULLPROC_MONO  3
#define MUSIC_SYSMODE_PASSTHRU_MONO  4
#define MUSIC_SYSMODE_STANDBY_MONO   5
#define MUSIC_SYSMODE_BASSMANAGEMENT 6
#define MUSIC_SYSMODE_BASSMANAGEMENT_MONO 7

#define MUSIC_DO_NOT_CHANGE_EQ_BANK      0
#define MUSIC_NEXT_EQ_BANK               1
#define MUSIC_SET_EQ_BANK                2

/* Mesage parameter selection masks */
#define MUSIC_RATE_MATCH_DISABLE        0x80
#define MUSIC_AUDIO_IF_MASK             0x00ff
#define MUSIC_LOCAL_PLAYBACK_MASK       0x0100
#define LOCAL_FILE_PLAYBACK             0x100
#define PCM_PLAYBACK                    0x200

/* Params for word 1 of MESSAGE_SET_TONE_RATE_MESSAGE_ID */
#define PROMPT_STEREO                   0x1     /* 1= stereo, 0 = mono*/
#define PROMPT_ISPROMPT                   0x2     /* 1= prompt, 0 =tone */


/* operating status of the DSP */
typedef enum  DspStatusTag
{
    DSP_NOT_LOADED,
    DSP_LOADING,
    DSP_LOADED_IDLE,
    DSP_RUNNING,
    DSP_ERROR
}DSP_STATUS_INFO_T;

/*the Mode*/
typedef enum AudioModeTag
{
    AUDIO_MODE_MUTE_MIC       ,
    AUDIO_MODE_MUTE_SPEAKER   ,
    AUDIO_MODE_UNMUTE_SPEAKER ,
    AUDIO_MODE_MUTE_BOTH      ,
    AUDIO_MODE_CONNECTED      ,   /* (FULL_PROCESSING) */
    AUDIO_MODE_LEFT_PASSTHRU  ,
    AUDIO_MODE_RIGHT_PASSTHRU ,
    AUDIO_MODE_LOW_VOLUME
}AUDIO_MODE_T ;

/*the audio route*/
typedef enum AudioRouteTag
{
    AUDIO_ROUTE_INTERNAL,
    AUDIO_ROUTE_I2S,
    AUDIO_ROUTE_SPDIF,
    AUDIO_ROUTE_INTERNAL_AND_RELAY
}AUDIO_ROUTE_T;

/*the audio sink type*/
typedef enum AudioSinkTag
{
    AUDIO_SINK_INVALID  ,
    AUDIO_SINK_SCO      ,
    AUDIO_SINK_ESCO     ,
    AUDIO_SINK_AV       ,
    AUDIO_SINK_USB      ,
    AUDIO_SINK_ANALOG   ,
    AUDIO_SINK_SPDIF    ,
    AUDIO_SINK_FM
} AUDIO_SINK_T ;

/* operating modes of the soundbar sub connection */
typedef enum AudioSubTypeTag
{
    AUDIO_SUB_WOOFER_NONE ,
    AUDIO_SUB_WOOFER_ESCO ,
    AUDIO_SUB_WOOFER_L2CAP
} AUDIO_SUB_TYPE_T;

/* Soft mute modes supported by the audio system */
typedef enum AudioSoftMuteTypeTag
{
    unmute_sink_and_sub = 0,    /* Unmute both Sink and Sub */
    mute_sink_not_sub = 1,      /* Mute sink but not sub (only unmute sub) */
    mute_sub_not_sink = 2,      /* Mute sub but not sink (only unmute sink) */
    mute_sink_and_sub = 3       /* Mute both sink and sub */
} AUDIO_SOFT_MUTE_TYPE_T;

typedef enum
{
    OUTPUT_INTERFACE_TYPE_NONE   = 0,
    OUTPUT_INTERFACE_TYPE_DAC    ,
    OUTPUT_INTERFACE_TYPE_I2S    ,
    OUTPUT_INTERFACE_TYPE_SPDIF
} AUDIO_OUTPUT_TYPE_T;

typedef enum
{
    INPUT_TYPE_PCM = 0,
    INPUT_TYPE_AC3 = 1,
    INPUT_TYPE_AAC = 2,
    INPUT_TYPE_MP3 = 4
} AUDIO_SPDIF_INPUT_TYPE_T;

/* feature bits supplied to the audio plugins */
typedef struct
{
    AUDIO_OUTPUT_TYPE_T audio_output_type:2;
    AUDIO_ROUTE_T audio_input_routing:2;
    AUDIO_SPDIF_INPUT_TYPE_T spdif_supported_data_types:4;
    unsigned stereo:1;
    unsigned unused:5;
    unsigned use_one_mic_back_channel:1;
    unsigned use_two_mic_back_channel:1;
} AudioPluginFeatures;

/* spdif ac3 decoder configuration */
typedef struct
{
    unsigned compression_mode:2;
    unsigned boost_ratio:7;
    unsigned cut_ratio:7;
}spdif_ac3_config_word1;

typedef struct
{
    unsigned unused:2;
    unsigned output_mode:1;
    unsigned stereo_mixing_mode:2;
    unsigned channel_to_route_right:3;
    unsigned channel_to_route_left:3;
    unsigned enable_channel_routing:1;
    unsigned dual_mode_mono:2;
    unsigned karaoke_enable:1;
    unsigned lfe_output_enable:1;
}spdif_ac3_config_word2;

typedef struct
{
    uint16 configuration_word_1;
    uint16 configuration_word_2;
}spdif_ac3_configuration;

typedef struct
{
    unsigned unusued:8;
    unsigned target_latency:8;
}spdif_target_latency;

/*the audio power level - taken from power library*/
#define AUDIO_POWER_T power_battery_level

/* Macros for creating messages */
#include <panic.h>
#define MAKE_AUDIO_MESSAGE(TYPE) TYPE##_T *message = PanicUnlessNew(TYPE##_T);
#define MAKE_AUDIO_MESSAGE_WITH_LEN(TYPE, LEN) TYPE##_T *message = (TYPE##_T *) PanicUnlessMalloc(sizeof(TYPE##_T) + LEN);


/*!  Audio Plugin Downstream Interface Messages

	These messages are sent to the audio plugin modules.

	An Audio plugin must implement all of the messages below.

*/
typedef enum audio_plugin_interface_message_type_tag
{
	AUDIO_PLUGIN_CONNECT_MSG    = AUDIO_DOWNSTREAM_MESSAGE_BASE,
	AUDIO_PLUGIN_DISCONNECT_MSG ,
	AUDIO_PLUGIN_SET_MODE_MSG   ,
    AUDIO_PLUGIN_SET_ROUTE_MSG  ,
	AUDIO_PLUGIN_SET_VOLUME_MSG ,
    AUDIO_PLUGIN_START_FORWARDING_MSG ,
    AUDIO_PLUGIN_STOP_FORWARDING_MSG ,
	AUDIO_PLUGIN_PLAY_TONE_MSG  ,
	AUDIO_PLUGIN_STOP_TONE_MSG  ,
	AUDIO_PLUGIN_PLAY_AUDIO_PROMPT_MSG   ,
	AUDIO_PLUGIN_STOP_AUDIO_PROMPT_MSG  ,
	AUDIO_PLUGIN_VOICE_PROMPTS_INIT_MSG,
    AUDIO_PLUGIN_MIC_SWITCH_MSG,
	AUDIO_PLUGIN_SET_POWER_MSG,
    AUDIO_PLUGIN_RESET_VOLUME_MSG,
    AUDIO_PLUGIN_SET_SUB_WOOFER_MSG ,
    AUDIO_PLUGIN_START_ASR,
	AUDIO_PLUGIN_SET_VOLUME_A2DP_MSG,
    AUDIO_PLUGIN_DELAY_VOLUME_SET_MSG,
    AUDIO_PLUGIN_SET_SOFT_MUTE_MSG,
    AUDIO_PLUGIN_DISCONNECT_DELAYED_MSG,
    AUDIO_PLUGIN_ALLOW_VOLUME_CHANGES_MSG,
    AUDIO_PLUGIN_SUBWOOFER_CONNECTION_TIMEOUT_MSG,

	AUDIO_DOWNSTREAM_MESSAGE_TOP

} audio_plugin_interface_message_type_t ;

/*!  Audio Plugin Upstream Messages

    These messages are sent from the audio plugins to the client Task.

    Usually the audio plugins will not send upstream messages,
    but certain plugins will send information to the application.
*/
typedef enum
{
    AUDIO_PLUGIN_DSP_IND = AUDIO_UPSTREAM_MESSAGE_BASE,
    AUDIO_PLUGIN_DSP_READY_FOR_DATA,
	AUDIO_PLUGIN_LATENCY_REPORT,
    AUDIO_PLUGIN_DSP_GAIA_EQ_MSG,
    AUDIO_PLUGIN_DSP_GAIA_GROUP_EQ_MSG,
	AUDIO_PLUGIN_REFRESH_VOLUME,
	
    AUDIO_UPSTREAM_MESSAGE_TOP
} audio_plugin_upstream_message_type_t;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
	The plugin module should connect the Synchronous connection to its pre
	defined outputs.
*/
typedef struct
{
		/*! The audio sink to connect*/
	Sink            audio_sink ;
		/*! The type of the audio sink to connect*/
	AUDIO_SINK_T sink_type ;
	    /*! The codec task to use to connect the audio*/
    Task            codec_task ;
 		/*! The volume at which to set the audio */
    uint16          volume ;
    	/*! The rate of the audio stream */
    uint32			rate ;
		/*! additional features that can be used in the audio plugins */
    AudioPluginFeatures features ;
		/*! The audio mode of connection required*/
    AUDIO_MODE_T	mode ;
        /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;
	        /*! The audio route of connection required*/
    AUDIO_POWER_T   power ;
        /*!plugin specific parameters*/
    const void *    params ;
    	/*! The application task to route upstream plugin messages to*/
    Task            app_task ;
}AUDIO_PLUGIN_CONNECT_MSG_T ;


/*!
    @brief Structure common to CVC and A2DP plugins, used to pass
    the USB Microphone Sink to the plugin.
*/
typedef struct
{
    Sink usb_sink;
} usb_common_params;


/*!
    @brief Structure common to all plugins representing mic setup
*/
typedef struct
{
    /*! Mic is digital */
    unsigned digital:1;
    /*! Enable pre-amp (analogue only) */
    unsigned pre_amp:1;
    /*! Drive PIO when mic is in use */
    unsigned drive_pio:1;
    /*! PIO to drive */
    unsigned pio:5;
    /*! Drive mic bias (PIO becomes bias to use) */
    unsigned bias:1;
    unsigned unused:2;
    /*! Mic gain */
    unsigned gain:5;
} audio_mic_params;


/*!
    @brief Structure common to all plugins, used to pass the Microphone
    setup to the plugin.
*/
typedef struct
{
    /*! Mic A settings */
    audio_mic_params mic_a;
    /*! Mic B settings */
    audio_mic_params mic_b;
    /*! Line A settings */
    audio_mic_params line_a;
    /*! Line B settings */
    audio_mic_params line_b;
}common_mic_params;


/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
	The plugin module should connect the Synchronous connection to its pre
	defined outputs.
*/
typedef struct
{
 		/*! The volume at which to set the audio */
    uint16          volume ;
 		/*! The volume at which to set the tones/vp */
    uint16          tone_volume;
 		/*! The codec task to use to connect the audio*/
    Task            codec_task ;
}AUDIO_PLUGIN_SET_VOLUME_MSG_T ;


/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
 		/*! The audio connection mode */
    uint16          mode ;
        /*! plugin specific parameters*/
    const void *    params ;
}AUDIO_PLUGIN_SET_MODE_MSG_T ;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
 	/*! The sub audio link mode */
    AUDIO_SUB_TYPE_T  sub_woofer_type ;
    /* sub link sink */
    Sink sub_sink ;
}AUDIO_PLUGIN_SET_SUB_WOOFER_MSG_T;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
    /*! The mute mode to apply */
    AUDIO_SOFT_MUTE_TYPE_T  mute_mode_type ;
}AUDIO_PLUGIN_SET_SOFT_MUTE_MSG_T;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
 		/*! The audio connection mode */
    uint8           route ;
        /*! plugin specific parameters*/
    const void *    params ;
}AUDIO_PLUGIN_SET_ROUTE_MSG_T ;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
    /*! The sink used to forward undecoded audio frames */
    Sink    forwarding_sink ;
    /*! Flag indicating if support for content protection si required */
    bool  content_protection ;
}AUDIO_PLUGIN_START_FORWARDING_MSG_T ;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
 		/*! the tone to be played*/
    ringtone_note * tone;
    	/*! Whether or not to queue the requested tone*/
    bool 	    can_queue ;
 		/*! The codec task to use to connect the audio*/
    Task            codec_task ;
    	/*! The volume at which to play the tone 0 - current volume*/
    uint16 		tone_volume ;
        /* features such as stereo and i2s output */
    AudioPluginFeatures features;
        /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;
}AUDIO_PLUGIN_PLAY_TONE_MSG_T ;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module.
*/
typedef struct
{
    	/*! the id of the audio prompt to be played*/
    uint16 id ;
    	/*! the language to use*/
    uint16 language ;
    	/*! Whether or not to queue the requested audio prompt*/
    bool 	    can_queue ;
 		/*! The codec task to use to connect the audio*/
    Task            codec_task ;
    	/*! The volume at which to play the audio prompt  0 - current volume*/
    uint16 		ap_volume ;
        /*! features such as stereo and i2s output */
    AudioPluginFeatures features;
        /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;

}AUDIO_PLUGIN_PLAY_AUDIO_PROMPT_MSG_T ;


/*!
	@brief This message is generated by an audio plugin module and sent to the application Task.
*/
typedef struct
{
 		/*! The id of the message sent to the application */
    uint16          id ;
        /*! The numer of values sent to the application */
    uint16          size_value;
 		/*! The values sent to the application */
    uint16          value[1] ;
}AUDIO_PLUGIN_DSP_IND_T ;



typedef struct
{
 		/*! The id of the message sent to the application */
    uint16          id ;
        /*! The numer of values sent to the application */
    uint16          size_value;
 		/*! The values sent to the application */
    uint16          value[1] ;
}AUDIO_PLUGIN_DSP_GAIA_EQ_MSG_T ;


typedef struct
{
 		/*! The id of the message sent to the application */
    uint16          id ;
        /*! The numer of values sent to the application */
    uint16          size_value;
 		/*! The values sent to the application */
    uint16          value[1] ;
}AUDIO_PLUGIN_DSP_GAIA_GROUP_EQ_MSG_T ;


/*!
	@brief This message is generated by an audio plugin module and sent to the application Task
    to indicate that the DSP is ready to accept data and no audio will be lost .
*/
typedef struct
{
    /* main plugin in use */
    Task plugin;
    /* audio routing currently in progress */
    uint16 AUDIO_BUSY;
    /* current dsp status */
    DSP_STATUS_INFO_T dsp_status;
    /* sink of media used for a2dp connection */
    Sink media_sink;
}AUDIO_PLUGIN_DSP_READY_FOR_DATA_T ;

/*!
	@brief This message is generated by an audio plugin module and sent to the application Task
    to report a change in audio decoder latency.
*/
typedef struct
{
    /* main plugin in use */
    Task audio_plugin;
	/* Flag indicating if latency value has been estimated (calculated) rather than measured */
	bool estimated;
    /* current audio latency, in milliseconds */
    uint16 latency;
} AUDIO_PLUGIN_LATENCY_REPORT_T;

/*!
	@brief This message is generated by an audio plugin module and sent to the application Task
    to request that the application refresh the volume levels.
*/
typedef struct
{
    /* main plugin in use */
    Task audio_plugin;
} AUDIO_PLUGIN_REFRESH_VOLUME_T;

typedef enum
{
    voice_prompts_codec_none,
    voice_prompts_codec_ima_adpcm,
    voice_prompts_codec_sbc,
    voice_prompts_codec_mp3,
    voice_prompts_codec_aac,
    voice_prompts_codec_pcm,
    voice_prompts_codec_tone    /* internally generated tone */
} voice_prompts_codec;


/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    uint16                     no_prompts;
    uint16                     no_languages;
}AUDIO_PLUGIN_VOICE_PROMPTS_INIT_MSG_T ;

/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module to configure it's power level
*/
typedef struct
{
    	/*! the power level selected */
    AUDIO_POWER_T power;
}AUDIO_PLUGIN_SET_POWER_MSG_T ;


/*!
	@brief This message is generated by the audio manager and is issued
	to an audio plugin module to start or restart the ASR engine
*/
typedef struct
{
 		/*! The audio connection mode */
    uint16          mode ;
}AUDIO_PLUGIN_START_ASR_T ;

typedef enum
{
    DSP_VOLUME_CONTROL,
    DAC_VOLUME_CONTROL,
    MIXED_VOLUME_CONTROL,
    EXTERNAL_VOLUME_CONTROL
}volumeType_t;

/* DSP Volume Control */
typedef struct
{

    uint16 system_gain;
	int16 master_gain;
	int16 tones_gain;
	int16 trim_gain_left;
	int16 trim_gain_right;
	/*! The codec task to use to connect the audio*/
	Task  codec_task ;
    volumeType_t volume_type;
    int16 device_trim_master;
    int16 device_trim_slave;
    bool mute_active;           /* TRUE when output is muted */
}AUDIO_PLUGIN_SET_VOLUME_A2DP_MSG_T;


#endif


